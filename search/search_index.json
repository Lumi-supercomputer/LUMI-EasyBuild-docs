{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Package list","text":"<p>Lumi software stack release: 20250916</p> <p>: Specific user documentation available</p> <p>: Technical documentation available</p> <p>: Archived application</p> <p>: Singularity container to run using singularity commands</p>","boost":0.5},{"location":"#a","title":"a","text":"<ul> <li> <p>ABINIT </p> </li> <li> <p>AdaptiveCpp </p> </li> <li> <p>ADIOS2 </p> </li> <li> <p>AlphaFold </p> </li> <li> <p>Amber </p> </li> <li> <p>amd </p> </li> <li> <p>amd-aocl </p> </li> <li> <p>ANTLR </p> </li> <li> <p>aocl-utils </p> </li> <li> <p>aria2 </p> </li> <li> <p>ARMForge </p> </li> <li> <p>arpack-ng </p> </li> <li> <p>aws-ofi-rccl </p> </li> </ul>","boost":0.5},{"location":"#b","title":"b","text":"<ul> <li> <p>BCFtools </p> </li> <li> <p>BLIS </p> </li> <li> <p>Blosc </p> </li> <li> <p>Boost </p> </li> <li> <p>Brotli </p> </li> <li> <p>buildtools </p> </li> <li> <p>buildtools-python </p> </li> <li> <p>bzip2 </p> </li> </ul>","boost":0.5},{"location":"#c","title":"c","text":"<ul> <li> <p>c-ares </p> </li> <li> <p>cairo </p> </li> <li> <p>Catalyst </p> </li> <li> <p>ccpe </p> </li> <li> <p>CDO </p> </li> <li> <p>Celerity </p> </li> <li> <p>CGAL </p> </li> <li> <p>Charm++ </p> </li> <li> <p>CMOR </p> </li> <li> <p>Conduit </p> </li> <li> <p>COSMA </p> </li> <li> <p>cotainr </p> </li> <li> <p>CP2K </p> </li> <li> <p>CppUnit </p> </li> <li> <p>CubeLib </p> </li> <li> <p>CubeWriter </p> </li> <li> <p>CUDA </p> </li> <li> <p>CuPy </p> </li> <li> <p>cURL </p> </li> <li> <p>Cython </p> </li> </ul>","boost":0.5},{"location":"#d","title":"d","text":"<ul> <li> <p>DB </p> </li> <li> <p>DBus </p> </li> <li> <p>DeepSpeed </p> </li> <li> <p>DFTD4 </p> </li> <li> <p>DL_POLY_4 </p> </li> <li> <p>double-conversion </p> </li> </ul>","boost":0.5},{"location":"#e","title":"e","text":"<ul> <li> <p>EasyBuild </p> </li> <li> <p>EasyBuild-tools </p> </li> <li> <p>eb-tutorial </p> </li> <li> <p>ecCodes </p> </li> <li> <p>Eigen </p> </li> <li> <p>Elk </p> </li> <li> <p>ELPA </p> </li> <li> <p>ESMF </p> </li> <li> <p>expat </p> </li> </ul>","boost":0.5},{"location":"#f","title":"f","text":"<ul> <li> <p>feh </p> </li> <li> <p>FFmpeg </p> </li> <li> <p>file </p> </li> <li> <p>FLAC </p> </li> <li> <p>fontconfig </p> </li> <li> <p>fpocket </p> </li> <li> <p>freeglut </p> </li> <li> <p>freetype </p> </li> <li> <p>FriBiDi </p> </li> </ul>","boost":0.5},{"location":"#g","title":"g","text":"<ul> <li> <p>gc </p> </li> <li> <p>GDAL </p> </li> <li> <p>gdbm </p> </li> <li> <p>GEOS </p> </li> <li> <p>gettext </p> </li> <li> <p>giflib </p> </li> <li> <p>git </p> </li> <li> <p>git-lfs </p> </li> <li> <p>glew </p> </li> <li> <p>GLib </p> </li> <li> <p>GlobalArrays </p> </li> <li> <p>GMP </p> </li> <li> <p>gnuplot </p> </li> <li> <p>GObject-Introspection </p> </li> <li> <p>googletest </p> </li> <li> <p>GOTCHA </p> </li> <li> <p>GPAW </p> </li> <li> <p>graphite2 </p> </li> <li> <p>GROMACS </p> </li> <li> <p>GSL </p> </li> <li> <p>gzip </p> </li> </ul>","boost":0.5},{"location":"#h","title":"h","text":"<ul> <li> <p>h5py </p> </li> <li> <p>HarfBuzz </p> </li> <li> <p>HDF </p> </li> <li> <p>HeFFTe</p> </li> <li> <p>hipfort </p> </li> <li> <p>hipSYCL </p> </li> <li> <p>hpcat </p> </li> <li> <p>HTSlib </p> </li> <li> <p>HyperQueue </p> </li> <li> <p>Hypre </p> </li> </ul>","boost":0.5},{"location":"#i","title":"i","text":"<ul> <li> <p>ICU </p> </li> <li> <p>Imlib2 </p> </li> <li> <p>Info-ZIP </p> </li> <li> <p>IntelRenderingToolkit </p> </li> <li> <p>intltool </p> </li> </ul>","boost":0.5},{"location":"#j","title":"j","text":"<ul> <li> <p>JasPer </p> </li> <li> <p>Java </p> </li> <li> <p>jax </p> </li> <li> <p>json-c </p> </li> <li> <p>json-fortran</p> </li> </ul>","boost":0.5},{"location":"#k","title":"k","text":"<ul> <li> <p>KaHIP </p> </li> <li> <p>Kokkos </p> </li> <li> <p>Kokkos-kernels </p> </li> </ul>","boost":0.5},{"location":"#l","title":"l","text":"<ul> <li> <p>LAME </p> </li> <li> <p>LAMMPS </p> </li> <li> <p>libaec </p> </li> <li> <p>libaio </p> </li> <li> <p>libarchive </p> </li> <li> <p>libb2 </p> </li> <li> <p>libbfd </p> </li> <li> <p>libcerf </p> </li> <li> <p>libdap </p> </li> <li> <p>libdeflate </p> </li> <li> <p>libevent </p> </li> <li> <p>libexif </p> </li> <li> <p>libffi </p> </li> <li> <p>libFLAME </p> </li> <li> <p>libgd </p> </li> <li> <p>libgeotiff </p> </li> <li> <p>libGLU </p> </li> <li> <p>libglvnd </p> </li> <li> <p>libiconv </p> </li> <li> <p>libidn </p> </li> <li> <p>libidn2 </p> </li> <li> <p>Libint-CP2K </p> </li> <li> <p>libjpeg-turbo </p> </li> <li> <p>libogg </p> </li> <li> <p>libopus </p> </li> <li> <p>libpciaccess </p> </li> <li> <p>libpng </p> </li> <li> <p>libpsl </p> </li> <li> <p>libreadline </p> </li> <li> <p>libsndfile </p> </li> <li> <p>libsodium </p> </li> <li> <p>libspatialindex </p> </li> <li> <p>libtheora </p> </li> <li> <p>LibTIFF </p> </li> <li> <p>libtirpc </p> </li> <li> <p>libunistring </p> </li> <li> <p>libunwind </p> </li> <li> <p>libvdwxc </p> </li> <li> <p>libvorbis </p> </li> <li> <p>libvori </p> </li> <li> <p>libwebp </p> </li> <li> <p>libxc </p> </li> <li> <p>libxml2 </p> </li> <li> <p>libxslt </p> </li> <li> <p>libxsmm </p> </li> <li> <p>libyaml </p> </li> <li> <p>LLVM </p> </li> <li> <p>LMDB </p> </li> <li> <p>lumi-allocations </p> </li> <li> <p>lumi-container-wrapper </p> </li> <li> <p>lumi-CPEtools </p> </li> <li> <p>lumi-CrayPath </p> </li> <li> <p>lumi-tools </p> </li> <li> <p>lumi-training-tools </p> </li> <li> <p>lumi-vnc </p> </li> <li> <p>lumi-workspaces </p> </li> <li> <p>lumio </p> </li> <li> <p>lumio-ext-tools </p> </li> <li> <p>lustre-includes</p> </li> <li> <p>lz4 </p> </li> <li> <p>Lzip </p> </li> <li> <p>LZO </p> </li> </ul>","boost":0.5},{"location":"#m","title":"m","text":"<ul> <li> <p>magma </p> </li> <li> <p>makedepf90 </p> </li> <li> <p>Mako </p> </li> <li> <p>MATIO </p> </li> <li> <p>matplotlib</p> </li> <li> <p>Mesa </p> </li> <li> <p>Mesa-demos </p> </li> <li> <p>METIS </p> </li> <li> <p>MicroHH </p> </li> <li> <p>MPC </p> </li> <li> <p>mpdecimal </p> </li> <li> <p>MPFR </p> </li> <li> <p>mpi4py </p> </li> <li> <p>mpiFileUtils </p> </li> <li> <p>MUMPS </p> </li> </ul>","boost":0.5},{"location":"#n","title":"n","text":"<ul> <li> <p>NAMD </p> </li> <li> <p>nano </p> </li> <li> <p>NCO </p> </li> <li> <p>ncurses </p> </li> <li> <p>ncview </p> </li> <li> <p>Nek5000 </p> </li> <li> <p>Neko </p> </li> <li> <p>Nextflow </p> </li> <li> <p>nlohmann-json </p> </li> <li> <p>nvtop </p> </li> <li> <p>NWChem </p> </li> </ul>","boost":0.5},{"location":"#o","title":"o","text":"<ul> <li> <p>oneTBB </p> </li> <li> <p>OPARI2 </p> </li> <li> <p>OpenBLAS </p> </li> <li> <p>OpenFOAM </p> </li> <li> <p>OpenGL </p> </li> <li> <p>OpenMM </p> </li> <li> <p>OpenMPI </p> </li> <li> <p>OpenPGM </p> </li> <li> <p>OptiX </p> </li> <li> <p>OSU-Micro-Benchmarks </p> </li> <li> <p>OTF2 </p> </li> </ul>","boost":0.5},{"location":"#p","title":"p","text":"<ul> <li> <p>Pango </p> </li> <li> <p>parallel </p> </li> <li> <p>ParaView </p> </li> <li> <p>ParMETIS </p> </li> <li> <p>PCRE </p> </li> <li> <p>PCRE2 </p> </li> <li> <p>Perl </p> </li> <li> <p>Perl-packages-CPAN </p> </li> <li> <p>PETSc </p> </li> <li> <p>pixman </p> </li> <li> <p>PLUMED </p> </li> <li> <p>PROJ </p> </li> <li> <p>PRoot </p> </li> <li> <p>PyFR </p> </li> <li> <p>PyTorch </p> </li> </ul>","boost":0.5},{"location":"#q","title":"q","text":"<ul> <li> <p>Qt5 </p> </li> <li> <p>QuantumESPRESSO </p> </li> <li> <p>QUDA </p> </li> <li> <p>QuEST </p> </li> <li> <p>Qwt </p> </li> </ul>","boost":0.5},{"location":"#r","title":"r","text":"<ul> <li> <p>R </p> </li> <li> <p>rccl </p> </li> <li> <p>rclone </p> </li> <li> <p>rocm </p> </li> <li> <p>rocmlibs </p> </li> <li> <p>rocThrust </p> </li> <li> <p>RSPt </p> </li> <li> <p>Rust </p> </li> </ul>","boost":0.5},{"location":"#s","title":"s","text":"<ul> <li> <p>SAMtools </p> </li> <li> <p>ScaLAPACK </p> </li> <li> <p>Scalasca </p> </li> <li> <p>Score-P </p> </li> <li> <p>SCOTCH </p> </li> <li> <p>seacas-exodus </p> </li> <li> <p>seff </p> </li> <li> <p>Siesta </p> </li> <li> <p>Silo </p> </li> <li> <p>singularity-AI-bindings </p> </li> <li> <p>singularity-bindings </p> </li> <li> <p>singularity-bindings-system </p> </li> <li> <p>SIRIUS </p> </li> <li> <p>snappy </p> </li> <li> <p>SpFFT </p> </li> <li> <p>spglib </p> </li> <li> <p>SPLA </p> </li> <li> <p>SQLite </p> </li> <li> <p>STAR </p> </li> <li> <p>STRUMPACK </p> </li> <li> <p>Subversion </p> </li> <li> <p>SuiteSparse </p> </li> <li> <p>SuperLU </p> </li> <li> <p>SuperLU_DIST </p> </li> <li> <p>SWIG </p> </li> <li> <p>syslibs </p> </li> <li> <p>systools </p> </li> <li> <p>SZ </p> </li> <li> <p>Szip </p> </li> </ul>","boost":0.5},{"location":"#t","title":"t","text":"<ul> <li> <p>Tcl </p> </li> <li> <p>TensorFlow </p> </li> <li> <p>termcap </p> </li> <li> <p>Tk </p> </li> <li> <p>Trilinos </p> </li> </ul>","boost":0.5},{"location":"#u","title":"u","text":"<ul> <li> <p>UDUNITS </p> </li> <li> <p>unicore-uftp </p> </li> <li> <p>UppASD </p> </li> <li> <p>util-linux </p> </li> </ul>","boost":0.5},{"location":"#v","title":"v","text":"<ul> <li> <p>Vampir </p> </li> <li> <p>VampirServer </p> </li> <li> <p>VASP </p> </li> <li> <p>VCFtools </p> </li> <li> <p>Vim </p> </li> <li> <p>VisIt </p> </li> <li> <p>VisRTX </p> </li> <li> <p>VTK </p> </li> </ul>","boost":0.5},{"location":"#w","title":"w","text":"<ul> <li> <p>Wannier90 </p> </li> <li> <p>wget </p> </li> <li> <p>wheel </p> </li> <li> <p>WPS </p> </li> <li> <p>WRF </p> </li> <li> <p>WRF-SFIRE </p> </li> </ul>","boost":0.5},{"location":"#x","title":"x","text":"<ul> <li> <p>X11 </p> </li> <li> <p>x264 </p> </li> <li> <p>x265 </p> </li> <li> <p>Xerces-C++ </p> </li> <li> <p>xorg-macros </p> </li> <li> <p>xterm </p> </li> <li> <p>XZ </p> </li> </ul>","boost":0.5},{"location":"#y","title":"y","text":"<ul> <li> <p>Yambo </p> </li> <li> <p>yaml-cpp </p> </li> <li> <p>YAXT </p> </li> </ul>","boost":0.5},{"location":"#z","title":"z","text":"<ul> <li> <p>ZeroMQ </p> </li> <li> <p>zfp </p> </li> <li> <p>zlib </p> </li> <li> <p>Zoltan</p> </li> <li> <p>zstd </p> </li> </ul>","boost":0.5},{"location":"known_issues/","title":"Known issues with the LUMI software stacks","text":"","boost":2},{"location":"known_issues/#all-versions","title":"All versions","text":"<ul> <li> <p>Some SUSE-provided tools may not work when the <code>ncurses</code> module is loaded.</p> <p>This is because SUSE delivers a heavily customised <code>ncurses</code> library and we do not know how they did the customisations. It also contains some versioned symbols info for ancient versions that is not included automatically anymore with more present <code>ncurses</code> libraries, even when asked to include versioned symbols in the shared objects.</p> <p>For <code>gdb</code> a workaround is to start it using</p> <pre><code>LD_PRELOAD=/lib64/libncursesw.so.6 gdb\n</code></pre> <p>which forces <code>gdb</code> to use the <code>libncursesw</code> from the system and keeps it happy.</p> </li> </ul>","boost":2},{"location":"whats_new/","title":"What's new in the LUMI software stack","text":"","boost":1},{"location":"whats_new/#release-20250916","title":"Release 20250916","text":"<ul> <li>New Pytorch container based on PyTorch 2.7.1 with AITER.     The container is still a bit experimental and a step towards trying to get     newer versions of vLLM to work on LUMI.</li> <li>Two new recipes for NAMD on GPU: One more efficient but     limited to a single node, and one with MPI support.</li> <li>New ELPA recipe.</li> <li>Slight improvement to the documentation of Open MPI.</li> </ul>","boost":1},{"location":"whats_new/#release-20250909","title":"Release 20250909","text":"<ul> <li> <p>Documentation improvements  and Lustre support for MPI I/O for the      ccpe containers.</p> <p>Lustre support requires re-installing the container module. Please re-install from within the  <code>/appl/local/containers/LUMI-EasyBuild-containers/easybuild/easyconfigs/c/ccpe</code> subdirectory to avoid accidentally re-installing an older version.</p> </li> <li> <p>New recipe for OpenFOAM 13</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20250806","title":"Release 20250806","text":"<ul> <li> <p>VASP 6.5.1 recipe (contributed by a user).</p> </li> <li> <p>Improvements to the ccpe containers: Better procedure to     run with the containers.</p> <p>Use of the <code>ccpe-srun</code> script requires re-installing the container module. Please re-install from within the  <code>/appl/local/containers/LUMI-EasyBuild-containers/easybuild/easyconfigs/c/ccpe</code> subdirectory to avoid accidentally re-installing an older version.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20250729","title":"Release 20250729","text":"<ul> <li> <p>Improved documentation for lumi-container-wrapper     clearly mentioning the license restrictions when using packages from the regular      Anaconda repositories. Warnings have also been added to the modules.</p> </li> <li> <p>Improvements to the ccpe containers. Users of the <code>-B-</code> versions     will have had most of those improvements already, while users of the <code>-C-</code> versions     need to re-install. Please re-install from within the      <code>/appl/local/containers/LUMI-EasyBuild-containers/easybuild/easyconfigs/c/ccpe</code>     subdirectory to avoid accidentally re-installing an older version.</p> </li> <li> <p>Two new PyTorch containers, including one for PyTorch 2.7.      There were also some improvements to the scripts provided for all PyTorch 2.6 and     2.7 containers to bring their behaviour closer to that of the CSC-provided     <code>pytorch</code> modules.</p> </li> <li> <p>Improved JAX containers. These containers now support some      CSC-style scripts and have a pre-defined virtual environment with tools to pack     the Python installation in the virtual environment in a filesystem-friendly way     similar to the PyTorch containers.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20250724","title":"Release 20250724","text":"<ul> <li>New version (0.4.2) of lumi-container-wrapper.</li> <li>Updated EasyConfigs for the ccpe containers. Re-installation is recommended, and      please install from the directory <code>/appl/local/containers/LUMI-EasyBuild-containers/easybuild/easyconfigs/c/ccpe</code>     to ensure that EasyBuild does not use the older cached EasyConfig file. </li> <li>Version 9.2 of Score-P.</li> <li>Celerity, a C++ library fro programming on clusters with accelerator nodes.</li> </ul>","boost":1},{"location":"whats_new/#release-202560707","title":"Release 202560707","text":"<ul> <li>New contributed EasyConfigs: MicroHH, WRF-SFIRE and     matching version of WPS.</li> </ul>","boost":1},{"location":"whats_new/#release-20250630","title":"Release 20250630","text":"<ul> <li> <p>Update of the HPE HPC Affinity Tracker tool (<code>hpcat</code>)     in the lumi-CPEtools modules modules for <code>LUMI/24.03</code>.</p> </li> <li> <p>Recipe for GPAW 25.1.0 for LUMI-C built with libvdwxc.</p> </li> <li> <p>magma and CuPy built with ROCm 6.2.2, for the developer     version of GPAW with ROCm GPU support (no EasyConfig for the developer version though).</p> </li> <li> <p>The SEACAS Exodus library compiled with the GNU compilers.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20250526","title":"Release 20250526","text":"<ul> <li> <p>Containers with the Cray Programming Environment version 24.11 and 25.03:      ccpe.</p> <p>Note that these containers are only meant for users who understand very well how the programming environment works and how environments and modules work on an HPC system. They are not meant for beginners. Features and support are  limited. 25.03 is also not fully functional on the GPU nodes as it requires ROCm(tm) 6.3 which is not supported by the current driver.</p> </li> <li> <p>The remark on the availability of GPU support in     QuantumESPRESSO has been updated in the      documentation page.</p> </li> <li> <p>Corrected the name of a TensorFlow EasyConfig.</p> </li> <li> <p>Some bugfixes in the visibility of modules.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20250521","title":"Release 20250521","text":"<ul> <li> <p>Score-P 9.0 and a bugfix release of     Scalasca.</p> </li> <li> <p>As <code>htop</code> was broken in <code>systools/24.03-1</code>, this module is replaced with     <code>systools/24.03-2</code> which still contains <code>pbzip2</code></p> </li> <li> <p>Software stack for LUMI-D, provided in <code>partition/D</code>.     Some packages take a lot of time to compile. Yet because so many different     configurations are possible and full testing is not possible with the size     of LUST, they are offered as user-installable packages. Some base packages     are pre-installed though in a standard configuration that should fit most     work on LUMI.</p> <p>Visualisation packages include ParaView,  VisIt and the VTK libraries.</p> <p>As we have no upstream support for most of these tools, they can only be offered \"as-is\" with no guarantee that we can solve all issues. Often one may be better served by containerised visualisation software, but there are cases where those cannot be used and we want to focus on those use cases. So these packages are not meant to be a replacement of the packages offered in the LUMI web interface.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20250429","title":"Release 20250429","text":"<ul> <li>Vampir has been upgraded to version 10.6.1.      The VampirServer recipes will be ported on request.</li> <li> <p>systools update to <code>systools/24.03-1</code>, which now     also includes <code>pbzip2</code>, a parallel implementation of bzip2 compression.</p> <p>Note that <code>pbzip2</code> is unmaintained software, so we cannot guarantee that we can keep offering this tool.</p> </li> <li> <p>GROMACS 2024.3 with CP2K QM/MM support.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20250415","title":"Release 20250415","text":"<ul> <li> <p>Updated containers for PyTorch and jax.</p> <p>The PyTorch 2.6 container modules now also provide wrappers similar to the CSC  modules.</p> </li> <li> <p>ESMF with support for MPI and PIO</p> </li> <li>OpenFOAM 12 with ParMETIS</li> <li>fpocket</li> </ul>","boost":1},{"location":"whats_new/#release-20250331","title":"Release 20250331","text":"<ul> <li>GROMACS 2025.1 EasyConfigs</li> <li>STRUMNPACK 7.0.1 EasyConfig ported to 24.03  </li> <li>libxc packages come without a checksum for now      as it appears those change over time      (libxc GitLab issue #511).</li> </ul>","boost":1},{"location":"whats_new/#release-20250321","title":"Release 20250321","text":"<ul> <li>The <code>PRoot</code> module now provides the <code>proot</code> command for <code>partition/container</code> in     the LUMI software stacks. Its main use case is to enable the developement of EasyConfigs that modify     an existing container and install it together with a module file for bindings etc. in      <code>partition/container</code>. This will, e.g., be used in upcoming recipes for containers with more recent     or experimental versions of the HPE Cray Programming Environment.</li> <li>Kokkos and Kokkos-kernels for      cpeGNU and cpeAMD.</li> <li>Modified build recipe for PETSc, now using an external build of Kokkos.</li> </ul>","boost":1},{"location":"whats_new/#release-20250227","title":"Release 20250227","text":"<ul> <li>Replaced PLUMED 2.9.2 with PLUMED 2.9.3,     with updated EasyConfigs for GROMACS and      for one of the CP2K variants.</li> <li>A bugfix in one of the PETSc build recipes.</li> <li>Extra development version of Wannier90 as the released version 3.1.0 has some     known issues with GCC 12/13.</li> <li>Spack modules are no longer automatically included in the output     of module spider, to speed up the generation of the Lmod cache     and make the output of <code>module spider</code> less confusing.</li> </ul>","boost":1},{"location":"whats_new/#release-20250214","title":"Release 20250214","text":"<ul> <li>EasyConfig for Elk 10.3.12 contributed by Johan Hellsvik (KTH).</li> <li>EasyConfigs for VASP 6.5.0 and dependencies.</li> </ul>","boost":1},{"location":"whats_new/#release-20250203","title":"Release 20250203","text":"<ul> <li>User-installable feh image viewer, with dependencies     Imlib2 and libexif</li> <li>User-installable singularity-AI-bindings     module as used in the February 2025 AI training. Please check the documentation as this     module is meant for some very specific AI software containers and not for just any such     container!</li> <li>Update to the VASP documentation, documenting why the STOPCAR     <code>LABORT</code> option should not be used on LUMI and is not turned on in our build     recipes.</li> <li>Some improvements to the warnings given when loading containers with ROCm versions     other than the current system version.</li> </ul>","boost":1},{"location":"whats_new/#release-20250115","title":"Release 20250115","text":"<ul> <li>Inclusion of the HPE HPC Affinity Tracker tool (<code>hpcat</code>)     in the lumi-CPEtools modules modules for <code>LUMI/24.03</code>.</li> <li>Updated EasyBuild container module recipes for     jax, mpi4py, PyTorch,     rocm and TensorFlow.</li> <li>EasyConfig for AdaptiveCpp 24.10.0 in <code>LUMI/24.03</code>.</li> <li>Corrections to some EasyConfigs for      CP2K, LAMMPS and     libxsmm.</li> </ul>","boost":1},{"location":"whats_new/#release-20241129","title":"Release 20241129","text":"<ul> <li>Removing the last update of <code>cotainr</code> as it contains an annoying bug.</li> <li>Update of the <code>lumio-conf</code> tool in the lumio module. Note that the name     of the endpoints in the rclone configuration file has changed to align with the names used     by the credential management web interface config files and those generated by the tools in     Open OnDemand.</li> <li>Neko for cpeGNU and cpeCray. There is a known issue with cpeGNU though.</li> <li>VASP for LUMI/24.03</li> <li>CP2K for LUMI/24.03 fix. Re-install if you get suspicious results and      make sure you do so from the directory with the EasyConfig      (<code>/appl/lumi/LUMI-EasyBuild-contrib/easybuild/easyconfigs/c/CP2K</code>) and use the <code>-f</code>     flag to force re-installation.</li> </ul>","boost":1},{"location":"whats_new/#release-20241112","title":"Release 20241112","text":"<ul> <li>Updated version of <code>cotainr</code> with some bug fixes and minor enhancements.     The on-line documentation of cotainr     has also been updated to reflect the changes on LUMI after the September 2024 maintenance     period.</li> <li>A correction to one of the CP2K with PLUMED recipes.</li> <li>GPAW recipes for 24.03.</li> <li>Python support for Amber with AmberTools</li> </ul>","boost":1},{"location":"whats_new/#release-20241024","title":"Release 20241024","text":"<ul> <li> <p>Fix for <code>htop</code> on <code>LUMI/24.03</code> so that it is now in systools/24.03.</p> </li> <li> <p>cotainr in <code>LUMI/24.03</code> to avoid user confusion as many users     expect to find the most recent cotainr in the most recent LUMI stack.</p> </li> <li> <p>hpcat experimental tool to study bindings (Cray compiler only)</p> </li> <li> <p>Updated singularity-bindings</p> </li> <li> <p>ELPA for cpeCray and ROCm 6 (some performance degradation observed)</p> </li> <li> <p>Fixes for double linking of LibSci in some PETSc EasyConfigs</p> </li> <li> <p>GROMACS+PLUMED for CPU with full Python support for Cray Python.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20241004","title":"Release 20241004","text":"<ul> <li> <p>ROCm 6.2.2 in LUMI/24.03 partition/G. Note that this module does     not work well with the CCE compilers prior to version 18 (still in beta and not on     the system) as the bytecode generated by LLVM 18 used in ROCm 6.2 causes errors     during linking.</p> </li> <li> <p>Update to cotainr in CrayEnv.</p> </li> <li> <p>STAR rna sequencing EasyBuild recipe.</p> </li> <li> <p>Fix for the visibility problems in the LUMI stack.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20241002","title":"Release 20241002","text":"<ul> <li> <p>Extra configuration for Score-P.</p> </li> <li> <p>Configurations of GROMACS with PLUMED.</p> </li> <li> <p>Deprecation warnings for old Spack modules.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20240927","title":"Release 20240927","text":"<ul> <li> <p>Modules to load the local CSC and quantum computing stacks (<code>Local-CSC</code> and <code>Local-quantum</code>)</p> </li> <li> <p>Framework to stop indexing the Spack modules and avoid indexing the modules from the local     stacks unless explicitly requested.</p> <p>Do <code>module help ModuleFullSpider/on</code> for more information. </p> </li> </ul>","boost":1},{"location":"whats_new/#release-20240920","title":"Release 20240920","text":"<ul> <li> <p>lumi-container-wrapper updated with an openSUSE     LEAP 15.5 image and installed in CrayEnv, LUMI/23.12 and LUMI/24.03.</p> </li> <li> <p>Updated EasyConfigs for R for LUMI/2024.03</p> </li> <li> <p>Score-P for LUMI/2024.03, cpeAOCC version missing due to     instrumentation issues. </p> </li> </ul>","boost":1},{"location":"whats_new/#release-20240916","title":"Release 20240916","text":"<ul> <li> <p>See the user update after the august-september 2024 maintenance     for a more complete list of changes.</p> </li> <li> <p>New software stacks for the 23.12 and 24.03 versions are provided.</p> <ul> <li> <p><code>LUMI/24.03</code> is our preferred software stack and the only one we can fully support.     We already provide a lot of user-installable EasyConfigs for this stack.</p> </li> <li> <p><code>LUMI/23.12</code> is offered as-is. We do not intend to develop much software on top of it     as it will likely be rather short-lived and as we do not receive upstream support for      this stack as it does not officially support ROCm 6.0. As most software versions are      the same as in 23.09, it should be easy to update build recipes and give you some     bug fixes in the GNU and CCE compilers. The AMD compilers in both cpeAOCC and     cpeAMD though are much newer versions with all consequences this has...</p> </li> </ul> </li> <li> <p>Several build recipes for <code>LUMI/23.09</code> have been revised to try to work around problems.     Note however that the preferred solution is to move to <code>LUMI/24.03</code>.</p> </li> <li> <p>Several old build recipes that we know do not work properly anymore, have been archived.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20240909","title":"Release 20240909","text":"<ul> <li> <p>Internal release only as the system was down much longer than expected due to      a power delivery issue.</p> </li> <li> <p>The first fixes to be able to use old programming environments again, at     least to run on LUMI.</p> </li> <li> <p>See the user update after the august-september 2024 maintenance.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20240807","title":"Release 20240807","text":"<ul> <li> <p>A fix for problems with buildtools-python     in the version for Cray Python in LUMI/23.09.</p> </li> <li> <p>New package: Yambo (CPU-only)</p> </li> <li> <p>QuEST for LUMI/23.09</p> </li> <li> <p>Warning for the upcoming system maintenance in the message-of-the-day.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20240718","title":"Release 20240718","text":"<ul> <li> <p><code>cotainr</code> has been updated in <code>CrayEnv</code> to the latest     version with the images used during the AI course of May 2024, and has been     made available in <code>LUMI/23.09</code>.     The examples used in the AI course in Copenhagen should now work again     even without specifying a specific version of the <code>LUMI</code> stack though we      do discourage that behaviour.</p> <p><code>cotainr</code> in the future will be available in <code>CrayEnv</code> as it really needs nothing from the <code>LUMI</code> stacks, and some versions will be available in some <code>LUMI</code> stacks. The latest version will usually be available in the latest <code>LUMI</code> stack, but as we only change the default version when that stack is sufficiently populated, the default version of the <code>LUMI</code> stack may not always contain the latest version of <code>cotainr</code> or any other software package.</p> </li> <li> <p><code>lumi-container-wrapper</code> is now available in     <code>LUMI/23.09</code>.</p> </li> <li> <p>An EasyConfig for GPAW on GPU. This is currently not containerised     so only suitable to run on a moderate number of MPI ranks as otherwise starting GPAW     could put a very high stress on the file system.</p> </li> <li> <p>Some minor improvements to the OpenFOAM documentation     after issues reported on other sides that turned out not to affect our EasyConfigs.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20240709","title":"Release 20240709","text":"<ul> <li><code>LUMI/23.09</code> is now the default version of the <code>LUMI</code> module.</li> <li>Some updated EasyConfigs for the containers for      PyTorch and TensorFlow.</li> <li>Updated EasyConfig for Siesta</li> </ul>","boost":1},{"location":"whats_new/#release-20240607","title":"Release 20240607","text":"<ul> <li>EasyBuild-user module enhanced to enable running EasyBuild in a container to install     software outside of the container. This feature is mostly meant for LUST and some      projects that get test versions of compilers.</li> <li> <p>Warnings when using <code>LUMI/22.08</code> and <code>LUMI/22.12</code> as their end-of-life is approaching     fast and they will not be supportable after the August 2024 system update.</p> <p>LUST will do its best to keep <code>LUMI/23.09</code> running after the update, but even there  recompilation may be required, or switching to newer compilers. However, helping users who are already on 23.09 will have a higher priority than helping those who postponed using the newer toolchain.</p> </li> <li> <p>Security fixes to the processing behind the LUMI Software Library and corrections to     the fortune messages shown at login.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20240524","title":"Release 20240524","text":"<ul> <li>Improved lumi-tools with bug fixes to <code>lumi-ldap-userinfo</code>     and <code>lumi-ldap-projectinfo</code> and the new <code>lumi-ldap-projectlist</code> command for LUST.</li> <li>Support for Score-P on LUMI-G with <code>cpeCray</code> and <code>cpeAMD</code>,     though with some restrictions mentioned in      the documentation in the LUMI Software Library</li> <li>PyTorch:      Additional containers,      including one with vLLM</li> </ul>","boost":1},{"location":"whats_new/#release-20240517","title":"Release 20240517","text":"<ul> <li>OpenFOAM.org 10 EasyConfig for the GNU compilers in 23.09.</li> <li>Improved EasyConfig for GROMACS 2024.01 on GPU,     using ROCm 5.4.6 which is a better choice on the LUMI AMD GPU driver at this     moment.</li> <li>JSC PerfTools Score-P 8.4, which also requires      Scalasca 2.6.1,      libbfd 2.42,     OTF2 3.0.3,     OPARI2 2.0.8,     CubeLib 4.8.2 and     CubeWriter 4.8.2.     Currently only LUMI-C is supported.</li> </ul>","boost":1},{"location":"whats_new/#release-20240412","title":"Release 20240412","text":"<ul> <li>singularity-bindings EasyConfig to be used while 23.09 is      the system default version of the HPE Cray Programming Environment, and improved     documentation for this module.</li> <li>lumi-training-tools EasyConfig to install software     used in the course notes and exercises of the Amsterdam course given by LUST in     May 2024. </li> </ul>","boost":1},{"location":"whats_new/#release-20240329","title":"Release 20240329","text":"<ul> <li>A new PyTorch container</li> <li>Much extended documentation for the PyTorch container     and rocm container</li> <li>The <code>proot</code> command is now included in <code>systools/23.09</code>     available in LUMI/23.09 and CrayEnv. This is useful for using so-called     \"unprivileged <code>proot</code> builds\" in SingularityCE.</li> </ul>","boost":1},{"location":"whats_new/#release-20240322","title":"Release 20240322","text":"<ul> <li>CP2K 2024.1 with GPU support for LUMI/23.09</li> <li>Improvement to a PETSc EasyConfig</li> <li>ROCm container for 5.6.0</li> </ul>","boost":1},{"location":"whats_new/#release-20240308","title":"Release 20240308","text":"<ul> <li><code>rocm/5.4.6</code> module in <code>CrayEnv</code> and <code>LUMI/23.09 partition/G</code> as we notice too     much problems with <code>rocm/5.6.1</code> on the current driver version. ROCm 5.4.x is the last     supported ROCm version on the driver that we have, but that does not mean that      5.4.x will always work correctly with the HPE Cray PE as that one is mostly tested     with ROCm 5.2 on the current OS version of LUMI and ROCm 5.5 on SUSE 15 SP5.</li> <li>EasyBuild module for <code>LUMI/23.09</code> now also loads      EasyBuild-tools with extra tools that might be needed      for some EasyConfigs.</li> <li>JAX: Containers made available through EasyBuild-generated modules</li> <li>Improved documentation for the PyTorch containers,      and initial steps to offer containers that support a Python virtual environment for      adding packages out-of-the-box.</li> <li>Quantum ESPRESSO,     GROMACS 2024.1 and     NAMD 2.14: EasyConfigs for <code>LUMI/23.09</code>.     An initial effort to compile NAMD 3.0b6 with GPU support is also included.     Due to the beta nature of this package, problems are to be expected.</li> <li>New EasyConfig for a GPU-enabled PETSc with the Cray toolchain  </li> </ul>","boost":1},{"location":"whats_new/#release-20240301","title":"Release 20240301","text":"<ul> <li>VASP: VASP 6.4.2 for cpeGNU/23.09.</li> <li>Fixes for the binding issues in the rocm containers</li> <li>New documentation feature: We can now add some documentation to individual EasyConfigs     to make it more clear which EasyConfig offers what features. See, e.g.,      PyTorch.</li> </ul>","boost":1},{"location":"whats_new/#release-20240207","title":"Release 20240207","text":"<ul> <li>SCOTCH 7 for cpeCray</li> <li>Updated documentation for HyperQueue,      GROMACS, CP2K</li> <li>New PyTorch 2.2.0 container with flash-attention      and new snapshots of the other containers.</li> </ul>","boost":1},{"location":"whats_new/#release-20240129","title":"Release 20240129","text":"<ul> <li>New package: Magma for cpeGNU, cpeCray and cpeAMD.</li> <li>Updated EasyConfig for openFOAM</li> <li>ROCm 5.7.1 container, and re-generated versions of the other ROCm containers.</li> </ul>","boost":1},{"location":"whats_new/#release-20240116","title":"Release 20240116","text":"<ul> <li>New package: DL_POLY_4: dl-poly in a basic configuration</li> <li>New package: QUDA</li> <li>Updates to Rust, HyperQueue,     PETSc, ELPA.</li> </ul>","boost":1},{"location":"whats_new/#release-20240110","title":"Release 20240110","text":"<ul> <li>Improved search in the LUMI Software Library, though for performance reasons we've      chosen not to search the EasyConfigs themselves too.</li> <li>Some software brought to 23.09, such as R,      GDAL, GEOS and dependencies</li> <li>KaHIP</li> <li>AdaptiveCpp</li> <li> <p>Boost for cpeCray/23.09.</p> <p>Note that a workaround was needed for Boost to avoid a linker problem. See the technical documentation on the Boost page to find out what we did if you also run into link problems.</p> </li> </ul>","boost":1},{"location":"whats_new/#release-20231215","title":"Release 20231215","text":"<ul> <li>rocm/5.6.1 and amd/5.6.1      modules installed in <code>CrayEnv</code> and <code>LUMI/23.09 partition/G</code>.</li> <li>Updated user-installable recipes for Java, including Java/21.</li> <li>User-installable recipe for the UNICORE UFTP client.</li> <li>User-installable recipe for the installation of SIESTA (CPU version)</li> </ul>","boost":1},{"location":"whats_new/#release-20231208","title":"Release 20231208","text":"<ul> <li>GROMACS with hipSYCL and dependencies, including a version with heFFT.</li> <li>nvtop</li> <li>Extra user-installable version of SCOTCH (64-bit integers)</li> <li>Update of the aws-ofi-rccl plugin</li> <li>Fix for ELPA</li> <li>Improved Open MPI with OSU micro-benchmarks     as test code and user-installable adapted versions of lumi-CPEtools     for checking task and thread distribution and pinning.</li> </ul>","boost":1},{"location":"whats_new/#release-20231121","title":"Release 20231121","text":"<ul> <li>Bug fixes for the module view</li> <li>More container recipes</li> </ul>","boost":1},{"location":"whats_new/#release-20231116","title":"Release 20231116","text":"<ul> <li>Initial release of the <code>LUMI/23.09</code> central software stack, including a first     selection of user-installable build recipes</li> <li>Initial support for creating modules that ease working with containers     provided on LUMI.</li> <li>New version of the cotainr module</li> <li>Bug fix for the <code>lumi-ldap-projectinfo</code> command.</li> </ul>","boost":1},{"location":"a/ABINIT/","title":"ABINIT","text":"<p>[package list]</p>","boost":10},{"location":"a/ABINIT/#abinit","title":"ABINIT","text":"","boost":10},{"location":"a/ABINIT/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig ABINIT-9.6.2-cpeGNU-21.08.eb, with module ABINIT/9.6.2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig ABINIT-9.6.2-cpeGNU-21.12.eb, with module ABINIT/9.6.2-cpeGNU-21.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"a/ADIOS2/","title":"ADIOS2","text":"<p>[package list]</p>","boost":10},{"location":"a/ADIOS2/#adios2","title":"ADIOS2","text":"","boost":10},{"location":"a/ADIOS2/#license-information","title":"License information","text":"<p>ADIOS2 is licensed under the Apckae License Version 2.0.</p> <p>The full text is available in the ADIOS2 GitHub repository.</p> <p>From LUMI/24.03 on, this information can also be found in <code>$EBROOTADIOS2/share/licenses/ADIOS2</code> after installing and loading the module.</p>","boost":10},{"location":"a/ADIOS2/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ADIOS2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig ADIOS2-2.10.1-cpeGNU-24.03-hdf5-parallel.eb, will build ADIOS2/2.10.1-cpeGNU-24.03-hdf5-parallel</p> <p>This version uses the <code>cray-hdf5-parallel</code> module.</p> </li> <li> <p>EasyConfig ADIOS2-2.10.1-cpeGNU-24.03.eb, will build ADIOS2/2.10.1-cpeGNU-24.03</p> <p>This version uses the <code>cray-hdf5</code> module.</p> </li> <li> <p>EasyConfig ADIOS2-2.9.1-cpeGNU-23.09.eb, will build ADIOS2/2.9.1-cpeGNU-23.09</p> </li> </ul>","boost":10},{"location":"a/ADIOS2/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>ADIOS2 web site</p> <ul> <li>ADIOS2 Documentation</li> </ul> </li> <li> <p>ADIOS2 on Github</p> </li> </ul>","boost":10},{"location":"a/ADIOS2/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>No ADIOS2 support in the EasyBuilders repository</p> </li> <li> <p>No ADIOS2 support in the CSCS repository</p> </li> <li> <p>ADIOS2 support in the JSC repository</p> </li> </ul>","boost":10},{"location":"a/ADIOS2/#version-271-for-cpe-2208","title":"Version 2.7.1 for CPE 22.08","text":"<ul> <li>Based on the JSC easyconfig</li> </ul>","boost":10},{"location":"a/ADIOS2/#version-283-for-cpe-2212","title":"Version 2.8.3 for CPE 22.12","text":"<ul> <li>Based on the JSC easyconfig</li> </ul>","boost":10},{"location":"a/ADIOS2/#version-291-fro-cpe-2309","title":"Version 2.9.1 fro CPE 23.09","text":"<ul> <li> <p>Trivial port of the 1.8.3 EasyConfig.</p> </li> <li> <p>But switched the homepage to the page on readthedocs as the old home page doesn't seem to     be updated anymore.</p> </li> </ul>","boost":10},{"location":"a/ADIOS2/#version-2101-for-cpe-2403","title":"Version 2.10.1 for CPE 24.03","text":"<ul> <li> <p>Trivial port, but took a nicer way of configuring the <code>configopts</code>.</p> </li> <li> <p>Changed in May 2025: Turned profiling on as that is needed for VisIt.</p> </li> </ul>","boost":10},{"location":"a/ADIOS2/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig ADIOS2-2.7.1-cpeGNU-22.08.eb, with module ADIOS2/2.7.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig ADIOS2-2.8.3-cpeGNU-22.12.eb, with module ADIOS2/2.8.3-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"a/ANTLR/","title":"ANTLR","text":"<p>[package list]</p>","boost":10},{"location":"a/ANTLR/#antlr","title":"ANTLR","text":"","boost":10},{"location":"a/ANTLR/#license-information","title":"License information","text":"<p>ANTLR version 2 is fully in the public domain.</p> <p>Its license can be read online..</p> <p>From LUMI/22.12 onwards the license can also be found after installation and loading of the module in the <code>$EBROOTANTLR/share/licenses/ANTLR</code> directory.</p>","boost":10},{"location":"a/ANTLR/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ANTLR/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig ANTLR-2.7.7-cpeAOCC-23.03-python3.eb, will build ANTLR/2.7.7-cpeAOCC-23.03-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeCray-23.03-python3.eb, will build ANTLR/2.7.7-cpeCray-23.03-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeCray-23.09-python3.eb, will build ANTLR/2.7.7-cpeCray-23.09-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeCray-24.03-cray-python3.11.eb, will build ANTLR/2.7.7-cpeCray-24.03-cray-python3.11</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeGNU-23.03-python3.eb, will build ANTLR/2.7.7-cpeGNU-23.03-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeGNU-23.09-python3.eb, will build ANTLR/2.7.7-cpeGNU-23.09-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeGNU-24.03-cray-python3.11.eb, will build ANTLR/2.7.7-cpeGNU-24.03-cray-python3.11</p> </li> </ul>","boost":10},{"location":"a/ANTLR/#technical-documentation","title":"Technical documentation","text":"<p>This package is only needed for NCO. As of September 2021, there are no other packages in the EasyBuilders repository that use it.</p> <ul> <li> <p>Web site</p> </li> <li> <p>ANTLR version 4 on GitHub</p> </li> </ul> <p>However, NCO needs the latter antique ANTLR2 versions.</p> <ul> <li>Web site for ANTLR version 2</li> </ul>","boost":10},{"location":"a/ANTLR/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ANTLR support in the EasyBuilders repository</p> </li> <li> <p>ANTLR support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"a/ANTLR/#version-277-for-cpe-2108-2112-2206-2208-2212-2303-2309","title":"Version 2.7.7 for CPE 21.08, 21.12, 22.06, 22.08, 22.12, 23.03, 23.09","text":"<ul> <li> <p>Note that 2.7.7 is a very old version. NCO however does seem to require     this very old version rather than the current version 4.</p> </li> <li> <p>The EasyConfig is a mix of the CSCS and EasyBuilder ones.</p> <ul> <li>For now we did not include Java as a dependency (it is included in the     EasyBuilders version).</li> </ul> </li> <li> <p>For 22.12 and later we switched to the new way of specifying multiple checksums     and added the license file to the installation.</p> </li> </ul>","boost":10},{"location":"a/ANTLR/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig ANTLR-2.7.7-cpeAOCC-21.12-python3.eb, with module ANTLR/2.7.7-cpeAOCC-21.12-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeAOCC-22.08-python3.eb, with module ANTLR/2.7.7-cpeAOCC-22.08-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeAOCC-22.12-python3.eb, with module ANTLR/2.7.7-cpeAOCC-22.12-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeCray-21.08-python3.eb, with module ANTLR/2.7.7-cpeCray-21.08-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeCray-21.12-python3.eb, with module ANTLR/2.7.7-cpeCray-21.12-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeCray-22.06-python3.eb, with module ANTLR/2.7.7-cpeCray-22.06-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeCray-22.08-python3.eb, with module ANTLR/2.7.7-cpeCray-22.08-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeCray-22.12-python3.eb, with module ANTLR/2.7.7-cpeCray-22.12-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeGNU-21.08-python3.eb, with module ANTLR/2.7.7-cpeGNU-21.08-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeGNU-21.12-python3.eb, with module ANTLR/2.7.7-cpeGNU-21.12-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeGNU-22.06-python3.eb, with module ANTLR/2.7.7-cpeGNU-22.06-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeGNU-22.08-python3.eb, with module ANTLR/2.7.7-cpeGNU-22.08-python3</p> </li> <li> <p>EasyConfig ANTLR-2.7.7-cpeGNU-22.12-python3.eb, with module ANTLR/2.7.7-cpeGNU-22.12-python3</p> </li> </ul> </li> </ul>","boost":10},{"location":"a/ARMForge/","title":"ARMForge","text":"<p>[package list]</p>","boost":10},{"location":"a/ARMForge/#armforge","title":"ARMForge","text":"","boost":10},{"location":"a/ARMForge/#license-information","title":"License information","text":"<p>We have a licene for ARM Forge Ultimate Supercomputing for a total of 512 processes.</p> <p>The license is available to all LUMI users.</p>","boost":10},{"location":"a/ARMForge/#user-documentation","title":"User documentation","text":"<p>Arm Forge is centrally installed on LUMI and available in the <code>CrayEnv</code> and <code>LUMI</code>  software stacks, and even outside the stacks</p> <p>Add it to your current enviromnent with the following commands:</p> <pre><code>module load ARMForge/22.0.1\n</code></pre> <p>For the training it is recommended to use Forge with the desktop client that can be installed on a local computer. It can be downloaded  from here for Windows, Linux and MacOS.</p> <p>Once the client is installed on a local computer you can use \"Remote Launch\" with the following configuration:</p> <ul> <li>Host Name: use name from you ssh config (for Linux) or Putty connection name (for Windows),</li> <li>Remote Installation Directory: the same as above.</li> </ul> <p>Make sure if your connection is properly configured with \"Test Remote Launch\" button.</p> <p>Note: If you use Windows you should first convert you public ssh key to format used by Putty (\"ppk\"), following the steps described  here.</p> <p>Set up parallel job execution with \"File &gt; Options\" menu and select MPI/UPC Implementation as \"SLURM (generic)\" under \"System\" option setting. </p> <p>To run debugging DDT session directly from Forge GUI on computing nodes use MPI with \"SLURM (generic)\" mode and \"srun arguments\" set to  <code>-p debug -A project_462000031</code>.</p> <p>Other approach is to use \"Reverse Connect\" feature. It allows you to submit program with debugger wrapper directly on the system. The wrapper will connect back to the GUI on your local computer. You need to enable remote connection to LUMI from the client GUI with \"Remote Launch\" and execute the job using  <code>ddt --connect</code> before you actual <code>srun</code> command directly from the command line or from sbatch script. After your job starts it will signal client on your  local computer and you will be asked to accept reverse connection. </p> <p>The process of reverse connection is described here.</p>","boost":10},{"location":"a/ARMForge/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider ARMForge/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>ARMForge/22.0.1 (EasyConfig: ARMForge-22.0.1.eb)</li> </ul>","boost":10},{"location":"a/ARMForge/#technical-documentation","title":"Technical documentation","text":"<p>The naming of this easyconfig doesn't completely follow the regular EasyBuild conventions  (it would then have to be Arm-Forge given the way it is mostly spelled in the Arm documentation) but we decided to follow the name chosen at JSC.</p> <ul> <li>Arm Forge home page</li> </ul>","boost":10},{"location":"a/ARMForge/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is a software easyblock for Allinea      that is usable.</p> </li> <li> <p>There is support for Arm Forge in the JSC repository</p> </li> </ul>","boost":10},{"location":"a/ARMForge/#2201-for-the-system-partition","title":"22.0.1 for the system partition","text":"<ul> <li>Build from the JSC one, with updated documentation.</li> </ul>","boost":10},{"location":"a/AdaptiveCpp/","title":"AdaptiveCpp","text":"<p>[package list]</p>","boost":10},{"location":"a/AdaptiveCpp/#adaptivecpp","title":"AdaptiveCpp","text":"","boost":10},{"location":"a/AdaptiveCpp/#license-information","title":"License information","text":"<p>AdaptiveCpp is licensed under a BSD 2-Clause Simplified License. See the  LICENSE file in the GitHub repostory.</p>","boost":10},{"location":"a/AdaptiveCpp/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider AdaptiveCpp/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig AdaptiveCpp-23.10.0-cpeAMD-23.09-rocm.eb, will build AdaptiveCpp/23.10.0-cpeAMD-23.09-rocm</p> </li> <li> <p>EasyConfig AdaptiveCpp-24.06.0-cpeAMD-24.03-rocm.eb, will build AdaptiveCpp/24.06.0-cpeAMD-24.03-rocm</p> </li> <li> <p>EasyConfig AdaptiveCpp-24.10.0-cpeAMD-24.03-rocm.eb, will build AdaptiveCpp/24.10.0-cpeAMD-24.03-rocm</p> </li> </ul>","boost":10},{"location":"a/AdaptiveCpp/#technical-documentation","title":"Technical documentation","text":"<ul> <li>AdaptiveCpp on GitHub</li> <li>Formerly known as hipSYCL and Open SYCL</li> </ul>","boost":10},{"location":"a/AdaptiveCpp/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for AdaptiveCpp in the EasyBuilders repository.</p> </li> <li> <p>There is no support for AdaptiveCpp in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"a/AdaptiveCpp/#release-23100-for-cpe-2212-and-cpe-2309","title":"Release 23.10.0 for CPE 22.12 and CPE 23.09","text":"<ul> <li> <p>Recommended version for CPE 23.09 is 23.10.0 with ROCm 5.4.6</p> </li> <li> <p>Rely on cpeAMD EasyBuild toolchain</p> </li> <li> <p>CPE 22.12 recipe uses default ROCm 5.2.3</p> </li> <li> <p>CPE 23.09 recipe with ROCm 5.6.1 has issues with performance on multiple nodes due to driver and/or GTL library incompatibility</p> </li> <li> <p>All the recipes rely on ROCm LLVM entirely which misses libraries required to      enable the single pass compiler feature of ACPP.</p> </li> </ul>","boost":10},{"location":"a/AdaptiveCpp/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig AdaptiveCpp-23.10.0-cpeAMD-23.09-rocm-5.4.6.eb, with module AdaptiveCpp/23.10.0-cpeAMD-23.09-rocm-5.4.6</p> </li> <li> <p>EasyConfig AdaptiveCpp-23.10.0-cpeAMD-23.09-rocm-5.6.1.eb, with module AdaptiveCpp/23.10.0-cpeAMD-23.09-rocm-5.6.1</p> </li> </ul> </li> </ul>","boost":10},{"location":"a/AlphaFold/","title":"AlphaFold","text":"<p>[package list]</p>","boost":10},{"location":"a/AlphaFold/#alphafold","title":"AlphaFold","text":"","boost":10},{"location":"a/AlphaFold/#user-documentation","title":"User documentation","text":"<p>BETA VERSION, problems may occur and may not be solved quickly,  and the documentation needs further development.</p> <p>The AlphaFold container is developed by AMD specifically for LUMI and contains the necessary parts to run AlphaFold on LUMI, including a suitable version of ROCm for the version of AlphaFold. The container includes the dependencies of AlphaFold, including TensorFlow, JAX, aria2 and OpenMM with HIP support.</p> <p>The EasyBuild installation with the EasyConfigs mentioned below will do three things:</p> <ol> <li> <p>It will copy the container to your own file space. We realise containers can be     big, but it ensures that you have complete control over when a container is     removed again.</p> <p>We will remove a container from the system when it is not sufficiently functional anymore, but the container may still work for you.</p> <p>If you prefer to use the centrally provided container, you can remove your copy  after loading of the module with <code>rm $SIF</code> followed by reloading the module. This is however at your own risk. </p> </li> <li> <p>It will create a module file.      When loading the module, a number of environment variables will     be set to help you use the module and to make it easy to swap the module with a     different version in your job scripts.</p> <ul> <li> <p><code>SIF</code> and <code>SIFALPHAFOLD</code> both contain the name and full path of the singularity     container file.</p> </li> <li> <p><code>SINGULARITY_BIND</code> will mount all necessary directories from the system,     including everything that is needed to access the project, scratch and flash     file systems.</p> </li> <li> <p><code>RUNSCRIPTS</code> and <code>RUNSCRIPTSALPHAFOLD</code> contain the full path of the directory     containing some sample run scripts that can be used to run software in the      container, or as inspiration for your own variants.</p> </li> </ul> </li> <li> <p>It creates currently 1 script in the $RUNSCRIPTS directory:</p> <ul> <li><code>conda-python-simple</code>: This initialises Python in the container and then calls Python     with the arguments of <code>conda-python-simple</code>. It can be used, e.g., to run commands     through Python that utilise a single task but all GPUs.</li> </ul> </li> </ol> <p>The container uses a miniconda environment in which Python and its packages are installed. That environment needs to be activated in the container when running, which can be done with the command that is available in the container as the environment variable <code>WITH_CONDA</code> (which for this container is <code>source /opt/miniconda3/bin/activate alphafold</code>).</p> <p>The container (when used with <code>SINGULARITY_BIND</code> of the module) also provides the wrapper script <code>/runscripts/conda-python-simple</code> to start the Python command from the conda environment in the container. That script is also available outside the  container for inspection after loading the module as <code>$RUNSCRIPTS/conda-python-simple</code> and you can use that script as a source of inspiration to develop a script that more directly executes your commands or does additional initialisations.</p> <p>Example (in an interactive session):</p> <pre><code>salloc -N1 -pstandard-g -t 30:00\nmodule load LUMI AlphaFold/69afc4d-rocm-5.5.1-python-3.9-singularity-20231108\nsrun -N1 -n1 --gpus 8 singularity exec $SIF /runscripts/python-conda-simple \\\n    -c 'import numpy'\n</code></pre> <p>The LUMI User Support Team cannot know all programs that users might use and none of the team members is an expert in AlphaFold. This container is  originally developed for a specific project and provided as-is until a user  contributes to its documentation.</p> <p>After loading the module, the docker definition file used when building the container is available in the <code>$EBROOTALPHAFOLD/share/docker-defs</code> subdirectory. As it requires some licensed components from LUMI and some other files that are not included, it currently cannot be used to reconstruct the container and extend its definition.</p>","boost":10},{"location":"a/AlphaFold/#installation","title":"Installation","text":"<p>To install the container with EasyBuild, follow the instructions in the EasyBuild section of the LUMI documentation, section \"Software\", and use the dummy partition <code>container</code>, e.g.:</p> <pre><code>module load LUMI partition/container EasyBuild-user\neb AlphaFold-69afc4d-rocm-5.5.1-python-3.9-singularity-20231108.eb\n</code></pre> <p>To use the container after installation, the <code>EasyBuild-user</code> module is not needed nor is the <code>container</code> partition. The module will be available in all versions of the LUMI stack and in the <code>CrayEnv</code> stack (provided the environment variable <code>EBU_USER_PREFIX</code> points to the right location).</p>","boost":10},{"location":"a/AlphaFold/#singularity-containers-with-modules-for-binding-and-extras","title":"Singularity containers with modules for binding and extras","text":"<p>Install with the EasyBuild-user module in <code>partition/container</code>: <pre><code>module load LUMI partition/container EasyBuild-user\neb &lt;easyconfig&gt;\n</code></pre> The module will be available in all versions of the LUMI stack and in the CrayEnv stack.</p> <p>To access module help after installation use <code>module spider AlphaFold/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig AlphaFold-69afc4d-rocm-5.5.1-python-3.9-singularity-20231108.eb, will provide AlphaFold/69afc4d-rocm-5.5.1-python-3.9-singularity-20231108     (with docker definition)</p> </li> <li> <p>EasyConfig AlphaFold-69afc4d-rocm-5.5.1-python-3.9-singularity-20240207.eb, will provide AlphaFold/69afc4d-rocm-5.5.1-python-3.9-singularity-20240207</p> </li> </ul>","boost":10},{"location":"a/Amber/","title":"Amber","text":"<p>[package list]</p>","boost":10},{"location":"a/Amber/#amber","title":"Amber","text":"","boost":10},{"location":"a/Amber/#license-information","title":"License information","text":"<p>Amber is licensed software. All academic use of Amber is covered by the CSC license, also for non-Finnish academic users. See more details in the CSC documentation.</p> <p>AmberTools is free software distributed under the GNU General Public License with a few components licensed differently. Amber itself has a separate license though.</p> <p>Note that from April 15, 2023 license fees for Amber will change and Amber will become free for all not-for-profit use. There is currently no clear definition of what is meant with not-for-profit users (e.g., what for academic projects with an industry partner who can make money from the IP generated with the help of Amber experiments).</p> <p>Some information about all this is available on the Amber download page.</p>","boost":10},{"location":"a/Amber/#user-documentation","title":"User documentation","text":"<p>Users who have their own Amber license can download and install the software for themselves in their project space. </p> <p>See also the instructions in the technical documentation further down the Amber page in the LUMI Software Library.</p> <p>AmberTools is free but it still requires a registration to download the source files which is why those need to be downloaded manually also at the moment if you intend to install the software yourself.</p> <p>In addition to this version installed with EasyBuild, a pre-installation maintained and supported by CSC is available under <code>/appl/local/csc</code>. For usage instructions, see the CSC documentation. Note that the CSC license allows only academic use by not-for-profit institutes and universities. Access to the executables does not automatically mean that you can use the package legitimately.</p> <p>We are interested in feedback, especially for the GPU version, where AMD developed the port.</p>","boost":10},{"location":"a/Amber/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Amber/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Amber-24.0-cpeGNU-24.03-AmberTools-24.0-rocm-cray-python-3.11.7.eb, will build Amber/24.0-cpeGNU-24.03-AmberTools-24.0-rocm-cray-python-3.11.7</p> <p>Amber with the matching version of AmberTools, and support for Cray Python.</p> </li> <li> <p>EasyConfig Amber-24.0-cpeGNU-24.03-AmberTools-24.0-rocm.eb, will build Amber/24.0-cpeGNU-24.03-AmberTools-24.0-rocm</p> </li> </ul>","boost":10},{"location":"a/Amber/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Amber web site</li> </ul>","boost":10},{"location":"a/Amber/#general-information","title":"General information","text":"<p>Amber 22 can support AMD GPUs, but it still requires a patch with additional files that has to be downloaded separately.</p> <p>Amber 24 has native support for AMD GPUs.</p>","boost":10},{"location":"a/Amber/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Amber support in the EasyBuilders repository</p> </li> <li> <p>Amber support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"a/Amber/#amber-22-for-cpegnu-2208-cpu-version","title":"Amber 22 for cpeGNU 22.08, CPU version","text":"<ul> <li> <p>This corresponds to the EasyConfig     <code>Amber-22.0-cpeGNU-22.08-AmberTools-22.3.eb</code>.</p> </li> <li> <p>The EasyConfig took some inspiration from the EasyBuilder ones, but is mostly     developed by the LUMI User Support Team, with some more GUI-oriented features disabled.</p> </li> <li> <p>When installing using this EasyConfig, the user should provide the     <code>Amber22.tar.bz2</code> and <code>AmberTools22.tar.bz2</code> files in a place where EasyBuild can find them     (e.g., in the current directory if you add <code>-r .</code> to the EasyBuild command line, or you can     look for the first directory in <code>$EASYBUILD_SOURCEPATH</code>, create the subdirectory     <code>a/Amber</code> in that directory and put the source files in that <code>a/Amber</code> subdirectory).</p> <p>EasyBuild cannot download these files automatically as a registration is required.</p> </li> </ul>","boost":10},{"location":"a/Amber/#amber-22-for-cpegnu-2208-with-gpu-support","title":"Amber 22 for cpeGNU 22.08 with GPU support","text":"<ul> <li> <p>This corresponds to the EasyConfig     <code>Amber-22.0-cpeGNU-22.08-AmberTools-22.3-GPU.eb</code>.</p> </li> <li> <p>The EasyConfig builds upon the CPU one.</p> </li> <li> <p>When installing using this EasyConfig, the user should provide the     <code>Amber22.tar.bz2</code> , <code>AmberTools22.tar.bz2</code> and <code>amber_amd.23jun22.tar.bz2</code> files     in a place where EasyBuild can find them     (e.g., in the current directory if you add <code>-r .</code> to the EasyBuild command line, or you can     look for the first directory in <code>$EASYBUILD_SOURCEPATH</code>, create the subdirectory     <code>a/Amber</code> in that directory and put the source files in that <code>a/Amber</code> subdirectory).</p> <p>EasyBuild cannot download these files automatically as a registration is required.</p> </li> </ul>","boost":10},{"location":"a/Amber/#amber-24-for-cpegnu-2309-with-gpu-support","title":"Amber 24 for cpeGNU 23.09 with GPU support","text":"<ul> <li> <p>This corresponds to the EasyConfig     <code>Amber-24.0-cpeGNU-23.09-AmberTools-24.0-rocm.eb</code>.</p> </li> <li> <p>When installing using this EasyConfig, the user should provide the     <code>Amber24.tar.bz2</code> and <code>AmberTools24.tar.bz2</code> in a place where EasyBuild can     find them (e.g., in the current directory if you add <code>-r .</code> to the EasyBuild     command line, or you can look for the first directory in     <code>$EASYBUILD_SOURCEPATH</code>, create the subdirectory <code>a/Amber</code> in that directory     and put the source files in that <code>a/Amber</code> subdirectory).</p> <p>EasyBuild cannot download these files automatically as a registration is required.</p> </li> </ul>","boost":10},{"location":"a/Amber/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Amber-22.0-cpeGNU-22.08-AmberTools-22.3-GPU.eb, with module Amber/22.0-cpeGNU-22.08-AmberTools-22.3-GPU</p> </li> <li> <p>EasyConfig Amber-22.0-cpeGNU-22.08-AmberTools-22.3.eb, with module Amber/22.0-cpeGNU-22.08-AmberTools-22.3</p> </li> </ul> </li> </ul>","boost":10},{"location":"a/amd/","title":"amd","text":"<p>[package list]</p>","boost":10},{"location":"a/amd/#amd","title":"amd","text":"","boost":10},{"location":"a/amd/#license-information","title":"License information","text":"<p>The amd module is completely implemented through the included EasyConfig file and hence covered by the  GNU General Public License version 3.0 under which the LUMI-EasyBuild-contrib repository is licensed. See the LICENSE file in that repository.</p>","boost":10},{"location":"a/amd/#user-documentation","title":"User documentation","text":"<p>The <code>amd/5.6.1</code> module is provided by the LUMI User Support Team to enable users who need a more recent version of ROCm that the official HPE Cray module. As  this is not a vendor-supplied module, it might not work as expected all the time.</p> <p>To use this module, use the following commands:</p> <pre><code>module load PrgEnv-amd\nmodule load amd/5.6.1\n</code></pre> <p>After loading these two modules, the Cray compiler wrapper (<code>cc</code>, <code>CC</code> and <code>ftn</code>) will use <code>amdclang</code>, <code>amdclang++</code> and <code>amdflang</code> from ROCm 5.6.1 as the backend compilers.</p> <p>To compile HIP code, you can use <code>hipcc</code> or <code>CC</code> with the <code>-xhip</code> compilation flag. Note that in the latter case, in order to have the HIP runtime library automatically linked, you need to load the corresponding <code>rocm</code> module.</p> <pre><code>module load rocm/5.6.1\n</code></pre> <p>We do not provide a similar module for <code>rocm/5.4.6</code>. Instead, it is sufficient to load the <code>rocm/5.4.6</code> module after loading the <code>PrgEnv-amd</code> module (or <code>cpeAMD</code> in the LUMI stacks). The necessary environment variables for the compiler wrappers are already defined in the <code>rocm/5.4.6</code> module.</p>","boost":10},{"location":"a/amd/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider amd/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>amd/5.6.1 (EasyConfig: amd-5.6.1.eb)</li> </ul>","boost":10},{"location":"a/amd/#technical-documentation","title":"Technical documentation","text":"","boost":10},{"location":"a/amd/#easybuild","title":"Easybuild","text":"","boost":10},{"location":"a/amd/#amd-561","title":"amd 5.6.1","text":"<p>The EasyConfig is used to create a pkgconfig file and a module to mimic the  official HPE Cray <code>amd</code> compiler module.</p>","boost":10},{"location":"a/amd-aocl/","title":"amd-aocl","text":"<p>[package list]</p>","boost":10},{"location":"a/amd-aocl/#amd-aocl","title":"amd-aocl","text":"","boost":10},{"location":"a/amd-aocl/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider amd-aocl/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig amd-aocl-4.2-cpeCray-23.12.eb, will build amd-aocl/4.2-cpeCray-23.12</p> </li> <li> <p>EasyConfig amd-aocl-4.2-cpeCray-24.03.eb, will build amd-aocl/4.2-cpeCray-24.03</p> </li> <li> <p>EasyConfig amd-aocl-4.2-cpeGNU-23.12.eb, will build amd-aocl/4.2-cpeGNU-23.12</p> </li> <li> <p>EasyConfig amd-aocl-4.2-cpeGNU-24.03.eb, will build amd-aocl/4.2-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"a/amd-aocl/#technical-documentation","title":"Technical documentation","text":"<p>This is basically just a module loading the  BLIS, libFLAME and ScaLAPACK </p> <p>libraries from the AMD Optimizing Libraries.</p>","boost":10},{"location":"a/amd-aocl/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig amd-aocl-3.1-cpeGNU-21.08.eb, with module amd-aocl/3.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig amd-aocl-3.2-cpeAOCC-22.08.eb, with module amd-aocl/3.2-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig amd-aocl-3.2-cpeGNU-22.06.eb, with module amd-aocl/3.2-cpeGNU-22.06</p> </li> <li> <p>EasyConfig amd-aocl-3.2-cpeGNU-22.08.eb, with module amd-aocl/3.2-cpeGNU-22.08</p> </li> <li> <p>EasyConfig amd-aocl-4.0-cpeAOCC-22.12.eb, with module amd-aocl/4.0-cpeAOCC-22.12</p> </li> <li> <p>EasyConfig amd-aocl-4.0-cpeGNU-22.12.eb, with module amd-aocl/4.0-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"a/aocl-utils/","title":"aocl-utils","text":"<p>[package list]</p>","boost":10},{"location":"a/aocl-utils/#aocl-utils","title":"aocl-utils","text":"","boost":10},{"location":"a/aocl-utils/#license-information","title":"License information","text":"<p>AOCL-Utils is covered by the BSD 3-Clause License. A copy of the license can be found in the aocl-utils  GitHub repository.</p>","boost":10},{"location":"a/aocl-utils/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider aocl-utils/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig aocl-utils-4.2-cpeCray-23.12.eb, will build aocl-utils/4.2-cpeCray-23.12</p> </li> <li> <p>EasyConfig aocl-utils-4.2-cpeCray-24.03.eb, will build aocl-utils/4.2-cpeCray-24.03</p> </li> <li> <p>EasyConfig aocl-utils-4.2-cpeGNU-23.12.eb, will build aocl-utils/4.2-cpeGNU-23.12</p> </li> <li> <p>EasyConfig aocl-utils-4.2-cpeGNU-24.03.eb, will build aocl-utils/4.2-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"a/aocl-utils/#technical-documentation","title":"Technical documentation","text":"<ul> <li>AOCL-Utils web page</li> </ul>","boost":10},{"location":"a/aocl-utils/#easybuild","title":"EasyBuild","text":"<ul> <li>There is no support in the EasyBuilders repository</li> <li>There is no support in the CSCS repository</li> </ul>","boost":10},{"location":"a/aocl-utils/#version-42-for-cpe-2312-and-2403","title":"Version 4.2 for CPE 23.12 and 24.03","text":"<ul> <li>Created for LUMI</li> </ul>","boost":10},{"location":"a/aria2/","title":"aria2","text":"<p>[package list]</p>","boost":10},{"location":"a/aria2/#aria2","title":"aria2","text":"","boost":10},{"location":"a/aria2/#license-information","title":"License information","text":"<p>Aria2 is covered by the GNU General Public License, either version 2 or any later version at your option.</p> <p>Version 2 of the License can also be found in the aria2 GitHub repository.</p>","boost":10},{"location":"a/aria2/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider aria2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig aria2-1.36-cpeAMD-23.09.eb, will build aria2/1.36-cpeAMD-23.09</p> </li> <li> <p>EasyConfig aria2-1.36-cpeAOCC-23.09.eb, will build aria2/1.36-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig aria2-1.36-cpeCray-23.09.eb, will build aria2/1.36-cpeCray-23.09</p> </li> <li> <p>EasyConfig aria2-1.36-cpeGNU-23.09.eb, will build aria2/1.36-cpeGNU-23.09</p> </li> <li> <p>EasyConfig aria2-1.37-cpeAMD-24.03.eb, will build aria2/1.37-cpeAMD-24.03</p> </li> <li> <p>EasyConfig aria2-1.37-cpeAOCC-24.03.eb, will build aria2/1.37-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig aria2-1.37-cpeCray-24.03.eb, will build aria2/1.37-cpeCray-24.03</p> </li> <li> <p>EasyConfig aria2-1.37-cpeGNU-24.03.eb, will build aria2/1.37-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"a/aria2/#technical-documentation","title":"Technical documentation","text":"<ul> <li>aria2 web page</li> </ul>","boost":10},{"location":"a/aria2/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"a/aria2/#version-1350-for-cpe-2112","title":"Version 1.35.0 for CPE 21.12","text":"<ul> <li>Adapted from the EasyBuilders EasyConfig.</li> </ul>","boost":10},{"location":"a/aria2/#version-1360-for-cpe-2206-and-2208","title":"Version 1.36.0 for CPE 22.06 and 22.08","text":"<ul> <li> <p>Switched back to using dependencies build with EasyBuild just to     be sure but otherwise a trivial upgrade.</p> </li> <li> <p>There is extensive testing during the build process that can take 7      minutes or more.</p> </li> <li> <p>Some extensions to the sanity checks.</p> </li> <li> <p>For 23.09: The tests fail in a way that the testing does not continue, but it      is not clear what the cause is. The program may only be partially functional.     Testing is now disabled so that it builds at least.</p> </li> </ul>","boost":10},{"location":"a/aria2/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig aria2-1.35-cpeGNU-21.12.eb, with module aria2/1.35-cpeGNU-21.12</p> </li> <li> <p>EasyConfig aria2-1.36-cpeAOCC-22.08.eb, with module aria2/1.36-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig aria2-1.36-cpeCray-22.06.eb, with module aria2/1.36-cpeCray-22.06</p> </li> <li> <p>EasyConfig aria2-1.36-cpeCray-22.08.eb, with module aria2/1.36-cpeCray-22.08</p> </li> <li> <p>EasyConfig aria2-1.36-cpeGNU-22.06.eb, with module aria2/1.36-cpeGNU-22.06</p> </li> <li> <p>EasyConfig aria2-1.36-cpeGNU-22.08.eb, with module aria2/1.36-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"a/arpack-ng/","title":"arpack-ng","text":"<p>[package list]</p>","boost":10},{"location":"a/arpack-ng/#arpack-ng","title":"arpack-ng","text":"","boost":10},{"location":"a/arpack-ng/#license-information","title":"License information","text":"<p>The arpack-ng package is distributed under a BSD-style license a copy of which can be found in the COPYYING file in the arpack-ng GitHub repository.</p>","boost":10},{"location":"a/arpack-ng/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider arpack-ng/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig arpack-ng-3.9.1-cpeGNU-24.03-OpenMP.eb, will build arpack-ng/3.9.1-cpeGNU-24.03-OpenMP</li> </ul>","boost":10},{"location":"a/arpack-ng/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>arpack-ng on GitHub</p> <ul> <li>GitHub releases via tags</li> </ul> </li> </ul>","boost":10},{"location":"a/arpack-ng/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for arpack-ng in the EasyBuilders repository</p> </li> <li> <p>Support for aprack-ng in the CSCS repository</p> </li> <li> <p>Support for arpack-ng in Spack</p> </li> </ul>","boost":10},{"location":"a/arpack-ng/#version-390-for-cpegnu-in-2208-and-2212-archived","title":"Version 3.9.0 for cpeGNU in 22.08 and 22.12 (archived)","text":"<ul> <li> <p>The EasyConfig is developed in LUST and already switched to the      CMake build process while those for older versions in the EasyBuilders     and CSCS repositories still use ConfigureMake</p> </li> <li> <p>Variants compiled with and without OpenMP enabled to avoid conflicts     with multiple LibSci libraries.</p> </li> </ul>","boost":10},{"location":"a/arpack-ng/#version-391-for-cpegnu-in-2403","title":"Version 3.9.1 for cpeGNU in 24.03","text":"<ul> <li>Update from previous easyconfigs.</li> </ul>","boost":10},{"location":"a/arpack-ng/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig arpack-ng-3.9.0-cpeGNU-22.08-noOpenMP.eb, with module arpack-ng/3.9.0-cpeGNU-22.08-noOpenMP</p> </li> <li> <p>EasyConfig arpack-ng-3.9.0-cpeGNU-22.08-OpenMP.eb, with module arpack-ng/3.9.0-cpeGNU-22.08-OpenMP</p> </li> <li> <p>EasyConfig arpack-ng-3.9.0-cpeGNU-22.12-noOpenMP.eb, with module arpack-ng/3.9.0-cpeGNU-22.12-noOpenMP</p> </li> <li> <p>EasyConfig arpack-ng-3.9.0-cpeGNU-22.12-OpenMP.eb, with module arpack-ng/3.9.0-cpeGNU-22.12-OpenMP</p> </li> </ul> </li> </ul>","boost":10},{"location":"a/aws-ofi-rccl/","title":"aws-ofi-rccl","text":"<p>[package list]</p>","boost":10},{"location":"a/aws-ofi-rccl/#aws-ofi-rccl","title":"aws-ofi-rccl","text":"","boost":10},{"location":"a/aws-ofi-rccl/#license-information","title":"License information","text":"<p>The AWS RCCL plugin for OFI is covered by the Apache License, Version 2.0</p>","boost":10},{"location":"a/aws-ofi-rccl/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider aws-ofi-rccl/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig aws-ofi-rccl-17d41cb-cpeGNU-24.03.eb, will build aws-ofi-rccl/17d41cb-cpeGNU-24.03</li> </ul>","boost":10},{"location":"a/aws-ofi-rccl/#technical-documentation","title":"Technical documentation","text":"<p>This is a plug-in for the RCCL library to use libfabric as a network provider in RCCL based applications. This plugin is essential to get good bandwidth and scalability in RCCL applications on the SlingShot 11 interconnect of LUMI. It was originally developed for the AWS EC2 network infrastructure, hence its name.</p> <p>The plug-in maps RCCLs connection-oriented transport  APIs to libfabric's connection-less reliable interface. This allows RCCL  applications to take benefit of libfabric's transport layer services like  reliable message support and operating system bypass.</p> <ul> <li>GitHub for the plugin</li> </ul>","boost":10},{"location":"a/aws-ofi-rccl/#easybuild","title":"EasyBuild","text":"<p>The EasyConfigs are a development of the LUST team. As there are no release  versions, we currently refer to commits.</p>","boost":10},{"location":"a/aws-ofi-rccl/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig aws-ofi-rccl-1.4.0-cpeGNU-22.12-rocm-5.3.2.eb, with module aws-ofi-rccl/1.4.0-cpeGNU-22.12-rocm-5.3.2</p> </li> <li> <p>EasyConfig aws-ofi-rccl-66b3b31-cpeGNU-22.08.eb, with module aws-ofi-rccl/66b3b31-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"b/BCFtools/","title":"BCFtools","text":"<p>[package list]</p>","boost":10},{"location":"b/BCFtools/#bcftools","title":"BCFtools","text":"","boost":10},{"location":"b/BCFtools/#license-information","title":"License information","text":"<p>BCFtools is available under a dual MIT/Expat and  GNU General Public License Version 3 license.</p> <p>The full license text is available in the BCFtools GitHub.</p> <p>Please also note the \"Citing\" section in the README file in that repository: users are asked to cite a particular paper when usig SAMtools for publications.</p> <p>After installation of the package and loading of the module, the LICENSE and README  files are available in <code>$EBROOTBCFTOOLS/share/licenses/BCFtools</code> (from version 1.17  on).</p>","boost":10},{"location":"b/BCFtools/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider BCFtools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig BCFtools-1.18-cpeGNU-23.09.eb, will build BCFtools/1.18-cpeGNU-23.09</p> </li> <li> <p>EasyConfig BCFtools-1.19-cpeGNU-24.03.eb, will build BCFtools/1.19-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"b/BCFtools/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>HTSlib/SAMtools/BCFtools home page</p> </li> <li> <p>BCFtools development and home page on GitHub</p> <ul> <li>BDFtools GitHub releases</li> </ul> </li> <li> <p>BCFtools installation guide</p> </li> </ul>","boost":10},{"location":"b/BCFtools/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>BCFtools support in the EasyBuilders repository</p> </li> <li> <p>There is no support for BCFtools in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"b/BCFtools/#version-114-for-cpe-2112","title":"Version 1.14 for CPE 21.12","text":"<ul> <li> <p>The EasyConfig file is a direct port from the EasyBuilders one</p> </li> <li> <p>We took care of linking with a version of GSL compiled without OpenMP support     as compiling GSL with and BCFtools without OpenMP support causes a problem     with BLAS (that crashes when the program ends).</p> </li> </ul>","boost":10},{"location":"b/BCFtools/#version-1151-for-cpe-2112","title":"Version 1.15.1 for CPE 21.12","text":"<ul> <li>A straightforward port of the easyconfig for 1.14, triggered by problems with     HTSlib on LUMI.</li> </ul>","boost":10},{"location":"b/BCFtools/#version-1151-forr-cpe-2206-and-2208","title":"Version 1.15.1 forr CPE 22.06 and 22.08","text":"<ul> <li> <p>Checked the configure script for additional useful options. Considered adding     '--enable-perl-filters` but that used libperl from the system. As it turns out     that the current Perl module does not provide libperl.so, the option was not     added. </p> </li> <li> <p>Cleaned up dependencies as most are pulled in anyway through HTSlib.</p> </li> </ul>","boost":10},{"location":"b/BCFtools/#version-117-for-cpegnu-2208","title":"Version 1.17 for cpeGNU 22.08","text":"<ul> <li> <p>Trivial port of the 1.15.1 EasyConfig.</p> </li> <li> <p>Some restructuring to work with our version update scripts.</p> </li> <li> <p>Some restructuring to also copy the LICENSE and README file to the system.</p> </li> </ul>","boost":10},{"location":"b/BCFtools/#version-118-from-cpe-2309-on","title":"Version 1.18 from CPE 23.09 on","text":"<ul> <li>Trivial port of the 1.17 EasyConfig</li> </ul>","boost":10},{"location":"b/BCFtools/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig BCFtools-1.14-cpeGNU-21.12.eb, with module BCFtools/1.14-cpeGNU-21.12</p> </li> <li> <p>EasyConfig BCFtools-1.15.1-cpeGNU-21.12.eb, with module BCFtools/1.15.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig BCFtools-1.15.1-cpeGNU-22.06.eb, with module BCFtools/1.15.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig BCFtools-1.15.1-cpeGNU-22.08.eb, with module BCFtools/1.15.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig BCFtools-1.17-cpeGNU-22.12.eb, with module BCFtools/1.17-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"b/BLIS/","title":"BLIS","text":"<p>[package list]</p>","boost":10},{"location":"b/BLIS/#blis","title":"BLIS","text":"","boost":10},{"location":"b/BLIS/#license-information","title":"License information","text":"<p>BLIS is copyrighted by several parties. The BLIS license text is available in the BLIS GitHub repository.</p> <p>From version 4.0 on a copy of the license can also be found in <code>$EBROOTBLIS/share/licenses/BLIS</code> after installing the package and loading the module.</p>","boost":10},{"location":"b/BLIS/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider BLIS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig BLIS-4.0-cpeCray-23.03-amd-ILP64.eb, will build BLIS/4.0-cpeCray-23.03-amd-ILP64</p> </li> <li> <p>EasyConfig BLIS-4.0-cpeCray-23.03-amd.eb, will build BLIS/4.0-cpeCray-23.03-amd</p> </li> <li> <p>EasyConfig BLIS-4.2-cpeCray-23.12-amd-ILP64.eb, will build BLIS/4.2-cpeCray-23.12-amd-ILP64</p> </li> <li> <p>EasyConfig BLIS-4.2-cpeCray-23.12-amd.eb, will build BLIS/4.2-cpeCray-23.12-amd</p> </li> <li> <p>EasyConfig BLIS-4.2-cpeCray-24.03-amd-ILP64.eb, will build BLIS/4.2-cpeCray-24.03-amd-ILP64</p> </li> <li> <p>EasyConfig BLIS-4.2-cpeCray-24.03-amd.eb, will build BLIS/4.2-cpeCray-24.03-amd</p> </li> <li> <p>EasyConfig BLIS-4.2-cpeGNU-23.12-amd-ILP64.eb, will build BLIS/4.2-cpeGNU-23.12-amd-ILP64</p> </li> <li> <p>EasyConfig BLIS-4.2-cpeGNU-23.12-amd.eb, will build BLIS/4.2-cpeGNU-23.12-amd</p> </li> <li> <p>EasyConfig BLIS-4.2-cpeGNU-24.03-amd-ILP64.eb, will build BLIS/4.2-cpeGNU-24.03-amd-ILP64</p> </li> <li> <p>EasyConfig BLIS-4.2-cpeGNU-24.03-amd.eb, will build BLIS/4.2-cpeGNU-24.03-amd</p> </li> </ul>","boost":10},{"location":"b/BLIS/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>BLIS development and home page on GitHub</p> </li> <li> <p>AMD's fork of BLIS home page</p> </li> <li> <p>AMD's GitHub with the BLIS fork</p> </li> </ul>","boost":10},{"location":"b/BLIS/#notes","title":"Notes","text":"<ul> <li> <p>BLIS does not provide the ISAMIN etc. functions. They don't seem to be part of      the BLAS1 specifications either, unlike their ISAMAX etc. variants. </p> <p>They do seem to be missed though when building ScaLAPACK with the Cray compiler. It is likely (but needs further investigation) that other compilers include them in their runtime libraries.</p> </li> <li> <p>ILP64 variants are also provided. However, even though the non-ILP64 variants use     32 bit integers in the BLAS function interfaces, they do use 64-bit integers internally.</p> </li> </ul>","boost":10},{"location":"b/BLIS/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>BLIS support in the EasyBuilders repository</p> </li> <li> <p>There is no support for BLIS in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"b/BLIS/#version-31-for-cpe-2108","title":"Version 3.1 for CPE 21.08","text":"<ul> <li> <p>The EasyConfig file is a direct port from the EasyBuilders one</p> </li> <li> <p>Some logic was added to select zen3 depending on the partition loaded to     support cross-compiling.</p> </li> </ul>","boost":10},{"location":"b/BLIS/#version-32-for-cpe-2206-and-2208-archived","title":"Version 3.2 for CPE 22.06 and 22.08 (archived)","text":"<ul> <li>Trivial port of the EasyConfig file for 3.1.</li> </ul>","boost":10},{"location":"b/BLIS/#version-40-for-cpe-2212-archived-and-2303","title":"Version 4.0 for CPE 22.12 (archived) and 23.03","text":"<ul> <li> <p>Trivial port of the EasyConfig file for 4.0</p> </li> <li> <p>Did restrict the number of threads for the tests though as not doing so      resulted in frequent errors when compiling on the login nodes.</p> </li> <li> <p>Reworked the EasyConfig trying to save the test results in the installation     which does not yet fully work, and storing license information with the      installation. We failed to store the test logs in the <code>easybuild</code> subdirectory.     They are located in the <code>easybuild-extra-logs</code> subdirectory instead.</p> </li> <li> <p>Created ILP64 versions.</p> </li> </ul>","boost":10},{"location":"b/BLIS/#version-42-for-cpe-2312and-2403","title":"Version 4.2 for CPE 23.12/and 24.03","text":"<ul> <li>Trivial port of the EasyConfig file for 4.2</li> </ul>","boost":10},{"location":"b/BLIS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig BLIS-3.1-cpeCray-21.08-amd.eb, with module BLIS/3.1-cpeCray-21.08-amd</p> </li> <li> <p>EasyConfig BLIS-3.1-cpeGNU-21.08-amd.eb, with module BLIS/3.1-cpeGNU-21.08-amd</p> </li> <li> <p>EasyConfig BLIS-3.2-cpeAOCC-22.08-amd.eb, with module BLIS/3.2-cpeAOCC-22.08-amd</p> </li> <li> <p>EasyConfig BLIS-3.2-cpeCray-22.06-amd.eb, with module BLIS/3.2-cpeCray-22.06-amd</p> </li> <li> <p>EasyConfig BLIS-3.2-cpeCray-22.08-amd.eb, with module BLIS/3.2-cpeCray-22.08-amd</p> </li> <li> <p>EasyConfig BLIS-3.2-cpeGNU-22.06-amd.eb, with module BLIS/3.2-cpeGNU-22.06-amd</p> </li> <li> <p>EasyConfig BLIS-3.2-cpeGNU-22.08-amd.eb, with module BLIS/3.2-cpeGNU-22.08-amd</p> </li> <li> <p>EasyConfig BLIS-4.0-cpeAOCC-22.12-amd-ILP64.eb, with module BLIS/4.0-cpeAOCC-22.12-amd-ILP64</p> </li> <li> <p>EasyConfig BLIS-4.0-cpeAOCC-22.12-amd.eb, with module BLIS/4.0-cpeAOCC-22.12-amd</p> </li> <li> <p>EasyConfig BLIS-4.0-cpeCray-22.12-amd-ILP64.eb, with module BLIS/4.0-cpeCray-22.12-amd-ILP64</p> </li> <li> <p>EasyConfig BLIS-4.0-cpeCray-22.12-amd.eb, with module BLIS/4.0-cpeCray-22.12-amd</p> </li> <li> <p>EasyConfig BLIS-4.0-cpeGNU-22.12-amd-ILP64.eb, with module BLIS/4.0-cpeGNU-22.12-amd-ILP64</p> </li> <li> <p>EasyConfig BLIS-4.0-cpeGNU-22.12-amd.eb, with module BLIS/4.0-cpeGNU-22.12-amd</p> </li> </ul> </li> </ul>","boost":10},{"location":"b/Blosc/","title":"Blosc","text":"<p>[package list]</p>","boost":10},{"location":"b/Blosc/#blosc","title":"Blosc","text":"","boost":10},{"location":"b/Blosc/#license-information","title":"License information","text":"<p>Blosc has a BSD-style license that can be read online  in the GitHub repository.</p> <p>From LUMI/23.12 on, the licenses for Blosc and various components used by it can also  be found in the directory <code>$EBROOTBLOSC/share/licenses/Blosc</code> after loading the module.</p>","boost":10},{"location":"b/Blosc/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"b/Blosc/#what-is-blosc","title":"What is Blosc?","text":"<p>Blosc is a high performance compressor optimized for binary data. It has been designed to transmit data to the processor cache faster than the traditional, non-compressed, direct memory fetch approach via a memcpy() OS call. Blosc is the first compressor (that I'm aware of) that is meant not only to reduce the size of large datasets on-disk or in-memory, but also to accelerate memory-bound computations (which is typical in vector-vector operations).</p> <p>It uses the blocking technique  (as described in this article) to reduce activity on the memory bus as much as possible. In short, the blocking technique works by dividing datasets in blocks that are small enough to fit in L1 cache of modern processor and perform compression/decompression there. It also leverages SIMD (SSE2) and multi-threading capabilities present in nowadays multi-core processors so as to accelerate the compression/decompression process to a maximum.</p>","boost":10},{"location":"b/Blosc/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Blosc/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Blosc/1.21.1-cpeAMD-22.08 (EasyConfig: Blosc-1.21.1-cpeAMD-22.08.eb)</p> </li> <li> <p>Blosc/1.21.1-cpeAOCC-22.08 (EasyConfig: Blosc-1.21.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>Blosc/1.21.1-cpeCray-22.08 (EasyConfig: Blosc-1.21.1-cpeCray-22.08.eb)</p> </li> <li> <p>Blosc/1.21.1-cpeGNU-22.08 (EasyConfig: Blosc-1.21.1-cpeGNU-22.08.eb)</p> </li> <li> <p>Blosc/1.21.2-cpeAMD-22.12 (EasyConfig: Blosc-1.21.2-cpeAMD-22.12.eb)</p> </li> <li> <p>Blosc/1.21.2-cpeAOCC-22.12 (EasyConfig: Blosc-1.21.2-cpeAOCC-22.12.eb)</p> </li> <li> <p>Blosc/1.21.2-cpeCray-22.12 (EasyConfig: Blosc-1.21.2-cpeCray-22.12.eb)</p> </li> <li> <p>Blosc/1.21.2-cpeCray-23.03 (EasyConfig: Blosc-1.21.2-cpeCray-23.03.eb)</p> </li> <li> <p>Blosc/1.21.2-cpeGNU-22.12 (EasyConfig: Blosc-1.21.2-cpeGNU-22.12.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeAMD-23.09 (EasyConfig: Blosc-1.21.5-cpeAMD-23.09.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeAMD-23.12 (EasyConfig: Blosc-1.21.5-cpeAMD-23.12.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeAMD-24.03 (EasyConfig: Blosc-1.21.5-cpeAMD-24.03.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeAOCC-23.09 (EasyConfig: Blosc-1.21.5-cpeAOCC-23.09.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeAOCC-23.12 (EasyConfig: Blosc-1.21.5-cpeAOCC-23.12.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeAOCC-24.03 (EasyConfig: Blosc-1.21.5-cpeAOCC-24.03.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeCray-23.09 (EasyConfig: Blosc-1.21.5-cpeCray-23.09.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeCray-23.12 (EasyConfig: Blosc-1.21.5-cpeCray-23.12.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeCray-24.03 (EasyConfig: Blosc-1.21.5-cpeCray-24.03.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeGNU-23.09 (EasyConfig: Blosc-1.21.5-cpeGNU-23.09.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeGNU-23.12 (EasyConfig: Blosc-1.21.5-cpeGNU-23.12.eb)</p> </li> <li> <p>Blosc/1.21.5-cpeGNU-24.03 (EasyConfig: Blosc-1.21.5-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"b/Blosc/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Blosc home page</p> </li> <li> <p>c-blosc GitHub repository (Blosc 1)</p> <ul> <li>GitHub  Blosc 1</li> </ul> </li> </ul>","boost":10},{"location":"b/Blosc/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Blosc in the EasyBuilders repository</p> </li> <li> <p>Blosc in the CSCS repository</p> </li> </ul>","boost":10},{"location":"b/Blosc/#version-1210-from-cpe-2106-on","title":"Version 1.21.0 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is based on the EasyBuilders one with the documentation taken from     the University of Antwerpen EasyConfig.</p> </li> <li> <p>With the clang-based compilers CMake didn't like the <code>'cstd': 'c++11'</code> toolchain     option used by the default EasyConfig files.</p> </li> </ul>","boost":10},{"location":"b/Blosc/#version-1211-from-cpe-2208-on","title":"Version 1.21.1 from CPE 22.08 on","text":"<ul> <li>Minor version bump of the 1.22.1 EasyConfig.</li> </ul>","boost":10},{"location":"b/Blosc/#version-1212-from-cpe-2212-on","title":"Version 1.21.2 from CPE 22.12 on","text":"<ul> <li>Minor version bump of the 1.21.1 EasyConfig.</li> </ul>","boost":10},{"location":"b/Blosc/#version-1215-from-cpe-2309-on","title":"Version 1.21.5 from CPE 23.09 on","text":"<ul> <li> <p>Done before the package was even added to 2023a. The 1.21.3 version that was     used by EasyBuild for 2022b was even removed from the repository so likely contained     some annoying bugs.</p> </li> <li> <p>Trivial bump of the 1.21.2 EasyConfig.</p> </li> <li> <p>From CPE 23.12 on: Adding information about the license.</p> </li> <li> <p>From CPE 23.12 on, switching to installing in lib instead of lib64 for more uniformity.</p> </li> </ul>","boost":10},{"location":"b/Blosc/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Blosc-1.21.0-cpeAMD-21.06.eb, with module Blosc/1.21.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig Blosc-1.21.0-cpeCray-21.06.eb, with module Blosc/1.21.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig Blosc-1.21.0-cpeCray-21.08.eb, with module Blosc/1.21.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig Blosc-1.21.0-cpeGNU-21.06.eb, with module Blosc/1.21.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig Blosc-1.21.0-cpeGNU-21.08.eb, with module Blosc/1.21.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Blosc-1.21.1-cpeAOCC-21.12.eb, with module Blosc/1.21.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig Blosc-1.21.1-cpeAOCC-22.06.eb, with module Blosc/1.21.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig Blosc-1.21.1-cpeCray-21.12.eb, with module Blosc/1.21.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig Blosc-1.21.1-cpeCray-22.06.eb, with module Blosc/1.21.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig Blosc-1.21.1-cpeGNU-21.12.eb, with module Blosc/1.21.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Blosc-1.21.1-cpeGNU-22.06.eb, with module Blosc/1.21.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"b/Boost/","title":"Boost","text":"<p>[package list]</p>","boost":10},{"location":"b/Boost/#boost","title":"Boost","text":"","boost":10},{"location":"b/Boost/#license-information","title":"License information","text":"<p>Information on the Boost licence is available on their web page.</p> <p>Precise text of the Boost Software License Version 1.0</p> <p>From LUMI/23.12 on, the <code>LICENSE_1_0.txt</code> file can also be found in the <code>$EBROOTBOOST/share/licenses/Boost</code> subdirectory after loading the module.</p>","boost":10},{"location":"b/Boost/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Boost/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Boost/1.79.0-cpeAMD-22.08-python3 (EasyConfig: Boost-1.79.0-cpeAMD-22.08-python3.eb)</p> </li> <li> <p>Boost/1.79.0-cpeAMD-22.08 (EasyConfig: Boost-1.79.0-cpeAMD-22.08.eb)</p> </li> <li> <p>Boost/1.79.0-cpeAOCC-22.08-python3 (EasyConfig: Boost-1.79.0-cpeAOCC-22.08-python3.eb)</p> </li> <li> <p>Boost/1.79.0-cpeAOCC-22.08 (EasyConfig: Boost-1.79.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>Boost/1.79.0-cpeCray-22.08-python3 (EasyConfig: Boost-1.79.0-cpeCray-22.08-python3.eb)</p> </li> <li> <p>Boost/1.79.0-cpeCray-22.08 (EasyConfig: Boost-1.79.0-cpeCray-22.08.eb)</p> </li> <li> <p>Boost/1.79.0-cpeGNU-22.08-python3 (EasyConfig: Boost-1.79.0-cpeGNU-22.08-python3.eb)</p> </li> <li> <p>Boost/1.79.0-cpeGNU-22.08 (EasyConfig: Boost-1.79.0-cpeGNU-22.08.eb)</p> </li> <li> <p>Boost/1.81.0-cpeAMD-22.12 (EasyConfig: Boost-1.81.0-cpeAMD-22.12.eb)</p> </li> <li> <p>Boost/1.81.0-cpeAOCC-22.12 (EasyConfig: Boost-1.81.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>Boost/1.81.0-cpeCray-22.12 (EasyConfig: Boost-1.81.0-cpeCray-22.12.eb)</p> </li> <li> <p>Boost/1.81.0-cpeCray-23.03 (EasyConfig: Boost-1.81.0-cpeCray-23.03.eb)</p> </li> <li> <p>Boost/1.81.0-cpeGNU-22.12 (EasyConfig: Boost-1.81.0-cpeGNU-22.12.eb)</p> </li> <li> <p>Boost/1.82.0-cpeAMD-23.09 (EasyConfig: Boost-1.82.0-cpeAMD-23.09.eb)</p> </li> <li> <p>Boost/1.82.0-cpeAMD-23.12 (EasyConfig: Boost-1.82.0-cpeAMD-23.12.eb)</p> </li> <li> <p>Boost/1.82.0-cpeAOCC-23.09 (EasyConfig: Boost-1.82.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>Boost/1.82.0-cpeAOCC-23.12 (EasyConfig: Boost-1.82.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>Boost/1.82.0-cpeCray-23.09 (EasyConfig: Boost-1.82.0-cpeCray-23.09.eb)</p> </li> <li> <p>Boost/1.82.0-cpeCray-23.12 (EasyConfig: Boost-1.82.0-cpeCray-23.12.eb)</p> </li> <li> <p>Boost/1.82.0-cpeGNU-23.09 (EasyConfig: Boost-1.82.0-cpeGNU-23.09.eb)</p> </li> <li> <p>Boost/1.82.0-cpeGNU-23.12 (EasyConfig: Boost-1.82.0-cpeGNU-23.12.eb)</p> </li> <li> <p>Boost/1.83.0-cpeAMD-24.03 (EasyConfig: Boost-1.83.0-cpeAMD-24.03.eb)</p> </li> <li> <p>Boost/1.83.0-cpeAOCC-24.03 (EasyConfig: Boost-1.83.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>Boost/1.83.0-cpeCray-24.03 (EasyConfig: Boost-1.83.0-cpeCray-24.03.eb)</p> </li> <li> <p>Boost/1.83.0-cpeGNU-24.03 (EasyConfig: Boost-1.83.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"b/Boost/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Boost web site</p> </li> <li> <p>Boost on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> <li> <p>Boost downloads that we use</p> </li> </ul>","boost":10},{"location":"b/Boost/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Boost support in the EasyBuilders repository</p> </li> <li> <p>Boost support in the CSCS repository</p> </li> </ul> <p>Note that the CSCS repository contains a custom EasyBlock for Boost as the MPI build procedure of the regular one does not work. However, it seems to be based on a very old version of the Boost EasyBlock.</p> <p>HPE-Cray has a sample build script for Boost in their pe-scripts repository.</p>","boost":10},{"location":"b/Boost/#version-1770-for-cpe-2108","title":"Version 1.77.0 for CPE 21.08","text":"<ul> <li> <p>The EasyConfig is derived from the standard EasyBuild one with some additional help     information added to it taken from the UAntwerpen EasyConfig.</p> <p>It does require additional parameters to specify the toolsets for bootstrapping and building as they are not always correctly recognized.</p> <p>Id does need some corrections to the EasyBlock to correctly support MPI</p> </li> <li> <p>Our custom EasyBlock <code>EB_BoostCPE</code> is needed to enable MPI builds.</p> <ul> <li> <p>Added code for correctly generating the <code>user-config.jam</code> file.</p> </li> <li> <p>Added an additional parameter <code>bjam_features</code> that allows to add additional     features to the b2/bjam command line. It could be used when using old style     Cray compilers though it seems that the options that the HPE-Cray build script     adds are actually not all valid on recent versions of Boost.</p> </li> </ul> </li> <li> <p>cpeGNu: Seems to work with the CSCS EasyBlock. It is not clear if any of the Cray     patches make sense in this case.</p> </li> <li> <p>cpeCray: Work based on the <code>boost.sh</code> script from the     pe-scripts repository.</p> <ul> <li> <p>Patch <code>boost-context-cray.path</code>:  Adds the <code>cray</code> toolset to     <code>libs/context/build/JAmfile.v2</code>. This patch doesn't seem to be needed     anymore as it is for the toolset <code>cray</code> which is not used for the     clang-based CCE compiler.</p> </li> <li> <p>Patch <code>boost-cray-default-feature-fix.patch</code> basically undoes some settings     that <code>tools/build/src/tools/cray.jam</code> makes specifically for Cray.     This patch doesn't seem to be needed anymore as it is for the toolset     <code>cray</code> which is not used for the clang-based CCE compiler.</p> </li> <li> <p>Then the Cray script does a lot of editing in     <code>boost/config/compiler/cray.hpp</code> that they claim is needed for CCE 8.6 and     up. This is still used in our configuration for the Cray compiler.</p> </li> <li> <p>The edits in the Cray script in tools/build/src/tools are not needed for version     1.77.0. The errors that those edits deal with have already been corrected     (as of commit 3385fe2aa699a45e722a1013658f824b6a7c761f.)</p> </li> </ul> </li> <li> <p>cpeAMD: Compiles if <code>toolset == clang</code> is added to the EasyConfig. It is not clear if     any of the Cray patches actually make sense.</p> </li> <li> <p>For 21.12, which switched to Python 3.9.4, the version detection is wrong so the sanity     check goes looking for the files for Python 3.8 rather than 3.9.</p> </li> </ul>","boost":10},{"location":"b/Boost/#version-1790-for-lumi2206","title":"Version 1.79.0 for LUMI/22.06","text":"<ul> <li>Trivial port of the EasyConfigs.</li> </ul>","boost":10},{"location":"b/Boost/#1810-from-cpe-2212-on","title":"1.81.0 from CPE 22.12 on","text":"<ul> <li> <p>Trivial port of the EasyConfigs for the regular version.</p> </li> <li> <p>We no longer have the -python3 versions of the modules. Instead a separate Boost.python     module will be developed that installs the Python 3 interfaces on top of the regular     Boost module. Unless the EasyBuilders repository though we do not distinguish between     Boost and Boost.mpi, the latter still a full library but with MPI support, as we don't     have those levels of hierarchy in our toolchains. </p> </li> </ul>","boost":10},{"location":"b/Boost/#1820-from-cpe-2309-on","title":"1.82.0 from CPE 23.09 on","text":"<ul> <li> <p>Trivial port of the EasyConfigs for the regular version of 1.81.0     to follow the EasyBuild common toolchains version 2023a.</p> </li> <li> <p>Except for cpe Cray 23.09 where some linking errors were generated. The solution turned     out to be a special Clang feature to inject options late in the process: Before building,     set</p> <pre><code>export CCC_OVERRIDE_OPTIONS=\"x--target=x86_64-pc-linux\"\n</code></pre> <p>which for building Boost we do via <code>prebuildopts</code> in the EasyConfig.</p> <p>It might be that similar linking errors (about not finding libunwind) are generated when using Boost with this version of the compiler and the same workaround may be needed in that case!</p> </li> </ul>","boost":10},{"location":"b/Boost/#1830-for-lumi2403","title":"1.83.0 for LUMI/24.03","text":"<ul> <li>Trivial port of the EasyConfig for version 1.82.0 in LUMI/23.12.</li> </ul>","boost":10},{"location":"b/Boost/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Boost-1.77.0-cpeAOCC-21.12-python3.eb, with module Boost/1.77.0-cpeAOCC-21.12-python3</p> </li> <li> <p>EasyConfig Boost-1.77.0-cpeAOCC-21.12.eb, with module Boost/1.77.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig Boost-1.77.0-cpeCray-21.08-python3.eb, with module Boost/1.77.0-cpeCray-21.08-python3</p> </li> <li> <p>EasyConfig Boost-1.77.0-cpeCray-21.08.eb, with module Boost/1.77.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig Boost-1.77.0-cpeCray-21.12-python3.eb, with module Boost/1.77.0-cpeCray-21.12-python3</p> </li> <li> <p>EasyConfig Boost-1.77.0-cpeCray-21.12.eb, with module Boost/1.77.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig Boost-1.77.0-cpeGNU-21.08-python3.eb, with module Boost/1.77.0-cpeGNU-21.08-python3</p> </li> <li> <p>EasyConfig Boost-1.77.0-cpeGNU-21.08.eb, with module Boost/1.77.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Boost-1.77.0-cpeGNU-21.12-python3.eb, with module Boost/1.77.0-cpeGNU-21.12-python3</p> </li> <li> <p>EasyConfig Boost-1.77.0-cpeGNU-21.12.eb, with module Boost/1.77.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Boost-1.79.0-cpeAOCC-22.06-python3.eb, with module Boost/1.79.0-cpeAOCC-22.06-python3</p> </li> <li> <p>EasyConfig Boost-1.79.0-cpeAOCC-22.06.eb, with module Boost/1.79.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig Boost-1.79.0-cpeCray-22.06-python3.eb, with module Boost/1.79.0-cpeCray-22.06-python3</p> </li> <li> <p>EasyConfig Boost-1.79.0-cpeCray-22.06.eb, with module Boost/1.79.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig Boost-1.79.0-cpeGNU-22.06-python3.eb, with module Boost/1.79.0-cpeGNU-22.06-python3</p> </li> <li> <p>EasyConfig Boost-1.79.0-cpeGNU-22.06.eb, with module Boost/1.79.0-cpeGNU-22.06</p> </li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li>EasyConfig Boost-1.72.0-cpeGNU-22.12.eb, with module Boost/1.72.0-cpeGNU-22.12</li> </ul> </li> </ul>","boost":10},{"location":"b/Brotli/","title":"Brotli","text":"<p>[package list]</p>","boost":10},{"location":"b/Brotli/#brotli","title":"Brotli","text":"","boost":10},{"location":"b/Brotli/#license-information","title":"License information","text":"<p>The Brotli license is available in the Brotli GitHub.</p> <p>From LUMI/23.12 on, the license is also available as `$EBROOTBROTLI/share/licenses/Brotli/LICENSE' after loading the module.</p>","boost":10},{"location":"b/Brotli/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"b/Brotli/#what-is-brotli","title":"What is Brotli?","text":"<p>Brotli is a generic-purpose lossless compression algorithm that compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding and 2nd order context modeling, with a compression ratio comparable to the best currently available general-purpose compression methods. It is similar in speed with deflate but offers more dense compression.</p> <p>The specification of the Brotli Compressed Data Format is defined in  RFC 7932.</p>","boost":10},{"location":"b/Brotli/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Brotli/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Brotli/1.0.9-cpeAMD-22.08 (EasyConfig: Brotli-1.0.9-cpeAMD-22.08.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeAMD-22.12 (EasyConfig: Brotli-1.0.9-cpeAMD-22.12.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeAMD-23.09 (EasyConfig: Brotli-1.0.9-cpeAMD-23.09.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeAMD-23.12 (EasyConfig: Brotli-1.0.9-cpeAMD-23.12.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeAOCC-22.08 (EasyConfig: Brotli-1.0.9-cpeAOCC-22.08.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeAOCC-22.12 (EasyConfig: Brotli-1.0.9-cpeAOCC-22.12.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeAOCC-23.09 (EasyConfig: Brotli-1.0.9-cpeAOCC-23.09.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeAOCC-23.12 (EasyConfig: Brotli-1.0.9-cpeAOCC-23.12.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeCray-22.08 (EasyConfig: Brotli-1.0.9-cpeCray-22.08.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeCray-22.12 (EasyConfig: Brotli-1.0.9-cpeCray-22.12.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeCray-23.03 (EasyConfig: Brotli-1.0.9-cpeCray-23.03.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeCray-23.09 (EasyConfig: Brotli-1.0.9-cpeCray-23.09.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeCray-23.12 (EasyConfig: Brotli-1.0.9-cpeCray-23.12.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeGNU-22.08 (EasyConfig: Brotli-1.0.9-cpeGNU-22.08.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeGNU-22.12 (EasyConfig: Brotli-1.0.9-cpeGNU-22.12.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeGNU-23.09 (EasyConfig: Brotli-1.0.9-cpeGNU-23.09.eb)</p> </li> <li> <p>Brotli/1.0.9-cpeGNU-23.12 (EasyConfig: Brotli-1.0.9-cpeGNU-23.12.eb)</p> </li> <li> <p>Brotli/1.1.0-cpeAMD-24.03 (EasyConfig: Brotli-1.1.0-cpeAMD-24.03.eb)</p> </li> <li> <p>Brotli/1.1.0-cpeAOCC-24.03 (EasyConfig: Brotli-1.1.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>Brotli/1.1.0-cpeCray-24.03 (EasyConfig: Brotli-1.1.0-cpeCray-24.03.eb)</p> </li> <li> <p>Brotli/1.1.0-cpeGNU-24.03 (EasyConfig: Brotli-1.1.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"b/Brotli/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Brotli on GitHub</p> <ul> <li> GitHub releases of Brotli</li> </ul> </li> </ul>","boost":10},{"location":"b/Brotli/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Brotli in the EasyBuilders repository</p> </li> <li> <p>There is no support for Brotli in the CSCS repository</p> </li> </ul>","boost":10},{"location":"b/Brotli/#version-109-from-cpe-2106-on","title":"Version 1.0.9 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig file is based on one from the University of Antwerpen which itself     is based on a standard EasyBuilders recipe.</p> </li> <li> <p>From CPE 23.12 on, license information was added and the sanity checks were improved.     The libraries were also moved from lib64 to lib.</p> </li> </ul>","boost":10},{"location":"b/Brotli/#version-110-from-cpe-2403-on","title":"Version 1.1.0 from CPE 24.03 on","text":"<ul> <li>Library names have changed for the static version so needed a revision of the build     process.</li> </ul>","boost":10},{"location":"b/Brotli/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Brotli-1.0.9-cpeAMD-21.06.eb, with module Brotli/1.0.9-cpeAMD-21.06</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeAOCC-21.12.eb, with module Brotli/1.0.9-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeAOCC-22.06.eb, with module Brotli/1.0.9-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeCray-21.06.eb, with module Brotli/1.0.9-cpeCray-21.06</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeCray-21.08.eb, with module Brotli/1.0.9-cpeCray-21.08</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeCray-21.12.eb, with module Brotli/1.0.9-cpeCray-21.12</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeCray-22.06.eb, with module Brotli/1.0.9-cpeCray-22.06</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeGNU-21.06.eb, with module Brotli/1.0.9-cpeGNU-21.06</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeGNU-21.08.eb, with module Brotli/1.0.9-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeGNU-21.12.eb, with module Brotli/1.0.9-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Brotli-1.0.9-cpeGNU-22.06.eb, with module Brotli/1.0.9-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"b/buildtools/","title":"buildtools","text":"<p>[package list]</p>","boost":10},{"location":"b/buildtools/#buildtools","title":"buildtools","text":"","boost":10},{"location":"b/buildtools/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"b/buildtools/#what-is-buildtools","title":"What is buildtools?","text":"<p>Buildtools is a collection of various build tools installed in a single module and directory tree. We update it once with every toolchain and give it a version number based on the toolchain.</p> <p>The original setup was to only include executables and not libraries. However, that created a build dependency on sufficiently recent versions of Bison 3.0 and flex, so we decided to include them also even though they provide libraries that we may want to compile with a more recent GCC when used in applications (though I expect that even then those libraries will only be used on a non-performance-critical part of the code, I would expect in I/O. And by specifying other flex and/or Bison modules in the right order when building those applications, we may even totally avoid these problems.</p> <p>The contents of the module evolved over time. It does contain a subset of:</p> <ul> <li>GNU Autoconf</li> <li>GNU Autoconf-archive</li> <li>GNU Automake</li> <li>GNU Bison</li> <li>GNU libtool</li> <li>GNU M4</li> <li>GNU make</li> <li>GNU sed</li> <li>Byacc</li> <li>CMake</li> <li>Flex</li> <li>Ninja</li> <li>NASM</li> <li>Yasm</li> <li>patchelf</li> <li>re2c</li> <li>GNU gperf</li> <li>GNU help2man</li> <li>Doxygen</li> <li>xxd comes as part of Vim</li> </ul> <p>Build tools written in Python such as Meson and SCons, have been moved to the buildtools-python module as they can interfere with  build processes if that build process uses a different version of Python than the build tool.</p>","boost":10},{"location":"b/buildtools/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider buildtools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>buildtools/22.08-minimal (EasyConfig: buildtools-22.08-minimal.eb)</p> </li> <li> <p>buildtools/22.08-noPython (EasyConfig: buildtools-22.08-noPython.eb)</p> </li> <li> <p>buildtools/22.08 (EasyConfig: buildtools-22.08.eb)</p> </li> <li> <p>buildtools/22.12-bootstrap (EasyConfig: buildtools-22.12-bootstrap.eb)</p> </li> <li> <p>buildtools/22.12 (EasyConfig: buildtools-22.12.eb)</p> </li> <li> <p>buildtools/23.03-bootstrap (EasyConfig: buildtools-23.03-bootstrap.eb)</p> </li> <li> <p>buildtools/23.03 (EasyConfig: buildtools-23.03.eb)</p> </li> <li> <p>buildtools/23.09-bootstrap (EasyConfig: buildtools-23.09-bootstrap.eb)</p> </li> <li> <p>buildtools/23.09 (EasyConfig: buildtools-23.09.eb)</p> </li> <li> <p>buildtools/23.12-bootstrap (EasyConfig: buildtools-23.12-bootstrap.eb)</p> </li> <li> <p>buildtools/23.12 (EasyConfig: buildtools-23.12.eb)</p> </li> <li> <p>buildtools/24.03-bootstrap (EasyConfig: buildtools-24.03-bootstrap.eb)</p> </li> <li> <p>buildtools/24.03 (EasyConfig: buildtools-24.03.eb)</p> </li> </ul>","boost":10},{"location":"b/buildtools/#technical-documentation","title":"Technical documentation","text":"","boost":10},{"location":"b/buildtools/#contents","title":"Contents","text":"<p>Links for quick checking for version updates:</p> Package Version link GNU Autoconf version check GNU Autoconf-archive version check GNU Automake version check GNU Bison version check GNU libtool version check GNU M4 version check GNU make version check GNU sed version check Byacc version check CMake version check Flex version check Ninja version check Meson version check SCons version check NASM version check Yasm version check patchelf version check re2c version check GNU gperf version check GNU help2man version check Doxygen version check or version check xxd version check: part of vim <p>Not included at the moment:</p> <ul> <li>git (version check)   (due to OS dependencies not present on Eiger)</li> <li>pkg-config (version check):   Including our own pkg-config interfers with the pkg-config included with the Cray   PE and causes some configure processes to fail.</li> </ul>","boost":10},{"location":"b/buildtools/#easyconfigs","title":"EasyConfigs","text":"","boost":10},{"location":"b/buildtools/#notes","title":"Notes","text":"<ul> <li>CMake still requires an ncurses and OpenSSL library from the system.</li> <li>There are dependencies between those packages, so sometimes the order in the   EasyConfig file does matter and is chosen to use the newly installed tools   for the installation of some of the other tools in the bundle.</li> </ul>","boost":10},{"location":"b/buildtools/#2105-and-2106-the-same","title":"21.05 and 21.06 (the same)","text":"<ul> <li>Started development from an EasyCofig file in use at UAntwerpen 2020a version)</li> <li>We did add EBROOT and EBVERSION variables for all components for increased compatibility   with standard EasysBuild-generated modules (in case those variables would, e.g.,   be used in EasyBlocks for certain software packages).</li> <li>Added re2c and SCons to the bundle.</li> </ul>","boost":10},{"location":"b/buildtools/#2108-and-2109-the-same","title":"21.08 and 21.09 (the same)","text":"<ul> <li>Version update of all components to the most recent version as of 14 September    2021.</li> </ul>","boost":10},{"location":"b/buildtools/#2112","title":"21.12","text":"<ul> <li> <p>Version update of all components to the most recent version as of 4 February 2022.</p> </li> <li> <p>SCons 4.3 now builds without problems. (in 21.08 the 4.x branch was avoided). Downloads     changed to PyPi; SourceForge does no longer seem to contain the newest version.</p> </li> <li> <p>Added <code>xxd</code>, a hexadecimal editor that comes with <code>vim</code>, as it is a build dependency     for recent PLUMED versions. This ensures that the command will be present even if     <code>vim</code> would be deleted again from the system images.</p> </li> </ul>","boost":10},{"location":"b/buildtools/#2206","title":"22.06","text":"<ul> <li>Version updates of components.</li> </ul>","boost":10},{"location":"b/buildtools/#2208","title":"22.08","text":"<ul> <li> <p>Major change: Split into a -minimal version which is linked against the system      libraries but does not have all functionality (left out some tools that are not     needed in that version, and some commands, e.g., ccmake, are missing) and then the     full version which is linked against the static library package <code>syslibs</code> which     allows us to use <code>ncurses</code> and to minimize interference with other tools.</p> </li> <li> <p>Major change: A <code>-noPython</code> version that leaves out Meson and SCons as those require     Python and can interfer with software that needs a different version of Python.</p> </li> <li> <p>Some version updates.</p> </li> </ul>","boost":10},{"location":"b/buildtools/#2212-and-2303","title":"22.12 and 23.03","text":"<ul> <li> <p>Further implementation of the changes</p> <ul> <li> <p>Version that is used to bootstrap until we can build a proper <code>buildtools</code>      module now has the version suffix <code>-bootstrap</code>.</p> </li> <li> <p>The regular <code>buildtools</code> module no longer contains any Python-based tool that     require <code>PYTHONPATH</code> to be set due to interference with other tools that might     need a different version of Python.</p> </li> <li> <p>The separate <code>buildtools-python</code> modules provide the Python-based tools.</p> </li> </ul> </li> <li> <p>Otherwise just version updates of the packages used in 22.08.</p> </li> <li> <p>Note that we first tried with SCons 4.5.1 but that version was too new for some     other packages. Serf in syslibs, e.g., failed.</p> </li> </ul>","boost":10},{"location":"b/buildtools/#2309","title":"23.09","text":"<ul> <li> <p>Some components have been updated to the latest version, others (SCons and Meson) were kept     at the current version. Meson because it is the last version compatible with the system Python,     and SCons because we've had problems with other software at the previous update.</p> <p>Some packages also do not compile in newer versions on SUSE 15 as either the compiler is too old or the system Python is no longer supported.</p> </li> </ul>","boost":10},{"location":"b/buildtools/#2312","title":"23.12","text":"<ul> <li>Minimal version updates, only CMake was updated as there it is important to have the      latest.</li> </ul>","boost":10},{"location":"b/buildtools/#2403","title":"24.03","text":"<ul> <li>Total refresh of 23.12, except for those packages where newer versions offer compile problems     with the current system compiler on LUM&lt;I.</li> </ul>","boost":10},{"location":"b/buildtools/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig buildtools-21.06.eb, with module buildtools/21.06</p> </li> <li> <p>EasyConfig buildtools-21.08.eb, with module buildtools/21.08</p> </li> <li> <p>EasyConfig buildtools-21.09.eb, with module buildtools/21.09</p> </li> <li> <p>EasyConfig buildtools-21.12.eb, with module buildtools/21.12</p> </li> <li> <p>EasyConfig buildtools-22.06.eb, with module buildtools/22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"b/buildtools-python/","title":"buildtools-python","text":"<p>[package list]</p>","boost":10},{"location":"b/buildtools-python/#buildtools-python","title":"buildtools-python","text":"","boost":10},{"location":"b/buildtools-python/#user-documentation","title":"User documentation","text":"<p>The <code>buildtools-python</code> module is an add-on to the <code>buildtools</code> module providing some Python-based build tools. They have been put in a separate module as it turns out that there can be interference with other Python tools that use a different version of Python, so a specialised <code>buildtools-python</code> module would be needed in that case. The reason is that the tools included in this module don't include proper wrapper scripts or don't use any other technique to properly set the search path to the right Python libraries without using <code>PYTHONPATH</code>  which is not version-specific.</p> <p>The module contains:</p> <ul> <li>meson</li> <li>SCons</li> </ul>","boost":10},{"location":"b/buildtools-python/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider buildtools-python/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>buildtools-python/22.12-systemPython (EasyConfig: buildtools-python-22.12-systemPython.eb)</p> </li> <li> <p>buildtools-python/23.03-systemPython (EasyConfig: buildtools-python-23.03-systemPython.eb)</p> </li> <li> <p>buildtools-python/23.09-cray-python3.10 (EasyConfig: buildtools-python-23.09-cray-python3.10.eb)</p> </li> <li> <p>buildtools-python/23.09-systemPython (EasyConfig: buildtools-python-23.09-systemPython.eb)</p> </li> <li> <p>buildtools-python/23.12-cray-python3.11 (EasyConfig: buildtools-python-23.12-cray-python3.11.eb)</p> </li> <li> <p>buildtools-python/23.12-systemPython (EasyConfig: buildtools-python-23.12-systemPython.eb)</p> </li> <li> <p>buildtools-python/24.03-cray-python3.11 (EasyConfig: buildtools-python-24.03-cray-python3.11.eb)</p> </li> <li> <p>buildtools-python/24.03-systemPython (EasyConfig: buildtools-python-24.03-systemPython.eb)</p> </li> </ul>","boost":10},{"location":"b/buildtools-python/#technical-documentation","title":"Technical documentation","text":"","boost":10},{"location":"b/buildtools-python/#contents","title":"Contents","text":"<p>Links for quick checking for version updates:</p> Package Version link Meson version check SCons version check","boost":10},{"location":"b/buildtools-python/#easyconfigs","title":"EasyConfigs","text":"","boost":10},{"location":"b/buildtools-python/#2212-and-2303-and-2309-and-2312-and-2403","title":"22.12 and 23.03 and 23.09 and 23.12 and 24.03","text":"<ul> <li>Initial version directly derived from buildtools/22.08, leaving out all the     components that are already in buildtools/22.12 or 23.03.</li> </ul>","boost":10},{"location":"b/buildtools-python/#2309-cray-python310","title":"23.09-cray-python3.10","text":"<ul> <li>Newer versions of Meson, but needs cray-python to run.</li> </ul>","boost":10},{"location":"b/buildtools-python/#2312-cray-python311","title":"23.12-cray-python3.11","text":"<ul> <li>Stuck to the same versions of Meson and SCons as for 23.09 to minimize problems.</li> </ul>","boost":10},{"location":"b/buildtools-python/#2403-cray-python-11","title":"24.03-cray-python-11","text":"<ul> <li>Updated Meson and SCons to the latest versions at the time of development of the     EasyConfig.</li> </ul>","boost":10},{"location":"b/bzip2/","title":"bzip2","text":"<p>[package list]</p>","boost":10},{"location":"b/bzip2/#bzip2","title":"bzip2","text":"","boost":10},{"location":"b/bzip2/#license-information","title":"License information","text":"<p>The bzip2 package is copyrighted by its current maintainer. The conditions can be found at the top of the manual.</p> <p>The license is also available as <code>$EBROOTBZIP2/share/licenses/bzip2/LICENSE</code> after loading the module.</p>","boost":10},{"location":"b/bzip2/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"b/bzip2/#what-is-bzip2","title":"What is bzip2?","text":"<p>Bzip2 is a freely available, patent free, high-quality data compressor. It typically compresses files to within 10% to 15% of the best available techniques (the PPM family of statistical compressors), whilst being around twice as fast at compression and six times faster at decompression. It is based on the Burrows-Wheeler block-sorting text compression algorithm and Huffman coding.</p>","boost":10},{"location":"b/bzip2/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider bzip2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>bzip2/1.0.8-cpeAMD-22.08 (EasyConfig: bzip2-1.0.8-cpeAMD-22.08.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeAMD-22.12 (EasyConfig: bzip2-1.0.8-cpeAMD-22.12.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeAMD-23.09 (EasyConfig: bzip2-1.0.8-cpeAMD-23.09.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeAMD-23.12 (EasyConfig: bzip2-1.0.8-cpeAMD-23.12.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeAMD-24.03 (EasyConfig: bzip2-1.0.8-cpeAMD-24.03.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeAOCC-22.08 (EasyConfig: bzip2-1.0.8-cpeAOCC-22.08.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeAOCC-22.12 (EasyConfig: bzip2-1.0.8-cpeAOCC-22.12.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeAOCC-23.09 (EasyConfig: bzip2-1.0.8-cpeAOCC-23.09.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeAOCC-23.12 (EasyConfig: bzip2-1.0.8-cpeAOCC-23.12.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeAOCC-24.03 (EasyConfig: bzip2-1.0.8-cpeAOCC-24.03.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeCray-22.08 (EasyConfig: bzip2-1.0.8-cpeCray-22.08.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeCray-22.12 (EasyConfig: bzip2-1.0.8-cpeCray-22.12.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeCray-23.03 (EasyConfig: bzip2-1.0.8-cpeCray-23.03.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeCray-23.09 (EasyConfig: bzip2-1.0.8-cpeCray-23.09.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeCray-23.12 (EasyConfig: bzip2-1.0.8-cpeCray-23.12.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeCray-24.03 (EasyConfig: bzip2-1.0.8-cpeCray-24.03.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeGNU-22.08 (EasyConfig: bzip2-1.0.8-cpeGNU-22.08.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeGNU-22.12 (EasyConfig: bzip2-1.0.8-cpeGNU-22.12.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeGNU-23.09 (EasyConfig: bzip2-1.0.8-cpeGNU-23.09.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeGNU-23.12 (EasyConfig: bzip2-1.0.8-cpeGNU-23.12.eb)</p> </li> <li> <p>bzip2/1.0.8-cpeGNU-24.03 (EasyConfig: bzip2-1.0.8-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"b/bzip2/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>bzip2 home page at sourceware.org</p> </li> <li> <p>Old bzip2 home page</p> </li> <li> <p>bzip2 download site</p> </li> </ul>","boost":10},{"location":"b/bzip2/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>bzip2 support in the EasyBuilders repository</p> </li> <li> <p>bzip2 support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"b/bzip2/#version-108-from-cpe-2106-on","title":"Version 1.08 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is based on an EasyConfig and patch from the EasyBuilders     repository with additional documentation from UAntwerpen.</p> <p>The patch replaces work done with <code>postinstallcmds</code> in the CSCS EasyConfig.</p> <p>At the time of development, the patch used by the build recipes in the EasyBuilders repository contained a bug. The patch in this repository is already a corrected one and a bug report was submitted. We also modified the home page to a new one.</p> </li> <li> <p>Switched to the modified way of specifying checksums from 22.12 on.</p> </li> <li> <p>Added more license information from 23.12 on.</p> </li> </ul>","boost":10},{"location":"b/bzip2/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig bzip2-1.0.8-cpeAMD-21.06.eb, with module bzip2/1.0.8-cpeAMD-21.06</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeAOCC-21.12.eb, with module bzip2/1.0.8-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeAOCC-22.06.eb, with module bzip2/1.0.8-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeCray-21.06.eb, with module bzip2/1.0.8-cpeCray-21.06</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeCray-21.08.eb, with module bzip2/1.0.8-cpeCray-21.08</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeCray-21.12.eb, with module bzip2/1.0.8-cpeCray-21.12</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeCray-22.06.eb, with module bzip2/1.0.8-cpeCray-22.06</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeGNU-21.06.eb, with module bzip2/1.0.8-cpeGNU-21.06</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeGNU-21.08.eb, with module bzip2/1.0.8-cpeGNU-21.08</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeGNU-21.12.eb, with module bzip2/1.0.8-cpeGNU-21.12</p> </li> <li> <p>EasyConfig bzip2-1.0.8-cpeGNU-22.06.eb, with module bzip2/1.0.8-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/CDO/","title":"CDO","text":"<p>[package list]</p>","boost":10},{"location":"c/CDO/#cdo","title":"CDO","text":"","boost":10},{"location":"c/CDO/#license-information","title":"License information","text":"<p>CDO is open source and released under the  3-clause BSD License (BSD-3-Clause).</p> <p>After installation and loading the module a copy of the license is also available in the <code>$EBROOTCDO/share/licenses/CDO</code> directory.</p>","boost":10},{"location":"c/CDO/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider CDO/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig CDO-2.2.0-cpeCray-23.03.eb, will build CDO/2.2.0-cpeCray-23.03</p> </li> <li> <p>EasyConfig CDO-2.3.0-cpeCray-23.09.eb, will build CDO/2.3.0-cpeCray-23.09</p> </li> <li> <p>EasyConfig CDO-2.3.0-cpeGNU-23.09.eb, will build CDO/2.3.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig CDO-2.4.3-cpeCray-24.03.eb, will build CDO/2.4.3-cpeCray-24.03</p> </li> <li> <p>EasyConfig CDO-2.4.3-cpeGNU-24.03.eb, will build CDO/2.4.3-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"c/CDO/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>CDO home page</p> <ul> <li> <p>CDO downloads page</p> </li> <li> <p>Installation documentation in the full HTML documentation</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/CDO/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>CDO support in the EasyBuilders repository</p> </li> <li> <p>CDO support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"c/CDO/#version-1910-for-cpegnu-and-cpecray-2108","title":"Version 1.9.10 for cpeGNU and cpeCray 21.08","text":"<ul> <li> <p>The EasyConfig is a mix of the CSCS and EasyBuilders one. Specifically     the additional dependency on YAXT comes from the EasyBuilders version.</p> <ul> <li> <p>cURL, a build dependency according to the CSCS recipe, was moved to     the regular dependencies as the <code>cdo</code> executable links against it.</p> </li> <li> <p>The YAXT dependency (according to the EasyBuilders recipe) is left     out as it doesn't seem to be used according to the log file of the     build. This could be a leftover from an old version that used YAXT     instead of ecCodes?</p> </li> <li> <p>The grib_api library was not used as the configure script claims     GRIB support even when not including that library. In fact, checking     the ECMWF web site shows the functionality of GRIB-API is now covered     by ecCodes.</p> </li> <li> <p>Additional dependencies based on the configure script:</p> <ul> <li> <p>FFTW</p> </li> <li> <p>libxml2</p> </li> <li> <p>CMOR - Though it is not clear if that support will actually work.     It may require more data files and it is not clear where those should     be installed. We did find reports on the web that using CDO CMOR did     not work without certain additional files.</p> <p>We did need to use a trick to get CMOR to link in CDO as the configure script didn't add the json-c library when testing for the proper working of CMOR. So we added the options to link json-c to LDFLAGS. The path to the library was also included as otherwise the Fortran compiler cannot find it.</p> </li> </ul> </li> </ul> </li> <li> <p>Magics, the ECMWF     metheorological plotting software, is not yet integrated.</p> </li> <li> <p>As some dependencies do no compile with cpeAMD 21.08, there is only a     cpeGNU and cpeCray version.</p> </li> </ul>","boost":10},{"location":"c/CDO/#version-205-for-cpe-2112","title":"Version 2.0.5 for CPE 21.12","text":"<ul> <li> <p>So far a straigthforward port. Some features are not supported but we did not yet     look into them to see if it makes sense trying to get them working. In particular     the output of configure says that the HIRLAM extensions are not supported and that     no static CDI binary will be build.</p> </li> <li> <p>Compilation in cpeAOCC fails with link errors about a Fortran routine that is not     found.</p> </li> </ul>","boost":10},{"location":"c/CDO/#version-220-for-cpe-2212-and-later","title":"Version 2.2.0 for CPE 22.12 and later","text":"<ul> <li> <p>Straightforward port of the 2.0.5 EasyConfig, except for one element: we      needed to explicitly add <code>--enable-openmp</code> as the options to compile with OpenMP     are passed via the toolchainopts.</p> </li> <li> <p>Added a copy of the LICENSE file to the installation directories.</p> </li> </ul>","boost":10},{"location":"c/CDO/#version-230-for-cpe-2309-and-later","title":"Version 2.3.0 for CPE 23.09 and later","text":"<ul> <li>A straightforward port of the 2.2.0 EasyConfig.</li> </ul>","boost":10},{"location":"c/CDO/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig CDO-1.9.10-cpeCray-21.08.eb, with module CDO/1.9.10-cpeCray-21.08</p> </li> <li> <p>EasyConfig CDO-1.9.10-cpeGNU-21.08.eb, with module CDO/1.9.10-cpeGNU-21.08</p> </li> <li> <p>EasyConfig CDO-2.0.5-cpeCray-21.12.eb, with module CDO/2.0.5-cpeCray-21.12</p> </li> <li> <p>EasyConfig CDO-2.0.5-cpeCray-22.06.eb, with module CDO/2.0.5-cpeCray-22.06</p> </li> <li> <p>EasyConfig CDO-2.0.5-cpeCray-22.08.eb, with module CDO/2.0.5-cpeCray-22.08</p> </li> <li> <p>EasyConfig CDO-2.0.5-cpeGNU-21.12.eb, with module CDO/2.0.5-cpeGNU-21.12</p> </li> <li> <p>EasyConfig CDO-2.0.5-cpeGNU-22.06.eb, with module CDO/2.0.5-cpeGNU-22.06</p> </li> <li> <p>EasyConfig CDO-2.0.5-cpeGNU-22.08.eb, with module CDO/2.0.5-cpeGNU-22.08</p> </li> <li> <p>EasyConfig CDO-2.2.0-cpeCray-22.12.eb, with module CDO/2.2.0-cpeCray-22.12</p> </li> <li> <p>EasyConfig CDO-2.2.0-cpeGNU-22.12.eb, with module CDO/2.2.0-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/CGAL/","title":"CGAL","text":"<p>[package list]</p>","boost":10},{"location":"c/CGAL/#cgal","title":"CGAL","text":"","boost":10},{"location":"c/CGAL/#license-information","title":"License information","text":"<p>Since release 3.0, CGAL is available under an Open Source license as  well as a commercial license.  Users choosing to use CGAL under the free-of-charge Open Source license  have to comply to its terms, otherwise they have to buy a commercial license. The Open Source license is a combination of the LGPL v3+ and GPL v3+ licenses, with some components using the former and other components using the latter.</p> <p>The licensing conditions can be found on the CGAL web site.</p>","boost":10},{"location":"c/CGAL/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider CGAL/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig CGAL-4.12.2-cpeGNU-23.09-OpenFOAM.eb, will build CGAL/4.12.2-cpeGNU-23.09-OpenFOAM</li> </ul>","boost":10},{"location":"c/CGAL/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>It is intended as requirement for OpenFOAM</p> </li> <li> <p>CGAL home page</p> </li> </ul>","boost":10},{"location":"c/CGAL/#openfoam-specific-notes","title":"OpenFOAM specific notes","text":"<ul> <li> <p>Following suggestion from https://develop.openfoam.com/Development/openfoam/-/wikis/building     CGAL will normally need to be compiled without mpfr/gmp.</p> </li> <li> <p>For this reason <code>-DCGAL_DISABLE_MPFR=TRUE -DCGAL_DISABLE_GMP=TRUE</code> cmake options are in place.</p> </li> </ul>","boost":10},{"location":"c/CGAL/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>CGAL in the easybuilders repository</p> </li> <li> <p>CGAL in the CSCS repository</p> </li> </ul>","boost":10},{"location":"c/CGAL/#version-4122-openfoam","title":"Version 4.12.2 -OpenFOAM","text":"<ul> <li>The EasyConfig is mostly a LUST development with a version specifically tuned for      OpenFOAM.</li> </ul>","boost":10},{"location":"c/CGAL/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig CGAL-4.12.2-cpeGNU-21.08-OpenFOAM.eb, with module CGAL/4.12.2-cpeGNU-21.08-OpenFOAM</p> </li> <li> <p>EasyConfig CGAL-4.12.2-cpeGNU-21.12-OpenFOAM.eb, with module CGAL/4.12.2-cpeGNU-21.12-OpenFOAM</p> </li> <li> <p>EasyConfig CGAL-4.12.2-cpeGNU-22.06-OpenFOAM.eb, with module CGAL/4.12.2-cpeGNU-22.06-OpenFOAM</p> </li> <li> <p>EasyConfig CGAL-4.12.2-cpeGNU-22.08-OpenFOAM.eb, with module CGAL/4.12.2-cpeGNU-22.08-OpenFOAM</p> </li> <li> <p>EasyConfig CGAL-4.12.2-cpeGNU-22.12-OpenFOAM.eb, with module CGAL/4.12.2-cpeGNU-22.12-OpenFOAM</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/CMOR/","title":"CMOR","text":"<p>[package list]</p>","boost":10},{"location":"c/CMOR/#cmor","title":"CMOR","text":"","boost":10},{"location":"c/CMOR/#license-information","title":"License information","text":"<p>CMOR is licensed under the BSD 3-Clause License. The text can be found in the CMOR GitHub.</p> <p>After installation and loading of the module a copy of the LICENSE file is also available in <code>$EBROOTCMOR/share/licenses/CMOR</code>.</p>","boost":10},{"location":"c/CMOR/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider CMOR/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig CMOR-3.7.2-cpeCray-23.03.eb, will build CMOR/3.7.2-cpeCray-23.03</p> </li> <li> <p>EasyConfig CMOR-3.7.3-cpeCray-23.09.eb, will build CMOR/3.7.3-cpeCray-23.09</p> </li> <li> <p>EasyConfig CMOR-3.7.3-cpeGNU-23.09.eb, will build CMOR/3.7.3-cpeGNU-23.09</p> </li> <li> <p>EasyConfig CMOR-3.8.0-cpeCray-24.03.eb, will build CMOR/3.8.0-cpeCray-24.03</p> </li> <li> <p>EasyConfig CMOR-3.8.0-cpeGNU-24.03.eb, will build CMOR/3.8.0-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"c/CMOR/#technical-documentation","title":"Technical documentation","text":"<p>This is currently an experimental build. It is not clear if the package is complete. Use at your own risk.</p> <ul> <li> <p>CMOR web site</p> </li> <li> <p>CMOR on GitHub</p> <ul> <li> <p>CMOR GitHub releases</p> </li> <li> <p>CMOR GitHub tags - there are more than there are releases</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/CMOR/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for CMOR in the EasyBuilders repository</p> </li> <li> <p>There is no support for CMOR in the CSCS repository</p> </li> <li> <p>CMOR support in Spack</p> </li> </ul>","boost":10},{"location":"c/CMOR/#version-361-for-cpe-2108-2112-2206-2208","title":"Version 3.6.1 for CPE 21.08, 21.12, 22.06, 22.08","text":"<ul> <li> <p>Developed our own ConfigureMake-based EasyConfig file by analysing the     Spack example and the configure script.</p> </li> <li> <p>Fortran support does not work with the cpeCray toolchain.</p> </li> <li> <p>Python and cdat support are currently not enabled.</p> </li> </ul>","boost":10},{"location":"c/CMOR/#version-372-for-cpe-2212-2303","title":"Version 3.7.2 for CPE 22.12, 23.03","text":"<ul> <li> <p>Trivial port of the 3.6.1 EasyConfig.</p> </li> <li> <p>Added a copy of the LICENSE file to the installation.</p> </li> <li> <p>Just as for 3.6.1, python and cdat support are not enabled.</p> </li> <li> <p>In the cpeCray version the Fortran interfaces are still disabled.</p> </li> </ul>","boost":10},{"location":"c/CMOR/#version-373-from-cpe-2309-on","title":"Version 3.7.3 from CPE 23.09 on","text":"<ul> <li>Trivial port of the 3.7.3 EasyConfig, though according to the release notes     several bugs have been fixed.</li> </ul>","boost":10},{"location":"c/CMOR/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig CMOR-3.6.1-cpeAOCC-21.12.eb, with module CMOR/3.6.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig CMOR-3.6.1-cpeCray-21.08.eb, with module CMOR/3.6.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig CMOR-3.6.1-cpeCray-21.12.eb, with module CMOR/3.6.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig CMOR-3.6.1-cpeCray-22.06.eb, with module CMOR/3.6.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig CMOR-3.6.1-cpeCray-22.08.eb, with module CMOR/3.6.1-cpeCray-22.08</p> </li> <li> <p>EasyConfig CMOR-3.6.1-cpeGNU-21.08.eb, with module CMOR/3.6.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig CMOR-3.6.1-cpeGNU-21.12.eb, with module CMOR/3.6.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig CMOR-3.6.1-cpeGNU-22.06.eb, with module CMOR/3.6.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig CMOR-3.6.1-cpeGNU-22.08.eb, with module CMOR/3.6.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig CMOR-3.7.2-cpeCray-22.12.eb, with module CMOR/3.7.2-cpeCray-22.12</p> </li> <li> <p>EasyConfig CMOR-3.7.2-cpeGNU-22.12.eb, with module CMOR/3.7.2-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/COSMA/","title":"COSMA","text":"<p>[package list]</p>","boost":10},{"location":"c/COSMA/#cosma","title":"COSMA","text":"","boost":10},{"location":"c/COSMA/#license-information","title":"License information","text":"<p>COSMA is released under a BSD 3-Clause \"New\"or \"Revbised\" License a copy of which can be found in the LICENSE file in the COSMA GitHub repository.</p>","boost":10},{"location":"c/COSMA/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider COSMA/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig COSMA-2.6.6-cpeGNU-23.09-rocm.eb, will build COSMA/2.6.6-cpeGNU-23.09-rocm</p> </li> <li> <p>EasyConfig COSMA-2.6.6-cpeGNU-23.12-rocm.eb, will build COSMA/2.6.6-cpeGNU-23.12-rocm</p> </li> <li> <p>EasyConfig COSMA-2.6.6-cpeGNU-24.03-CPU.eb, will build COSMA/2.6.6-cpeGNU-24.03-CPU</p> </li> <li> <p>EasyConfig COSMA-2.6.6-cpeGNU-24.03-rocm.eb, will build COSMA/2.6.6-cpeGNU-24.03-rocm</p> </li> </ul>","boost":10},{"location":"c/COSMA/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>COSMA on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"c/COSMA/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for COSMA in the EasyBuilders repository</p> </li> <li> <p>There is no support for COSMA in the CSCS repository</p> </li> <li> <p>cosma support in Spack</p> </li> </ul>","boost":10},{"location":"c/COSMA/#version-262-for-cpegnu-in-2208-and-2212-with-gpu-support","title":"Version 2.6.2 for cpeGNU in 22.08 and 22.12 with GPU support","text":"<ul> <li>The EasyConfig is a LUST development.</li> </ul>","boost":10},{"location":"c/COSMA/#version-266-with-gpu-support-for-cpegnu-in-2309-2312-and-2403","title":"Version 2.6.6 with GPU support for cpeGNU in 23.09, 23.12 and 24.03","text":"<ul> <li>Trivial port of the 2.6.2 EasyConfig with GPU support.</li> </ul>","boost":10},{"location":"c/COSMA/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig COSMA-2.6.2-cpeGNU-22.08.eb, with module COSMA/2.6.2-cpeGNU-22.08</p> </li> <li> <p>EasyConfig COSMA-2.6.2-cpeGNU-22.12-CPU.eb, with module COSMA/2.6.2-cpeGNU-22.12-CPU</p> </li> <li> <p>EasyConfig COSMA-2.6.6-cpeGNU-22.12-CPU.eb, with module COSMA/2.6.6-cpeGNU-22.12-CPU</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/CP2K/","title":"CP2K","text":"<p>[package list]</p>","boost":10},{"location":"c/CP2K/#cp2k","title":"CP2K","text":"","boost":10},{"location":"c/CP2K/#license-information","title":"License information","text":"<p>The source of CP2K is open and freely available for everybody under  the GPL license.</p> <p>(See also the LICENSE file in the CP2K GitHub.)</p>","boost":10},{"location":"c/CP2K/#user-documentation","title":"User documentation","text":"<p>CP2K is a CP2K is a quantum chemistry and solid state physics software package that can perform atomistic simulations of solid state, liquid, molecular, periodic, material, crystal, and biological systems. In general, it runs well on LUMI-C and several of the simulation methods such as LS-DFT and RPA calculations can utilize the GPUs on LUMI-G with some speed-up.</p>","boost":10},{"location":"c/CP2K/#installing-cp2k","title":"Installing CP2K","text":"<p>We provide automatic installation scripts for several versions of CP2K. In general, the installation procedure is described on the EasyBuild page.  For example, the step by step procedure for installing CP2K 2024.2 with ROCm  support is:</p> <ol> <li>Load the LUMI software environment: <code>module load LUMI/24.03</code>.</li> <li>Select the LUMI-G partition: <code>module load partition/G</code>.</li> <li>Load the EasyBuild module: <code>module load EasyBuild-user</code>.</li> </ol> <p>Then you can run the install command</p> <pre><code>$ eb -r CP2K-2024.2-cpeGNU-24.03-rocm.eb\n</code></pre> <p>The installation process is quite slow. It can take up to 1 hour to compile everything, but afterwards, you will have a module called  <code>CP2K/2024.2-cpeGNU-24.03-rocm</code> installed in your home directory. Load the  module to use it:</p> <pre><code>$ module load CP2K/2024.2-cpeGNU-24.03-rocm\n</code></pre> <p>The  CP2K binary <code>cp2k.psmp</code> will now be in your <code>PATH</code>. Launch CP2K via the  Slurm scheduler,  e.g. <code>srun cp2k.psmp</code>. Please note that you must do <code>module load LUMI/24.03 partition/G</code> to see the CP2K module in the module system. The same applies to the Slurm batch scripts which you send to the compute nodes.</p> <p>You can see other versions of CP2K that can be automatically installed in the same way by running the EasyBuild command</p> <pre><code>$ eb -S CP2K\n</code></pre> <p>or by checking the list further down this page  or by checking the LUMI-EasyBuild-contrib repository on GitHub directly.</p> <p>We build the CP2K executables with bindings to several external libraries activated: currently COSMA, SpLA, SpFFT, spglib, HDF5, LibXSMM, LibXC, FFTW3, Libvori and hipFFT+hipBLAS from ROCm. </p>","boost":10},{"location":"c/CP2K/#example-batch-scripts","title":"Example batch scripts","text":"<p>A typical CP2K batch job using 4 compute nodes on LUMI-C with 2 OpenMP thread per rank:</p> <pre><code>#!/bin/bash\n#SBATCH -J H2O\n#SBATCH -N 4\n#SBATCH --partition=small\n#SBATCH -t 00:10:00\n#SBATCH --mem=200G\n#SBATCH --exclusive --no-requeue\n#SBATCH -A project_465000XXX\n#SBATCH --ntasks-per-node=64\n#SBATCH -c 2\n\nexport OMP_PLACES=cores\nexport OMP_PROC_BIND=close\nexport OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK}\n\nmodule load LUMI/24.03\nmodule load partition/C\nmodule load CP2K/2024.2-cpeGNU-23.04-CPU\nsrun cp2k.psmp -i H2O-256.inp -o H2O-256.out\n</code></pre> <p>Running on LUMI-G requires careful process bindning to CPU and GPUs. Here, we  run a batch job on 4 LUMI-G compute nodes with 8 MPI ranks (1 per GPU) and 6  OpenMP threads per rank.</p> <pre><code>#!/bin/bash\n#SBATCH -J lsdft\n#SBATCH -p small-g\n#SBATCH -A project_465000XXX\n#SBATCH --time=00:30:00\n#SBATCH --nodes=4\n#SBATCH --gres=gpu:8\n#SBATCH --exclusive\n#SBATCH --ntasks-per-node=8\n#SBATCH --cpus-per-task=6\n\nexport OMP_PLACES=cores\nexport OMP_PROC_BIND=close\nexport OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK}\n\nulimit -s unlimited\nexport OMP_STACKSIZE=512M\n\nexport MPICH_OFI_NIC_POLICY=GPU\nexport MPICH_GPU_SUPPORT_ENABLED=1\n\nmodule load LUMI/24.03\nmodule load partition/G\nmodule load CP2K/2024.2-cpeGNU-24.03-rocm\n\nsrun --cpu-bind=mask_cpu:7e000000000000,7e00000000000000,7e0000,7e000000,7e,7e00,7e00000000,7e0000000000 ./select_gpu.sh cp2k.psmp -i H2O-dft-ls.inp -o H2O-dft-ls.out\n</code></pre> <p>The <code>select_gpu.sh</code> helper script is useful to get the GPU to CPU binding correct on LUMI.</p> <pre><code>$ cat select_gpu.sh \n#!/bin/bash\n\nexport ROCR_VISIBLE_DEVICES=$SLURM_LOCALID\nexec $*\n</code></pre> <p>This script is useful for many applications using GPU on LUMI, not only CP2K.</p>","boost":10},{"location":"c/CP2K/#tuning-recommendations","title":"Tuning recommendations","text":"<ul> <li>In general, try to use parallelization using both MPI and OpenMP. Use at least   <code>OMP_NUM_THREADS=2</code>, and when running larger jobs (say more than 16 compute   nodes), it often faster with <code>OMP_NUM_THREADS=4/8</code>.</li> <li>When running on LUMI-G, run using 8 MPI ranks per compute node, where each   rank has access to 1 GPU in the same NUMA zone. This also means that you have   to <code>OMP_NUM_THREADS=6-7</code> to utilize all CPU cores. Please note that using all   64 cores will not work as the first core in each CCD is reserved for the   operating system, so that only 56 cores are available.</li> </ul>","boost":10},{"location":"c/CP2K/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider CP2K/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig CP2K-2024.1-cpeGNU-23.09-rocm.eb, will build CP2K/2024.1-cpeGNU-23.09-rocm</p> <p>CP2K 2024.1 release compiled with AMD GPU support enabled for CP2K  itself and several of the libraries (SpFFT, SpLA). Cray Programming  Environment 23.09.</p> </li> <li> <p>EasyConfig CP2K-2024.2-cpeGNU-24.03-CPU.eb, will build CP2K/2024.2-cpeGNU-24.03-CPU</p> <p>CP2K 2024.2 release compiled for CPU with PLUMED.</p> <p>Switched to PLUMED 2.9.3 in February 2025 after reports of problems with 2.9.2.</p> </li> <li> <p>EasyConfig CP2K-2024.2-cpeGNU-24.03-libcp2k-CPU.eb, will build CP2K/2024.2-cpeGNU-24.03-libcp2k-CPU</p> <p>CP2K 2024.2 release compiled for CPU with PLUMED and also generating the libcp2k library.</p> <p>Switched to PLUMED 2.9.3 in February 2025 after reports of problems with 2.9.2.</p> </li> <li> <p>EasyConfig CP2K-2024.2-cpeGNU-24.03-rocm.eb, will build CP2K/2024.2-cpeGNU-24.03-rocm</p> <p>CP2K 2024.1 release compiled with AMD GPU support enabled for CP2K  itself and several of the libraries (SpFFT, SpLA). Cray Programming  Environment 23.09.</p> </li> </ul>","boost":10},{"location":"c/CP2K/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>CP2K web site</p> </li> <li> <p>CP2K on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"c/CP2K/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>CP2K in the CSCS repository</p> </li> <li> <p>CP2K in the EasyBuilders repository</p> </li> </ul>","boost":10},{"location":"c/CP2K/#brief-descriptions-of-available-easyconfigs","title":"Brief descriptions of available EasyConfigs","text":"<ul> <li><code>CP2K-9.1-cpeGNU-21.08.eb</code>: The EasyConfig file is a direct port of the CSCS one.</li> <li><code>CP2K-9.1-cpeGNU-21.12.eb</code>: Same as above, but compiled with Cray Programming Environment 21.12.      No signficiant performance difference observed. Links to a newer ELPA version (2021.11.001).</li> <li><code>CP2K-2022.1-cpeGNU-22.08.eb</code>: CP2K 2022.1 released compiled with Cray Programming Environment 22.08,      built with PLUMED 2.8.0, Libxc 5.2.2, and Libvori 220621.</li> <li><code>CP2K-2023.1-cpeGNU-22.08-GPU.eb</code>: CP2K 2023.1 release compiled with AMD GPU support enabled for CP2K      itself and several of the libraries (SpFFT, SpLA). Cray Programming Environment 22.08 used together with      the unsupported <code>rocm/5.3.3</code> module installed by the LUMI Support Team, as CP2K requires at ROCm 5.3.3.</li> <li><code>CP2K-2023.1-cpeGNU-22.12-CPU.eb</code>: A CPU-only build of CP2K release 2023.1 compiled with the GNU compilers     and with support for PLUMED.</li> <li><code>CP2K-2023.2-cpeGNU-22.12-CPU.eb</code>: A CPU-only build of CP2K release 2023.2 compiled with the GNU compilers     and with support for PLUMED.</li> <li><code>CP2K-2024.1-cpeGNU-23.09-GPU.eb</code>: CP2K 2024.1 release compiled with AMD GPU support enabled for CP2K      itself and several of the libraries (SpFFT, SpLA). Cray Programming Environment 23.09 used together with      the unsupported <code>rocm/5.6.1</code> module installed by the LUMI Support Team.</li> </ul>","boost":10},{"location":"c/CP2K/#version-20242-with-libcp2k","title":"Version 2024.2 with libcp2k","text":"<ul> <li> <p>Build instructions in the CP2K manual</p> <p>It turns out that one needs to build this option after doing the regular build, and <code>make all libcp2k</code> to do it in a single step, cannot be done. Since a two-phase build is no option either as the second build starts clean, the solution is to play with buildopts and add the second make command as <code>&amp;&amp; make ARCH=LUMIC-20242 VERSION={local_buildtype} libcp2k</code>.</p> </li> <li> <p>The <code>libcp2k.pc</code> file is completely broken. CP2K does not have a proper <code>make install</code>     script but really assumes an in-place build. Hence all directories set in the .pc file     are wrong and refer to the EasyBuild build directory. The <code>Libs:</code> field is completely      off and contains even compiler options and not just options for the linker.</p> <p>We've tried to fix this through edits of the <code>libcp2k.pc</code> file. However, if the list of dependencies changes, this bit of code in <code>postinstallcmds</code> will have to be checked again.</p> </li> </ul> <p>TODO: It likely does no harm to simply always include the <code>libcp2k</code> library rather than having two EasyConfigs, one with and one without, so we may simply integrate the support for future toolchains.</p>","boost":10},{"location":"c/CP2K/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig CP2K-2022.1-cpeGNU-22.08.eb, with module CP2K/2022.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig CP2K-2023.1-cpeGNU-22.08-GPU.eb, with module CP2K/2023.1-cpeGNU-22.08-GPU</p> </li> <li> <p>EasyConfig CP2K-2023.1-cpeGNU-22.12-CPU.eb, with module CP2K/2023.1-cpeGNU-22.12-CPU</p> </li> <li> <p>EasyConfig CP2K-2023.2-cpeGNU-22.12-CPU.eb, with module CP2K/2023.2-cpeGNU-22.12-CPU</p> </li> <li> <p>EasyConfig CP2K-9.1-cpeGNU-21.08.eb, with module CP2K/9.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig CP2K-9.1-cpeGNU-21.12.eb, with module CP2K/9.1-cpeGNU-21.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/CUDA/","title":"CUDA","text":"<p>[package list]</p>","boost":10},{"location":"c/CUDA/#cuda","title":"CUDA","text":"","boost":10},{"location":"c/CUDA/#license-information","title":"License information","text":"<p>The CUDA end user license is available on the \"End User License Agreement\" in the CUDA documentation.</p> <p>After loading the module, the license is also available in the file  <code>$EBROOTCUDA/EULA.txt</code> or in the usual location, <code>$EBROOTCUDA/share/licenses/CUDA</code>.</p>","boost":10},{"location":"c/CUDA/#user-documentation","title":"User documentation","text":"<p>The <code>CUDA</code> module is provided so that visualisation packages that need CUDA can be  compiled on the login nodes and wouldn't need to be compiled on the visualisation nodes. This is also because packages for the central software stack (and we do offer some  that need CUDA to reduce compilation time of user-installable packages) can only be compiled on a special login node due to the underlying distribution mechanism of the software stack.</p> <p>The <code>CUDA</code> module and the visualisation nodes should only be used for visualisation software.  They are not meant to be used with other software that uses CUDA for compute.</p>","boost":10},{"location":"c/CUDA/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider CUDA/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>CUDA/12.2.2 (EasyConfig: CUDA-12.2.2.eb)</li> </ul>","boost":10},{"location":"c/CUDA/#technical-documentation","title":"Technical documentation","text":"<p>This module is provided to ensure that we can compile software for <code>partition/D</code> on the special software installation node and maintain the software stack.</p> <ul> <li>CUDA home page</li> </ul>","boost":10},{"location":"c/CUDA/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>CUDA support in the EasyBuilders repository</p> </li> <li> <p>CUDA support in the CSCS repository</p> </li> <li> <p>cuda package in Spack</p> </li> </ul>","boost":10},{"location":"c/CUDA/#version-1222-used-in-2403","title":"Version 12.2.2, used in 24.03","text":"<ul> <li>The EasyConfig is a direct port of the EasyBuilders one.</li> </ul>","boost":10},{"location":"c/Catalyst/","title":"Catalyst","text":"<p>[package list]</p>","boost":10},{"location":"c/Catalyst/#catalyst","title":"Catalyst","text":"","boost":10},{"location":"c/Catalyst/#license-information","title":"License information","text":"<p>The Catalyst license can be found in the <code>License.txt</code> file in the Catalyst GitLab.</p> <p>This information is also available in the <code>$EBROOTCATALYST/share/licenses/Catalyst</code> subdirectory after installing and loading  the module.</p>","boost":10},{"location":"c/Catalyst/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Catalyst/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig Catalyst-2.0.0-cpeGNU-24.03.eb, will build Catalyst/2.0.0-cpeGNU-24.03</li> </ul>","boost":10},{"location":"c/Catalyst/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Catalyst on the kitware GitLab</p> <ul> <li>GitLab releases</li> </ul> </li> </ul>","boost":10},{"location":"c/Catalyst/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for Catalyst in the EasyBuilders repository.</p> </li> <li> <p>Support for Catalyst in the CSCS repository</p> </li> <li> <p>Support for Catalyst in the JSC repository</p> </li> <li> <p>libcatalyst package in Spack</p> </li> </ul>","boost":10},{"location":"c/Catalyst/#version-200-for-cpegnu2403","title":"Version 2.0.0 for cpeGNU/24.03","text":"<ul> <li>The EasyConfig is derived from the JSC ones with changes for LUMI.</li> </ul>","boost":10},{"location":"c/Celerity/","title":"Celerity","text":"<p>[package list]</p>","boost":10},{"location":"c/Celerity/#celerity","title":"Celerity","text":"","boost":10},{"location":"c/Celerity/#license-information","title":"License information","text":"<p>Celerity is licensed under the MIT license. See the LICENSE file in the GitHub repository.</p>","boost":10},{"location":"c/Celerity/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Celerity/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig Celerity-0.6.0-cpeAMD-24.03.eb, will build Celerity/0.6.0-cpeAMD-24.03</li> </ul>","boost":10},{"location":"c/Celerity/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Celerity (runtime) on GitHub </li> </ul>","boost":10},{"location":"c/Celerity/#easybuild","title":"EasyBuild","text":"<ul> <li>There is no support for Celerity in the EasyBuilders repository.</li> <li>There is no support for Celerity in the CSCS repository.</li> </ul>","boost":10},{"location":"c/Celerity/#release-060-for-cpe-2403","title":"Release 0.6.0 for CPE 24.03","text":"<ul> <li>Rely on:</li> <li>cpeAMD EasyBuild toolchain</li> <li>AdaptiveCpp 24.10.0 with ROCm 6.0.3</li> <li>The recipe relies on ROCm LLVM entirely.</li> </ul>","boost":10},{"location":"c/Charm%2B%2B/","title":"Charm++","text":"<p>[package list]</p>","boost":10},{"location":"c/Charm%2B%2B/#charm","title":"Charm++","text":"","boost":10},{"location":"c/Charm%2B%2B/#license-information","title":"License information","text":"<p>Charm++ and associated software are licensed under the  Charm++/Converse License.</p> <p>Note in particular that the license forbits use of Software or Software  derivative works for internal commercial purposes.</p>","boost":10},{"location":"c/Charm%2B%2B/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Charm++/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Charm++-6.10.2-cpeGNU-23.09-MPI.eb, will build Charm++/6.10.2-cpeGNU-23.09-MPI</p> </li> <li> <p>EasyConfig Charm++-7.0.0-cpeAMD-23.09-multicore.eb, will build Charm++/7.0.0-cpeAMD-23.09-multicore</p> </li> <li> <p>EasyConfig Charm++-8.0.0-cpeGNU-24.03-mpi-crayshasta-smp.eb, will build Charm++/8.0.0-cpeGNU-24.03-mpi-crayshasta-smp</p> </li> <li> <p>EasyConfig Charm++-8.0.0-cpeGNU-24.03-mpi-crayshasta.eb, will build Charm++/8.0.0-cpeGNU-24.03-mpi-crayshasta</p> </li> <li> <p>EasyConfig Charm++-8.0.0-cpeGNU-24.03-multicore.eb, will build Charm++/8.0.0-cpeGNU-24.03-multicore</p> </li> <li> <p>EasyConfig Charm++-8.0.0-cpeGNU-24.03-ofi-crayshasta.eb, will build Charm++/8.0.0-cpeGNU-24.03-ofi-crayshasta</p> </li> </ul>","boost":10},{"location":"c/Charm%2B%2B/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Charm++ Website</li> </ul>","boost":10},{"location":"c/Charm%2B%2B/#general-information","title":"General information","text":"<p>Charm++ is a parallel programming framework in C++ supported by an adaptive  runtime system, which enhances user productivity and allows programs to run  portably from small multicore computers (your laptop) to the largest supercomputers.</p>","boost":10},{"location":"c/Charm%2B%2B/#easybuild","title":"EasyBuild","text":"<ul> <li>Charm++ in the CSCS repository</li> </ul>","boost":10},{"location":"c/Charm%2B%2B/#version-6102-for-cpe-gnu-2108","title":"Version 6.10.2 for CPE GNU 21.08","text":"<ul> <li>The EasyConfig is derived from the CSCS one</li> </ul>","boost":10},{"location":"c/Charm%2B%2B/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Charm++-6.10.2-cpeGNU-21.08-MPI.eb, with module Charm++/6.10.2-cpeGNU-21.08-MPI</p> </li> <li> <p>EasyConfig Charm++-6.10.2-cpeGNU-21.12-MPI.eb, with module Charm++/6.10.2-cpeGNU-21.12-MPI</p> </li> <li> <p>EasyConfig Charm++-6.10.2-cpeGNU-22.08-MPI.eb, with module Charm++/6.10.2-cpeGNU-22.08-MPI</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/Conduit/","title":"Conduit","text":"<p>[package list]</p>","boost":10},{"location":"c/Conduit/#conduit","title":"Conduit","text":"","boost":10},{"location":"c/Conduit/#license-information","title":"License information","text":"<p>Conduit is licensed under the BSD 3-Clause license. The license information can be found in the <code>COPYRIGHT</code> file and the  <code>LICENSE</code> file in the Conduit GitHub repository.</p> <p>These files also available in <code>$EBROOTCONDUIT/share/licenses/Conduit</code> after installing and loading the module.</p>","boost":10},{"location":"c/Conduit/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Conduit/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig Conduit-0.9.2-cpeGNU-24.03.eb, will build Conduit/0.9.2-cpeGNU-24.03</li> </ul>","boost":10},{"location":"c/Conduit/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Conduit homepage</p> </li> <li> <p>Conduit on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"c/Conduit/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for Conduit in the EasyBuilders repository</p> </li> <li> <p>Conduit in the CSCS repository</p> </li> <li> <p>Conduit in the JSC repository</p> </li> <li> <p>conduit package in Spack</p> </li> </ul>","boost":10},{"location":"c/Conduit/#version-092-for-cpegnu2403","title":"Version 0.9.2 for cpeGNU/24.03","text":"<ul> <li>The EasyConfig is largely a LUST development.</li> </ul>","boost":10},{"location":"c/CppUnit/","title":"CppUnit","text":"<p>[package list]</p>","boost":10},{"location":"c/CppUnit/#cppunit","title":"CppUnit","text":"","boost":10},{"location":"c/CppUnit/#license-information","title":"License information","text":"<p>CppUnit is licensed under the GNU Lesser General Public License Version 2.1, a copy of which can be found in the COPYING file in the git repository of CppUnit.</p>","boost":10},{"location":"c/CppUnit/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider CppUnit/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig CppUnit-1.15.1-cpeAMD-23.09.eb, will build CppUnit/1.15.1-cpeAMD-23.09</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeAMD-24.03.eb, will build CppUnit/1.15.1-cpeAMD-24.03</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeAOCC-23.09.eb, will build CppUnit/1.15.1-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeAOCC-24.03.eb, will build CppUnit/1.15.1-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeCray-23.09.eb, will build CppUnit/1.15.1-cpeCray-23.09</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeCray-24.03.eb, will build CppUnit/1.15.1-cpeCray-24.03</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeGNU-23.09.eb, will build CppUnit/1.15.1-cpeGNU-23.09</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeGNU-24.03.eb, will build CppUnit/1.15.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"c/CppUnit/#technical-documentation","title":"Technical documentation","text":"<ul> <li>CppUnit web site</li> </ul>","boost":10},{"location":"c/CppUnit/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>CppUnit support in the EasyBuilders repository</p> </li> <li> <p>There is no support for CppUnit in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"c/CppUnit/#version-1151-for-cpe-2112-and-later","title":"Version 1.15.1 for CPE 21.12 and later","text":"<ul> <li> <p>This is a direct port of the EasyBuilders version but with enhanced     sanity checks.</p> </li> <li> <p>The one binary has no options to easily test.</p> </li> </ul>","boost":10},{"location":"c/CppUnit/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig CppUnit-1.15.1-cpeAOCC-22.08.eb, with module CppUnit/1.15.1-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeCray-22.06.eb, with module CppUnit/1.15.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeCray-22.08.eb, with module CppUnit/1.15.1-cpeCray-22.08</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeGNU-21.12.eb, with module CppUnit/1.15.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeGNU-22.06.eb, with module CppUnit/1.15.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig CppUnit-1.15.1-cpeGNU-22.08.eb, with module CppUnit/1.15.1-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/CuPy/","title":"CuPy","text":"<p>[package list]</p>","boost":10},{"location":"c/CuPy/#cupy","title":"CuPy","text":"","boost":10},{"location":"c/CuPy/#license-information","title":"License information","text":"<p>CuPy is licensed under the MIT License.  Specific information is available in the LICENSE file in the CuPy GitHub.</p>","boost":10},{"location":"c/CuPy/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider CuPy/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig CuPy-12.2.0-cpeGNU-23.09-rocm.eb, will build CuPy/12.2.0-cpeGNU-23.09-rocm</p> </li> <li> <p>EasyConfig CuPy-12.2.0-cpeGNU-24.03-rocm.eb, will build CuPy/12.2.0-cpeGNU-24.03-rocm</p> </li> <li> <p>EasyConfig CuPy-13.2.0-cpeGNU-24.03-rocm.eb, will build CuPy/13.2.0-cpeGNU-24.03-rocm</p> </li> <li> <p>EasyConfig CuPy-13.2.0-cpeGNU-24.03-rocm6.2.2.eb, will build CuPy/13.2.0-cpeGNU-24.03-rocm6.2.2</p> <p>Version specifically with ROCm 6.2.2 as that solves some FFT-related issues when used with GPAW. </p> </li> <li> <p>EasyConfig CuPy-13.4.1-cpeGNU-24.03-rocm-6.2.2.eb, will build CuPy/13.4.1-cpeGNU-24.03-rocm-6.2.2</p> </li> </ul>","boost":10},{"location":"c/CuPy/#technical-documentation","title":"Technical documentation","text":"<p>CuPy is a NumPy/SciPy-compatible array library for GPU-accelerated computing with Python. CuPy acts as a drop-in replacement to run existing NumPy/SciPy code on NVIDIA CUDA or AMD ROCm platforms.</p> <ul> <li> <p>CuPy web site</p> </li> <li> <p>CuPy on PyPi</p> </li> <li> <p>CuPy on gitHub</p> </li> </ul>","boost":10},{"location":"c/CuPy/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>CuPy support in the EasyBuilders repository</p> </li> <li> <p>There is no support for CuPy in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"c/CuPy/#version-1100-for-cpegnu-2208-archived","title":"Version 11.0.0 for cpeGNU 22.08 (archived)","text":"<ul> <li>The EasyConfig is an internal development of LUST.</li> </ul>","boost":10},{"location":"c/CuPy/#version-1220-and-1320-for-cpe-2403","title":"Version 12.2.0 and 13.2.0 for CPE 24.03","text":"<ul> <li> <p>Need a patch in order to support ROCm 6.0</p> </li> <li> <p>Version with ROCm 6.2.2 as that solves some FFT issues that affect GPAW.</p> </li> </ul>","boost":10},{"location":"c/CuPy/#version-1341-for-cpe-2403","title":"Version 13.4.1 for CPE 24.03","text":"<ul> <li>Supports ROCm 6.</li> <li>Requires Cython 3 (not available in cray-python).</li> </ul>","boost":10},{"location":"c/CuPy/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig CuPy-11.0.0-cpeGNU-22.08.eb, with module CuPy/11.0.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig CuPy-12.2.0-cpeGNU-22.09-rocm-5.2.3.eb, with module CuPy/12.2.0-cpeGNU-22.09-rocm-5.2.3</p> </li> <li> <p>EasyConfig CuPy-12.2.0-cpeGNU-22.12.eb, with module CuPy/12.2.0-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/CubeLib/","title":"CubeLib","text":"<p>[package list]</p>","boost":10},{"location":"c/CubeLib/#cubelib","title":"CubeLib","text":"","boost":10},{"location":"c/CubeLib/#license-information","title":"License information","text":"<p>The CubeLib license agreement can be found  on the Scalasca web site. It is partly a BSD-style license, but there are third party components included with their own licenses.</p> <p>From version 4.9 on, the license information can also be found in <code>$EBROOTCUBELIB/share/licenses/CubeLib</code> after installing and loading the module.</p>","boost":10},{"location":"c/CubeLib/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider CubeLib/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig CubeLib-4.8.2-cpeAMD-23.09.eb, will build CubeLib/4.8.2-cpeAMD-23.09</p> </li> <li> <p>EasyConfig CubeLib-4.8.2-cpeAMD-24.03.eb, will build CubeLib/4.8.2-cpeAMD-24.03</p> </li> <li> <p>EasyConfig CubeLib-4.8.2-cpeAOCC-23.09.eb, will build CubeLib/4.8.2-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig CubeLib-4.8.2-cpeAOCC-24.03.eb, will build CubeLib/4.8.2-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig CubeLib-4.8.2-cpeCray-23.09.eb, will build CubeLib/4.8.2-cpeCray-23.09</p> </li> <li> <p>EasyConfig CubeLib-4.8.2-cpeCray-24.03.eb, will build CubeLib/4.8.2-cpeCray-24.03</p> </li> <li> <p>EasyConfig CubeLib-4.8.2-cpeGNU-23.09.eb, will build CubeLib/4.8.2-cpeGNU-23.09</p> </li> <li> <p>EasyConfig CubeLib-4.8.2-cpeGNU-24.03.eb, will build CubeLib/4.8.2-cpeGNU-24.03</p> </li> <li> <p>EasyConfig CubeLib-4.9-cpeAMD-24.03.eb, will build CubeLib/4.9-cpeAMD-24.03</p> </li> <li> <p>EasyConfig CubeLib-4.9-cpeAOCC-24.03.eb, will build CubeLib/4.9-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig CubeLib-4.9-cpeCray-24.03.eb, will build CubeLib/4.9-cpeCray-24.03</p> </li> <li> <p>EasyConfig CubeLib-4.9-cpeGNU-24.03.eb, will build CubeLib/4.9-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"c/CubeLib/#technical-documentation","title":"Technical documentation","text":"<ul> <li>CubeLib web site</li> </ul> <p>Cube, which is used as performance report explorer for Scalasca and Score-P, is a generic tool for displaying a multi-dimensional performance space consisting of the dimensions (i) performance metric, (ii) call path, and (iii) system resource. Each dimension can be represented as a tree, where non-leaf nodes of the tree can be collapsed or expanded to achieve the desired level of granularity. In addition, Cube can display multi-dimensional Cartesian process topologies.</p> <p>The Cube 4.x series report explorer and the associated Cube4 data format is provided for Cube files produced with the Score-P performance instrumentation and measurement infrastructure or the Scalasca version 2.x trace analyzer (and other compatible tools). However, for backwards compatibility, Cube 4.x can also read and display Cube 3.x data.</p>","boost":10},{"location":"c/CubeLib/#easybuild-support","title":"EasyBuild support","text":"<ul> <li> <p>CubeLib support in the EasyBuilders repository</p> </li> <li> <p>CubeLib support in the CSCS repository</p> </li> <li> <p>CubeLib support in the JSC repository</p> </li> </ul>","boost":10},{"location":"c/CubeLib/#version-482-for-cpe-2309","title":"Version 4.8.2 for CPE 23.09","text":"<ul> <li>The EasyConfig was prepared by Jan Andr\u00e9 Reuter of JSC and based on the EasyConfigs     in use at JSC and the EasyBuilders repository.</li> </ul>","boost":10},{"location":"c/CubeWriter/","title":"CubeWriter","text":"<p>[package list]</p>","boost":10},{"location":"c/CubeWriter/#cubewriter","title":"CubeWriter","text":"","boost":10},{"location":"c/CubeWriter/#license-information","title":"License information","text":"<p>The CubeLib license agreement can be found  on the Scalasca web site. It is partly a BSD-style license, but there are third party components included with their own licenses.</p> <p>From version 4.9 on, the license information can also be found in <code>$EBROOTCUBEWRITER/share/licenses/CubeWriter</code> after installing and loading the module.</p>","boost":10},{"location":"c/CubeWriter/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider CubeWriter/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig CubeWriter-4.8.2-cpeAMD-23.09.eb, will build CubeWriter/4.8.2-cpeAMD-23.09</p> </li> <li> <p>EasyConfig CubeWriter-4.8.2-cpeAMD-24.03.eb, will build CubeWriter/4.8.2-cpeAMD-24.03</p> </li> <li> <p>EasyConfig CubeWriter-4.8.2-cpeAOCC-23.09.eb, will build CubeWriter/4.8.2-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig CubeWriter-4.8.2-cpeAOCC-24.03.eb, will build CubeWriter/4.8.2-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig CubeWriter-4.8.2-cpeCray-23.09.eb, will build CubeWriter/4.8.2-cpeCray-23.09</p> </li> <li> <p>EasyConfig CubeWriter-4.8.2-cpeCray-24.03.eb, will build CubeWriter/4.8.2-cpeCray-24.03</p> </li> <li> <p>EasyConfig CubeWriter-4.8.2-cpeGNU-23.09.eb, will build CubeWriter/4.8.2-cpeGNU-23.09</p> </li> <li> <p>EasyConfig CubeWriter-4.8.2-cpeGNU-24.03.eb, will build CubeWriter/4.8.2-cpeGNU-24.03</p> </li> <li> <p>EasyConfig CubeWriter-4.9-cpeAMD-24.03.eb, will build CubeWriter/4.9-cpeAMD-24.03</p> </li> <li> <p>EasyConfig CubeWriter-4.9-cpeAOCC-24.03.eb, will build CubeWriter/4.9-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig CubeWriter-4.9-cpeCray-24.03.eb, will build CubeWriter/4.9-cpeCray-24.03</p> </li> <li> <p>EasyConfig CubeWriter-4.9-cpeGNU-24.03.eb, will build CubeWriter/4.9-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"c/CubeWriter/#technical-documentation","title":"Technical documentation","text":"","boost":10},{"location":"c/CubeWriter/#cubewriter_1","title":"CubeWriter","text":"<ul> <li>CubeWriter web site</li> </ul> <p>Cube, which is used as performance report explorer for Scalasca and Score-P, is a generic tool for displaying a multi-dimensional performance space consisting of the dimensions (i) performance metric, (ii) call path, and (iii) system resource. Each dimension can be represented as a tree, where non-leaf nodes of the tree can be collapsed or expanded to achieve the desired level of granularity. In addition, Cube can display multi-dimensional Cartesian process topologies.</p> <p>The Cube 4.x series report explorer and the associated Cube4 data format is provided for Cube files produced with the Score-P performance instrumentation and measurement infrastructure or the Scalasca version 2.x trace analyzer (and other compatible tools). However, for backwards compatibility, Cube 4.x can also read and display Cube 3.x data.</p>","boost":10},{"location":"c/CubeWriter/#easybuild-support","title":"EasyBuild support","text":"<ul> <li> <p>CubeWriter support in the EasyBuilders repository</p> </li> <li> <p>CubeWriter support in the CSCS repository</p> </li> <li> <p>CubeWriter support in the JSC repository</p> </li> </ul>","boost":10},{"location":"c/CubeWriter/#version-482-for-cpe-2309","title":"Version 4.8.2 for CPE 23.09","text":"<ul> <li>The EasyConfig was prepared by Jan Andr\u00e9 Reuter of JSC and based on the EasyConfigs     in use at JSC and the EasyBuilders repository.</li> </ul>","boost":10},{"location":"c/Cython/","title":"Cython","text":"<p>[package list]</p>","boost":10},{"location":"c/Cython/#cython","title":"Cython","text":"","boost":10},{"location":"c/Cython/#license-information","title":"License information","text":"<p>Cython, which derives from Pyrex, is licensed under the Apache 2.0 License. See the COPYING file for a detailed description.</p>","boost":10},{"location":"c/Cython/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Cython/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig Cython-3.0.10-cpeGNU-24.03.eb, will build Cython/3.0.10-cpeGNU-24.03</li> </ul>","boost":10},{"location":"c/Cython/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Cython documentation</li> <li>Cython on GitHub</li> </ul>","boost":10},{"location":"c/Cython/#easybuild","title":"EasyBuild","text":"<ul> <li>Cython support in the EasyBuilders repository</li> </ul>","boost":10},{"location":"c/Cython/#cython-3010-for-cpegnu-2403","title":"Cython 3.0.10 for cpeGNU 24.03","text":"<ul> <li>EasyConfig file from the EasyBuilders repository adapted to LUMI.</li> <li>This recipe allows using Cython 3.0 in contrast to Cython 0.29 in cray-python/3.11.7.</li> </ul>","boost":10},{"location":"c/c-ares/","title":"c-ares","text":"<p>[package list]</p>","boost":10},{"location":"c/c-ares/#c-ares","title":"c-ares","text":"","boost":10},{"location":"c/c-ares/#license-information","title":"License information","text":"<p>C-ares is coverd by the MIT license. The full text is available on the web site.</p>","boost":10},{"location":"c/c-ares/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider c-ares/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig c-ares-1.21.0-cpeAMD-23.09.eb, will build c-ares/1.21.0-cpeAMD-23.09</p> </li> <li> <p>EasyConfig c-ares-1.21.0-cpeAOCC-23.09.eb, will build c-ares/1.21.0-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig c-ares-1.21.0-cpeCray-23.09.eb, will build c-ares/1.21.0-cpeCray-23.09</p> </li> <li> <p>EasyConfig c-ares-1.21.0-cpeGNU-23.09.eb, will build c-ares/1.21.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig c-ares-1.27.0-cpeAMD-24.03.eb, will build c-ares/1.27.0-cpeAMD-24.03</p> </li> <li> <p>EasyConfig c-ares-1.27.0-cpeAOCC-24.03.eb, will build c-ares/1.27.0-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig c-ares-1.27.0-cpeCray-24.03.eb, will build c-ares/1.27.0-cpeCray-24.03</p> </li> <li> <p>EasyConfig c-ares-1.27.0-cpeGNU-24.03.eb, will build c-ares/1.27.0-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"c/c-ares/#technical-documentation","title":"Technical documentation","text":"<ul> <li>c-ares web page</li> </ul>","boost":10},{"location":"c/c-ares/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"c/c-ares/#version-1161-for-cpe-2112-and-later","title":"Version 1.16.1 for CPE 21.12 and later","text":"<ul> <li>Direct port of the EasyBuilders build recipe.</li> </ul>","boost":10},{"location":"c/c-ares/#version-1181-for-cpe-2208-and-later","title":"Version 1.18.1 for CPE 22.08 and later","text":"<ul> <li>Trivial version bump</li> </ul>","boost":10},{"location":"c/c-ares/#version-1210-fro-cpe-2309-and-later","title":"Version 1.21.0 fro CPE 23.09 and later","text":"<ul> <li>Trivial version bump, but started using variables for versions for easier updating.</li> </ul>","boost":10},{"location":"c/c-ares/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig c-ares-1.18.1-cpeAOCC-22.08.eb, with module c-ares/1.18.1-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig c-ares-1.18.1-cpeCray-22.06.eb, with module c-ares/1.18.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig c-ares-1.18.1-cpeCray-22.08.eb, with module c-ares/1.18.1-cpeCray-22.08</p> </li> <li> <p>EasyConfig c-ares-1.18.1-cpeGNU-21.12.eb, with module c-ares/1.18.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig c-ares-1.18.1-cpeGNU-22.06.eb, with module c-ares/1.18.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig c-ares-1.18.1-cpeGNU-22.08.eb, with module c-ares/1.18.1-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/cURL/","title":"cURL","text":"<p>[package list]</p>","boost":10},{"location":"c/cURL/#curl","title":"cURL","text":"","boost":10},{"location":"c/cURL/#license-information","title":"License information","text":"<p>The cURL software is copyrighted by several parties. The copyright notice can be found in the COPYING file in the cURL GitHub.</p> <p>From LUMI/23.12 on, the COPYING file can also be found in the <code>$EBROOTCURL/share/licenses/cURL</code> directory after loading the module.</p>","boost":10},{"location":"c/cURL/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"c/cURL/#what-is-curl","title":"What is cURL?","text":"<p>The cURL command and its associated libcurl library are free and easy-to-use client-side URL transfer library, supporting DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP. libcurl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, Kerberos), file transfer resume, http proxy tunneling and more.</p> <p>Web based documentation</p>","boost":10},{"location":"c/cURL/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider cURL/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>cURL/7.83.1-cpeAMD-22.08 (EasyConfig: cURL-7.83.1-cpeAMD-22.08.eb)</p> </li> <li> <p>cURL/7.83.1-cpeAOCC-22.08 (EasyConfig: cURL-7.83.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>cURL/7.83.1-cpeCray-22.08 (EasyConfig: cURL-7.83.1-cpeCray-22.08.eb)</p> </li> <li> <p>cURL/7.83.1-cpeGNU-22.08 (EasyConfig: cURL-7.83.1-cpeGNU-22.08.eb)</p> </li> <li> <p>cURL/7.86.0-cpeAMD-22.12 (EasyConfig: cURL-7.86.0-cpeAMD-22.12.eb)</p> </li> <li> <p>cURL/7.86.0-cpeAOCC-22.12 (EasyConfig: cURL-7.86.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>cURL/7.86.0-cpeCray-22.12 (EasyConfig: cURL-7.86.0-cpeCray-22.12.eb)</p> </li> <li> <p>cURL/7.86.0-cpeCray-23.03 (EasyConfig: cURL-7.86.0-cpeCray-23.03.eb)</p> </li> <li> <p>cURL/7.86.0-cpeGNU-22.12 (EasyConfig: cURL-7.86.0-cpeGNU-22.12.eb)</p> </li> <li> <p>cURL/8.0.1-cpeAMD-23.09 (EasyConfig: cURL-8.0.1-cpeAMD-23.09.eb)</p> </li> <li> <p>cURL/8.0.1-cpeAMD-23.12 (EasyConfig: cURL-8.0.1-cpeAMD-23.12.eb)</p> </li> <li> <p>cURL/8.0.1-cpeAOCC-23.09 (EasyConfig: cURL-8.0.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>cURL/8.0.1-cpeAOCC-23.12 (EasyConfig: cURL-8.0.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>cURL/8.0.1-cpeCray-23.09 (EasyConfig: cURL-8.0.1-cpeCray-23.09.eb)</p> </li> <li> <p>cURL/8.0.1-cpeCray-23.12 (EasyConfig: cURL-8.0.1-cpeCray-23.12.eb)</p> </li> <li> <p>cURL/8.0.1-cpeGNU-23.09 (EasyConfig: cURL-8.0.1-cpeGNU-23.09.eb)</p> </li> <li> <p>cURL/8.0.1-cpeGNU-23.12 (EasyConfig: cURL-8.0.1-cpeGNU-23.12.eb)</p> </li> <li> <p>cURL/8.3.0-cpeAMD-24.03 (EasyConfig: cURL-8.3.0-cpeAMD-24.03.eb)</p> </li> <li> <p>cURL/8.3.0-cpeAOCC-24.03 (EasyConfig: cURL-8.3.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>cURL/8.3.0-cpeCray-24.03 (EasyConfig: cURL-8.3.0-cpeCray-24.03.eb)</p> </li> <li> <p>cURL/8.3.0-cpeGNU-24.03 (EasyConfig: cURL-8.3.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"c/cURL/#technical-documentation","title":"Technical documentation","text":"","boost":10},{"location":"c/cURL/#curl_1","title":"cURL","text":"<ul> <li> <p>cURL home page</p> <ul> <li>cURL downloads</li> </ul> </li> </ul>","boost":10},{"location":"c/cURL/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>cURL support in the EasyBuilders repository</p> </li> <li> <p>cURL support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"c/cURL/#version-7780-in-cpe-2106","title":"Version 7.78.0 in CPE 21.06","text":"<ul> <li> <p>The EasyConfig file is a mix of the EasyBuilders one and the one in use at the     University of Antwerpen.</p> </li> <li> <p>There was a new configure option for 7.78.0: a range of options to select the right     TLS backend, so this has been added to the EasyConfig file.</p> </li> <li> <p>Added additional sanity check commands to the file.</p> </li> </ul>","boost":10},{"location":"c/cURL/#version-7831-for-lumi2206","title":"Version 7.83.1 for LUMI/22.06","text":"<ul> <li>Trivial update of the EasyConfig, we did not check for new features that could be     exploited via additional dependencies.</li> </ul>","boost":10},{"location":"c/cURL/#version-7860-for-cpe-2212-and-later","title":"Version 7.86.0 for CPE 22.12 and later","text":"<ul> <li>Trivial update of the EasyConfig, we did not check for new features that could be     exploited via additional dependencies.</li> </ul>","boost":10},{"location":"c/cURL/#version-801-from-cp-2309-on","title":"Version 8.0.1 from CP 23.09 on","text":"<ul> <li> <p>Version bump to 8.0.1 to follow 2023a, but trivial for the EasyConfig.</p> </li> <li> <p>Fro LUMI 23.12/ license information was added.</p> </li> </ul>","boost":10},{"location":"c/cURL/#version-830-for-lumi2403","title":"Version 8.3.0 for LUMI/24.03","text":"<ul> <li> <p>Started from a version bump of the 8.0.1 EasyConfig for LUMI/23.12.</p> </li> <li> <p>New dependency: libpsl.</p> </li> </ul>","boost":10},{"location":"c/cURL/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig cURL-7.78.0-cpeAMD-21.06.eb, with module cURL/7.78.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig cURL-7.78.0-cpeAOCC-21.12.eb, with module cURL/7.78.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig cURL-7.78.0-cpeCray-21.06.eb, with module cURL/7.78.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig cURL-7.78.0-cpeCray-21.08.eb, with module cURL/7.78.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig cURL-7.78.0-cpeCray-21.12.eb, with module cURL/7.78.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig cURL-7.78.0-cpeGNU-21.06.eb, with module cURL/7.78.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig cURL-7.78.0-cpeGNU-21.08.eb, with module cURL/7.78.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig cURL-7.78.0-cpeGNU-21.12.eb, with module cURL/7.78.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig cURL-7.83.1-cpeAOCC-22.06.eb, with module cURL/7.83.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig cURL-7.83.1-cpeCray-22.06.eb, with module cURL/7.83.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig cURL-7.83.1-cpeGNU-22.06.eb, with module cURL/7.83.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/cairo/","title":"cairo","text":"<p>[package list]</p>","boost":10},{"location":"c/cairo/#cairo","title":"cairo","text":"","boost":10},{"location":"c/cairo/#license-information","title":"License information","text":"<p>Cairo is free software and is available to be redistributed and/or modified  under the terms of either the  GNU Lesser General Public License (LGPL) version 2.1 or the Mozilla Public License (MPL) version 1.1 at your option.</p> <p>From LUMI/23.12 on, the license information can also be found in the directory <code>$EBROOTCAIRO/share/licenses/cairo</code> after loading the module.</p>","boost":10},{"location":"c/cairo/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"c/cairo/#what-is-cairo","title":"What is cairo?","text":"<p>Cairo is a 2D graphics library with support for multiple output devices.  The library supports a range of output targets, including the X Window System  (via both Xlib and XCB), image buffers, PostScript, PDF, and SVG file output. However, not all of them are currently supported on LUMI by these modules. E.g., Qt is missing and so are various OpenGL-based targets.</p>","boost":10},{"location":"c/cairo/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider cairo/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>cairo/1.17.4-cpeAMD-22.08 (EasyConfig: cairo-1.17.4-cpeAMD-22.08.eb)</p> </li> <li> <p>cairo/1.17.4-cpeAMD-22.12 (EasyConfig: cairo-1.17.4-cpeAMD-22.12.eb)</p> </li> <li> <p>cairo/1.17.4-cpeAMD-23.09 (EasyConfig: cairo-1.17.4-cpeAMD-23.09.eb)</p> </li> <li> <p>cairo/1.17.4-cpeAMD-23.12 (EasyConfig: cairo-1.17.4-cpeAMD-23.12.eb)</p> </li> <li> <p>cairo/1.17.4-cpeAOCC-22.08 (EasyConfig: cairo-1.17.4-cpeAOCC-22.08.eb)</p> </li> <li> <p>cairo/1.17.4-cpeAOCC-22.12 (EasyConfig: cairo-1.17.4-cpeAOCC-22.12.eb)</p> </li> <li> <p>cairo/1.17.4-cpeAOCC-23.09 (EasyConfig: cairo-1.17.4-cpeAOCC-23.09.eb)</p> </li> <li> <p>cairo/1.17.4-cpeAOCC-23.12 (EasyConfig: cairo-1.17.4-cpeAOCC-23.12.eb)</p> </li> <li> <p>cairo/1.17.4-cpeCray-22.08 (EasyConfig: cairo-1.17.4-cpeCray-22.08.eb)</p> </li> <li> <p>cairo/1.17.4-cpeCray-22.12 (EasyConfig: cairo-1.17.4-cpeCray-22.12.eb)</p> </li> <li> <p>cairo/1.17.4-cpeCray-23.03 (EasyConfig: cairo-1.17.4-cpeCray-23.03.eb)</p> </li> <li> <p>cairo/1.17.4-cpeCray-23.09 (EasyConfig: cairo-1.17.4-cpeCray-23.09.eb)</p> </li> <li> <p>cairo/1.17.4-cpeCray-23.12 (EasyConfig: cairo-1.17.4-cpeCray-23.12.eb)</p> </li> <li> <p>cairo/1.17.4-cpeGNU-22.08 (EasyConfig: cairo-1.17.4-cpeGNU-22.08.eb)</p> </li> <li> <p>cairo/1.17.4-cpeGNU-22.12 (EasyConfig: cairo-1.17.4-cpeGNU-22.12.eb)</p> </li> <li> <p>cairo/1.17.4-cpeGNU-23.09 (EasyConfig: cairo-1.17.4-cpeGNU-23.09.eb)</p> </li> <li> <p>cairo/1.17.4-cpeGNU-23.12 (EasyConfig: cairo-1.17.4-cpeGNU-23.12.eb)</p> </li> <li> <p>cairo/1.18.0-cpeAMD-24.03 (EasyConfig: cairo-1.18.0-cpeAMD-24.03.eb)</p> </li> <li> <p>cairo/1.18.0-cpeAOCC-24.03 (EasyConfig: cairo-1.18.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>cairo/1.18.0-cpeCray-24.03 (EasyConfig: cairo-1.18.0-cpeCray-24.03.eb)</p> </li> <li> <p>cairo/1.18.0-cpeGNU-24.03 (EasyConfig: cairo-1.18.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"c/cairo/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>cairo web site</p> </li> <li> <p>cairo via the cgit interface</p> </li> </ul>","boost":10},{"location":"c/cairo/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>cairo support in the EasyBuilders repository</p> </li> <li> <p>cairo support in the CSCS repository     The current status (November 2021): Support is outdated and for a non-Cray toolchain.</p> </li> </ul>","boost":10},{"location":"c/cairo/#version-1174-for-cpe-2108","title":"Version 1.17.4 for cpe 21.08","text":"<ul> <li> <p>Note: EasyBuild is at this time still at version 1.16.0, so in case we     run into trouble we may have to revert to this older version.</p> </li> <li> <p>Started from the UAntwerpen and EasyBuilders recipes.</p> </li> <li> <p>Currently tested with cpeGNU and cpeCray only.</p> <ul> <li>cpeCray needs '-Wno-unsupported-target-opt' or the compilation fails in the    building phase.</li> </ul> </li> <li> <p>For LUMI/23.12, license information was added to the software installations.</p> </li> </ul> <p>TODO: Problems on eiger likely because the configure process fails to find the pthread library...</p>","boost":10},{"location":"c/cairo/#not-version-1178-from-2309-on","title":"NOT Version 1.17.8 from 23.09 on","text":"<ul> <li> <p>Switched to a meson build based on the EasyBuilders EasyConfig.</p> </li> <li> <p>However, compilation fails in cpeAMD and it is not clear why we don't     see a similar error with cpeCray as that uses an even newer and stricter     version of Clang.</p> </li> </ul>","boost":10},{"location":"c/cairo/#version-1180-for-lumi2403","title":"Version 1.18.0 for LUMI/24.03","text":"<ul> <li> <p>Started from the EasyConfig for 1.17.4 in LUMI/24.03.</p> </li> <li> <p>However, we now have to switch to a MesonNinja build proces which has completely      different configuration options.</p> </li> </ul>","boost":10},{"location":"c/cairo/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig cairo-1.17.4-cpeAOCC-21.12.eb, with module cairo/1.17.4-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig cairo-1.17.4-cpeAOCC-22.06.eb, with module cairo/1.17.4-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig cairo-1.17.4-cpeCray-21.08.eb, with module cairo/1.17.4-cpeCray-21.08</p> </li> <li> <p>EasyConfig cairo-1.17.4-cpeCray-21.12.eb, with module cairo/1.17.4-cpeCray-21.12</p> </li> <li> <p>EasyConfig cairo-1.17.4-cpeCray-22.06.eb, with module cairo/1.17.4-cpeCray-22.06</p> </li> <li> <p>EasyConfig cairo-1.17.4-cpeGNU-21.08.eb, with module cairo/1.17.4-cpeGNU-21.08</p> </li> <li> <p>EasyConfig cairo-1.17.4-cpeGNU-21.12.eb, with module cairo/1.17.4-cpeGNU-21.12</p> </li> <li> <p>EasyConfig cairo-1.17.4-cpeGNU-22.06.eb, with module cairo/1.17.4-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"c/ccpe/","title":"ccpe","text":"<p>[package list]</p>","boost":10},{"location":"c/ccpe/#ccpe","title":"ccpe","text":"","boost":10},{"location":"c/ccpe/#license-information","title":"License information","text":"<p>These containers contain proprietary software and can only be used by LUMI users on LUMI. You cannot take these containers to another system. Doing so will be considered a severe violation of the conditions of use, as you should respect software licenses, and can lead to permanent termination of your access to LUMI.</p> <p>The use of the containers is also covered by the HPE End User License Agreement - Enterprise Version. Please read this document carefully!</p>","boost":10},{"location":"c/ccpe/#user-documentation","title":"User documentation","text":"<p>These containers are beta software</p> <p>They are made available by HPE without guarantee of suitability for your purpose, as a way for users to test programming environments that are not (yet) on the system. </p> <p>LUST together with HPE have made modules and implemented changes to the  containers to adapt them to LUMI and integrate somewhat in the regular  environment.</p> <p>However, working with these containers is different from working with a  programming environment that is installed natively on the system and requires a good insight in how containers work. So they are not for every user, and LUST can only offer very limited support. These containers are only for  users who are very experienced with the Cray Programming Environment and also understand how singularity containers work.</p> <p>The container only offers <code>PrgEnv-cray</code> and <code>PrgEnv-gnu</code>.  With some imports from the system, we also offer <code>PrgEnv-amd</code>, but it may not be entirely as intended by the version of the PE as we may be  using a different version of ROCm. The container does contain some elements of <code>PrgEnv-nvidia</code> but that is obviously not functional on LUMI. <code>PrgEnv-aocc</code> is not available.</p> <p>HPE has a community Slack channel for feedback and questions at slack.hpdev.io, channel <code>#hpe-cray-programming-environment</code>, but bear in mind that this is mostly a community channel, monitored by some developers, but those developers don't have time to answer each and every question themselves. It is a low volume channel and in no means a support channel for inexperienced users.</p> <p>LUST cannot really offer much support, though we are interested in learning about  issues as this is useful feedback for HPE. These containers are really  meant for experienced users who want to experiment with a newer version before  it becomes available on LUMI.</p>","boost":10},{"location":"c/ccpe/#where-to-get-the-containers","title":"Where to get the containers?","text":"<p>The CPE containers are made available in <code>/appl/local/containers/easybuild-sif-images</code>.</p> <p>Note the licensing conditions though. These containers should only be used on LUMI.</p>","boost":10},{"location":"c/ccpe/#how-to-enable-the-containers","title":"How to enable the containers?","text":"<p>We recommend using our EasyBuild modules to run the HPE CPE containers as these modules do create a lot of bind mounts to provide all necessary parts from the system to the container.</p> <p>All modules provide a number of environment variables to make life easier:</p> <ul> <li> <p>Outside (and brought into) the container, <code>SIF</code> and <code>SIFCCPE</code> point to the container file,     which is very handy to use with the <code>singularity</code> command.</p> </li> <li> <p>Inside the container, <code>INITCCPE</code> contains the commands to fully initialise     the CPE in the container. Use as <code>eval $INITCCPE</code>.</p> <p>This is not needed when using <code>singularity run</code> or the corresponding wrapper script.</p> </li> <li> <p>Outside (and brought into) the container, <code>EXPORTCCPE</code> is a list of environment     variables set by the <code>ccpe</code> modules that we want to bring in the container or     in a job script, even if we otherwise want to start the job script with a clean     environment.</p> </li> <li> <p>Outside (and brought into) the container, <code>SWITCHTOCCPE</code> is an environment variable     containing a large block of code that is used at the start of the job script to     switch to executing the job script in the container.</p> </li> </ul> <p>The module also provides access to four wrapper scripts to start the container. Note though that those wrapper scripts only function properly when the module is loaded. They do not take care of the bindings themselves and in that sense are certainly different from the wrapper scripts provided by Tykky/lumi-container-wrapper. All these scripts do however purge all modules before going into the container, as modules from the system PE are not valid in the container, and fully clear Lmod. Currently, the following scripts are provided:</p> <ul> <li> <p><code>ccpe-shell</code> to start a shell in the container. The arguments of <code>ccpe-shell</code>     are simply added to the <code>singularity shell $SIF</code>.</p> </li> <li> <p><code>ccpe-exec</code> to run a command in the container. The arguments of <code>ccpe-exec</code>      are simply added to the <code>singularity exec $SIF</code> command.</p> </li> <li> <p><code>ccpe-run</code> to run the container. The arguments of <code>ccpe-run</code>     are simply added to the <code>singularity run $SIF</code> command.</p> </li> <li> <p><code>ccpe-singularity</code> will clean up the environment for the singularity, then     call <code>singularity</code> passing all arguments to <code>singularity</code>. So with this      command, you still need to specify the container also (e.g., using the      <code>SIF</code> or <code>SIFCCPE</code> environment variable), but can specify options for      the singularity subcommand also.</p> </li> </ul>","boost":10},{"location":"c/ccpe/#installing-the-easybuild-recipes","title":"Installing the EasyBuild recipes","text":"<p>To install the container module, chose the appropriate EasyConfig from this page, and make sure you have a properly set up environment as explained in the  LUMI documentation in the \"Installing software\"section,  \"EasyBuild\". In particular, it is important to set a proper location using <code>EBU_USER_PREFIX</code>, as your home directory will quickly fill up if you install in the default  location. To install the container, use</p> <pre><code>module load LUMI/24.03 partition/container EasyBuild-user\neb &lt;name_of_easyconfig&gt;\n</code></pre> <p>e.g., </p> <pre><code>module load LUMI/24.03 partition/container\neb ccpe-25.03-B-rocm-6.3-SP5-LUMI.eb\n</code></pre> <p>Any more recent version of the LUMI stack on the system will also work for the installation.</p> <p>After that, the module installed by the EasyConfig (in the example, <code>ccpe/25.03-B-rocm-6.3-SP5-LUMI</code>) will be available in all versions of the <code>LUMI</code> stack on the system and in <code>CrayEnv</code>. So, e.g.,</p> <pre><code>module load CrayEnv ccpe/25.03-B-rocm-6.3-SP5-LUMI\n</code></pre> <p>is enough to gain access to the container and all its tools explained on this page.</p>","boost":10},{"location":"c/ccpe/#how-to-get-a-proper-environment-in-the-container","title":"How to get a proper environment in the container?","text":"<p>Unfortunately, there seems to be no way to properly (re-)initialise the shell  or environment in the container directly through <code>singularity shell</code> or  <code>singularity exec</code>.</p> <p>The following strategies can be used:</p> <ul> <li> <p>In the container, the environment variable <code>INITCCPE</code> contains the necessary     commands to get a working Lmod environment again, but then with the relevant     CPE modules for the container. Run as</p> <pre><code>eval $INITCCPE\n</code></pre> </li> <li> <p>Alternatively, sourcing <code>/etc/bash.bashrc</code> will also properly set up Lmod.</p> </li> </ul> <p>Cases that do give you a properly initiated shell, are <code>singularity exec bash -i</code>  and <code>singularity run</code>. These commands do source <code>/etc/bash.bashrc</code> but do not  read <code>/etc/profile</code>. But the latter shouldn't matter too much as that is usually used to set environment variables, and those that are typically set in that file and the files it calls, now come from the regular environment on LUMI and are fine for the container, or are overwritten anyway by the files sourced by <code>/etc/bash.bashrc</code>.</p>","boost":10},{"location":"c/ccpe/#launching-jobs-a-tale-of-two-environments","title":"Launching jobs: A tale of two environments","text":"<p>The problem with running jobs, is that they have to deal with two incompatible environments:</p> <ol> <li> <p>The environment outside the container that does not know about the HPE Cray     PE modules of the PE version in the container, and may not know about some other     modules depending on how <code>/appl/lumi</code> is set up (as this may point to a totally     separate software stack specific for the container but mounted on <code>/appl/lumi</code>     so that it behaves just as the regular stacks on the system).</p> </li> <li> <p>The environment inside the container that does not know about the HPE Cray PE     modules installed in the system, and may not know about some other      modules depending on how <code>/appl/lumi</code> is set up.</p> </li> </ol> <p>This is important, because unloading a module in Lmod requires access to the correct module file, as unloading is done by \"executing the module file in reverse\": The module file is executed, but each action that changes the environment, is reversed. Even a <code>module purge</code> will not work correctly without the proper modules available. Environment variables set by the modules may remain set. This is also why the module provides the <code>ccpe-*</code> wrapper scripts for singularity: These scripts are meant to be executed in  an environment that is valid outside the container, and clean up that environment before starting commands in the container so that the container initialisation can start from  a clean inherited environment.</p> See how broken the job environment can be... <p>This example is developed running a container for the 24.11 programming environment on LUMI in March 2025 with the 24.03 programming environment as the default.</p> <p>The 24.03 environment comes with <code>cce/17.0.1</code> while the 24.11 environment comes with <code>cce/18.0.1</code>. When loading the module, it sets the environment variable 'CRAY_CC_VERSION' to the version of the CCE compiler.</p> <p>Start up the container:</p> <pre><code>ccpe-run\n</code></pre> <p>Check the version of the module tool:</p> <pre><code>module --version\n</code></pre> <p>which returns version 8.7.37:</p> <pre><code>Modules based on Lua: Version 8.7.37  [branch: release/cpe-24.11] 2024-09-24 16:53 +00:00\n    by Robert McLay mclay@tacc.utexas.edu    \n</code></pre> <p>and list the modules:</p> <pre><code>module list\n</code></pre> <p>returns</p> <pre><code>Currently Loaded Modules:\n1) craype-x86-rome                                 6) cce/18.0.1           11) PrgEnv-cray/8.6.0\n2) libfabric/1.15.2.0                              7) craype/2.7.33        12) ModuleLabel/label (S)\n3) craype-network-ofi                              8) cray-dsmml/0.3.0     13) lumi-tools/24.05  (S)\n4) perftools-base/24.11.0                          9) cray-mpich/8.1.31    14) init-lumi/0.2     (S)\n5) xpmem/2.9.6-1.1_20240510205610__g087dc11fc19d  10) cray-libsci/24.11.0\n\nWhere:\nS:  Module is Sticky, requires --force to unload or purge\n</code></pre> <p>so we start with the Cray programming environment loaded.</p> <p>Now use an interactive <code>srun</code> session to start a session on the compute node.</p> <pre><code>srun -n1 -c1 -t10:00 -psmall -A&lt;my_account&gt; --pty bash\n</code></pre> <p>Let's check the version of the module tool again:</p> <pre><code>module --version\n</code></pre> <p>now returns version 8.7.32: </p> <pre><code>Modules based on Lua: Version 8.7.32  2023-08-28 12:42 -05:00\n    by Robert McLay mclay@tacc.utexas.edu\n</code></pre> <p>as we are no longer in the container but in a regular LUMI environment. </p> <p>Trying</p> <pre><code>module list\n</code></pre> <p>returns</p> <pre><code>Currently Loaded Modules:\n6) craype-x86-rome                                 6) cce/18.0.1           11) PrgEnv-cray/8.6.0\n7) libfabric/1.15.2.0                              7) craype/2.7.33        12) ModuleLabel/label (S)\n8) craype-network-ofi                              8) cray-dsmml/0.3.0     13) lumi-tools/24.05  (S)\n9) perftools-base/24.11.0                          9) cray-mpich/8.1.31    14) init-lumi/0.2     (S)\n10) xpmem/2.9.6-1.1_20240510205610__g087dc11fc19d  10) cray-libsci/24.11.0\n\nWhere:\nS:  Module is Sticky, requires --force to unload or purge\n</code></pre> <p>so the modules we were using in the container.</p> <p>The environment variable <code>CRAY_CC_VERSION</code> is also set:</p> <pre><code>echo $CRAY_CC_VERSION\n</code></pre> <p>returns <code>18.0.1</code>.</p> <p>Now do a</p> <pre><code>module purge\n</code></pre> <p>which shows the perfectly normal output</p> <pre><code>The following modules were not unloaded:\n(Use \"module --force purge\" to unload all):\n\n1) ModuleLabel/label   2) lumi-tools/24.05   3) init-lumi/0.2\n\nThe following sticky modules could not be reloaded:\n\n1) lumi-tools\n</code></pre> <p>and </p> <pre><code>module list\n</code></pre> <p>now shows</p> <pre><code>Currently Loaded Modules:\n1) ModuleLabel/label (S)   2) lumi-tools/24.05 (S)   3) init-lumi/0.2 (S)\n\nWhere:\nS:  Module is Sticky, requires --force to unload or purge\n</code></pre> <p>but </p> <pre><code>echo $CRAY_CC_VERSION\n</code></pre> <p>still return <code>18.0.1</code>, so even though it appears that the <code>cce/18.0.1</code> module has been unloaded, not all (if any) environment variables set by the module, have been correctly unset. </p> <p>We can now load the <code>cce</code> module again:</p> <pre><code>module load cce\n</code></pre> <p>and now</p> <pre><code>module list cce\n</code></pre> <p>returns</p> <pre><code>Currently Loaded Modules Matching: cce\n1) cce/17.0.1\n</code></pre> <p>so it appears we have the <code>cce</code> module from the system. This went well in this case. And in fact,</p> <pre><code>module list\n</code></pre> <p>which returns</p> <pre><code>Currently Loaded Modules:\n1) ModuleLabel/label (S)   4) craype/2.7.31.11     7) craype-network-ofi   10) PrgEnv-cray/8.5.0\n2) lumi-tools/24.05  (S)   5) cray-dsmml/0.3.0     8) cray-mpich/8.1.29    11) cce/17.0.1\n3) init-lumi/0.2     (S)   6) libfabric/1.15.2.0   9) cray-libsci/24.03.0\n\nWhere:\nS:  Module is Sticky, requires --force to unload or purge\n</code></pre> <p>suggests that some other modules, like <code>cray-mpich</code> and <code>cray-libsci</code> have also been reloaded.</p> <pre><code>echo $CRAY_CC_VERSION\n</code></pre> <p>returns <code>17.0.1</code> as expected, and after</p> <pre><code>module purge\n</code></pre> <p>we now note that</p> <pre><code>echo $CRAY_CC_VERSION\n</code></pre> <p>returns nothing and is reset.</p> <p>However, it is clear that we are now in an environment where we cannot use what we prepared in the container.</p>","boost":10},{"location":"c/ccpe/#job-script-template-to-run-the-batch-script-in-the-container","title":"Job script template to run the batch script in the container","text":"<p>To make writing job scripts easier, some common code has been put in an environment variable that can be executed via the <code>eval</code> function of bash.</p> <p>This job script will start with as clean an environment as possible, except when called from a correctly initialised container with passing of the full environment:</p> <pre><code>#!/bin/bash\n#\n# This test script should be submitted with sbatch from within a CPE 24.11 container.\n# It shows very strange behaviour as the `module load` of some modules fails to show\n# those in `module list` and also fails to change variables that should be changed.\n#\n#SBATCH -J example-jobscript\n#SBATCH -p standard\n#SBATCH -N 2\n#SBATCH -n 32\n#SBATCH -c 8\n#SBATCH -t 5:00\n#SBATCH -o %x-%j.md\n# And add line for account\n\n################################################################################\n#\n# Always start with this block.\n# Its function is to restart the execution of the job script in the container\n# so that you can write a regular job script as if you are working in the\n# version of the Cray PE in the container.\n#\n\n#\n# Ensure that the environment variable SWITCHTOCCPE and with it \n#\nif [ -z \"${SWITCHTOCCPE}\" ]\nthen\n    module load CrayEnv ccpe/25.03-B-rocm-6.3-SP5-LUMI || exit\nfi\n\n#\n# Now switch to the container and clean up environments when needed and possible.\n#\neval $SWITCHTOCCPE\n\n################################################################################\n#\n# Here you have the container environment and can simply work as you would \n# normally do:  Build your environment and start commands. But you'll still \n# have to be careful with srun as whatever you start with srun will not \n# automatically run in the container.\n#\n\n# Always reconstruct the environment and don't rely on something inherited from\n# the calling shell as this will be wrong if the job script is not launched from\n# within the container.\nmodule load LUMI/25.03 partition/C\nmodule load lumi-CPEtools/1.2-cpeCray-25.03-hpcat-0.9\n\n# We also need a little trick with srun.\n# Template: ccpe-srun &lt;srun arguments&gt; singularity exec $SIFCCPE &lt;command&gt;\nccpe-srun singularity exec $SIFCCPE hybrid_check\n</code></pre> <p>What this job script does:</p> <ul> <li> <p>The body of the job script (lines after <code>eval $SWITCHTOCCPE</code>) will always run in the container.</p> <p>This is where you would insert your code that you want to run in the container.</p> </li> <li> <p>The environment in the container after <code>eval $SWITCHTOCCPE</code>:</p> <ul> <li> <p>When launching this batch script from within the container:</p> <ul> <li> <p>When launched without <code>--export</code> flag, the body will run in the environment of the calling container.</p> <p>It does require that the job is started from a properly initialised container with active Lmod though, as that currently sets the environment variable to detect if the container is properly initialised. </p> <p>If you started the calling container with <code>ccpe-run</code>, there is no issue though. In other cases, you  may have to execute <code>eval $INITCCPE</code>. But in general, if you were able to load Cray PE modules before calling <code>sbatch</code>, you should be OK.</p> </li> <li> <p>When launched using <code>sbatch --export=$EXPORTCCPE</code>, the body will run in a clean container environment,     but will not need to re-load the container module.</p> </li> <li> <p>Behaviour with <code>--export=none</code>: As the container cannot be located, </p> <pre><code>if [ -z \"${SWITCHTOCCPE}\" ]\nthen\n    module load CrayEnv ccpe/25.03-B-rocm-6.3-SP5-LUMI || exit\nfi\n</code></pre> <p>will first try to load the container module, and if successful, proceed creating a clean environment.</p> <p>Note that you need to adapt that line to the module you are actually using!</p> </li> </ul> </li> <li> <p>When launching this batch script from a regular system shell:</p> <ul> <li> <p>When launched using <code>sbatch --export=$EXPORTCCPE</code>, the body will run in a clean container environment.</p> </li> <li> <p>When launched without <code>--export</code> flag, <code>eval $SWITCHTOCCPE</code> will first try to clean the system     environment (and may fail during that phase if it cannot find the modules that you had loaded     when calling <code>sbatch</code>.)</p> <p>If the <code>ccpe</code> module was not loaded when calling the job script, the block </p> <pre><code>if [ -z \"${SWITCHTOCCPE}\" ]\nthen\n    module load CrayEnv ccpe/25.03-B-rocm-6.3-SP5-LUMI || exit\nfi\n</code></pre> <p>will try to take care of that. If the module can be loaded, the script will proceed with building a clean container environment.</p> <p>Note that you need to adapt that line to the module you are actually using!</p> </li> <li> <p>Behaviour with <code>--export=none</code>: As the container cannot be located, </p> <pre><code>if [ -z \"${SWITCHTOCCPE}\" ]\nthen\n    module load CrayEnv ccpe/25.03-B-rocm-6.3-SP5-LUMI || exit\nfi\n</code></pre> <p>will first try to load the container module, and if successful, proceed creating a clean environment.</p> <p>Note that you need to adapt that line to the module you are actually using!</p> </li> </ul> </li> </ul> <p>So in all cases you get a clean environment (which is the only logical thing to get) except if <code>sbatch</code> was already called from within the container without <code>--export</code> flag.</p> </li> <li> <p>To run the actual command, there we do not use <code>srun</code> but the function <code>ccpe-srun</code> defined in the      container, and we must also ensure that we start the command in the singularity container.</p> <p>The reason why we need <code>ccpe-srun</code> is that <code>PATH</code> and <code>LD_LIBRARY_PATH</code> are not passed to the container, but overwritten by values set in the initialisation routines of the container. The solution is to enforce the values of the calling environment via  <code>SINGULARITYENV_PATH</code> and <code>SINGULARITYENV_LD_LIBRARY_PATH</code>. <code>ccpe-srun</code> is just a very small bash funtion:</p> <pre><code>function ccpe-srun() {\n    SINGULARITYENV_PATH=$PATH SINGULARITYENV_LD_LIBRARY_PATH=$LD_LIBRARY_PATH srun \"$@\" \n}\n</code></pre> <p>so instead of using <code>cpe-srun</code> in the above example, one could also have used</p> <pre><code>SINGULARITYENV_PATH=$PATH SINGULARITYENV_LD_LIBRARY_PATH=$LD_LIBRARY_PATH srun \\\n  singularity exec $SIFCCPE hybrid_check\n</code></pre> <p>or</p> <pre><code>export SINGULARITYENV_PATH=$PATH \nexport SINGULARITYENV_LD_LIBRARY_PATH=$LD_LIBRARY_PATH \nsrun singularity exec $SIFCCPE hybrid_check\n</code></pre> </li> </ul> <p>For technical information about how all this works under the hood (and it may  be important to understand this to always use the template correctly), check the subsection \"Starting jobs\" in the  \"Technical documentation\" section of this page.</p>","boost":10},{"location":"c/ccpe/#known-restrictions","title":"Known restrictions","text":"<ul> <li> <p><code>PrgEnv-aocc</code> is not provided by the container. The ROCm version is taken from the     system and may not be the optimal one for the version of the PE.</p> </li> <li> <p><code>salloc</code> does not work in the container.</p> <p>Workaround: Use <code>salloc</code> outside the container, then go into the container with  <code>ccpe-run</code>.</p> </li> </ul>","boost":10},{"location":"c/ccpe/#singularity-containers-with-modules-for-binding-and-extras","title":"Singularity containers with modules for binding and extras","text":"<p>Install with the EasyBuild-user module in <code>partition/container</code>: <pre><code>module load LUMI partition/container EasyBuild-user\neb &lt;easyconfig&gt;\n</code></pre> The module will be available in all versions of the LUMI stack and in the CrayEnv stack.</p> <p>To access module help after installation use <code>module spider ccpe/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig ccpe-24.11-B-rocm-6.2-LUMI.eb, will provide ccpe/24.11-B-rocm-6.2-LUMI</p> <p>This module provides a modified version of the CPE container as it comes from HPE. The goal is to integrate it better with the current LUMI environment. Changes to the container are also made through this EasyConfig, so you may use it as a template to adapt the CPE containers to your needs.</p> <p>This B-rocm version bind mounts the actual ROCm installation from a SquashFS file provided on LUMI which should give better compile performance than when simply mounting a directory from one of the LUMI parallel file systems with the ROCm installation. Some libraries  on the OS side may not be the best version, so in  case of trouble, switch to the C-rocm version.</p> <p>This container can be installed in <code>partition/container</code> via LUMI/24.03 or more recent LUMI stacks, after which the module will be available in CrayEnv and all versions of the LUMI stack.</p> </li> <li> <p>EasyConfig ccpe-24.11-C-rocm-6.2-LUMI.eb, will provide ccpe/24.11-C-rocm-6.2-LUMI</p> <p>This module provides a modified version of the CPE container as it comes from HPE. The goal is to integrate it better with the current LUMI environment. Changes to the container are also made through this EasyConfig, so you may use it as a template to adapt the CPE containers to your needs.</p> <p>This C-rocm version also integrates ROCm in the container and installs it using the  SUSE zypper install tool, guaranteeing that all dependencies are also present in the right version. As such, it is the most robust variant of the containers with  ROCm. However, installing ROCm with the unprivileged build process is extremely slow,  so expect long build times (over one and a half hour on a compute node), rendering this approach rather inefficient. The assembly of the container may also run out-of-memory on the login nodes as the memory available to a single user is restricted to 96GB.</p> <p>This container can be installed in <code>partition/container</code> via LUMI/24.03 or more recent LUMI stacks, after which the module will be available in CrayEnv and all versions of the LUMI stack.</p> </li> <li> <p>EasyConfig ccpe-25.03-B-rocm-6.3-SP5-LUMI.eb, will provide ccpe/25.03-B-rocm-6.3-SP5-LUMI</p> <p>This module provides a modified version of the CPE container as it comes from HPE. The goal is to integrate it better with the current LUMI environment. Changes to the container are also made through this EasyConfig, so you may use it as a template to adapt the CPE containers to your needs.</p> <p>This B-rocm version bind mounts the actual ROCm installation from a SquashFS file provided on LUMI which should give better compile performance than when simply mounting a directory from one of the LUMI parallel file systems with the ROCm installation. Some libraries  on the OS side may not be the best version, so in  case of trouble, switch to the C-rocm version.</p> <p>This container can be installed in <code>partition/container</code> via LUMI/24.03 or more recent LUMI stacks, after which the module will be available in CrayEnv and all versions of the LUMI stack.</p> </li> <li> <p>EasyConfig ccpe-25.03-C-rocm-6.3-SP5-LUMI.eb, will provide ccpe/25.03-C-rocm-6.3-SP5-LUMI</p> <p>This module provides a modified version of the CPE container as it comes from HPE. The goal is to integrate it better with the current LUMI environment. Changes to the container are also made through this EasyConfig, so you may use it as a template to adapt the CPE containers to your needs.</p> <p>This C-rocm version also integrates ROCm in the container and installs it using the  SUSE zypper install tool, guaranteeing that all dependencies are also present in the right version. As such, it is the most robust variant of the containers with  ROCm. However, installing ROCm with the unprivileged build process is extremely slow,  so expect long build times (over one and a half hour on a compute node), rendering this approach rather inefficient. The assembly of the container may also run out-of-memory on the login nodes as the memory available to a single user is restricted to 96GB.</p> <p>This container can be installed in <code>partition/container</code> via LUMI/24.03 or more recent LUMI stacks, after which the module will be available in CrayEnv and all versions of the LUMI stack.</p> </li> </ul>","boost":10},{"location":"c/ccpe/#technical-documentation","title":"Technical documentation","text":"<p>These containers should not be spread outside LUMI, and some even contain unofficial versions and should not be spread to more users than needed. So do not spread without explicit agreement with HPE.</p>","boost":10},{"location":"c/ccpe/#issues","title":"Issues","text":"","boost":10},{"location":"c/ccpe/#which-approach","title":"Which approach?","text":"<ol> <li> <p>One can do as much as possible outside the container, injecting any change via bind     mounts. This makes for very easy debugging, as one can simply change those injected     files without rebuilding the container.</p> <p>As we shall see below, some minimal components have to be injected though to get Slurm to work.</p> </li> <li> <p>Create a custom container, implementing modifications and additions as much as possible     in the container.</p> <p>This also enables us to install a lot of extra software in the container, and give users an easy way to build a fully customised version. </p> <p>It also greatly simplifies the list of bind mounts.</p> <p>Debugging is a bit easier, but if we store copies from the files installed in the container also outside the container, it is still easy to temporarily inject them and experiment with changes.</p> </li> </ol> <p>The first approach also enables us to make the standard container available on a place  accessible to all users, without the need for them to store a copy in their project. On the other hand, having a local copy protects against changes that admins may make, and the size of the container is small compared to the size of a dataset one can expect for users who use LUMI to solve bigger problems.</p>","boost":10},{"location":"c/ccpe/#managing-bind-mounts","title":"Managing bind mounts","text":"<p>It is not hard to build a module that sets the <code>SINGULARITY_BIND</code> environment variable with all necessary bind mounts. Moreover, that environment variable is also made available in the container so can be further propagated easily to a job script.</p>","boost":10},{"location":"c/ccpe/#a-tale-of-two-environments","title":"A tale of two environments","text":"<p>On the system and inside the container, the module view is different. On the system, one sees all modules form the programming environments installed on the system, and modules in the LUST-installed stacks and possibly other local stacks.</p> <p>In the container, one sees a different set of programming environment modules, and depending on which software stacks are mounted, a different set of software stack modules.</p> <p>This matters because Lmod can only fully unload a module if it has access to the module file. Unloading is done by executing the module file while reversing the effect of commands that  make changes in the environment. If you execute a <code>module purge</code> or <code>module --force purge</code> on a list of modules for which not all module files are available, they will still appear as unloaded, but environment variables set by these modules will not be unset, and worse, directories will not be correctly removed from PATH-style environment variables. Lmod will not warn for that: It is a feature that any unload operation always succeeds, even if it could not be done correctly.</p> <p>This may be troublesome for the programming environment. As so much data is communicated to the  compiler wrappers via environment variables, they may be mislead and do unintended operations like trying to link in libraries that should not be linked in.</p> <p>This has implication on how we go into containers - one should clean up the system environment before entering in the container - and on Lmod: One should not use the same cache for both environments. It also complicates starting jobs.</p> <p>All these elements will be discussed below.</p>","boost":10},{"location":"c/ccpe/#wrapper-scripts","title":"Wrapper scripts","text":"<p>The EasyBuild-installed modules do provide some wrapper scripts that make some tasks  easier. They try to deal with the two environments problem by first purging the system environment before calling the singularity command.</p>","boost":10},{"location":"c/ccpe/#singularity-shell-wrapper-script-ccpe-shell","title":"<code>singularity shell</code> wrapper script <code>ccpe-shell</code>","text":"<p>This is a convenience wrapper script and is not useful if you want to pass arguments  to singularity (rather than to the shell it starts).</p> <p>The script does a clean-up of the modules in your environment and then cleans up Lmod  completely, as the environment outside the container is not compatible with the environment  in the container and as the loaded modules are needed to correctly unload them. It  does save the environment variables set by the <code>ccpe</code> module to restore them after  the <code>module --force purge</code> operation as otherwise the container wouldn't function properly  anymore. </p> <p>To make sure that <code>/etc/profile</code> would execute properly if it were called, the script  also unsets <code>PROFILEREAD</code>, as the environment generated by the system <code>/etc/profile</code>  may not be the ideal one for the container.</p>","boost":10},{"location":"c/ccpe/#singularity-exec-wrapper-script-ccpe-exec","title":"<code>singularity exec</code> wrapper script <code>ccpe-exec</code>","text":"<p>This is a convenience wrapper script and is not useful if you want to pass arguments  to singularity rather than to the command you start.</p> <p>It performs the same functions as <code>ccpe-shell</code>, but passes its arguments to the <code>singularity exec $SIFCCPE</code> command.</p>","boost":10},{"location":"c/ccpe/#singularity-run-wrapper-script-ccpe-run","title":"<code>singularity run</code> wrapper script <code>ccpe-run</code>","text":"<p>This is a convenience wrapper script and is not useful if you want to pass arguments  to singularity (rather than to the command it tries to run, if given).</p> <p>It performs the same functions as <code>ccpe-shell</code>, but passes its arguments to the <code>singularity run $SIFCCPE</code> command.</p>","boost":10},{"location":"c/ccpe/#singularity-wrapper-script-ccpe-singularity","title":"<code>singularity</code> wrapper script <code>ccpe-singularity</code>","text":"<p>This wrapper only cleans up the environment and then calls <code>singularity</code> passing all arguments of the wrapper unmodified to the <code>singularity</code> command. So you also need to pass the name of the container image, but can now call any singularity command with all singularity command-specific options in a clean environment.</p>","boost":10},{"location":"c/ccpe/#lmod-caches","title":"Lmod caches","text":"<p>As the environment in the container is not compatible with the environment outside,  we cannot use the regular user Lmod cache, or it may get corrupted, certainly if a  user is working both in and out of the container at the same time.</p> <p>Possible solutions/workarounds:</p> <ol> <li> <p>Work with <code>LMOD_IGNORE_CACHE=1</code> in the container.      As the whole of <code>/appl/lumi</code> is mounted in the containers by our EasyConfigs, this      will slow down module searches in Lmod considerably.</p> </li> <li> <p>Modify <code>/opt/cray/pe/lmod/lmod/libexec/myGlobals.lua</code>: Look for the line with <code>usrCacheDir</code>      and define a unique directory for it, e.g., <code>.cache/lmod/ccpe-{version}{versionsuffix}</code>     or any other container-specific version string.</p> <p>This procedure is very easy in the approach where we do as much as possible work inside the container. All one need is a <code>sed</code> command in the <code>%post</code> section of the build process.</p> <p>When trying to do everything as much as possible outside the container, the solution is  to use a <code>singularity exec</code> to copy the file from the container to the system, edit that file (both can be done in a <code>postinstallcmds</code> in EasyBuild), and then bind mount that file to  the container.</p> </li> </ol>","boost":10},{"location":"c/ccpe/#initialisation","title":"Initialisation","text":"<p>We need two types of initialisation of the CPE container:</p> <ul> <li> <p>When first going into the container, an environment fully compatible with the container     needs to be set up.</p> </li> <li> <p>When starting Slurm jobs from within the container that should also run in the container,      then we really would like an option to propagate that environment.</p> <p>This requires some care when writing the job script, but the module defines an environment variable that can be <code>eval</code>'ed to properly initialise the environment in the job script and run the job script itself in a container. </p> </li> </ul> <p>Also, a full initialisation cannot be done entirely in the container:</p> <ul> <li> <p>Singularity will pass the environment from the calling process. This includes also the Lmod     data structures and all variables set by the currently loaded modules.</p> <p>While it is easy to reset the Lmod data structures, it is not possible to properly reset all other environment variables that are set by those modules. This can only be done by unloading the modules (which executes the module script while reverting the effect of all commands that set something in the environment). As the regular CPE modules from the system are not available in the container, the unloading cannot be done in the container but has to be done before calling singularity.</p> </li> <li> <p>When running an interactive shell in the container, you then want to construct a proper environment     in the container. Singularity may source <code>/etc/bash.bashrc</code> which in turn may or may not source     other initialisation scripts such as <code>/etc/bash.bashrc.local</code>.</p> <p>It looks like if you call <code>singularity exec</code> or <code>singularity shell</code>, there is no automatic initialisation taking place though. So we create an environment variable in the container, <code>INITCCPE</code>, that will at least take care of initialising Lmod properly.  </p> </li> </ul> <p>Initialisation is influenced by the following scripts:</p> <ul> <li> <p>Scripts in <code>/singularity.d/env</code>: Used at the start of <code>singularity shell</code>, <code>singularity exec</code>,     <code>singularity run</code>.</p> <p>What one can do in these scripts, is limited though. It is a good place to set environment variables that should be available in the container.</p> </li> <li> <p>What happens with <code>profile</code>, <code>bash.bashrc</code>, <code>profile.local</code> and <code>bash.bashrc.local</code>, depends      also on which Linux variant, et., is being used.</p> <p>For the CPE containers:</p> <ul> <li> <p>In SUSE, one is advised to only use <code>profile.local</code> and <code>bash.bashrc.local</code> for site-specific     changes and to not change <code>profile</code> and <code>bash.bashrc</code>.</p> </li> <li> <p><code>/etc/profile</code> will source the scripts in <code>/etc/profile.d</code> and then source <code>/etc/profile/local</code>     if that script exists. The script does not exist in the CPE containers though.</p> </li> </ul> <p>However, neither of those is called when a shell is started with <code>singularity shell</code> or <code>singlarity exec</code>. As can be seen from files in <code>/.singularity.d/actions</code>, <code>singularity  exec</code> simply execs the command in a restricted shell (<code>/bin/sh</code>) while <code>singularity shell</code> starts bash with the <code>--norc</code> option.</p> <p><code>singularity run</code> as defined for the CPE container however does source <code>/etc/bash.bashrc</code> and hence <code>/etc/bash.bashrc.local</code> and the <code>~/.bashrc</code> file from the user. However, after reading <code>~/.bashrc</code>, there is still some code somewhere that resets the <code>PS1</code> environment variable to either the value of <code>SINGULARITYENV_PS1</code> or <code>Singlarity&gt;</code>. Somehow, before calling <code>~/.bashrc</code>, <code>PROMPT_COMMAND</code> is set to something like <code>PS1=&lt;prompt from singularity&gt; ; unset PROMPT_COMMAND</code>. Now if PROMPT_COMMAND is set, it is executed before showing the prompt defined by <code>PS1</code> and this hence resets the prompt that is set in., e.g., <code>~/.bashrc</code>.</p> </li> </ul> <p>As currently we have no proper solution to fully initialise the container from the  regular Linux scripts when using <code>singularity shell</code> or <code>singularity exec</code>,  the modules define the <code>INITCCPE</code> environment variable which  contains the commands to execute to initialise Lmod in the container.  Use <code>eval $INITCCPE</code> for that purpose.</p> <p>Our EasyBuild modules do provide a <code>/etc/bash.bashrc.local</code> file that does the same  initialisations as <code>eval $INITCCPE</code>. So calling <code>source /etc/bash.bashrc</code> is also an option  to initialise Lmod in the container.</p>","boost":10},{"location":"c/ccpe/#knowing-we-are-in-the-container","title":"Knowing we are in the container","text":"<p>There are different solutions for that purpose in job scripts:</p> <ul> <li> <p>Check if the directory <code>/.singularity.d</code> exists</p> </li> <li> <p>Singularity sets a number of environment variables, e.g., <code>SINGULARITY_CONTAINER</code>,      and one can check for those.</p> </li> <li> <p>Specifically for the CPE containers, one could also check for one of the environment     variables set by the <code>ccpe</code> modules.</p> </li> </ul> <p>During interactive use:</p> <ul> <li> <p>Singularity will set the prompt to <code>Singularity&gt;</code></p> <p>It does so in a dirty way by putting the command to set the prompt in the environment variable <code>PROMPT_COMMAND</code> and then unset that environment variable as part of the command. As a consequence, in those cases where <code>~/.bashrc</code> is read, any prompt defined in that script may be reset with the singularity one if you do not explicitly unset <code>PROMPT_COMMAND</code>.</p> </li> <li> <p>It is possible to overwrite the default singularity prompt by setting <code>SINGULARITYENV_PS1</code>.</p> </li> <li> <p>One can define a suitable prompt in <code>~/.bashrc</code>, at least for <code>singularity run</code>, and use any of     the tricks given above to detect if one <code>~/.bashrc</code> is executing in the container.</p> </li> </ul>","boost":10},{"location":"c/ccpe/#how-to-recognise-if-an-environment-is-compatible-with-the-container","title":"How to recognise if an environment is compatible with the container?","text":"<p>There is no easy way to see this from the PE modules that are loaded as these modules do not set environment variables that point at the release of the PE, except that in recent version, the PE release is part of the version number for LibSci and perftools.</p> <p>Current solution: Set and environment variable: <code>CCPE_VERSION={version}{versionsuffix}}</code>  (or some other unique version for the container) after a proper initialisation of the environment in the container.</p> <p>This is important as we do not want to clear an environment that is compatible with  the container when we start a job or jog step, and only want to do so if it is not. </p> <p>When starting Slurm jobs from within the container, this is important as one can then set the necessary  environment variables in the calling container already, mimicking the behaviour that users are used to from running jobs outside containers. Moreover, we need to be able to set up an environment in the job script that is then properly inherited when using <code>srun</code> to create job steps as otherwise, each MPI rank would also have  to first create a proper environment.</p>","boost":10},{"location":"c/ccpe/#getting-slurm-to-work","title":"Getting Slurm to work","text":"<p>The container images that LUST provides have been prepared for Slurm support.</p> <p>The container images that LUST provides as base images, have been modified in two crucial places to enable Slurm support by only bind mounting other files and directories. The text below is relevant though if you want to download your own image from the HPE support site and derive from our EasyConfigs to use (on, e.g., a different system for which you happen to be licensed to use the containers).</p> <p>Bind mounting the Slurm commands and libraries and some other libraries and work directories that they use, is not enough to get Slurm working properly in the container. The container needs to know the <code>slurm</code> user with the correct user- and groupid. The <code>slurm</code> user has to be known in <code>/etc/passwd</code> and <code>/etc/group</code> in the container.</p> <p>We know only one way to accomplish this: Rebuilding the container and using the <code>%files</code> section in the definition file to copy those two files from LUMI:</p> <pre><code>Bootstrap: localimage\n\nFrom: cpe-24.11.sif\n\n%files\n\n    /etc/group\n    /etc/passwd\n</code></pre> <p>Approaches that try to modify these files in the <code>%post</code> phase, don't work. At that moment you're running a script in singularity, and you don't see the real files, but virtual ones with information about your userid and groups added to those files. Any edit will fail or be discarded, depending on how you do it.</p> <p>Bind-mounting those files from the system also does not work, as singularity then assumes that those files contain all groups and userid, and will not add the lines for  userid and groups of the user that is running the container to the virtual copies.</p> <p>We have adapted the base images that we provide so that the <code>-raw</code> modules below that only rely on bind mounts and environment variables set through the module, can still support running Slurm commands inside the container. However, if a user wants to adapt those scripts for another container downloaded from the HPE web site, or even the same container if they are licensed to use it elsewhere and want to build on our work, they will have to rebuild that image with the above definition file.</p> <p>And of course, if they would like to use it on a different system, things can be different, as, e.g., the numeric user and group id for the Slurm user may be different.  Forget about portability of containers if you need to use these tricks...</p>","boost":10},{"location":"c/ccpe/#starting-jobs","title":"Starting jobs","text":"<p>The problem with running jobs, is that they have to deal with two incompatible environments, as discussed before.</p> <p>We'd like to run the job script in the container to be able to construct an environment compatible with the container, but Slurm will of course start a job batch script or regular job step in a regular system shell. So we will need to call singularity at the right point.</p> <p>In total there are six scenarios that we take into account for jobs launched with <code>sbatch</code>:</p> <ol> <li> <p>Jobs can be launched from within the container:</p> <ol> <li> <p>Using <code>sbatch</code> without <code>--export</code>: LUMI uses the default behaviour of Slurm, which is      inheriting the full environment. As we like to run the batch script also in a container,     we'd also like to inherit that environment in the container that the job will start up.</p> <p>This is also the behaviour that we want when starting job steps with <code>srun</code> from within the container.</p> </li> <li> <p>Using <code>sbatch</code> with <code>--export=$EXPORTCCPE</code>: The environment variable <code>EXPORTCCPE</code> contains     the names of all environment variables set by the <code>ccpe</code> module and that are essential to      be able to run the container. So with this way of starting, the batch script will start     with a clean environment with  no system modules loaded, yet the essential environment variables     needed to start the container in the batch script will still be there.</p> </li> <li> <p>Using <code>sbatch</code> with <code>--export=NONE</code>: The batch script will start in a clean system environment,     unaware of the CPE container from which it was started.</p> </li> </ol> </li> <li> <p>Jobs can be launched from the system:</p> <ol> <li> <p>Using <code>sbatch</code> without <code>--export</code>: Now the batch script will run in the system environment     and that environment has to be cleaned up before starting the singularity container.</p> <p>That clean-up is no different from the clean-up the wrapper scripts do.</p> <p>Note that one cannot be sure that the environment variables from the <code>ccpe</code> moudle will be  set as the batch script can be launched without them.</p> </li> <li> <p>Using <code>sbatch</code> with <code>--export=$EXPORTCCPE</code>: Not really different from when launching from within     the container. If the <code>ccpe</code> module is not loaded and EXPORTCCPE is undefined, this may behave a      little strange...</p> </li> <li> <p>Using <code>sbatch</code> with <code>--export=NONE</code>: The batch script will start in a clean system environment.</p> </li> </ol> </li> </ol> <p>The steps that we take to start a job and execute the job script in the container:</p> <ol> <li> <p>One should first ensure that the necessary environment variables to find back the container, do the     proper bindings, etc., are defined. So one my have to load the container module if those variables are     not present. This code should not be executed in the container as it would fail to find the module     anyway.</p> </li> <li> <p>Except in one case, we now have a system environment with just some default module loaded, or      other modules also loaded.</p> <p>Clear that environment in a similar way as we do for the wrappers.</p> </li> <li> <p>Restart the job script in the singularity container, but skip the code for the previous two steps.</p> </li> <li> <p>Ensure that the container is properly initialised if we did not inherit a valid container environment.</p> </li> <li> <p>Execute the remainder of the job script in the container.</p> </li> </ol> <p>Possible code to accomplish this is:</p> <pre><code>#!/bin/bash\n#SBATCH -J jobscript-template\n\u2026\n\n#\n# Step 1: Make sure the container environment variables are set.\n# \nif [ -z \"${SWITCHTOCCPE}\" ]\nthen\n    module load CrayEnv ccpe/25.03-B-rocm-6.3-SP5-LUMI || exit\nfi\n\nif [ ! -d \"/.singularity.d\" ]\nthen\n\n    #\n    # Clear the system environment\n    #\n    if [ \"$CCPE_VERSION\" != \"{local_ccpe_version}\" ]\n    then\n\n        for var in ${{EXPORTCCPE//,/ }}\n        do\n            if [ -v $var ] \n            then\n                eval $(declare -p $var | sed -e \"s/$var/save_$var/\")\n            fi\n        done\n\n        module --force purge\n        eval $($LMOD_DIR/clearLMOD_cmd --shell bash --full --quiet)\n        unset LUMI_INIT_FIRST_LOAD\n        unset PROFILEREAD\n\n        for var in ${{save_EXPORTCCPE//,/ }}\n        do\n            varname=\"save_$var\"\n            if [ -v $varname ]\n            then\n                eval $(declare -p $varname | sed -e \"s/save_$var/$var/\")\n                unset $varname\n            fi\n        done\n\n    fi\n\n    # \n    # Restart the job script in the container\n    #\n    exec singularity exec \"$SIFCCPE\" \"$0\" \"$@\"\n\nfi\n\n#\n# Ensure that the container is properly initialised, if this is not yet the case\n#\nif [ \"$CCPE_VERSION\" != \"{local_ccpe_version}\" ]\nthen\n\n    lmod_dir=\"/opt/cray/pe/lmod/lmod\"\n\n    source /etc/cray-pe.d/cray-pe-configuration.sh\n\n    source $lmod_dir/init/profile\n\n    mod_paths=\"/opt/cray/pe/lmod/modulefiles/core /opt/cray/pe/lmod/modulefiles/craype-targets/default $mpaths /opt/cray/modulefiles /opt/modulefiles\"\n    MODULEPATH=\"\"\n    for p in $(echo $mod_paths)\n    do \n        if [ -d $p ] \n        then\n            MODULEPATH=$MODULEPATH:$p\n        fi\n    done\n    export MODULEPATH=${{MODULEPATH/:/}}\n\n    LMOD_SYSTEM_DEFAULT_MODULES=$(echo ${{init_module_list:-PrgEnv-$default_prgenv}} | sed -E \"s_[[:space:]]+_:_g\") ;\n    export LMOD_SYSTEM_DEFAULT_MODULES\n    eval \"source $BASH_ENV &amp;&amp; module --initial_load --no_redirect restore\"\n    unset lmod_dir\n\n    export CCPE_VERSION=\"{local_ccpe_version}\"\n\nfi\nfunction clear-lmod() { [ -d $HOME/.cache/lmod ] &amp;&amp; /bin/rm -rf $HOME/.cache/lmod ; } ;\nfunction ccpe-srun() { SINGULARITYENV_PATH=$PATH SINGULARITYENV_LD_LIBRARY_PATH=$LD_LIBRARY_PATH srun \"$@\" ; } ;\n\nunset SLURM_EXPORT_ENV ;\n\n# \n# From here on, the user can insert the code that runs in the container.\n#\n\nmodule load LUMI/25.03 partition/C\nmodule load lumi-CPEtools/1.2-cpeCray-25.03-hpcat-0.9\n\nccpe-srun \u2026 singularity exec $SIFCCPE &lt;command&gt; \n</code></pre> <p>This is of course way to complicated to expose to users, but line 57-86 is  put in the environment variable <code>INITCCPE</code> so that code can be replaced with <code>eval $INITCCPE</code>, and then the whole block from line 13 till (and including) line 88 is put in the environment variable <code>SWITCHTOCCPE</code> so that block can be replaced with <code>eval $SWITCHTOCCPE</code></p> <p>So basically, all that a user needs is</p> <pre><code>#!/bin/bash\n#SBATCH -J jobscript-template\n\u2026\n\n#\n# Step 1: Make sure the container environment variables are set.\n# \nif [ -z \"${SWITCHTOCCPE}\" ]\nthen\n    module load CrayEnv ccpe/25.03-B-rocm-6.3-SP5-LUMI || exit\nfi\n\n#\n# Steps 2-4: Clean up, switch to executing in the container and ensure a proper \n# container environment.\n#\neval $SWITCHTOCCPE\n\n# \n# From here on, the user can insert the code that runs in the container.\n#\n\nmodule list\n\nccpe-srun \u2026 singularity exec $SIFCCPE &lt;command&gt; \n</code></pre> <p>Let us analyse the code a bit more:</p> <p>The block from line 13 till 53 in the extended version is only executed when not in the  context of the container, so the first time the batch script runs.  If it does not detect an environment from the container (the test on line 19, with <code>{local_ccpe_version}</code> replaced with the actual version string for the container as determined by the EasyConfig that generates this script) then:</p> <ul> <li> <p>It first saves some environment variables set by the CCPE modules that should not be erased.</p> <p>This needed some clever bash trickery to avoid that environment variables get expanded.</p> </li> <li> <p>Next, it purges all currently loaded modules which hopefully are from the system environment      as otherwise variables may not be unset,</p> </li> <li> <p>Next it clears Lmod to that all Lmod data structures are removed. Lmod does     come with its own command to do that which is what we call here in the special     way required by Lmod (as the command basically generates a sequence of bash     commands that do the work).</p> </li> <li> <p>Next it restores the environment variables from the <code>ccpe</code> module as they have been erased by     the <code>module purge</code>.</p> </li> </ul> <p>Finally, on line 50, it restarts the batch script with all its arguments in the container.  This causes the batch script to execute again from the start,  but as <code>SWITCHTOCCPE</code> should be defined when we get here, and since we will now be in the container, all code discussed so far will be skipped.</p> <p>The code between line 54 and 86 is already executed in the container.  So if the code detects that there is already a valid environment for the container (where we again simply test for the value of <code>CCPE_VERSION</code>), nothing more is done, but if there is no proper environment, the remaining part of this routine basically runs the code used on LUMI to initialise Lmod with the proper modules from the HPE Cray Programming Environment, but now in the container. As it is done in the container,  you will get the programming environment from the container.</p> <p>On line 88, the script unsets <code>SLURM_EXPORT_ENV</code>. This environment variable would be  set by Slurm if <code>--export</code> was used to submit the batch job, but we do not want this to propagate to job steps started with <code>srun</code> in the container, as there we want the full environment that the user builds in the job script to be propagated.</p> <p>The other interesting bit is line 90 in the long script or 25 in the shortened user  version of the script, where we want to start a job step running in a container.  <code>srun</code> wills start a command outside the container, but with a copy of the environment inherited from the container. So we need to call <code>singularity</code> to get in the container again. As the <code>singularity</code> command is in a standard system directory, it will be found also with the environment from the container active instead of the environment of the system. It in turn will then pass that environment to the container it starts, except for  some variables that are re-initialised in the container. These re-initialised variables include <code>PATH</code> and <code>LD_LIBRARY_PATH</code>, so even though it will appear as if all modules are still correctly loaded, the value of those 2 environment variables is no longer  correct. The solution is to inject the correct values into the container through the <code>SINGULARITYENV_PATH</code> and <code>SINGULARITYENV_LD_LIBRARY_PATH</code> environment variables and  this is precisely what the bash function <code>ccpe-run</code> does:</p> <pre><code>function ccpe-srun() { SINGULARITYENV_PATH=$PATH SINGULARITYENV_LD_LIBRARY_PATH=$LD_LIBRARY_PATH srun \"$@\" ; } ;\n</code></pre> <p>Alternatively, instead of using <code>ccpe-run</code>, one can simply use </p> <pre><code>SINGULARITYENV_PATH=$PATH SINGULARITYENV_LD_LIBRARY_PATH=$LD_LIBRARY_PATH srun \\\n    singularity exec $SIFCCPE hybrid_check\n</code></pre> <p>or</p> <pre><code>export SINGULARITYENV_PATH=$PATH \nexport SINGULARITYENV_LD_LIBRARY_PATH=$LD_LIBRARY_PATH \nsrun singularity exec $SIFCCPE hybrid_check\n</code></pre> <p>The <code>salloc</code> command does not yet work in a container</p> <p>Currently, we haven't found a way yet to get the <code>salloc</code> command to work properly when started in the container. The workaround is to use <code>salloc</code> outside the container, then go in the container.</p>","boost":10},{"location":"c/ccpe/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"c/ccpe/#versions-2411-rocm-62-lumi","title":"Versions 24.11-*-rocm-6.2-LUMI","text":"<p>The <code>-LUMI</code> versions (currently the only ones offered) are built specifically to support a <code>LUMI</code> software stack based on the version of the CPE in the container.</p> <p>Two different ways are currently offered</p> <ul> <li> <p><code>24.11-B-rocm-6.2-LUMI</code> bind mounts a SquashFS file with ROCm 6.2.4 to the container.     This keeps the size of the container small and makes it easier to adapt the container     to the needs of a specific project.</p> </li> <li> <p><code>24.11-C-rocm-6.2-LUMI</code> installs ROCm from the AMD site using the SUSE <code>zypper</code> tool.     It is a slow approach with build times easily exceeding an hour and     a half. However, using <code>zypper</code> enables users to change the ROCm version themselves      more easily, and also ensures that all OS dependencies are available in the proper version.</p> </li> </ul> <p>An alternative is to install the ROCm installation from a compressed tar file that LUST could provide, but though that may be a faster build process, it does not guarantee that all  OS dependencies are available in the proper version.</p> <p>Our advise is to start with the <code>-B-rocm</code> version and if there are issues that may come from library compatibility versions, switch to the <code>-C-rocm</code> versions.</p> <p>For the <code>24.11-B-rocm-6.2-LUMI</code> version, the ROCm SquashFS file and corresponding bzip2-compressed tar files were obtained from a ROCm installation in another container. To repeat the trick as  a user with a different version of ROCm,  you will have to modify either the bind mount source (<code>-B-rocm</code>) or the location of the compressed tar file (<code>-C-rocm</code> variant) as these are in a location managed by LUST.</p> <ul> <li> <p>The <code>rocm</code>, <code>amd</code> and <code>amd-mixed</code> module files are copied from the system (in <code>%files</code>) and      and then edited through <code>sed</code> in <code>%post</code> to change the version to 6.2.4.</p> </li> <li> <p>The <code>rocm*.pc</code> files in <code>/usr/lib64/pkgconfig</code> are copied from the system ((in <code>%files</code>) and      and then edited through <code>sed</code> in <code>%post</code> to change the version to 6.2.4.</p> </li> <li> <p>Also in <code>%post</code>, a symbolic link for <code>/opt/rocm</code> is created pointing to <code>/opt/rocm-6.2.4</code>      through <code>/etc/alternatives</code>.</p> </li> </ul> <p>We made several modifications to the container so that we can install  a LUMI software stack almost the way we would do so without a container.  Several of the files that we inject in the container, also have copies in the installation directory of the container, subdirectory <code>config</code>, which may be useful to experiment with changes and overwrite the versions in the container.</p> <p>Some elements of the EasyBuild recipes and modifications to the container:</p> <ul> <li> <p>Variables defined at the top of the EasyConfig file:</p> <ul> <li> <p><code>local_ccpe_version</code>: This will be used as the value for <code>CCPE_VERSION</code> and     the directory used for the Lmod cache. Set to <code>24.11-raw</code> for this      container.</p> </li> <li> <p><code>local_appl_lumi</code>: System subdirectory that will be used for <code>/appl/lumi</code>     in the container.</p> </li> </ul> </li> <li> <p>The container that has been provided by LUST as a starting point, does     have some protection built in to prevent it being taken to other systems.     One element of that protection, is some checks of the <code>/etc/slurm/slurm.conf</code>     file. </p> <p>To be able to use the <code>%post</code> section during the \"unpriveleged proot build\" process, that file has to be present in the container. Therefore we copy that file in the <code>%files</code> phase, but remove it again in the <code>%post</code> phase as whe running the container, the whole Slurm configuration directory is bind mounted in the container.</p> </li> <li> <p>We inject the file <code>/.singularity.d/env/99-z-ccpe-init</code> which we use     to define additional environment variables in the container that can     then be used to execute commands.</p> <p>Currently used so that <code>eval $INITCCPE</code> does a full (re)initialization of Lmod so that it functions in the same way as on LUMI.</p> </li> <li> <p>As the container is already set up to support a runscript, we simply inject     a new one via <code>%files</code> which makes it easier to have a nice layout in the      runscript and in the container definition file.</p> </li> <li> <p>Lmod cache strategy: User cache stored in a separate directory,      <code>~/.cache/lmod/ccpe-%(version)s-%(versionsuffix)s</code>, by editing     <code>/opt/cray/pe/lmod/lmod/libexec/myGlobals.lua</code>.</p> </li> <li> <p>libfabric and CXI provider: Bind mount from the system.</p> <p>To find the correct directories and files to bind, execute the following commands:</p> <pre><code>module --redirect show libfabric | grep '\"PATH\"' | awk -F'\"' '{ print $4 }' | sed -e 's|/bin||'\nmodule --loc --redirect show libfabric | sed -e 's|\\(.*libfabric.*\\)/.*|\\1|'\nldd $(module --redirect show libfabric | grep '\"LD_LIBRARY_PATH\"' | awk -F'\"' '{ print $4 }')/libfabric.so | grep libcxi | awk '{print $3}'\n</code></pre> </li> <li> <p>A bit inconsistent, but we copy <code>liblustreapi</code> and <code>liblnetconfig</code> from the system     to reduce the number of bind mounts, even though this may change as quickly as the libfabric libraries.</p> </li> <li> <p>ROCm: ROCm 6.2.4, either bind mounted from a SquashFS file or installed in the      container via <code>zypper</code>.</p> </li> <li> <p>Slurm support is still provided as much as possible by binding files from the system     to ensure that the same version is used in the container as LUMI uses, as otherwise     we may expect conflicts.</p> <p>One thing is done during the build process though: We need to copy the <code>/etc/group</code>  and <code>/etc/passwd</code> files from the system into the container during the <code>%files</code> phase (editing those files in the <code>%post</code> phase does not work). </p> </li> <li> <p>We made a deliberate choice to not hard-code the bindings in the <code>ccpe-*</code>     scripts in case a user would want to add to the environment <code>SINGULARITY_BIND</code> variable,     and also deliberately did not hard-code the path to the container file     in those scripts as in this module, a user can safely delete the container     from the installation directory and use the copy in <code>/appl/local/containers/easybuild-sif-images</code>      instead if they built the container starting from our images and in <code>partition/container</code>.</p> <p>The <code>ccpe-*</code> wrapper scripts are defined in the EasyConfig itself (multiline strings) and brought on the system in <code>postinstallcmds</code> via a trick with bash HERE documents.</p> </li> <li> <p>The sanity check is specific to the 24.11 containers and will need to be updated     for different versions of the programming environment.</p> </li> </ul>","boost":10},{"location":"c/ccpe/#versions-2503-rocm-63-sp5-lumi","title":"Versions 25.03-*-rocm-6.3-SP5-LUMI","text":"<p>These containers build upon the Cray SUSE 15 SP5 version of the container. They add both ROCm 6.3.4 and 6.2.4 to the container. The rationale is that the CPE in the container is really meant to be used with ROCm 6.3, but running with ROCm 6.3 may fail as the driver on LUMI is too old, so one can experiment with both versions or see if it is possible to  compile with ROCm 6.3 (which may happen even if another ROCm version is loaded anyway as  the CCE compiler now already includes some code from ROCm 6.3) while run with the older  version of the libraries.</p> <p>Two different versions are currently provided:</p> <ul> <li> <p><code>25.03-B-rocm-6.3-SP5-LUMI</code> bind mounts SquashFS file with ROCm 6.2.4 and 6.3.4      to the container.     This keeps the size of the container small and makes it easier to adapt the container     to the needs of a specific project.</p> <p>The container build recipe only creates the <code>/opt/rocm-6.2.4</code> and <code>/opt/rocm-6.3.4</code> directories as mount points and as it is needed to successfully complete some other steps discussed below.</p> </li> <li> <p><code>25.03-C-rocm-6.3-SP5-LUMI</code> installs ROCm 6.2.4 and 6.3.4 from the AMD site using the SUSE <code>zypper</code> tool.     It is a slow approach with build times easily exceeding an hour and     a half. However, using <code>zypper</code> enables users to change the ROCm version themselves      more easily, and also ensures that all OS dependencies are available in the proper version.</p> </li> </ul> <p>An alternative is to install the ROCm installation from a compressed tar file that LUST could provide, but though that may be a faster build process, it does not guarantee that all  OS dependencies are available in the proper version.</p> <p>Our advise is to start with the <code>-B-rocm</code> version and if there are issues that may come from library compatibility versions, switch to the <code>-C-rocm</code> versions. T</p> <p>Furthermore,</p> <ul> <li> <p>The <code>rocm</code>, <code>amd</code> and <code>amd-mixed</code> module files are copied from the system (in <code>%files</code>) and      and then edited through <code>sed</code> in <code>%post</code> to change the version to 6.2.4 and 6.3.4.</p> </li> <li> <p>The <code>rocm*.pc</code> files in <code>/usr/lib64/pkgconfig</code> are copied from the system ((in <code>%files</code>) and      and then edited through <code>sed</code> in <code>%post</code> to change the version to 6.2.4 and 6.3.4.</p> </li> <li> <p>Also in <code>%post</code>, a symbolic link for <code>/opt/rocm</code> is created pointing to <code>/opt/rocm-6.3.4</code>      through <code>/etc/alternatives</code>.</p> </li> </ul> <p>Other elements in the build:</p> <ul> <li> <p>Variables defined at the top of the EasyConfig file:</p> <ul> <li> <p><code>local_ccpe_version</code>: This will be used as the value for <code>CCPE_VERSION</code> and     the directory used for the Lmod cache. Set to <code>24.11-raw</code> for this      container.</p> </li> <li> <p><code>local_appl_lumi</code>: System subdirectory that will be used for <code>/appl/lumi</code>     in the container.</p> </li> <li> <p>ROCm-related variables:</p> <ul> <li> <p><code>local_rocm_version</code>: System ROCm version, currently <code>6.0.3</code></p> </li> <li> <p><code>local_c1_rocm_version</code>: Default ROCm version for the container, <code>6.3.4</code></p> </li> <li> <p><code>local_c2_rocm_version</code>: Backup ROCm version for the container, <code>6.2.4</code>.</p> </li> </ul> </li> </ul> </li> <li> <p>The file <code>/.singularity.d/env/99-z-ccpe-init</code> is used     to define additional environment variables in the container that can     then be used to execute commands. It is generated in the EasyConfig and     then injected in the container through the <code>%files</code> section of the definition     file.</p> <p>Currently used so that <code>eval $INITCCPE</code> does a full (re)initialization of Lmod so that it functions in the same way as on LUMI.</p> </li> <li> <p>The <code>/etc/bash/bashrc.local</code> file is replaced with one that just calls     <code>eval $INITCCPE</code>, and there is an empty placeholder for <code>/etc/profile.local</code>.</p> </li> <li> <p>As the container is already set up to support a runscript, we simply inject     a new one via <code>%files</code> which makes it easier to have a nice layout in the      runscript and in the container definition file.</p> </li> <li> <p>Compared to the 24.11 container, several packages were missing so a lot more     needs to be added with <code>zypper</code>. This includes an editor, but more importantly,     only the C and POSIX locales were known which was not even enough to use      <code>archspec</code> or install some other packages that give additional effects in     EasyBuild. The solution was to install <code>glibc-locale</code>.</p> </li> <li> <p>Lmod cache strategy: User cache stored in a separate directory,      <code>~/.cache/lmod/ccpe-%(version)s-%(versionsuffix)s</code>, by editing     <code>/opt/cray/pe/lmod/lmod/libexec/myGlobals.lua</code>.</p> </li> <li> <p>libfabric and CXI provider: Bind mount from the system.</p> <p>To find the correct directories and files to bind, execute the following commands:</p> <pre><code>module --redirect show libfabric | grep '\"PATH\"' | awk -F'\"' '{ print $4 }' | sed -e 's|/bin||'\nmodule --loc --redirect show libfabric | sed -e 's|\\(.*libfabric.*\\)/.*|\\1|'\nldd $(module --redirect show libfabric | grep '\"LD_LIBRARY_PATH\"' | awk -F'\"' '{ print $4 }')/libfabric.so | grep libcxi | awk '{print $3}'\n</code></pre> </li> <li> <p>A bit inconsistent, but we copy <code>liblustreapi</code> and <code>liblnetconfig</code> from the system     to reduce the number of bind mounts, even though this may change as quickly as the libfabric libraries.</p> </li> <li> <p>The 25.03 containers need the xpmem libraries and module from the system which     is done through bind mounts (could in principle replace with copying from the     system).</p> <p>The <code>xpmem</code> installation in the container is then still broken as the default is not  properly set in <code>/etc/alternatives</code> and as it is not added to the system shared library search path through a file in <code>/etc/ld.so.conf.d</code>, so these are also fixed in the container definition.</p> </li> <li> <p>There are issues with <code>cray-pals</code> on LUMI. Older versions are installed in <code>/opt/cray/pe</code>,     but for some reason, the version that came with 24.03 is actually installed in <code>/opt/cray</code>,     but there the modulefiles are not found.</p> <p>It is also missing in the container, yet used by some other libraries from the  PE.</p> <p>Rather than binding from the system as we do for <code>xpmem</code>, we chose to copy  the libraries to the container. We kept the installation in <code>/opt/cray/pals</code> as otherwise the  modulefiles would not be correct, but copied the modulefiles to the proper locations in <code>/opt/cray/pe</code> rather than trying to adapt the <code>MODULEPATH</code>.</p> <p>Rather than using the trick with the links in <code>/opt/cray/pe/lib64</code>, it gets its own file in <code>/etc/ld.so.conf.d</code> as is the case on LUMI (where the links also exist  though but point to an older version of the library).</p> <p>Moreover, libpals requires a newer version of libjansson then we get with <code>zypper</code> using the OpenSUSE repositories, so we copy it from the system and create the  necessary links.</p> </li> <li> <p>ROCm: Either bound from a SquashFS file, installed from tar files or installed     via <code>zypper</code>, depending on the container.</p> </li> <li> <p>Slurm support is still provided as much as possible by binding files from the system     to ensure that the same version is used in the container as LUMI uses, as otherwise     we may expect conflicts.</p> <p>One thing is done during the build process though: We need to copy the <code>/etc/group</code>  and <code>/etc/passwd</code> files from the system into the container during the <code>%files</code> phase (editing those files in the <code>%post</code> phase does not work). </p> </li> <li> <p>We made a deliberate choice to not hard-code the bindings in the <code>ccpe-*</code>     scripts in case a user would want to add to the environment <code>SINGULARITY_BIND</code> variable,     and also deliberately did not hard-code the path to the container file     in those scripts as in this module, a user can safely delete the container     from the installation directory and use the copy in <code>/appl/local/containers/easybuild-sif-images</code>      instead if they built the container starting from our images and in <code>partition/container</code>.</p> <p>The <code>ccpe-*</code> wrapper scripts are defined in the EasyConfig itself (multiline strings) and brought on the system in <code>postinstallcmds</code> via a trick with bash HERE documents.</p> </li> <li> <p>The sanity check is specific to the 25.11 containers and will need to be updated     for different versions of the programming environment. We've tried to catch everything     which depends on the version of the PE in variables in the EasyConfig, defined      just above the sanity check commands (currently only 1).</p> </li> </ul>","boost":10},{"location":"c/cotainr/","title":"cotainr","text":"<p>[package list]</p>","boost":10},{"location":"c/cotainr/#cotainr","title":"cotainr","text":"","boost":10},{"location":"c/cotainr/#license-information","title":"License information","text":"<p>The cotainr package is disributed under the  European Union Public License 1.2, a copy of which can be found in the  LICENSE file in the cotainr GitHub repository.</p>","boost":10},{"location":"c/cotainr/#user-documentation","title":"User documentation","text":"<p>Extensive user documentation for cotainr is available on ReadTheDocs. There is also some LUMI-specific information on the  Singularity page in the main LUMI documentation.</p> <p>The cotainr package is developed by the LUMI consortium member DeiC (Denmark).</p> <p>Several modules are available on LUMI, depending on the environment that you're using:</p> <ul> <li>In <code>CrayEnv</code> the <code>cotainr</code> modules will use whatever version of <code>cray-python</code>     is the default, which depends on other modules you may have loaded and can also     change after system updates.</li> <li>In <code>LUMI</code> software stacks the version of <code>cray-python</code> that matches the      version of the software stack will be used. This is also reflected in the      version part of the name of the module.</li> </ul>","boost":10},{"location":"c/cotainr/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider cotainr/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>cotainr/2023.01.0-cray-python-3.9.12.1 (EasyConfig: cotainr-2023.01.0-cray-python-3.9.12.1.eb)</p> </li> <li> <p>cotainr/2023.01.0 (EasyConfig: cotainr-2023.01.0.eb)</p> </li> <li> <p>cotainr/2023.11.0-20240529-AIcourse-cray-python-3.10.10 (EasyConfig: cotainr-2023.11.0-20240529-AIcourse-cray-python-3.10.10.eb)</p> </li> <li> <p>cotainr/2023.11.0-20240529-AIcourse (EasyConfig: cotainr-2023.11.0-20240529-AIcourse.eb)</p> <p>cotainr for CrayEnv with the ROCm system image that was also used in the AI course of May 2024 in Copenhagen. This version should be able to run the examples from that course.</p> </li> <li> <p>cotainr/2023.11.0-20240909-cray-python-3.11.7 (EasyConfig: cotainr-2023.11.0-20240909-cray-python-3.11.7.eb)</p> <p>cotainr for LUMI/24.03 with the ROCm system image updated after the maintenance of September 2024</p> </li> <li> <p>cotainr/2023.11.0-20240909 (EasyConfig: cotainr-2023.11.0-20240909.eb)</p> <p>cotainr for LUMI/24.03 with the ROCm system image updated after the maintenance of September 2024</p> </li> <li> <p>cotainr/2023.11.0-cray-python-3.9.13.1 (EasyConfig: cotainr-2023.11.0-cray-python-3.9.13.1.eb)</p> </li> </ul>","boost":10},{"location":"c/cotainr/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>cotainr on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> <li> <p>cotainr documentation on ReadTheDocs</p> </li> </ul>","boost":10},{"location":"c/cotainr/#easybuild","title":"EasyBuild","text":"<p>The cotainr tool is an internal development of DeiC and currently not in the EasyBuilders or CSCS repositories.</p> <p>A sample EasyConfig is provided in the  README file in the cotainer GitHub.</p>","boost":10},{"location":"c/cotainr/#version-2023010-for-crayenv","title":"Version 2023.01.0 for CrayEnv","text":"<ul> <li> <p>The EasyConfig is a development of DeiC and the LUMI User Support Team.</p> </li> <li> <p>The specific version of cray-python is left open in this version of the module.</p> </li> </ul>","boost":10},{"location":"c/cotainr/#version-2023010-cray-python-39121-for-lumi2208","title":"Version 2023.01.0-cray-python-3.9.12.1 for LUMI/22.08","text":"<ul> <li> <p>The EasyConfig is a development of DeiC and the LUMI User Support Team.</p> </li> <li> <p>In accordance to practices for the LUMI software stacks, a specific version of      cray-python is loaded (corresponding to the one used in this version of the     software stack).</p> </li> </ul>","boost":10},{"location":"c/cotainr/#version-2023110-cray-python-39131-for-lumi2212","title":"Version 2023.11.0-cray-python-3.9.13.1 for LUMI/22.12","text":"<ul> <li>Trivial port of the EasyConfig for 2023.01.0-cray-python-3.9.12.1</li> </ul>","boost":10},{"location":"c/cotainr/#version-2023110-20240529-aicourse-for-crayenv","title":"Version 2023.11.0-20240529-AIcourse for CrayEnv","text":"<ul> <li>Port of the EasyConfig for 2023.01.0 for CrayEnv, updating to a newer     version of <code>cotainr</code> and changing the base image for <code>lumi-g</code> (keeping the old one     available as <code>lumi-g-classic</code> for users who want to reproduce previous builds).</li> </ul>","boost":10},{"location":"c/cotainr/#version-2023110-20240529-aicourse-cray-python-31010-for-lumi2309","title":"Version 2023.11.0-20240529-AIcourse-cray-python-3.10.10 for LUMI/23.09","text":"<ul> <li>Modification of 2023.11.0-cray-python-3.9.13.1 for the Cray Python version of 23.09,     and with the base images used in the AI course of May 2024 in Copenhagen.</li> </ul>","boost":10},{"location":"c/cotainr/#version-2023110-20240909-for-crayenv","title":"Version 2023.11.0-20240909 for CrayEnv","text":"<ul> <li>Port of the EasyConfig for 2023.11.0-20240529-AIcourse for CrayEnv, updating the base     image for <code>lumi-g</code> to rocm-6.0.3. The previous <code>lumi-g</code> and <code>lumi-g-classic</code> are     removed due to lack of official support for the ROCm 5.x based environments.</li> </ul>","boost":10},{"location":"d/DB/","title":"DB","text":"<p>[package list]</p>","boost":10},{"location":"d/DB/#db","title":"DB","text":"","boost":10},{"location":"d/DB/#license-information","title":"License information","text":"<p>Oracle employs a dual licensing model that offers customers a choice  of either our open source license or a commercial license. Our open  source license is OSI-certified and permits use of Berkeley DB in  open source projects or in applications that are not distributed to  third parties.</p> <p>Our commercial license permits closed-source distribution of an  application to third parties and provides business assurance.  Please address your request for commercial licensing to  berkeleydb-info_us@oracle.com.</p> <p>The full licensing information can be found on the Oracle Berkeley DB licensing page.</p> <p>From LUMI/23.12 on, the license is also available as <code>$EBROOTDB/share/licenses/DB/LICENSE</code> after loading the module.</p>","boost":10},{"location":"d/DB/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"d/DB/#what-is-db","title":"What is DB?","text":"<p>Oracle Berkeley DB  is a family of embedded key-value database libraries providing scalable high-performance data management services to applications. The Berkeley DB products use simple function-call APIs for data access and management.</p> <p>Berkeley DB enables the development of custom data management solutions, without the overhead traditionally associated with such custom projects. Berkeley DB provides a collection of well-proven building-block technologies that can be configured to address any application need from the hand-held device to the data center, from a local storage solution to a world-wide distributed one, from kilobytes to petabytes.</p>","boost":10},{"location":"d/DB/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider DB/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>DB/18.1.40-cpeAMD-22.08 (EasyConfig: DB-18.1.40-cpeAMD-22.08.eb)</p> </li> <li> <p>DB/18.1.40-cpeAMD-22.12 (EasyConfig: DB-18.1.40-cpeAMD-22.12.eb)</p> </li> <li> <p>DB/18.1.40-cpeAMD-23.09 (EasyConfig: DB-18.1.40-cpeAMD-23.09.eb)</p> </li> <li> <p>DB/18.1.40-cpeAMD-23.12 (EasyConfig: DB-18.1.40-cpeAMD-23.12.eb)</p> </li> <li> <p>DB/18.1.40-cpeAMD-24.03 (EasyConfig: DB-18.1.40-cpeAMD-24.03.eb)</p> </li> <li> <p>DB/18.1.40-cpeAOCC-22.08 (EasyConfig: DB-18.1.40-cpeAOCC-22.08.eb)</p> </li> <li> <p>DB/18.1.40-cpeAOCC-22.12 (EasyConfig: DB-18.1.40-cpeAOCC-22.12.eb)</p> </li> <li> <p>DB/18.1.40-cpeAOCC-23.09 (EasyConfig: DB-18.1.40-cpeAOCC-23.09.eb)</p> </li> <li> <p>DB/18.1.40-cpeAOCC-23.12 (EasyConfig: DB-18.1.40-cpeAOCC-23.12.eb)</p> </li> <li> <p>DB/18.1.40-cpeAOCC-24.03 (EasyConfig: DB-18.1.40-cpeAOCC-24.03.eb)</p> </li> <li> <p>DB/18.1.40-cpeCray-22.08 (EasyConfig: DB-18.1.40-cpeCray-22.08.eb)</p> </li> <li> <p>DB/18.1.40-cpeCray-22.12 (EasyConfig: DB-18.1.40-cpeCray-22.12.eb)</p> </li> <li> <p>DB/18.1.40-cpeCray-23.03 (EasyConfig: DB-18.1.40-cpeCray-23.03.eb)</p> </li> <li> <p>DB/18.1.40-cpeCray-23.09 (EasyConfig: DB-18.1.40-cpeCray-23.09.eb)</p> </li> <li> <p>DB/18.1.40-cpeCray-23.12 (EasyConfig: DB-18.1.40-cpeCray-23.12.eb)</p> </li> <li> <p>DB/18.1.40-cpeCray-24.03 (EasyConfig: DB-18.1.40-cpeCray-24.03.eb)</p> </li> <li> <p>DB/18.1.40-cpeGNU-22.08 (EasyConfig: DB-18.1.40-cpeGNU-22.08.eb)</p> </li> <li> <p>DB/18.1.40-cpeGNU-22.12 (EasyConfig: DB-18.1.40-cpeGNU-22.12.eb)</p> </li> <li> <p>DB/18.1.40-cpeGNU-23.09 (EasyConfig: DB-18.1.40-cpeGNU-23.09.eb)</p> </li> <li> <p>DB/18.1.40-cpeGNU-23.12 (EasyConfig: DB-18.1.40-cpeGNU-23.12.eb)</p> </li> <li> <p>DB/18.1.40-cpeGNU-24.03 (EasyConfig: DB-18.1.40-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"d/DB/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>DB home page</p> <ul> <li>DB downloads</li> </ul> </li> </ul>","boost":10},{"location":"d/DB/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>DB in the EasyBuilders repository</p> </li> <li> <p>There is no support for DB in the CSCS repository</p> </li> </ul>","boost":10},{"location":"d/DB/#version-18140-from-cpe-2106-onwards","title":"Version 18.1.40 from CPE 21.06 onwards","text":"<ul> <li> <p>The EasyConfig file is a direct port of the EasyBuilders one with some     documentation updates.</p> </li> <li> <p>For LUMI/22.12: Switch to the improved way of specifying checksums.</p> </li> <li> <p>Added more software license info from 23.12 on.</p> </li> </ul>","boost":10},{"location":"d/DB/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig DB-18.1.40-cpeAMD-21.06.eb, with module DB/18.1.40-cpeAMD-21.06</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeAOCC-21.12.eb, with module DB/18.1.40-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeAOCC-22.06.eb, with module DB/18.1.40-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeCray-21.06.eb, with module DB/18.1.40-cpeCray-21.06</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeCray-21.08.eb, with module DB/18.1.40-cpeCray-21.08</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeCray-21.12.eb, with module DB/18.1.40-cpeCray-21.12</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeCray-22.06.eb, with module DB/18.1.40-cpeCray-22.06</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeGNU-21.06.eb, with module DB/18.1.40-cpeGNU-21.06</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeGNU-21.08.eb, with module DB/18.1.40-cpeGNU-21.08</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeGNU-21.12.eb, with module DB/18.1.40-cpeGNU-21.12</p> </li> <li> <p>EasyConfig DB-18.1.40-cpeGNU-22.06.eb, with module DB/18.1.40-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"d/DBus/","title":"DBus","text":"<p>[package list]</p>","boost":10},{"location":"d/DBus/#dbus","title":"DBus","text":"","boost":10},{"location":"d/DBus/#license-information","title":"License information","text":"<p>DBus is licensed to you under your choice of the  Academic Free License version 2.1, or the  GNU General Public License version 2 (or, at your option any later version).</p> <p>After loading the module, all information is available in <code>$EBROOTDBUS/share/licenses/DBus</code>.</p>","boost":10},{"location":"d/DBus/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider DBus/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>DBus/1.15.8-cpeGNU-24.03 (EasyConfig: DBus-1.15.8-cpeGNU-24.03.eb)</li> </ul>","boost":10},{"location":"d/DBus/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>DBus website</p> <ul> <li>DBus releases on the DBus website</li> </ul> </li> </ul>","boost":10},{"location":"d/DBus/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>DBus support in the EasyBuilders repository</p> </li> <li> <p>There is no support for DBus in the CSCS repository</p> </li> <li> <p>dbus support in Spack </p> </li> </ul>","boost":10},{"location":"d/DBus/#1158-for-cpegnu-2403","title":"1.15.8 for cpeGNU 24.03","text":"<ul> <li> <p>The EasyConfig is derived from the EasyBuilders one but in the LUST layout.</p> </li> <li> <p>Needed to add the configure option <code>-D ENABLE_SYSTEMD=OFF</code>.</p> </li> </ul>","boost":10},{"location":"d/DFTD4/","title":"DFTD4","text":"<p>[package list]</p>","boost":10},{"location":"d/DFTD4/#dftd4","title":"DFTD4","text":"","boost":10},{"location":"d/DFTD4/#license-information","title":"License information","text":"<p>This project is free software: you can redistribute it and/or modify it under  the terms of the Lesser GNU General Public License as published by the Free  Software Foundation, either version 3 of the License, or (at your option)  any later version.</p> <p>This project is distributed in the hope that it will be useful, but without  any warranty; without even the implied warranty of merchantability or fitness  for a particular purpose. See the Lesser GNU General Public License for more  details.</p> <p>Unless you explicitly state otherwise, any contribution intentionally  submitted for inclusion in this project by you, as defined in the Lesser  GNU General Public license, shall be licensed as above, without any  additional terms or conditions.</p> <p>A copy of the license can be found in the COPYING.LESSER file in the DFT-D4 GitHub repository.</p>","boost":10},{"location":"d/DFTD4/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider DFTD4/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig DFTD4-3.4.0-cpeGNU-23.09.eb, will build DFTD4/3.4.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig DFTD4-3.4.0-cpeGNU-24.03.eb, will build DFTD4/3.4.0-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"d/DFTD4/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>DFT-D4 home page</p> </li> <li> <p>DFT-D4 on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"d/DFTD4/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository under a different name: DFT-D4 rather than DFTD4</p> </li> <li> <p>There is no support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"d/DFTD4/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig DFTD4-3.3.0-cpeGNU-21.08.eb, with module DFTD4/3.3.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig DFTD4-3.3.0-cpeGNU-21.09.eb, with module DFTD4/3.3.0-cpeGNU-21.09</p> </li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig DFTD4-3.3.0-cpeGNU-21.12.eb, with module DFTD4/3.3.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig DFTD4-3.3.0-cpeGNU-22.06.eb, with module DFTD4/3.3.0-cpeGNU-22.06</p> </li> <li> <p>EasyConfig DFTD4-3.3.0-cpeGNU-22.08.eb, with module DFTD4/3.3.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig DFTD4-3.4.0-cpeGNU-22.06.eb, with module DFTD4/3.4.0-cpeGNU-22.06</p> </li> <li> <p>EasyConfig DFTD4-3.4.0-cpeGNU-22.08.eb, with module DFTD4/3.4.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig DFTD4-3.4.0-cpeGNU-22.12.eb, with module DFTD4/3.4.0-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"d/DL_POLY_4/","title":"DL_POLY_4","text":"<p>[package list]</p>","boost":10},{"location":"d/DL_POLY_4/#dl_poly_4","title":"DL_POLY_4","text":"","boost":10},{"location":"d/DL_POLY_4/#license-information","title":"License information","text":"<p>DL_POLY is currently licensed under the GNU General Pulbic License version 3, a copy of which can be found in the  LICENSE.rst file in the GitLab repository.</p> <p>After installation with EasyBuild and loading the module, a copy of the license can  also be found in the subdirectory <code>$EBROOTDL_POLY_4/share/licenses/DL_POLY_4</code>.</p>","boost":10},{"location":"d/DL_POLY_4/#user-documentation","title":"User documentation","text":"<p>DL_POLY is a general purpose parallel molecular dynamics simulation package  developed at Daresbury Laboratory by I.T. Todorov &amp; W. Smith. </p> <p>There is some web based documentation and the GitLab repository also  contains some information on building if you want to try an independent build.</p>","boost":10},{"location":"d/DL_POLY_4/#installation","title":"Installation","text":"<p>Currently, the release version of 5.1.0 and pre-release version 5.2.0-pre do not compile with the Cray Fortran compiler. Some code changes between 5.1.0-pre and 5.1.0 are not appreciated by that compiler.</p> <p>The code also produces several warnings that may point to bugs, and though 5.1.0 and later do compile with the GNU compilers, we cannot guarantee that the generated binaries will be correct (though it does appear that the  developers use GNU Fortran more often).</p> <p>Generally speaking the code seems to be a bit of a mess. In version 5.1.0-pre it is possible to configure with OpenMP, but in 5.1.0 this is no longer possible even though the example build configurations still show OpenMP support. </p> <p>SINCE INSTRUCTIONS ARE SO UNCLEAR, SINCE SO MANY WARNINGS APPEAR DURING COMPILATION, AND SINCE THERE ARE SEEMINGLY VERY UNLOGICAL CHANGES BETWEEN VERSIONS, IT IS CLEAR THAT THIS IS A RATHER EXPERIMENTAL CODE FOR WHICH WE CANNOT OFFER MORE SUPPORT THAN SIMPLE COMPILE EXAMPLES THAT GENERATE A BINARY.</p>","boost":10},{"location":"d/DL_POLY_4/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider DL_POLY_4/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig DL_POLY_4-5.1.0-cpeGNU-23.09.eb, will build DL_POLY_4/5.1.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig DL_POLY_4-5.1.0-pre-cpeCray-23.09.eb, will build DL_POLY_4/5.1.0-pre-cpeCray-23.09</p> </li> <li> <p>EasyConfig DL_POLY_4-5.2.0-pre-cpeGNU-23.09.eb, will build DL_POLY_4/5.2.0-pre-cpeGNU-23.09</p> </li> </ul>","boost":10},{"location":"d/DL_POLY_4/#technical-documentation","title":"Technical documentation","text":"<p>DL_POLY is a general purpose classical molecular dynamics (MD) simulation  software developed at Daresbury Laboratory (UK).</p> <ul> <li> <p>Home page</p> </li> <li> <p>Documentation</p> </li> <li> <p>GitLab repository</p> <ul> <li>Release tags</li> </ul> </li> <li> <p>GitHub repository</p> <ul> <li>GitHub releases via tags</li> </ul> </li> </ul> <p>Note that there is also an older version, DL_POLY_Classic, also available in a GitLab repository.</p>","boost":10},{"location":"d/DL_POLY_4/#building-instructions","title":"Building instructions","text":"<ul> <li> <p>This code is a Fortran code.</p> </li> <li> <p>It can use several external libraries but this is not very well documented.     The best way to learn about build options is to study all configuration examples     in the <code>utils</code> subdirectory of the sources.</p> </li> </ul>","boost":10},{"location":"d/DL_POLY_4/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for DL_POLY_4 in the EasyBuilders repository</p> </li> <li> <p>There is no support for DL_POLY_4 in the CSCS repository.</p> </li> <li> <p>EasyConfigs by the authors in the DL_POLY GitLab repository</p> </li> </ul>","boost":10},{"location":"d/DL_POLY_4/#version-510-pre-for-cpecray2309","title":"Version 5.1.0-pre for cpeCray/23.09","text":"<ul> <li> <p>EasyConfig is a simple derivative of the EasyBuilder ones, but with some more     information in the module help.</p> </li> <li> <p>Added the OpenMP option.</p> </li> <li> <p>Note: Tried compile 5.1.0 and 5.2.0-pre, but both failed with error messages     about the code. Though the code has been used on Archer2 and the documentation     indicates that the Cray compiler was used, it looks like newer versions were      not tested (5.1.0-pre was the version found in the documentation for building     on Archer2 at the time of the development of the EasyConfig).</p> </li> </ul>","boost":10},{"location":"d/DL_POLY_4/#version-510-for-cpegnu2309","title":"Version 5.1.0 for cpeGNU/23.09","text":"<ul> <li> <p>Trivial port of the EasyConfig developed for cpeCray, but it needs a particular     flag with gfortran to avoid type mismatch errors.</p> </li> <li> <p>It appears though that OpenMP support is no longer present as <code>WITH_OPENMP</code>     remains unused, despite examples in the <code>utils</code> subdirectory claiming     the opposite...</p> </li> </ul>","boost":10},{"location":"d/DL_POLY_4/#version-520-pre-for-cpegnu22309","title":"Version 5.2.0-pre for cpeGNU/223.09","text":"<ul> <li>Trivial port of the EasyConfig for 5.1.0.</li> </ul>","boost":10},{"location":"d/DeepSpeed/","title":"DeepSpeed","text":"<p>[package list]</p>","boost":10},{"location":"d/DeepSpeed/#deepspeed","title":"DeepSpeed","text":"","boost":10},{"location":"d/DeepSpeed/#license-information","title":"License information","text":"<p>DeepSpeed is licensed under the MIT License, a copy of which can be found in the LICENSE file on the DeepSpeed GitHub.</p>","boost":10},{"location":"d/DeepSpeed/#user-documentation","title":"User documentation","text":"<p>Note that DeepSpeed is now integrated with some of the  PyTorch containers, which is a better way to use DeepSpeed on LUMI.</p>","boost":10},{"location":"d/DeepSpeed/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>DeepSpeed web site</p> </li> <li> <p>DeepSpeed on PyPi</p> </li> <li> <p>DeepSpeed on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"d/DeepSpeed/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no DeepSpeed support in the EasyBuilders repository.</p> </li> <li> <p>There is no DeepSpeed support in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"d/DeepSpeed/#version-072-for-cpegnu2208","title":"Version 0.7.2 for cpeGNU/22.08","text":"<ul> <li> <p>The EasyConfig is a LUST development. It currently uses an installation from     wheels rather than rebuilding from sources.</p> </li> <li> <p>The <code>postinstallcmds</code> modifies one of the files as otherwise RCCL also detects     a network interface it should not use and hangs.</p> </li> </ul>","boost":10},{"location":"d/DeepSpeed/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig DeepSpeed-0.7.2-cpeGNU-22.08.eb, with module DeepSpeed/0.7.2-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"d/double-conversion/","title":"double-conversion","text":"<p>[package list]</p>","boost":10},{"location":"d/double-conversion/#double-conversion","title":"double-conversion","text":"","boost":10},{"location":"d/double-conversion/#license-information","title":"License information","text":"<p>The double-conversion software is copyrighted. See the LICENSE file in the double-conversion GitHub for more precise information.</p> <p>From LUMI/23.12 on, the license is also available as <code>$EBROOTDOUBLEMINCONVERSION/share/licenses/double-conversion/LICENSE</code> after loading the module.</p>","boost":10},{"location":"d/double-conversion/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"d/double-conversion/#what-is-double-conversion","title":"What is double-conversion?","text":"<p>The double-conversion project provides binary-decimal and decimal-binary routines for IEEE doubles.</p> <p>The library consists of efficient conversion routines that have been extracted from the V8 JavaScript engine. The code has been refactored and improved so that it can be used more easily in other projects.</p>","boost":10},{"location":"d/double-conversion/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider double-conversion/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>double-conversion/3.2.0-cpeAMD-22.08 (EasyConfig: double-conversion-3.2.0-cpeAMD-22.08.eb)</p> </li> <li> <p>double-conversion/3.2.0-cpeAOCC-22.08 (EasyConfig: double-conversion-3.2.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>double-conversion/3.2.0-cpeCray-22.08 (EasyConfig: double-conversion-3.2.0-cpeCray-22.08.eb)</p> </li> <li> <p>double-conversion/3.2.0-cpeGNU-22.08 (EasyConfig: double-conversion-3.2.0-cpeGNU-22.08.eb)</p> </li> <li> <p>double-conversion/3.2.1-cpeAMD-22.12 (EasyConfig: double-conversion-3.2.1-cpeAMD-22.12.eb)</p> </li> <li> <p>double-conversion/3.2.1-cpeAOCC-22.12 (EasyConfig: double-conversion-3.2.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>double-conversion/3.2.1-cpeCray-22.12 (EasyConfig: double-conversion-3.2.1-cpeCray-22.12.eb)</p> </li> <li> <p>double-conversion/3.2.1-cpeCray-23.03 (EasyConfig: double-conversion-3.2.1-cpeCray-23.03.eb)</p> </li> <li> <p>double-conversion/3.2.1-cpeGNU-22.12 (EasyConfig: double-conversion-3.2.1-cpeGNU-22.12.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeAMD-23.09 (EasyConfig: double-conversion-3.3.0-cpeAMD-23.09.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeAMD-23.12 (EasyConfig: double-conversion-3.3.0-cpeAMD-23.12.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeAMD-24.03 (EasyConfig: double-conversion-3.3.0-cpeAMD-24.03.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeAOCC-23.09 (EasyConfig: double-conversion-3.3.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeAOCC-23.12 (EasyConfig: double-conversion-3.3.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeAOCC-24.03 (EasyConfig: double-conversion-3.3.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeCray-23.09 (EasyConfig: double-conversion-3.3.0-cpeCray-23.09.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeCray-23.12 (EasyConfig: double-conversion-3.3.0-cpeCray-23.12.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeCray-24.03 (EasyConfig: double-conversion-3.3.0-cpeCray-24.03.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeGNU-23.09 (EasyConfig: double-conversion-3.3.0-cpeGNU-23.09.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeGNU-23.12 (EasyConfig: double-conversion-3.3.0-cpeGNU-23.12.eb)</p> </li> <li> <p>double-conversion/3.3.0-cpeGNU-24.03 (EasyConfig: double-conversion-3.3.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"d/double-conversion/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>double-conversion on GitHub</p> <ul> <li>Releases on GitHub</li> </ul> </li> </ul>","boost":10},{"location":"d/double-conversion/#general-information","title":"General information","text":"<ul> <li> <p>Version 3.1: There are three build procedures</p> <ul> <li> <p>SCons which is advised according to the documentation in the    README.md    This build three libraries:</p> <ul> <li>A static library with regular position-dependent code</li> <li>A static library with position-independent code</li> <li>A shared library</li> </ul> </li> <li> <p>CMake: Can build only one library at a time.</p> </li> <li> <p>Makefile: It simply calls scons according to the documentation.</p> </li> </ul> </li> </ul>","boost":10},{"location":"d/double-conversion/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>double-conversion in the EasyBuilders repository</p> </li> <li> <p>There is no support for double-conversion in the CSCS repository.</p> </li> </ul> <p>In EasyBuild 4.4, the current version when this documentation was started, it is based on the CMake installation procedure, making three runs to install the three versions of the library that SCons generates.</p>","boost":10},{"location":"d/double-conversion/#315-from-cpe-2106-on","title":"3.1.5, from CPE 21.06 on","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one with some changes based on     the University of Antwerpen one.</li> </ul>","boost":10},{"location":"d/double-conversion/#320-from-cpe-2208-on","title":"3.2.0 from CPE 22.08 on","text":"<ul> <li>The EasyConfig is a trivial port of the 3.1.5 one.</li> </ul>","boost":10},{"location":"d/double-conversion/#321-from-cpe-2212-on","title":"3.2.1 from CPE 22.12 on","text":"<ul> <li>The EasyConfig is a trivial port of the 3.2.0 one.</li> </ul>","boost":10},{"location":"d/double-conversion/#330-from-cpe-2309-on","title":"3.3.0 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 3.2.1 one.</p> </li> <li> <p>Added additional license info from CPE 23.12 on.</p> </li> </ul>","boost":10},{"location":"d/double-conversion/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig double-conversion-3.1.5-cpeAMD-21.06.eb, with module double-conversion/3.1.5-cpeAMD-21.06</p> </li> <li> <p>EasyConfig double-conversion-3.1.5-cpeAOCC-21.12.eb, with module double-conversion/3.1.5-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig double-conversion-3.1.5-cpeCray-21.06.eb, with module double-conversion/3.1.5-cpeCray-21.06</p> </li> <li> <p>EasyConfig double-conversion-3.1.5-cpeCray-21.08.eb, with module double-conversion/3.1.5-cpeCray-21.08</p> </li> <li> <p>EasyConfig double-conversion-3.1.5-cpeCray-21.12.eb, with module double-conversion/3.1.5-cpeCray-21.12</p> </li> <li> <p>EasyConfig double-conversion-3.1.5-cpeGNU-21.06.eb, with module double-conversion/3.1.5-cpeGNU-21.06</p> </li> <li> <p>EasyConfig double-conversion-3.1.5-cpeGNU-21.08.eb, with module double-conversion/3.1.5-cpeGNU-21.08</p> </li> <li> <p>EasyConfig double-conversion-3.1.5-cpeGNU-21.12.eb, with module double-conversion/3.1.5-cpeGNU-21.12</p> </li> <li> <p>EasyConfig double-conversion-3.2.0-cpeAOCC-22.06.eb, with module double-conversion/3.2.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig double-conversion-3.2.0-cpeCray-22.06.eb, with module double-conversion/3.2.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig double-conversion-3.2.0-cpeGNU-22.06.eb, with module double-conversion/3.2.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/ELPA/","title":"ELPA","text":"<p>[package list]</p>","boost":10},{"location":"e/ELPA/#elpa","title":"ELPA","text":"","boost":10},{"location":"e/ELPA/#license-information","title":"License information","text":"<p>ELPA is open source software and licensed under GNU Lesser General Public License version 3.</p> <p>Information can also be found on the licensing page of the ELPA web site.</p> <p>The authors also request citing the ELPA publications.</p>","boost":10},{"location":"e/ELPA/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider ELPA/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>ELPA/2021.11.001-cpeGNU-22.08 (EasyConfig: ELPA-2021.11.001-cpeGNU-22.08.eb)</li> </ul>","boost":10},{"location":"e/ELPA/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ELPA/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig ELPA-2023.05.001-cpeGNU-23.09-CPU.eb, will build ELPA/2023.05.001-cpeGNU-23.09-CPU</p> </li> <li> <p>EasyConfig ELPA-2023.11.001-cpeGNU-23.09-rocm.eb, will build ELPA/2023.11.001-cpeGNU-23.09-rocm</p> </li> <li> <p>EasyConfig ELPA-2024.05.001-cpeCray-24.03-rocm.eb, will build ELPA/2024.05.001-cpeCray-24.03-rocm</p> <p>Some performance degradation has been observed with ROCm 6.0. It may be solved by using rocm/6.2.2 when running instead if that module is compatible with your code.</p> </li> <li> <p>EasyConfig ELPA-2024.05.001-cpeGNU-24.03-CPU.eb, will build ELPA/2024.05.001-cpeGNU-24.03-CPU</p> </li> <li> <p>EasyConfig ELPA-2024.05.001-cpeGNU-24.03-rocm.eb, will build ELPA/2024.05.001-cpeGNU-24.03-rocm</p> </li> <li> <p>EasyConfig ELPA-2025.06.001-cpeGNU-24.03-rocm.eb, will build ELPA/2025.06.001-cpeGNU-24.03-rocm</p> </li> </ul>","boost":10},{"location":"e/ELPA/#technical-documentation-central-installation","title":"Technical documentation (central installation)","text":"<ul> <li> <p>ELPA home page</p> </li> <li> <p>ELPA GitLab hosted by MPG</p> <ul> <li>Installation instructions on the GitLab</li> </ul> </li> </ul>","boost":10},{"location":"e/ELPA/#general-information","title":"General information","text":"<ul> <li>ELPA stands for Eigenvalue soLvers for Petascale Applications</li> <li>ELPA libraries can be compiled with or without OpenMP support. Both sets     of libraries can be installed together as they have different names.</li> <li>ELPA can also be build without MPI support, and those libraries get     \"onenode\" in their name. Hence MPI and non-MPI OpenMP and non-OpenMP     versions can coexist in a single library directory.</li> <li>ELPA also contains optional GPU support through CUDA.</li> <li>ELPA contains kernels for various CPUs: there is a generic kernel,     specialized kernels for SSE, AVX, AVX2, AVX512, and some support     for SPARC64, BlueGene P and BlueGene Q.</li> <li>ELPA includes the script <code>manual_cpp</code> that is used during the build process     and as of version 2020.05.001 still requires Python 2. Moreover, it calls     the Python interpreter using a shebang that calls the <code>python</code>     executable.</li> </ul>","boost":10},{"location":"e/ELPA/#todos","title":"TODOs","text":"<p>It is not clear from the documentation which linear algebra libraries should be used for the OpenMP versions of the code: Should we use the multithread version or the singlethread version?</p>","boost":10},{"location":"e/ELPA/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ELPA in the EasyBuilders repository</p> </li> <li> <p>ELPA in the CSCS repository</p> </li> </ul>","boost":10},{"location":"e/ELPA/#202105002-for-cpe-2108","title":"2021.05.002 for CPE 21.08","text":"<ul> <li> <p>The EasyConfig is derived from the CSCS one with some elements of the     University of Antwerpen one inserted (mostly in the documentation of the     module)</p> </li> <li> <p>The download location is taken from the EasyBuilders version. It turns out     that downloading via the download page often fails in EasyBuild (though the link     did seem to work in a browser).</p> </li> <li> <p>TODO: ELPA does not yet compile with the Cray and AMD Fortran compilers,     and both produce different errors.</p> </li> </ul>","boost":10},{"location":"e/ELPA/#technical-documentation-user-easybuild-installation","title":"Technical documentation (user EasyBuild installation)","text":"<ul> <li> <p>ELPA home page</p> </li> <li> <p>ELPA GitLab hosted by MPG</p> <ul> <li>Installation instructions on the GitLab</li> </ul> </li> </ul>","boost":10},{"location":"e/ELPA/#general-information_1","title":"General information","text":"<ul> <li>ELPA stands for Eigenvalue soLvers for Petascale Applications</li> <li>ELPA libraries can be compiled with or without OpenMP support. Both sets     of libraries can be installed together as they have different names.</li> <li>ELPA can also be build without MPI support, and those libraries get     \"onenode\" in their name. Hence MPI and non-MPI OpenMP and non-OpenMP     versions can coexist in a single library directory.</li> <li>ELPA also contains optional GPU support through CUDA.</li> <li>ELPA contains kernels for various CPUs: there is a generic kernel,     specialized kernels for SSE, AVX, AVX2, AVX512, and some support     for SPARC64, BlueGene P and BlueGene Q.</li> <li>ELPA includes the script <code>manual_cpp</code> that is used during the build process     and as of version 2020.05.001 still requires Python 2. Moreover, it calls     the Python interpreter using a shebang that calls the <code>python</code>     executable.</li> </ul>","boost":10},{"location":"e/ELPA/#todos_1","title":"TODOs","text":"<p>It is not clear from the documentation which linear algebra libraries should be used for the OpenMP versions of the code: Should we use the multithread version or the singlethread version?</p>","boost":10},{"location":"e/ELPA/#easybuild_1","title":"EasyBuild","text":"<ul> <li> <p>ELPA in the EasyBuilders repository</p> </li> <li> <p>ELPA in the CSCS repository</p> </li> </ul>","boost":10},{"location":"e/ELPA/#202105002-for-cpe-2108-was-in-the-central-software-stack","title":"2021.05.002 for CPE 21.08 - Was in the central software stack","text":"<ul> <li> <p>The EasyConfig is derived from the CSCS one with some elements of the     University of Antwerpen one inserted (mostly in the documentation of the     module)</p> </li> <li> <p>The download location is taken from the EasyBuilders version. It turns out     that downloading via the download page often fails in EasyBuild (though the link     did seem to work in a browser).</p> </li> <li> <p>TODO: ELPA does not yet compile with the Cray and AMD Fortran compilers,     and both produce different errors.</p> </li> </ul>","boost":10},{"location":"e/ELPA/#202205001-cpu-for-2208-gnu-and-cray","title":"2022.05.001 CPU for 22.08 (GNU and Cray)","text":"<ul> <li>the cpeCray version is without OpenMP support</li> </ul>","boost":10},{"location":"e/ELPA/#202211rc1-for-cpegnu-2208","title":"2022.11.rc1 for cpeGNU 22.08","text":"<ul> <li>Trivial port of older EasyConfigs</li> </ul>","boost":10},{"location":"e/ELPA/#202211-for-cpegnu-2208","title":"2022.11 for cpeGNU 22.08","text":"<ul> <li>Trivial port of older EasyConfigs.</li> </ul>","boost":10},{"location":"e/ELPA/#202305001-gpu-for-2212","title":"2023.05.001 GPU for 22.12","text":"<ul> <li> <p>Supports GNU toolchain with ROCm (version agnostic)</p> </li> <li> <p>No support for OpenMP (conficts with GPU stream implementation) </p> </li> </ul>","boost":10},{"location":"e/ELPA/#202305001-cpu-for-2309","title":"2023.05.001 CPU for 23.09","text":"<ul> <li>Based on previous EasyConfigs for the CPU version but with some refinements in      the compiler options.</li> </ul>","boost":10},{"location":"e/ELPA/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig ELPA-2021.05.002-cpeGNU-21.06.eb, with module ELPA/2021.05.002-cpeGNU-21.06</p> </li> <li> <p>EasyConfig ELPA-2021.05.002-cpeGNU-21.08.eb, with module ELPA/2021.05.002-cpeGNU-21.08</p> </li> <li> <p>EasyConfig ELPA-2021.11.001-cpeGNU-21.12.eb, with module ELPA/2021.11.001-cpeGNU-21.12</p> </li> <li> <p>EasyConfig ELPA-2021.11.001-cpeGNU-22.06.eb, with module ELPA/2021.11.001-cpeGNU-22.06</p> </li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig ELPA-2022.05.001-cpeCray-22.08-CPU.eb, with module ELPA/2022.05.001-cpeCray-22.08-CPU</p> </li> <li> <p>EasyConfig ELPA-2022.05.001-cpeGNU-22.08-CPU.eb, with module ELPA/2022.05.001-cpeGNU-22.08-CPU</p> </li> <li> <p>EasyConfig ELPA-2022.11.001-cpeGNU-22.12-CPU.eb, with module ELPA/2022.11.001-cpeGNU-22.12-CPU</p> </li> <li> <p>EasyConfig ELPA-2022.11.001.rc1-cpeGNU-22.08-CPU.eb, with module ELPA/2022.11.001.rc1-cpeGNU-22.08-CPU</p> </li> <li> <p>EasyConfig ELPA-2023.05.001-cpeGNU-22.12-CPU.eb, with module ELPA/2023.05.001-cpeGNU-22.12-CPU</p> </li> <li> <p>EasyConfig ELPA-2023.05.001-cpeGNU-22.12-GPU.eb, with module ELPA/2023.05.001-cpeGNU-22.12-GPU</p> </li> <li> <p>EasyConfig ELPA-2023.11.001-cpeGNU-23.09-GPU.eb, with module ELPA/2023.11.001-cpeGNU-23.09-GPU</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/ESMF/","title":"ESMF","text":"<p>[package list]</p>","boost":10},{"location":"e/ESMF/#esmf","title":"ESMF","text":"","boost":10},{"location":"e/ESMF/#license-information","title":"License information","text":"<p>The Earh System Modeling Framework license information can be found in the LICENSE file on the esmf GitHub.</p> <p>From LUMI/23.12 on, the license information can also be found in the <code>$EBROOTESMF/share/licenses/ESMF</code> directory after loading the module.</p>","boost":10},{"location":"e/ESMF/#user-documentation-central-installation","title":"User documentation (central installation)","text":"<p>For toolchains after 24.03 or versions after 8.6.0, ESMF will no longer be part of the pre-installed modules as the development time for the recipes is too high and as it turns out that we need too many different build types to  keep all users happy. Some model recipes will remain available as  user-installable modules.</p>","boost":10},{"location":"e/ESMF/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider ESMF/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>ESMF/8.3.0-cpeCray-22.08 (EasyConfig: ESMF-8.3.0-cpeCray-22.08.eb)</p> </li> <li> <p>ESMF/8.3.0-cpeGNU-22.08 (EasyConfig: ESMF-8.3.0-cpeGNU-22.08.eb)</p> </li> <li> <p>ESMF/8.4.1-cpeCray-22.12 (EasyConfig: ESMF-8.4.1-cpeCray-22.12.eb)</p> </li> <li> <p>ESMF/8.4.1-cpeCray-23.03 (EasyConfig: ESMF-8.4.1-cpeCray-23.03.eb)</p> </li> <li> <p>ESMF/8.4.1-cpeCray-23.09 (EasyConfig: ESMF-8.4.1-cpeCray-23.09.eb)</p> </li> <li> <p>ESMF/8.4.1-cpeCray-23.12 (EasyConfig: ESMF-8.4.1-cpeCray-23.12.eb)</p> </li> <li> <p>ESMF/8.4.1-cpeGNU-22.12 (EasyConfig: ESMF-8.4.1-cpeGNU-22.12.eb)</p> </li> <li> <p>ESMF/8.4.1-cpeGNU-23.09 (EasyConfig: ESMF-8.4.1-cpeGNU-23.09.eb)</p> </li> <li> <p>ESMF/8.4.1-cpeGNU-23.12 (EasyConfig: ESMF-8.4.1-cpeGNU-23.12.eb)</p> </li> <li> <p>ESMF/8.6.0-cpeCray-24.03-MPI-PIO (EasyConfig: ESMF-8.6.0-cpeCray-24.03-MPI-PIO.eb)</p> <p>ESMF compiled with support for MPICH and PIO.  It also uses netCDF with the parallel HDF5 back-end.</p> </li> <li> <p>ESMF/8.6.0-cpeCray-24.03 (EasyConfig: ESMF-8.6.0-cpeCray-24.03.eb)</p> <p>ESMF compiled in mpiuni mode, without support for MPI.</p> </li> <li> <p>ESMF/8.6.0-cpeGNU-24.03-MPI-PIO (EasyConfig: ESMF-8.6.0-cpeGNU-24.03-MPI-PIO.eb)</p> <p>ESMF compiled with support for MPICH and PIO.  It also uses netCDF with the parallel HDF5 back-end.</p> </li> <li> <p>ESMF/8.6.0-cpeGNU-24.03 (EasyConfig: ESMF-8.6.0-cpeGNU-24.03.eb)</p> <p>ESMF compiled in mpiuni mode, without support for MPI.</p> </li> </ul>","boost":10},{"location":"e/ESMF/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ESMF/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig ESMF-8.8.0-cpeGNU-24.03-MPI-PIO.eb, will build ESMF/8.8.0-cpeGNU-24.03-MPI-PIO</p> <p>ESMF compiled with support for MPICH and PIO.  It also uses netCDF with the parallel HDF5 back-end.</p> </li> </ul>","boost":10},{"location":"e/ESMF/#technical-documentation-central-installation","title":"Technical documentation (central installation)","text":"<ul> <li> <p>ESMF on SourceForge</p> </li> <li> <p>ESMF on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"e/ESMF/#general-build-instructions","title":"General build instructions","text":"<p>ESMF does not use a configure script. The configure phase can be skipped (though this is not done in the EasyConfig as the configure phase will still be used to set environment variables through an EasyBlock).</p> <p>Configuration is done through a large set of environment variables that are picked up by the Makefile of the ESMF code. It does call CMake for 3rd party codes that are provided internally, e.g., the PIO IO library. </p> <p>The combination of OS and compiler selected through <code>ESMF_</code> environment variables (though the code does a good job at detecting the OS environment) determines which configuration subdirectory of <code>build_config</code> will be used. That subdirectory contains a long file with definitions that will be included in the Makefile and tries to set defaults, and some system-specific small include files.</p> <p>The <code>make info</code> command will show how the Makefile interprets those environment variables. It is also called when doing a build, so if a ConfigureMake process would be used rather than the custom EasyBlock, setting environment variables through <code>prebuildopts</code> and  <code>preinstallopts</code>, one could skip the configure step alltogether.</p>","boost":10},{"location":"e/ESMF/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ESMF support in the EasyBuilders repository</p> </li> <li> <p>ESMF support in the CSCS repository</p> </li> </ul> <p>Note that ESMF uses a custom EasyBlock which needs adaptations for Cray systems.</p>","boost":10},{"location":"e/ESMF/#esmf-811-for-cpe-2108","title":"ESMF 8.1.1 for CPE 21.08","text":"<ul> <li> <p>The EasyConfig file is an adaptation from the CSCS one.</p> </li> <li> <p>TODO: The EasyBuilders version uses a patch. Does this add functionality?</p> </li> <li> <p>Building fails with cpeAMD, with very strange error messages.</p> </li> </ul>","boost":10},{"location":"e/ESMF/#esmf-820-for-cpe-2108","title":"ESMF 8.2.0 for CPE 21.08","text":"<ul> <li>This version does not compile with gfortran unless the flag to allow argument     mismatch is used. The problem is that the build procedure does not pick up     <code>F90FLAGS</code> etc., so we've done some hand work with <code>preconfigopts</code> and     <code>prebuildopts</code>.</li> </ul>","boost":10},{"location":"e/ESMF/#esmf-830-for-cpe-2206","title":"ESMF 8.3.0 for CPE 22.06","text":"<ul> <li> <p>Near-trivial version bump, but the way the sources are distributed has changed.</p> </li> <li> <p>Building with AOCC still fails.</p> </li> <li> <p>Note that the build process does include some testing.</p> </li> </ul>","boost":10},{"location":"e/ESMF/#version-841-from-cpe-2212-on","title":"Version 8.4.1 from CPE 22.12 on","text":"<ul> <li> <p>Trivial version bump of the 8.3.0 EasyConfig</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"e/ESMF/#version-860-for-lumi2403","title":"Version 8.6.0 for LUMI/24.03","text":"<ul> <li> <p>Trivial version bump of the 8.4.1 EasyConfig for LUMI/23.12.</p> </li> <li> <p>Added buildtools.</p> </li> <li> <p>It seems that on the GPU nodes, some code is compiled that is otherwise not compiled     (as it caused a problem) so there may be some support for GPU acceleration.</p> </li> <li> <p>The cpeCray version does not compile on LUMI-G when the accelerator target module     is loaded, so that module is unloaded when compiling for <code>partition/G</code>.</p> </li> <li> <p>Later on, we added an MPI version with heavily reworked EasyBlock that can still     compile the older versions.</p> <ul> <li> <p>PIO required a more extensive configuration of netCDF then the default      EasyBlock (from which our custom block was derived) can give. We decided     to update the EasyBlock as it had no consequences for building the other     24.03 configurations.</p> </li> <li> <p>Note that the OS should be Unicos rather than Linux to enable the automatic      configuration of the compilers. The autodetect does this right, but be careful     not to overwrite.</p> </li> <li> <p>Somehow the behaviour for ESMF_OPTLEVEL changed with the updated EasyBlock,      but it is not clear why. We solved this by adding a parameter to set the optimisation     level (and set it to 2 which is what the code did automatically before).</p> </li> <li> <p>Also changed the easyblock to honour <code>preconfigopts</code>. <code>prebuildops</code> was honoured,     but <code>preconfigopts</code> not and that lead to misleading information from <code>make info</code>     which is what happens during the configure phase.</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/ESMF/#technical-documentation-user-easybuild-installation","title":"Technical documentation (user EasyBuild installation)","text":"<p>See the technical information for the pre-installed versions.</p>","boost":10},{"location":"e/ESMF/#easybuild_1","title":"EasyBuild","text":"","boost":10},{"location":"e/ESMF/#version-880-for-cpegnu-2403-with-mpi-and-pio","title":"Version 8.8.0 for cpeGNU 24.03 with MPI and PIO","text":"<ul> <li>This EasyConfig is a straightforward port of the EasyConfig for     8.6.0 with these options, also using the updated EasyBlock.</li> </ul>","boost":10},{"location":"e/ESMF/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig ESMF-8.1.1-cpeCray-21.08.eb, with module ESMF/8.1.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig ESMF-8.1.1-cpeGNU-21.08.eb, with module ESMF/8.1.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig ESMF-8.2.0-cpeCray-21.12.eb, with module ESMF/8.2.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig ESMF-8.2.0-cpeGNU-21.12.eb, with module ESMF/8.2.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig ESMF-8.3.0-cpeCray-22.06.eb, with module ESMF/8.3.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig ESMF-8.3.0-cpeGNU-22.06.eb, with module ESMF/8.3.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/EasyBuild/","title":"EasyBuild","text":"<p>[package list]</p>","boost":10},{"location":"e/EasyBuild/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"e/EasyBuild/#license-information","title":"License information","text":"<p>EasyBuild is made available under the GNU General Public License version 2.</p>","boost":10},{"location":"e/EasyBuild/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"e/EasyBuild/#what-is-easybuild","title":"What is EasyBuild?","text":"<p>EasyBuild is a software build and installation framework written in Python that allows you to install software in a structured, repeatable and robust way.</p> <p>There is a web-based manual for EasyBuild. Tutorials are also available on the web, including a  tutorial specifically for LUMI in our training archive web site.</p>","boost":10},{"location":"e/EasyBuild/#using-easybuild-on-lumi","title":"Using EasyBuild on LUMI","text":"<p>Loading the EasyBuild module only gives you a standard configuration of EasyBuild that  will install in your already space-limited home directory, not recognise the already  installed software in the LUMI software stack, and in fact use build recipes that are not all compatible with LUMI.</p> <p>To install software building upon the centrally installed LUMI software stacks (as provided by the LUMI/xx.yy modules), users should load the EasyBuild-user module instead as discussed in  the EasyBuild section of the main LUMI documentation.</p>","boost":10},{"location":"e/EasyBuild/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider EasyBuild/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyBuild/4.6.0 (EasyConfig: EasyBuild-4.6.0.eb)</p> <p>This is the version of EasyBuild used for the 22.06 and 22.08 software stacks.</p> </li> <li> <p>EasyBuild/4.7.1 (EasyConfig: EasyBuild-4.7.1.eb)</p> <p>This is the version of EasyBuild used for the 22.12 and 23.03 software stacks.</p> </li> <li> <p>EasyBuild/4.8.2 (EasyConfig: EasyBuild-4.8.2.eb)</p> </li> <li> <p>EasyBuild/4.9.1 (EasyConfig: EasyBuild-4.9.1.eb)</p> </li> <li> <p>EasyBuild/4.9.2 (EasyConfig: EasyBuild-4.9.2.eb)</p> </li> </ul>","boost":10},{"location":"e/EasyBuild/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Main EasyBuild web site with links to documentation and sources</p> </li> <li> <p>PyPi:</p> <ul> <li> <p>easybuild install package</p> </li> <li> <p>easybuild-framework</p> </li> <li> <p>easybuild-easyblocks</p> </li> <li> <p>easybuild-easyconfigs</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/EasyBuild/#easybuild_1","title":"EasyBuild","text":"<ul> <li>EasyBuild EasyConfigs in the easybuilders repo</li> </ul>","boost":10},{"location":"e/EasyBuild/#version-442-for-lumi2108","title":"Version 4.4.2 for LUMI/21.08","text":"<ul> <li>Started from the default EasyConfig but added additional help information     to the module file.</li> </ul>","boost":10},{"location":"e/EasyBuild/#version-453-for-lumi2112","title":"Version 4.5.3 for LUMI/21.12","text":"<ul> <li>We activated the new feature to show a progress bar and also added support     for <code>archspec</code>. This is done by adding additional packages via extensions     in the EasyConfig. It is a very fragile combination though, only very     specific combinations of version worked.</li> </ul>","boost":10},{"location":"e/EasyBuild/#version-460-for-lumi2206-and-lumi2208","title":"Version 4.6.0 for LUMI/22.06 and LUMI/22.08","text":"<ul> <li>The additional packages that are used to activate <code>archspec</code> in EasyBuild     and to provide the progress bar are a very fragile mix. Updating any of them     to newer versions didn't work, maybe due to the lack of <code>pip</code> and the very     old version of <code>python</code> as the system Python.</li> </ul>","boost":10},{"location":"e/EasyBuild/#version-471-for-lumi2212-and-lumi2303","title":"Version 4.7.1 for LUMI/22.12 and LUMI/23.03","text":"<ul> <li>Trivial port of the 4.6.0 EasyConfig.</li> </ul>","boost":10},{"location":"e/EasyBuild/#version-482-for-lumi2309","title":"Version 4.8.2 for LUMI/23.09","text":"<ul> <li> <p>Trivial port of the 4.7.1 EasyConfig.</p> </li> <li> <p>In a later update we added support for loading <code>EasyBuild-tools</code> if available.</p> </li> </ul>","boost":10},{"location":"e/EasyBuild/#version-492-for-lumi2312-and-2403","title":"Version 4.9.2 for LUMI/23.12 and 24.03","text":"<ul> <li> <p>Started as a trivial port of the 4.8.2 EasyConfig</p> </li> <li> <p>At first removed support for loading <code>EasyBuild-tools</code> as the reason for it is     no longer there (MATLAB installation done differently).</p> </li> <li> <p>Added <code>PyYAML</code> to the list of extra Python packages as we also wanted to use EasyBuild     with EasyStack files in a container that did not have <code>PyYAMSL</code> in its system Python     installation.</p> <p>The problem with this package is that it installs its egg in <code>lib64</code> instead of  in <code>lib</code> so that two directories need to be added to <code>PYTHONPATH</code>.</p> </li> <li> <p>Needed to modify <code>libsci.py</code> in <code>toolchains/linalg</code> in the framework as it should     now check <code>CRAY_PE_LIBSCI_PREFIX_DIR</code> instead of <code>CRAY_LIBSCI_PREFIX_DIR</code>. For now     we check for both so that the same EasyConfig can also be used to install EasyBuild     for older versions of the Cray PE.</p> </li> <li> <p>Wanted to use <code>postinstallcmds</code> to robustify a number of scripts, but that was     not supported by the EasyBlock so that one needed to be changed also.</p> <ul> <li> <p>Robustify the <code>eb</code> command:</p> <ul> <li> <p><code>PYTHONPATH</code> is hard-coded in the <code>eb</code> shell script and overwrites anything      from the environment.</p> </li> <li> <p>In the loop that searches for a suitable Python command, we added the system     Python with full path and version at the front of the list. Hence strictly     speaking <code>EB_PYTHON</code> is no longer needed.</p> </li> </ul> </li> <li> <p>Robustifying the <code>archspec</code>, <code>cmark</code> and <code>puygmentize</code> scripts put in the <code>bin</code>     directory when installing their respective additional packages:</p> <ul> <li> <p>Shebang line changed to explicitly call <code>python3.6</code>, and added the <code>-E</code>      option to avoid using the value of <code>PYTHONPATH</code></p> </li> <li> <p>We then used <code>sys.path.append</code> to add the <code>lib</code> subdirectory to the Python      search path. The <code>lib64</code> subdirectory was not added as <code>PyYAML</code> is not needed     by those commands.</p> </li> </ul> </li> </ul> </li> <li> <p>And added sanity checks that explicitly unset <code>PYTHONPATH</code> to verify that these commands     indeed work without <code>PYTHONPATH</code>.</p> </li> <li> <p>The module however still sets <code>PYTHONPATH</code> as (1) this is difficult to turn off, it is      one of those variables generated automatically by EasyBuild if it finds a certain directory,     and (2) it is still needed when using EasyBuild as a library.</p> </li> </ul>","boost":10},{"location":"e/EasyBuild/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig EasyBuild-4.3.4.eb, with module EasyBuild/4.3.4</p> </li> <li> <p>EasyConfig EasyBuild-4.4.0.eb, with module EasyBuild/4.4.0</p> </li> <li> <p>EasyConfig EasyBuild-4.4.1.eb, with module EasyBuild/4.4.1</p> </li> <li> <p>EasyConfig EasyBuild-4.4.2.eb, with module EasyBuild/4.4.2</p> <p>This is the version of EasyBuild used for the 21.08 software stack.</p> </li> <li> <p>EasyConfig EasyBuild-4.5.3-bare.eb, with module EasyBuild/4.5.3-bare</p> </li> <li> <p>EasyConfig EasyBuild-4.5.3.eb, with module EasyBuild/4.5.3</p> <p>This is the version of EasyBuild used for the 21.12 software stack.</p> </li> <li> <p>EasyConfig EasyBuild-4.5.5.eb, with module EasyBuild/4.5.5</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/EasyBuild-tools/","title":"EasyBuild-tools","text":"<p>[package list]</p>","boost":10},{"location":"e/EasyBuild-tools/#easybuild-tools","title":"EasyBuild-tools","text":"","boost":10},{"location":"e/EasyBuild-tools/#license-information","title":"License information","text":"<p>The p7zip package is covered by the  GNU Lesser General Public License v2.1 or later. Files for RAR (un)compression though have a restriction. See the License.txt file in the p7zip GitHub repository.</p> <p>After loading the module, the license information for the tools can also be found in  the respective subdirectories of  <code>$EBROOTEASYBUILDMINTOOLS/share/licenses/</code>.</p>","boost":10},{"location":"e/EasyBuild-tools/#user-documentation","title":"User documentation","text":"<p>The <code>EasyBuild-tools</code> module contains a number of tools that are missing from the OS  installation on LUMI, but are needed by some EasyConfigs as basic tools that EasyBuild expects to find in the OS (hence may be run without even first loading the build dependencies).</p> <p>The version numbering of the modules corresponds to the version number of the LUMI  stack for which they were meant.</p>","boost":10},{"location":"e/EasyBuild-tools/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider EasyBuild-tools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyBuild-tools/23.09 (EasyConfig: EasyBuild-tools-23.09.eb)</p> <p>Contains p7zip.</p> </li> </ul>","boost":10},{"location":"e/EasyBuild-tools/#technical-documentation","title":"Technical documentation","text":"<p>EasyBuild-tools offers a number of tools that EasyBuild expects from the OS for processing some EasyConfigs, biut are not installed on LUMI. To avoid circular dependencies it should not contain anything that EasyBuild needs for its own bare installation and to install this module.</p> <p>Note that whereas some of our bundles do include EBROOT environment variables for each of the matching components, we don't do so for modules that can be loaded when EasyBuild is run as it complicates the configuration of EasyBuild. One should then also allow those modules that are suggested to exist by those EBROOT environment variables to be loaded while EasyBuild runs.</p>","boost":10},{"location":"e/EasyBuild-tools/#contents","title":"Contents","text":"Package Remarks Version link p7zip 23-09 - version check","boost":10},{"location":"e/EasyBuild-tools/#p7zip-specific-information","title":"p7zip-specific information","text":"<p>The p7zip package is a POSIX/Linux port of some of the  p7zip Windows tools. Note that the latest version of 7zip do now support Linux already.</p> <p>The p7zip tools however are used in certain EasyConfigs to work with ISO files, e.b., the MATLAB EasyConfigs in the EasyBuilders repository.</p> <ul> <li> <p>New developments on GitHub.     It is a fork from previous versions that are no longer maintained.     It also extends the tools of the 7zip project</p> <ul> <li>GitHub releases</li> </ul> </li> <li> <p>Older versions on SourceForge</p> <ul> <li>SourceForge downloads     (up to version 16.02)</li> </ul> </li> </ul>","boost":10},{"location":"e/EasyBuild-tools/#easybuild","title":"EasyBuild","text":"<ul> <li>p7zip in the EasyBuilders repository</li> </ul>","boost":10},{"location":"e/EasyBuild-tools/#version-2309","title":"Version 23.09","text":"<ul> <li> <p>First version of this bundle, with currently only p7zip that we     needed for Matlab.</p> </li> <li> <p>The p7zip installation procedure is taken from the EasyBuilders p7zip     installation for version 17.04, but rewritten more fitting with more     consistent use of quotes, etc., and specifying compiler variables     specifically for LUMI. It also uses the SYSTEM toolchain rather than     GCCcore.</p> </li> </ul>","boost":10},{"location":"e/Eigen/","title":"Eigen","text":"<p>[package list]</p>","boost":10},{"location":"e/Eigen/#eigen","title":"Eigen","text":"","boost":10},{"location":"e/Eigen/#license-information","title":"License information","text":"<p>The precise wording of the Eigen license can be found  on the Eigen web site.</p> <p>The versions installed on LUMI are licensed under the  Mozilla Public License Version 2.0, but some components rely on third-party code licensed under the  GNU Lesser Public License. These components have not been disabled in the installation on LUMI!</p>","boost":10},{"location":"e/Eigen/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"e/Eigen/#what-is-eigen","title":"What is Eigen?","text":"<p>Eigen is a C++ template library for linear algebra:  matrices, vectors, numerical solvers, and related algorithms.</p> <p>Eigen is Free Software. Starting from the 3.1.1 version, it is licensed under the MPL2, which is a simple weak copyleft license. Common questions about the MPL2 are answered in the official MPL2 FAQ. Note that currently, a few features rely on third-party code licensed under the LGPL: SimplicialCholesky, AMD ordering, and constrained_cg. Such features can be explicitly disabled by compiling with the EIGEN_MPL2_ONLY preprocessor symbol defined. Furthermore, Eigen provides interface classes for various third-party libraries (usually recognizable by the  header name). Of course you have to mind the license of the so-included library when using them. Virtually any software may use Eigen. For example, closed-source software may use Eigen without having to disclose its own source code. Many proprietary and closed-source software projects are using Eigen right now, as well as many BSD-licensed projects. <p>As this module includes only templates in source form, it can be used with any suitable C++ compiler.</p> <p>This library was installed without taking care of potential dependencies etc. as it seems that the installation process, despite doing plenty of checks, doesn't do anything to the template library itself. If you would experience problems when using Eigen with your own code, we suggest you install it yourself for your compiler and your combination of mathematical libraries as there are in fact a near infinite number of potential configurations.</p>","boost":10},{"location":"e/Eigen/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Eigen/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Eigen/3.3.9 (EasyConfig: Eigen-3.3.9.eb)</p> </li> <li> <p>Eigen/3.4.0 (EasyConfig: Eigen-3.4.0.eb)</p> </li> <li> <p>Eigen/3.4 (EasyConfig: Eigen-3.4.eb)</p> </li> </ul>","boost":10},{"location":"e/Eigen/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Eigen web site</p> </li> <li> <p>Eigen on GitLab</p> <ul> <li>Releases</li> </ul> </li> </ul>","boost":10},{"location":"e/Eigen/#general-information","title":"General information","text":"<ul> <li> <p>Eigen is just a template library for C++. Hence the installation is completelhy compiler-neutral.</p> </li> <li> <p>Eigen moved to GitLab at the end of 2019, so old EasyConfig files will no longer     succeed in downloading the files from BitBucket. The move was made because BitBucket     dit no longer support mercurial, and if the had to switch to git, they decided     they could as well switch to another provider.</p> </li> <li> <p>According to the installation instructions</p> <ul> <li> <p>One can simply copy the <code>Eigen</code> subdirectory to any desired location.</p> </li> <li> <p>There is also a CMake installation process. It does install some additional     files such as support for pkgconfig and for CMake. That CMake process can     produce a lot of warnings, but they are really only relevant to those installing     Eigen during the compilation process for an actual application, and not to     simply do a source install of Eigen.</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/Eigen/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>support for Eigen in the EasyBuilders repository.     The procedure might be more complicated then needed as a custom EasyBlock is used which     given the simplicity of the installation process seems overkill.</p> </li> <li> <p>Eigen support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"e/Eigen/#version-339-for-lumi2108-and-lumi2112","title":"Version 3.3.9 for LUMI/21.08 and LUMI/21.12","text":"<ul> <li> <p>As this is just a template library it does not make sense to install this     for a specific toolchain or specific partition. We recommend to simply use the     SYSTEM toolchain and to install in the common virtual partition.</p> <p>The installation process does do a lot of checks but it seems that they are only to compile a number of test programs and don't do anything to the Eigen configuration itself.</p> </li> <li> <p>Use downloads from GitLab.</p> </li> <li> <p>Installed using the system toolchain as there is nothing compiler-specific     about the whole package.</p> </li> <li> <p>Note that 3.4.0 was out at the time that we made the EasyConfig file, but that     one did not install properly. During the installation process an illegal directory     name was generated. It is not clear if this is a problem with the EasyBlock or with     the Eigen installation process itself.</p> </li> </ul>","boost":10},{"location":"e/Eigen/#version-34-for-lumi2206-and-lumi2208","title":"Version 3.4 for LUMI/22.06 and LUMI/22.08","text":"<ul> <li>Trivial port of the 3.3.9 EasyConfig.</li> </ul>","boost":10},{"location":"e/Eigen/#340-for-21122303","title":"3.4.0 for 21.12/23.03","text":"<ul> <li>Looks like the Eigen people returned to a normal version numberins, so adapted the     EasyConfig.</li> </ul>","boost":10},{"location":"e/Elk/","title":"Elk","text":"<p>[package list]</p>","boost":10},{"location":"e/Elk/#elk","title":"Elk","text":"","boost":10},{"location":"e/Elk/#license-information","title":"License information","text":"<p>Elk is freely available under the GNU General Public License version 3.</p>","boost":10},{"location":"e/Elk/#user-documentation","title":"User documentation","text":"<p>Elk is \"an all-electron full-potential linearised augmented-planewave (FP-LAPW) code. Designed to be as developer friendly as possible so that new developments in the field of density functional theory (DFT) can be added quickly and reliably.\". Elk can be run on LUMI-C.</p> <p>There is currently no version of Elk that can use the AMD GPUs in the LUMI-G.</p>","boost":10},{"location":"e/Elk/#installing-elk","title":"Installing Elk","text":"<p>We provide automatic installation scripts for several versions of Elk. In general, the installation procedure is described on the EasyBuild page. The step by step procedure to install Elk 10.3.12 is:</p> <ol> <li>Load the LUMI software environment: <code>module load LUMI/24.03</code>.</li> <li>Select the LUMI-C partition: <code>module load partition/C</code>.</li> <li>Load the EasyBuild module: <code>module load EasyBuild-user</code>.</li> </ol> <p>Then, you can run the install command</p> <pre><code>$ eb -r Elk-10.3.12-cpeGNU-24.03.eb\n</code></pre> <p>The installation takes about 3 minutes. Afterwards, you will have a module called \"Elk/10.3.12-cpeGNU-24.03\" installed in your home directory. Load the module to use it</p> <pre><code>$ module load Elk/10.3.12-cpeGNU-24.03\n</code></pre> <p>The main Elk binary, <code>elk</code>, as well as the <code>spacegroup</code> and <code>eos</code> utility programs will now be in your <code>PATH</code>. Launch Elk via the Slurm scheduler with <code>srun elk</code>. Please note that you must do <code>module load LUMI/24.03 partition/C</code> to see your Elk module in the module system. The same applies to the Slurm batch scripts which you send to the compute nodes.</p> <p>You can see other versions of Elk that can be automatically installed by running the EasyBuild command</p> <pre><code>$ eb -S Elk\n</code></pre> <p>or checking the list further down on this page</p>","boost":10},{"location":"e/Elk/#example-batch-script","title":"Example batch script","text":"<p>A typical batch job with 16 MPI ranks per node and 8 OpenMP threads per rank:</p> <pre><code>#!/bin/bash\n#SBATCH -A project_XYZ\n#SBATCH -J elkjob\n#SBATCH -p standard\n#SBATCH -t 10:00:00\n#SBATCH --nodes=1\n#SBATCH --ntasks-per-node=16\n#SBATCH --cpus-per-task=8\n\nml LUMI/24.03\nml Elk/10.3.12-cpeGNU-24.03\n\nexport SRUN_CPUS_PER_TASK=$SLURM_CPUS_PER_TASK\nexport OMP_NUM_THREADS=8\nexport OMP_PLACES=cores\nexport OMP_PROC_BIND=false\nexport OMP_STACKSIZE=256M\nulimit -Ss unlimited\n\necho \"Script initiated at `date` on `hostname`\"\nsrun elk &gt; out.log\necho \"Script finished at `date` on `hostname`\"\n</code></pre>","boost":10},{"location":"e/Elk/#species-files-example-input-files-and-elk-makeinc-file","title":"Species files, example input files, and Elk make.inc file.","text":"<p>Elk species files and example input files can be found in the directories <pre><code>$EBROOTELK/species\n$EBROOTELK/examples\n</code></pre> For the case that you would like to build a custom version of Elk, you can find the Elk <code>make.inc</code> file which was generated when building with EasyBuild at <pre><code>$EBROOTELK/make.inc\n</code></pre></p>","boost":10},{"location":"e/Elk/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Elk/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig Elk-10.3.12-cpeGNU-24.03.eb, will build Elk/10.3.12-cpeGNU-24.03</li> </ul>","boost":10},{"location":"e/Elk/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Elk home page</li> </ul>","boost":10},{"location":"e/Elk/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>There is no support for Elk in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"e/Elk/#version-846-for-cpe-2112","title":"Version 8.4.6 for CPE 21.12","text":"<ul> <li> <p>Own development</p> </li> <li> <p>Some scripts copied in the regular EasyBuilders EasyConfig are not installed     in this version.</p> </li> </ul>","boost":10},{"location":"e/Elk/#version-8430-for-cpe-2206","title":"Version 8.4.30 for CPE 22.06","text":"<ul> <li> <p>Straightforward port of the 8.4.6 EasyConfig.</p> </li> <li> <p>A few from the scripts from the <code>utilities</code> subdirectory are now included,     but not <code>utilities/xps</code> as that still contains uncompiled C code so it is     not clear what should be copied there or be built that is not yet built.</p> </li> </ul>","boost":10},{"location":"e/Elk/#version-8710-for-cpe-2208-and-2212","title":"Version 8.7.10 for CPE 22.08 and 22.12","text":"<ul> <li> <p>The make.inc is generated by the EasyConfig.</p> </li> <li> <p>Builds with support for Libxc and Wannier90.</p> </li> </ul>","boost":10},{"location":"e/Elk/#version-10312-for-cpe-2403","title":"Version 10.3.12 for CPE 24.03","text":"<ul> <li>Derived from the 8.7.10 EasyConfig.</li> </ul>","boost":10},{"location":"e/Elk/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Elk-8.4.30-cpeGNU-22.06.eb, with module Elk/8.4.30-cpeGNU-22.06</p> </li> <li> <p>EasyConfig Elk-8.4.30-cpeGNU-22.08.eb, with module Elk/8.4.30-cpeGNU-22.08</p> </li> <li> <p>EasyConfig Elk-8.4.6-cpeGNU-21.12.eb, with module Elk/8.4.6-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Elk-8.7.10-cpeGNU-22.08.eb, with module Elk/8.7.10-cpeGNU-22.08</p> </li> <li> <p>EasyConfig Elk-8.7.10-cpeGNU-22.12.eb, with module Elk/8.7.10-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/eb-tutorial/","title":"eb-tutorial","text":"<p>[package list]</p>","boost":10},{"location":"e/eb-tutorial/#eb-tutorial","title":"eb-tutorial","text":"","boost":10},{"location":"e/eb-tutorial/#license-information","title":"License information","text":"<p>The EasyConfigs are based on examples in the EasyBuild tutorials. The EasyBuild tutorial is covered by the GNU General Public Licenxe version 2.0 a copy of which can also be found in the LICENSE file in the easybuild-tutorial GitHub.</p>","boost":10},{"location":"e/eb-tutorial/#user-documentation","title":"User documentation","text":"<p>This module has no practical use. It is only used in the exercises of the 1-day LUMI training developed by the LUMI User Support Team.</p>","boost":10},{"location":"e/eb-tutorial/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider eb-tutorial/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig eb-tutorial-1.0.1-cpeAOCC-24.03.eb, will build eb-tutorial/1.0.1-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig eb-tutorial-1.0.1-cpeCray-24.03.eb, will build eb-tutorial/1.0.1-cpeCray-24.03</p> </li> <li> <p>EasyConfig eb-tutorial-1.0.1-cpeGNU-24.03.eb, will build eb-tutorial/1.0.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"e/eb-tutorial/#technical-documentation","title":"Technical documentation","text":"<p>This is really just an EasyConfig file used in the LUMI tutorials to have something that is very quick to install.</p> <ul> <li> <p>EasyBuild tutorial site </p> </li> <li> <p>Content of the source package that is downloaded</p> </li> </ul>","boost":10},{"location":"e/eb-tutorial/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"e/eb-tutorial/#101-for-any-cpe-2208-and-later","title":"1.0.1 for any CPE, 22.08 and later","text":"<ul> <li>The EasyConfig is derived from the one build up in the      examples on \"Creating easyconfig files\" for the LUST course of 2021</li> </ul>","boost":10},{"location":"e/eb-tutorial/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig eb-tutorial-1.0.1-cpeAOCC-22.08.eb, with module eb-tutorial/1.0.1-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig eb-tutorial-1.0.1-cpeAOCC-22.12.eb, with module eb-tutorial/1.0.1-cpeAOCC-22.12</p> </li> <li> <p>EasyConfig eb-tutorial-1.0.1-cpeCray-22.08.eb, with module eb-tutorial/1.0.1-cpeCray-22.08</p> </li> <li> <p>EasyConfig eb-tutorial-1.0.1-cpeCray-22.12.eb, with module eb-tutorial/1.0.1-cpeCray-22.12</p> </li> <li> <p>EasyConfig eb-tutorial-1.0.1-cpeGNU-22.08.eb, with module eb-tutorial/1.0.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig eb-tutorial-1.0.1-cpeGNU-22.12.eb, with module eb-tutorial/1.0.1-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/ecCodes/","title":"ecCodes","text":"<p>[package list]</p>","boost":10},{"location":"e/ecCodes/#eccodes","title":"ecCodes","text":"","boost":10},{"location":"e/ecCodes/#license-information","title":"License information","text":"<p>The ecCodes software package license information is available on the \"License\" page of the ecCodes web site.</p> <p>After installation and loading the module, a copy of the license is also available in the <code>$EBROOTECDODES/share/licenses/eCCodes</code> directory (from version 2.30.0 onwards).</p>","boost":10},{"location":"e/ecCodes/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ecCodes/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig ecCodes-2.30.0-cpeCray-23.03.eb, will build ecCodes/2.30.0-cpeCray-23.03</p> </li> <li> <p>EasyConfig ecCodes-2.32.0-cpeCray-23.09.eb, will build ecCodes/2.32.0-cpeCray-23.09</p> </li> <li> <p>EasyConfig ecCodes-2.32.0-cpeGNU-23.09.eb, will build ecCodes/2.32.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig ecCodes-2.35.1-cpeCray-24.03.eb, will build ecCodes/2.35.1-cpeCray-24.03</p> </li> <li> <p>EasyConfig ecCodes-2.35.1-cpeGNU-24.03.eb, will build ecCodes/2.35.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"e/ecCodes/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>ecCodes home page</p> <ul> <li>Downloads from the home page</li> </ul> </li> </ul>","boost":10},{"location":"e/ecCodes/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ecCodes support in the EasyBuilders repository</p> </li> <li> <p>ecCodes support in the CSCS repository</p> </li> <li> <p>ecCodes in Spack,     with additional dependencies compared to the EasyBuild builds as of September 2021.</p> </li> </ul>","boost":10},{"location":"e/ecCodes/#version-2230-in-cpe-2108","title":"Version 2.23.0 in CPE 21.08","text":"<ul> <li> <p>Started from the CSCS EasyConfig file but added JasPer as a dependency.</p> </li> <li> <p>The Spack recipe seems to have options for various other packages also     but the CMake process doesn't seem to look for those. We can't find a trace     of those packages in the documentation, in<code>CMakeLists.txt</code> or in the CMake     cache after the configure step.</p> </li> <li> <p>Switched to installing libraries in lib rather than lib64 for consistency with     most other installs in the LUMI software stack.</p> </li> </ul>","boost":10},{"location":"e/ecCodes/#version-2250-for-cpe-2112","title":"Version 2.25.0 for CPE 21.12","text":"<ul> <li>Trivial port from 2.23.0.</li> </ul>","boost":10},{"location":"e/ecCodes/#version-2260-for-cpe-2206-and-2208","title":"Version 2.26.0 for CPE 22.06 and 22.08","text":"<ul> <li> <p>Trivial port from 2.25.0</p> </li> <li> <p>Checked for additional sanity check commands but it looks like showing help also     returns an error code in almost all commands.</p> </li> <li> <p>Build without Python support as that is for Python2. Python3 support supposedly     comes via the eccodes PyPi package but was not tested.</p> </li> </ul>","boost":10},{"location":"e/ecCodes/#version-2300-for-cpe-2212-and-2303","title":"Version 2.30.0 for CPE 22.12 and 23.03","text":"<ul> <li>Trivial port from 2.26.0, with all remarks still valid.</li> </ul>","boost":10},{"location":"e/ecCodes/#version-2320-from-cpe-2309-on","title":"Version 2.32.0 from CPE 23.09 on","text":"<ul> <li>Trivial port from 2.30.0, with all remarks still valid.</li> </ul> <p>TODO: ecCodes comes with samples. Can we figure out how to use them and build some quick sanity checks with them?</p>","boost":10},{"location":"e/ecCodes/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig ecCodes-2.23.0-cpeCray-21.08.eb, with module ecCodes/2.23.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig ecCodes-2.23.0-cpeGNU-21.08.eb, with module ecCodes/2.23.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig ecCodes-2.25.0-cpeAOCC-21.12.eb, with module ecCodes/2.25.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig ecCodes-2.25.0-cpeCray-21.12.eb, with module ecCodes/2.25.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig ecCodes-2.25.0-cpeGNU-21.12.eb, with module ecCodes/2.25.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig ecCodes-2.26.0-cpeCray-22.06.eb, with module ecCodes/2.26.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig ecCodes-2.26.0-cpeCray-22.08.eb, with module ecCodes/2.26.0-cpeCray-22.08</p> </li> <li> <p>EasyConfig ecCodes-2.26.0-cpeGNU-22.06.eb, with module ecCodes/2.26.0-cpeGNU-22.06</p> </li> <li> <p>EasyConfig ecCodes-2.26.0-cpeGNU-22.08.eb, with module ecCodes/2.26.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig ecCodes-2.30.0-cpeCray-22.12.eb, with module ecCodes/2.30.0-cpeCray-22.12</p> </li> <li> <p>EasyConfig ecCodes-2.30.0-cpeGNU-22.12.eb, with module ecCodes/2.30.0-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"e/expat/","title":"expat","text":"<p>[package list]</p>","boost":10},{"location":"e/expat/#expat","title":"expat","text":"","boost":10},{"location":"e/expat/#license-information","title":"License information","text":"<p>Expat is licensed under the MIT license. The license and copyright notice can be found in the COPYING file in the expat GitHub.</p> <p>From LUMI/23.12 on, this file can also be found in <code>$EBROOTEXPAT/share/licenses/expat</code> after loading the module.</p>","boost":10},{"location":"e/expat/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"e/expat/#what-is-expat","title":"What is expat?","text":"<p>Expat  is an XML parser library written in C. It is a stream-oriented parser in which an application registers handlers for things the parser might find in the XML document (like start tags).</p> <p>Web-based documentation is available.</p>","boost":10},{"location":"e/expat/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider expat/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>expat/2.4.8-cpeAMD-22.08 (EasyConfig: expat-2.4.8-cpeAMD-22.08.eb)</p> </li> <li> <p>expat/2.4.8-cpeAOCC-22.08 (EasyConfig: expat-2.4.8-cpeAOCC-22.08.eb)</p> </li> <li> <p>expat/2.4.8-cpeCray-22.08 (EasyConfig: expat-2.4.8-cpeCray-22.08.eb)</p> </li> <li> <p>expat/2.4.8-cpeGNU-22.08 (EasyConfig: expat-2.4.8-cpeGNU-22.08.eb)</p> </li> <li> <p>expat/2.4.9-cpeAMD-22.12 (EasyConfig: expat-2.4.9-cpeAMD-22.12.eb)</p> </li> <li> <p>expat/2.4.9-cpeAOCC-22.12 (EasyConfig: expat-2.4.9-cpeAOCC-22.12.eb)</p> </li> <li> <p>expat/2.4.9-cpeCray-22.12 (EasyConfig: expat-2.4.9-cpeCray-22.12.eb)</p> </li> <li> <p>expat/2.4.9-cpeCray-23.03 (EasyConfig: expat-2.4.9-cpeCray-23.03.eb)</p> </li> <li> <p>expat/2.4.9-cpeGNU-22.12 (EasyConfig: expat-2.4.9-cpeGNU-22.12.eb)</p> </li> <li> <p>expat/2.5.0-cpeAMD-23.09 (EasyConfig: expat-2.5.0-cpeAMD-23.09.eb)</p> </li> <li> <p>expat/2.5.0-cpeAOCC-23.09 (EasyConfig: expat-2.5.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>expat/2.5.0-cpeCray-23.09 (EasyConfig: expat-2.5.0-cpeCray-23.09.eb)</p> </li> <li> <p>expat/2.5.0-cpeGNU-23.09 (EasyConfig: expat-2.5.0-cpeGNU-23.09.eb)</p> </li> <li> <p>expat/2.6.2-cpeAMD-23.12 (EasyConfig: expat-2.6.2-cpeAMD-23.12.eb)</p> </li> <li> <p>expat/2.6.2-cpeAMD-24.03 (EasyConfig: expat-2.6.2-cpeAMD-24.03.eb)</p> </li> <li> <p>expat/2.6.2-cpeAOCC-23.12 (EasyConfig: expat-2.6.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>expat/2.6.2-cpeAOCC-24.03 (EasyConfig: expat-2.6.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>expat/2.6.2-cpeCray-23.12 (EasyConfig: expat-2.6.2-cpeCray-23.12.eb)</p> </li> <li> <p>expat/2.6.2-cpeCray-24.03 (EasyConfig: expat-2.6.2-cpeCray-24.03.eb)</p> </li> <li> <p>expat/2.6.2-cpeGNU-23.12 (EasyConfig: expat-2.6.2-cpeGNU-23.12.eb)</p> </li> <li> <p>expat/2.6.2-cpeGNU-24.03 (EasyConfig: expat-2.6.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"e/expat/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>expat home page on github.io</p> </li> <li> <p>expat on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"e/expat/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>expat support in the EasyBuilders repository</p> </li> <li> <p>expat support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"e/expat/#version-241-from-cpe-2106-on","title":"Version 2.4.1 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is a mix of the default EasyBuilders one with some extensions     taken from the University of Antwerpen one.</li> </ul>","boost":10},{"location":"e/expat/#version-246-from-cpe-2112-on","title":"Version 2.4.6 from CPE 21.12 on","text":"<ul> <li> <p>Rather than following the 2021b common toolchain versions for 21.12, we chose     to upgrade expat to the latest available version due to a security vulnerability     present in version up to 2.4.2.</p> </li> <li> <p>Also switched to downloading from GitHub rather than from SourceForge</p> </li> </ul>","boost":10},{"location":"e/expat/#version-248-from-cpe-2206-on","title":"Version 2.4.8 from CPE 22.06 on","text":"<ul> <li>Trivial port of the EasyConfig</li> </ul>","boost":10},{"location":"e/expat/#version-249-from-cpe-2212-on","title":"Version 2.4.9 from CPE 22.12 on","text":"<ul> <li>Trivial port of the EasyConfig, with one additional configopt ( <code>--without-docbook</code>)     taken from the 2022b EasyBuilders recipes.</li> </ul>","boost":10},{"location":"e/expat/#version-250-from-cpe-2309-on","title":"Version 2.5.0 from CPE 23.09 on","text":"<ul> <li>Version bump to align with 2023a, trivial.</li> </ul>","boost":10},{"location":"e/expat/#version-262-from-cpe-2312-on","title":"Version 2.6.2 from CPE 23.12 on","text":"<ul> <li> <p>One of the few packages that we upgraded between 23.09 and 23.12 due to security      concerns.</p> </li> <li> <p>Starting from a trivial port, but adding more license info to the installation.</p> </li> </ul>","boost":10},{"location":"e/expat/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig expat-2.4.1-cpeAMD-21.06.eb, with module expat/2.4.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig expat-2.4.1-cpeCray-21.06.eb, with module expat/2.4.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig expat-2.4.1-cpeCray-21.08.eb, with module expat/2.4.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig expat-2.4.1-cpeGNU-21.06.eb, with module expat/2.4.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig expat-2.4.1-cpeGNU-21.08.eb, with module expat/2.4.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig expat-2.4.6-cpeAOCC-21.12.eb, with module expat/2.4.6-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig expat-2.4.6-cpeCray-21.12.eb, with module expat/2.4.6-cpeCray-21.12</p> </li> <li> <p>EasyConfig expat-2.4.6-cpeGNU-21.12.eb, with module expat/2.4.6-cpeGNU-21.12</p> </li> <li> <p>EasyConfig expat-2.4.8-cpeAOCC-22.06.eb, with module expat/2.4.8-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig expat-2.4.8-cpeCray-22.06.eb, with module expat/2.4.8-cpeCray-22.06</p> </li> <li> <p>EasyConfig expat-2.4.8-cpeGNU-22.06.eb, with module expat/2.4.8-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"f/FFmpeg/","title":"FFmpeg","text":"<p>[package list]</p>","boost":10},{"location":"f/FFmpeg/#ffmpeg","title":"FFmpeg","text":"","boost":10},{"location":"f/FFmpeg/#license-information","title":"License information","text":"<p>FFmpeg is licensed under the  GNU Lesser General Public License (LGPL) version 2.1 or later.  However, FFmpeg incorporates several optional parts and optimizations that are covered by the  GNU General Public License (GPL) version 2 or later. If those parts get used the GPL applies to all of FFmpeg.</p> <p>|More information is available on the  \"FFmpeg License and Legal Considerations\" page</p> <p>From LUMI/23.12, various files explaining the license can be found in <code>$EBROOTFFMPEG/share/licenses/FFmpeg</code> after loading the module.</p>","boost":10},{"location":"f/FFmpeg/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"f/FFmpeg/#what-is-ffmpeg","title":"What is FFmpeg?","text":"<p>FFmpeg  is a leading multimedia framework, able to decode, encode, transcode, mux, demux, stream, filter and play pretty much anything that humans and machines have created. It supports the most obscure ancient formats up to the cutting edge. No matter if they were designed by some standards committee, the community or a corporation. It is also highly portable: FFmpeg compiles, runs, and passes our testing infrastructure FATE across Linux, Mac OS X, Microsoft Windows, the BSDs, Solaris, etc. under a wide variety of build environments, machine architectures, and configurations.</p> <p>It contains libavcodec, libavutil, libavformat, libavfilter, libavdevice, libswscale and libswresample which can be used by applications. As well as ffmpeg, ffplay and ffprobe which can be used by end users for transcoding and playing.</p> <p>The FFmpeg project tries to provide the best technically possible solution for developers of applications and end users alike. To achieve this the project combines the best free software options available. It slightly favours its own code to keep the dependencies on other libs low and to maximize code sharing between parts of FFmpeg. Wherever the question of \"best\" cannot be answered it supports both options so the end user can choose.</p> <p>There is web-based documentation for FFmpeg.</p>","boost":10},{"location":"f/FFmpeg/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider FFmpeg/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>FFmpeg/5.0.1-cpeCray-22.08 (EasyConfig: FFmpeg-5.0.1-cpeCray-22.08.eb)</p> </li> <li> <p>FFmpeg/5.0.1-cpeGNU-22.08 (EasyConfig: FFmpeg-5.0.1-cpeGNU-22.08.eb)</p> </li> <li> <p>FFmpeg/5.1.2-cpeCray-23.03 (EasyConfig: FFmpeg-5.1.2-cpeCray-23.03.eb)</p> </li> <li> <p>FFmpeg/5.1.2-cpeGNU-22.12 (EasyConfig: FFmpeg-5.1.2-cpeGNU-22.12.eb)</p> </li> <li> <p>FFmpeg/6.0-cpeGNU-23.09 (EasyConfig: FFmpeg-6.0-cpeGNU-23.09.eb)</p> </li> <li> <p>FFmpeg/6.1.1-cpeAMD-23.12 (EasyConfig: FFmpeg-6.1.1-cpeAMD-23.12.eb)</p> </li> <li> <p>FFmpeg/6.1.1-cpeAMD-24.03 (EasyConfig: FFmpeg-6.1.1-cpeAMD-24.03.eb)</p> </li> <li> <p>FFmpeg/6.1.1-cpeAOCC-23.12 (EasyConfig: FFmpeg-6.1.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>FFmpeg/6.1.1-cpeAOCC-24.03 (EasyConfig: FFmpeg-6.1.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>FFmpeg/6.1.1-cpeCray-23.12 (EasyConfig: FFmpeg-6.1.1-cpeCray-23.12.eb)</p> </li> <li> <p>FFmpeg/6.1.1-cpeCray-24.03 (EasyConfig: FFmpeg-6.1.1-cpeCray-24.03.eb)</p> </li> <li> <p>FFmpeg/6.1.1-cpeGNU-23.12 (EasyConfig: FFmpeg-6.1.1-cpeGNU-23.12.eb)</p> </li> <li> <p>FFmpeg/6.1.1-cpeGNU-24.03 (EasyConfig: FFmpeg-6.1.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"f/FFmpeg/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>FFmpeg home page</p> </li> <li> <p>FFmpeg internal git</p> </li> </ul>","boost":10},{"location":"f/FFmpeg/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>FFmpeg support in the EasyBuilders repository</p> </li> <li> <p>FFmpeg support in the CSCS repository</p> </li> </ul> <p>Note: It is not clear is NASM is really a dependency. From the documentation it looks like it is only needed at build time so it appears to be wrongly marked as a dependency in EasyBuild.</p>","boost":10},{"location":"f/FFmpeg/#433-for-cpe-2108","title":"4.3.3 for CPE 21.08","text":"<ul> <li> <p>We started from the EasyBuilders ones as those seem to be a lot more complete     at least in the list of dependencies. It may be that this only influences     the executables and not the libraries though.</p> </li> <li> <p>Issues:</p> <ul> <li> <p>Not tested yet with the AMD compiler.</p> </li> <li> <p>Crashes the Cray compiler</p> </li> </ul> </li> </ul>","boost":10},{"location":"f/FFmpeg/#version-501-for-cpe-2206","title":"Version 5.0.1 for CPE 22.06","text":"<ul> <li>We started from a version bump of the 4.3.3 EasyConfig.</li> </ul>","boost":10},{"location":"f/FFmpeg/#version-512-from-cpe-2212-on","title":"Version 5.1.2 from CPE 22.12 on","text":"<ul> <li> <p>Almost trivial port of the 5.0.1 EasyConfig.</p> </li> <li> <p>Note that we explicitly exclude the SDL2 dependency that is used in the EasyBuilders     repository as SDL2 uses DBus and hence may not work on the compute nodes.</p> </li> <li> <p>FFmpeg 5.1.2 causes a compiler crash in CCE 15.0.0, but that issue seems to be     resolved in 15.0.1.</p> </li> </ul>","boost":10},{"location":"f/FFmpeg/#version-60-from-2309-on","title":"Version 6.0 from 23.09 on","text":"<ul> <li>Fairly trivial port of the 5.1.2 EasyConfig</li> </ul>","boost":10},{"location":"f/FFmpeg/#version-611-from-2312-on","title":"Version 6.1.1 from 23.12 on","text":"<ul> <li> <p>Trivial version bump of 6.0.</p> </li> <li> <p>But we added license information to the installation directories.</p> </li> </ul>","boost":10},{"location":"f/FFmpeg/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig FFmpeg-4.3.3-cpeCray-21.12.eb, with module FFmpeg/4.3.3-cpeCray-21.12</p> </li> <li> <p>EasyConfig FFmpeg-4.3.3-cpeGNU-21.08.eb, with module FFmpeg/4.3.3-cpeGNU-21.08</p> </li> <li> <p>EasyConfig FFmpeg-4.3.3-cpeGNU-21.12.eb, with module FFmpeg/4.3.3-cpeGNU-21.12</p> </li> <li> <p>EasyConfig FFmpeg-5.0.1-cpeCray-22.06.eb, with module FFmpeg/5.0.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig FFmpeg-5.0.1-cpeGNU-22.06.eb, with module FFmpeg/5.0.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"f/FLAC/","title":"FLAC","text":"<p>[package list]</p>","boost":10},{"location":"f/FLAC/#flac","title":"FLAC","text":"","boost":10},{"location":"f/FLAC/#license-information","title":"License information","text":"<p>The FLAC and Ogg FLAC formats themselves, and their specifications, are fully  open to the public to be used for any purpose (the FLAC project reserves the  right to set the FLAC specification and certify compliance). They are free for  commercial or noncommercial use.</p> <p>The reference implementation libraries are licensed under the  New BSD License. Some other software provided by the project is licensed under the GNU General Public License (GPL).</p> <p>The full license information is available on the \"flac License\" page and the  COPYING.Xiph, COPYING.FDL, COPYING.GPL and COPYING.LGPL files on the FLAC GitHub.</p> <p>From LUMI/23.12 on, these files can also be found in the <code>$EBROOTFLAC/share/licenses/FLAC</code> directory after loading the module.</p>","boost":10},{"location":"f/FLAC/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"f/FLAC/#what-is-flac","title":"What is FLAC?","text":"<p>FLAC  stands for Free Lossless Audio Codec, an audio format similar to MP3, but lossless, meaning that audio is compressed in FLAC without any loss in quality. This is similar to how Zip works, except with FLAC you will get much better compression because it is designed specifically for audio, and you can play back compressed FLAC files in your favourite player (or your car or home stereo, see supported devices) just like you would an MP3 file.</p> <p>FLAC stands out as the fastest and most widely supported lossless audio codec, and the only one that at once is non-proprietary, is unencumbered by patents, has an open-source reference implementation, has a well documented format and API, and has several other independent implementations.</p> <p>The XMMS plugin is missing in our current configurations.</p> <p>There is web-based documentation for FLAC.</p>","boost":10},{"location":"f/FLAC/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider FLAC/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>FLAC/1.3.4-cpeAMD-22.08 (EasyConfig: FLAC-1.3.4-cpeAMD-22.08.eb)</p> </li> <li> <p>FLAC/1.3.4-cpeAOCC-22.08 (EasyConfig: FLAC-1.3.4-cpeAOCC-22.08.eb)</p> </li> <li> <p>FLAC/1.3.4-cpeCray-22.08 (EasyConfig: FLAC-1.3.4-cpeCray-22.08.eb)</p> </li> <li> <p>FLAC/1.3.4-cpeGNU-22.08 (EasyConfig: FLAC-1.3.4-cpeGNU-22.08.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeAMD-22.12 (EasyConfig: FLAC-1.4.2-cpeAMD-22.12.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeAMD-23.09 (EasyConfig: FLAC-1.4.2-cpeAMD-23.09.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeAMD-23.12 (EasyConfig: FLAC-1.4.2-cpeAMD-23.12.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeAOCC-22.12 (EasyConfig: FLAC-1.4.2-cpeAOCC-22.12.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeAOCC-23.09 (EasyConfig: FLAC-1.4.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeAOCC-23.12 (EasyConfig: FLAC-1.4.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeCray-22.12 (EasyConfig: FLAC-1.4.2-cpeCray-22.12.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeCray-23.03 (EasyConfig: FLAC-1.4.2-cpeCray-23.03.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeCray-23.09 (EasyConfig: FLAC-1.4.2-cpeCray-23.09.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeCray-23.12 (EasyConfig: FLAC-1.4.2-cpeCray-23.12.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeGNU-22.12 (EasyConfig: FLAC-1.4.2-cpeGNU-22.12.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeGNU-23.09 (EasyConfig: FLAC-1.4.2-cpeGNU-23.09.eb)</p> </li> <li> <p>FLAC/1.4.2-cpeGNU-23.12 (EasyConfig: FLAC-1.4.2-cpeGNU-23.12.eb)</p> </li> <li> <p>FLAC/1.4.3-cpeAMD-24.03 (EasyConfig: FLAC-1.4.3-cpeAMD-24.03.eb)</p> </li> <li> <p>FLAC/1.4.3-cpeAOCC-24.03 (EasyConfig: FLAC-1.4.3-cpeAOCC-24.03.eb)</p> </li> <li> <p>FLAC/1.4.3-cpeCray-24.03 (EasyConfig: FLAC-1.4.3-cpeCray-24.03.eb)</p> </li> <li> <p>FLAC/1.4.3-cpeGNU-24.03 (EasyConfig: FLAC-1.4.3-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"f/FLAC/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>FLAC web site</p> <ul> <li>Release information</li> </ul> </li> <li> <p>FLAC on GitHub</p> <ul> <li>Releases</li> </ul> </li> </ul>","boost":10},{"location":"f/FLAC/#general-instructions","title":"General instructions","text":"<ul> <li> <p>Ogg is an optional but highly recommended dependency.</p> </li> <li> <p>XMMS is an optional dependency that we did not include     given that it is of little use on a cluster.</p> </li> </ul>","boost":10},{"location":"f/FLAC/#easyconfig","title":"EasyConfig","text":"<ul> <li> <p>FLAC support in the EasyBuilders repository</p> </li> <li> <p>There is no support for FLAC in the CSCS repository</p> </li> </ul>","boost":10},{"location":"f/FLAC/#version-133-from-cpe-2106-on","title":"Version 1.3.3 from CPE 21.06 on","text":"<ul> <li>Our EasyConfig is a combination of the EasyBuilders one and the one used     at the University of Antwerpen.</li> </ul>","boost":10},{"location":"f/FLAC/#version-134-from-cpe-2206-on","title":"Version 1.3.4 from CPE 22.06 on","text":"<ul> <li>The EasyConfig is a trivial update of the 1.3.3 one.</li> </ul>","boost":10},{"location":"f/FLAC/#version-142-from-cpe-2212-on","title":"Version 1.4.2 from CPE 22.12 on","text":"<ul> <li> <p>The EasyConfig is a trivial update of the 1.3.4 one but we copied the improved     sanity check from the EasyBuilders one.</p> </li> <li> <p>For LUMI/23.12: License information was added to the installation.</p> </li> </ul>","boost":10},{"location":"f/FLAC/#version-143-from-lumi2403-on","title":"Version 1.4.3 from LUMI/24.03 on","text":"<ul> <li>Trivial port of the EasyConfig for 1.4.2 for LUMI/23.12</li> </ul>","boost":10},{"location":"f/FLAC/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig FLAC-1.3.3-cpeAMD-21.06.eb, with module FLAC/1.3.3-cpeAMD-21.06</p> </li> <li> <p>EasyConfig FLAC-1.3.3-cpeAOCC-21.12.eb, with module FLAC/1.3.3-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig FLAC-1.3.3-cpeCray-21.06.eb, with module FLAC/1.3.3-cpeCray-21.06</p> </li> <li> <p>EasyConfig FLAC-1.3.3-cpeCray-21.08.eb, with module FLAC/1.3.3-cpeCray-21.08</p> </li> <li> <p>EasyConfig FLAC-1.3.3-cpeCray-21.12.eb, with module FLAC/1.3.3-cpeCray-21.12</p> </li> <li> <p>EasyConfig FLAC-1.3.3-cpeGNU-21.06.eb, with module FLAC/1.3.3-cpeGNU-21.06</p> </li> <li> <p>EasyConfig FLAC-1.3.3-cpeGNU-21.08.eb, with module FLAC/1.3.3-cpeGNU-21.08</p> </li> <li> <p>EasyConfig FLAC-1.3.3-cpeGNU-21.12.eb, with module FLAC/1.3.3-cpeGNU-21.12</p> </li> <li> <p>EasyConfig FLAC-1.3.4-cpeAOCC-22.06.eb, with module FLAC/1.3.4-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig FLAC-1.3.4-cpeCray-22.06.eb, with module FLAC/1.3.4-cpeCray-22.06</p> </li> <li> <p>EasyConfig FLAC-1.3.4-cpeGNU-22.06.eb, with module FLAC/1.3.4-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"f/FriBiDi/","title":"FriBiDi","text":"<p>[package list]</p>","boost":10},{"location":"f/FriBiDi/#fribidi","title":"FriBiDi","text":"","boost":10},{"location":"f/FriBiDi/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig FriBidi-1.0.10-cpeAMD-21.06.eb, with module FriBiDi/FriBidi-1.0.10-cpeAMD-21.06</p> </li> <li> <p>EasyConfig FriBidi-1.0.10-cpeAOCC-21.12.eb, with module FriBiDi/FriBidi-1.0.10-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig FriBidi-1.0.10-cpeCray-21.06.eb, with module FriBiDi/FriBidi-1.0.10-cpeCray-21.06</p> </li> <li> <p>EasyConfig FriBidi-1.0.10-cpeCray-21.08.eb, with module FriBiDi/FriBidi-1.0.10-cpeCray-21.08</p> </li> <li> <p>EasyConfig FriBidi-1.0.10-cpeCray-21.12.eb, with module FriBiDi/FriBidi-1.0.10-cpeCray-21.12</p> </li> <li> <p>EasyConfig FriBidi-1.0.10-cpeGNU-21.06.eb, with module FriBiDi/FriBidi-1.0.10-cpeGNU-21.06</p> </li> <li> <p>EasyConfig FriBidi-1.0.10-cpeGNU-21.08.eb, with module FriBiDi/FriBidi-1.0.10-cpeGNU-21.08</p> </li> <li> <p>EasyConfig FriBidi-1.0.10-cpeGNU-21.12.eb, with module FriBiDi/FriBidi-1.0.10-cpeGNU-21.12</p> </li> <li> <p>EasyConfig FriBidi-1.0.12-cpeAOCC-22.06.eb, with module FriBiDi/FriBidi-1.0.12-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig FriBidi-1.0.12-cpeCray-22.06.eb, with module FriBiDi/FriBidi-1.0.12-cpeCray-22.06</p> </li> <li> <p>EasyConfig FriBidi-1.0.12-cpeGNU-22.06.eb, with module FriBiDi/FriBidi-1.0.12-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"f/feh/","title":"feh","text":"<p>[package list]</p>","boost":10},{"location":"f/feh/#feh","title":"feh","text":"","boost":10},{"location":"f/feh/#license-information","title":"License information","text":"<p>The license for feh can be found in the COPYING file in the GitHub repository.</p> <p>A copy of this file can be found in <code>$EBROOTFEH/share/licenses/feh</code> after installing and loading the module.</p>","boost":10},{"location":"f/feh/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider feh/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig feh-2.26-cpeGNU-24.03.eb, will build feh/2.26-cpeGNU-24.03</p> </li> <li> <p>EasyConfig feh-3.10.3-cpeGNU-24.03.eb, will build feh/3.10.3-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"f/feh/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>feh homepage</p> <p>feh should be downloaded from its homepage, not from GitHub.</p> </li> <li> <p>feh development on GitHub</p> </li> </ul>","boost":10},{"location":"f/feh/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for feh in the EasyBuilders repository</p> </li> <li> <p>There is no support for feh in the CSCS repository.</p> </li> <li> <p>Spack support for feh</p> </li> </ul>","boost":10},{"location":"f/feh/#version-226-for-2403","title":"Version 2.26 for 24.03","text":"<ul> <li> <p>The EasyConfig is a direct port of the EasyBuilders one.</p> <p>Also copy the COPYING file to our standard location.</p> </li> </ul>","boost":10},{"location":"f/feh/#version-3103-for-2403","title":"Version 3.10.3 for 24.03","text":"<ul> <li> <p>Starting from the EasyBuilders EasyConfig, but added support for libmagic     from the file package and libexif.</p> <p>Also copy the COPYING file to our standard location.</p> </li> </ul>","boost":10},{"location":"f/file/","title":"file","text":"<p>[package list]</p>","boost":10},{"location":"f/file/#file","title":"file","text":"","boost":10},{"location":"f/file/#license-information","title":"License information","text":"<p>The licensing conditions can be found in the \"COPYING\" file on the GitHub mirror of the source repository.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the <code>$EBNROOTFILE/share/licenses/file</code> subdirectory after loading the module.</p>","boost":10},{"location":"f/file/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"f/file/#what-is-file","title":"What is file?","text":"<p>The file command  is 'a file type guesser', that is, a command-line tool that tells you in words what kind of data a file contains. Unlike most GUI systems, command-line UNIX systems - with this program leading the charge - don't rely on filename extentions to tell you the type of a file, but look at the file's actual contents. This is, of course, more reliable, but requires a bit of I/O.</p> <p>The module does not only provide the file command, but also libmagic on which it is based.</p>","boost":10},{"location":"f/file/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider file/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>file/5.42-cpeAMD-22.08 (EasyConfig: file-5.42-cpeAMD-22.08.eb)</p> </li> <li> <p>file/5.42-cpeAOCC-22.08 (EasyConfig: file-5.42-cpeAOCC-22.08.eb)</p> </li> <li> <p>file/5.42-cpeCray-22.08 (EasyConfig: file-5.42-cpeCray-22.08.eb)</p> </li> <li> <p>file/5.42-cpeGNU-22.08 (EasyConfig: file-5.42-cpeGNU-22.08.eb)</p> </li> <li> <p>file/5.43-cpeAMD-22.12 (EasyConfig: file-5.43-cpeAMD-22.12.eb)</p> </li> <li> <p>file/5.43-cpeAMD-23.09 (EasyConfig: file-5.43-cpeAMD-23.09.eb)</p> </li> <li> <p>file/5.43-cpeAMD-23.12 (EasyConfig: file-5.43-cpeAMD-23.12.eb)</p> </li> <li> <p>file/5.43-cpeAMD-24.03 (EasyConfig: file-5.43-cpeAMD-24.03.eb)</p> </li> <li> <p>file/5.43-cpeAOCC-22.12 (EasyConfig: file-5.43-cpeAOCC-22.12.eb)</p> </li> <li> <p>file/5.43-cpeAOCC-23.09 (EasyConfig: file-5.43-cpeAOCC-23.09.eb)</p> </li> <li> <p>file/5.43-cpeAOCC-23.12 (EasyConfig: file-5.43-cpeAOCC-23.12.eb)</p> </li> <li> <p>file/5.43-cpeAOCC-24.03 (EasyConfig: file-5.43-cpeAOCC-24.03.eb)</p> </li> <li> <p>file/5.43-cpeCray-22.12 (EasyConfig: file-5.43-cpeCray-22.12.eb)</p> </li> <li> <p>file/5.43-cpeCray-23.03 (EasyConfig: file-5.43-cpeCray-23.03.eb)</p> </li> <li> <p>file/5.43-cpeCray-23.09 (EasyConfig: file-5.43-cpeCray-23.09.eb)</p> </li> <li> <p>file/5.43-cpeCray-23.12 (EasyConfig: file-5.43-cpeCray-23.12.eb)</p> </li> <li> <p>file/5.43-cpeCray-24.03 (EasyConfig: file-5.43-cpeCray-24.03.eb)</p> </li> <li> <p>file/5.43-cpeGNU-22.12 (EasyConfig: file-5.43-cpeGNU-22.12.eb)</p> </li> <li> <p>file/5.43-cpeGNU-23.09 (EasyConfig: file-5.43-cpeGNU-23.09.eb)</p> </li> <li> <p>file/5.43-cpeGNU-23.12 (EasyConfig: file-5.43-cpeGNU-23.12.eb)</p> </li> <li> <p>file/5.43-cpeGNU-24.03 (EasyConfig: file-5.43-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"f/file/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>file home page</p> </li> <li> <p>file downloads</p> </li> <li> <p>GitHub mirror of the CVS</p> </li> </ul>","boost":10},{"location":"f/file/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>file support in the EasyBuilders repository</p> </li> <li> <p>There is no support for file in the CSCS repository</p> </li> </ul>","boost":10},{"location":"f/file/#version-540-from-cpe-2106-on","title":"Version 5.40 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is a mix of the EasyBuilders and University of Antwerpen ones     with additional documentation.</li> </ul>","boost":10},{"location":"f/file/#version-541-from-cpe-2112-on","title":"Version 5.41 from CPE 21.12 on","text":"<ul> <li>Trivial port of the EasyConfig</li> </ul>","boost":10},{"location":"f/file/#version-542-from-cpe-2206-on","title":"Version 5.42 from CPE 22.06 on","text":"<ul> <li> <p>Did a check for additional dependencies and found that it can also use bzip2     and XZ, so moved it further down in the build chain.</p> </li> <li> <p>Otherwise a simple port of the EasyConfig file of 5.41.</p> </li> </ul>","boost":10},{"location":"f/file/#version-543-from-cpe-2212-on","title":"Version 5.43 from CPE 22.12 on","text":"<ul> <li> <p>Trivial version update of the EasyConfig.</p> </li> <li> <p>For LUMI/23.12, version information was added to the installation.</p> </li> </ul>","boost":10},{"location":"f/file/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig file-5.40-cpeAMD-21.06.eb, with module file/5.40-cpeAMD-21.06</p> </li> <li> <p>EasyConfig file-5.40-cpeCray-21.06.eb, with module file/5.40-cpeCray-21.06</p> </li> <li> <p>EasyConfig file-5.40-cpeCray-21.08.eb, with module file/5.40-cpeCray-21.08</p> </li> <li> <p>EasyConfig file-5.40-cpeGNU-21.06.eb, with module file/5.40-cpeGNU-21.06</p> </li> <li> <p>EasyConfig file-5.40-cpeGNU-21.08.eb, with module file/5.40-cpeGNU-21.08</p> </li> <li> <p>EasyConfig file-5.41-cpeAOCC-21.12.eb, with module file/5.41-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig file-5.41-cpeCray-21.12.eb, with module file/5.41-cpeCray-21.12</p> </li> <li> <p>EasyConfig file-5.41-cpeGNU-21.12.eb, with module file/5.41-cpeGNU-21.12</p> </li> <li> <p>EasyConfig file-5.42-cpeAOCC-22.06.eb, with module file/5.42-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig file-5.42-cpeCray-22.06.eb, with module file/5.42-cpeCray-22.06</p> </li> <li> <p>EasyConfig file-5.42-cpeGNU-22.06.eb, with module file/5.42-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"f/fontconfig/","title":"fontconfig","text":"<p>[package list]</p>","boost":10},{"location":"f/fontconfig/#fontconfig","title":"fontconfig","text":"","boost":10},{"location":"f/fontconfig/#license-information","title":"License information","text":"<p>The fontconfig license can be found in the COPYING file in the fontconfig GitLab.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the <code>$EBROOTFONTCONFIG/share/licenses/fontconfig</code> subdirectory after loading the module.</p>","boost":10},{"location":"f/fontconfig/#user-documentation","title":"User documentation","text":"<p>Fontconfig  is a library designed to provide system-wide font configuration, customization and application access.</p>","boost":10},{"location":"f/fontconfig/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider fontconfig/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>fontconfig/2.14.0-cpeAMD-22.08 (EasyConfig: fontconfig-2.14.0-cpeAMD-22.08.eb)</p> </li> <li> <p>fontconfig/2.14.0-cpeAOCC-22.08 (EasyConfig: fontconfig-2.14.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>fontconfig/2.14.0-cpeCray-22.08 (EasyConfig: fontconfig-2.14.0-cpeCray-22.08.eb)</p> </li> <li> <p>fontconfig/2.14.0-cpeGNU-22.08 (EasyConfig: fontconfig-2.14.0-cpeGNU-22.08.eb)</p> </li> <li> <p>fontconfig/2.14.1-cpeAMD-22.12 (EasyConfig: fontconfig-2.14.1-cpeAMD-22.12.eb)</p> </li> <li> <p>fontconfig/2.14.1-cpeAOCC-22.12 (EasyConfig: fontconfig-2.14.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>fontconfig/2.14.1-cpeCray-22.12 (EasyConfig: fontconfig-2.14.1-cpeCray-22.12.eb)</p> </li> <li> <p>fontconfig/2.14.1-cpeCray-23.03 (EasyConfig: fontconfig-2.14.1-cpeCray-23.03.eb)</p> </li> <li> <p>fontconfig/2.14.1-cpeGNU-22.12 (EasyConfig: fontconfig-2.14.1-cpeGNU-22.12.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeAMD-23.09 (EasyConfig: fontconfig-2.14.2-cpeAMD-23.09.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeAMD-23.12 (EasyConfig: fontconfig-2.14.2-cpeAMD-23.12.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeAMD-24.03 (EasyConfig: fontconfig-2.14.2-cpeAMD-24.03.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeAOCC-23.09 (EasyConfig: fontconfig-2.14.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeAOCC-23.12 (EasyConfig: fontconfig-2.14.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeAOCC-24.03 (EasyConfig: fontconfig-2.14.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeCray-23.09 (EasyConfig: fontconfig-2.14.2-cpeCray-23.09.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeCray-23.12 (EasyConfig: fontconfig-2.14.2-cpeCray-23.12.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeCray-24.03 (EasyConfig: fontconfig-2.14.2-cpeCray-24.03.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeGNU-23.09 (EasyConfig: fontconfig-2.14.2-cpeGNU-23.09.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeGNU-23.12 (EasyConfig: fontconfig-2.14.2-cpeGNU-23.12.eb)</p> </li> <li> <p>fontconfig/2.14.2-cpeGNU-24.03 (EasyConfig: fontconfig-2.14.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"f/fontconfig/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>fontconfig home page</p> </li> <li> <p>fontconfig downloads</p> </li> </ul>","boost":10},{"location":"f/fontconfig/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>fontconfig in the EasyBuilders repository</p> </li> <li> <p>fontconfig in the CSCS repository</p> </li> </ul>","boost":10},{"location":"f/fontconfig/#version-21394-from-cpe-2106-on","title":"Version 2.13.94 from cpe 21.06 on","text":"<ul> <li>The EasyConfig is based on the EasyBuilders one with documentation taken from     the University of Antwerpen one.</li> </ul>","boost":10},{"location":"f/fontconfig/#version-214-from-cpe-2206-on","title":"Version 2.14 from CPE 22.06 on","text":"<ul> <li>Trivial version bump of the EasyConfig of 2.13.94 (which was already kind of a      beta version for 2.14)</li> </ul>","boost":10},{"location":"f/fontconfig/#version-2141-from-cpe-2212-on","title":"Version 2.14.1 from CPE 22.12 on","text":"<ul> <li>Trivial version bump of the EasyConfig for version 2.14.0.</li> </ul>","boost":10},{"location":"f/fontconfig/#version-2142-from-2309-on","title":"Version 2.14.2 from 23.09 on","text":"<ul> <li> <p>Trivial version bump of the EasyConfig for 2.14.1 to align with 2023a.</p> </li> <li> <p>From LUMI/23.12 on, license information is included in the software installation      and both shared and static builds are explicitly enabled.</p> </li> </ul>","boost":10},{"location":"f/fontconfig/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig fontconfig-2.13.94-cpeAMD-21.06.eb, with module fontconfig/2.13.94-cpeAMD-21.06</p> </li> <li> <p>EasyConfig fontconfig-2.13.94-cpeAOCC-21.12.eb, with module fontconfig/2.13.94-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig fontconfig-2.13.94-cpeCray-21.06.eb, with module fontconfig/2.13.94-cpeCray-21.06</p> </li> <li> <p>EasyConfig fontconfig-2.13.94-cpeCray-21.08.eb, with module fontconfig/2.13.94-cpeCray-21.08</p> </li> <li> <p>EasyConfig fontconfig-2.13.94-cpeCray-21.12.eb, with module fontconfig/2.13.94-cpeCray-21.12</p> </li> <li> <p>EasyConfig fontconfig-2.13.94-cpeGNU-21.06.eb, with module fontconfig/2.13.94-cpeGNU-21.06</p> </li> <li> <p>EasyConfig fontconfig-2.13.94-cpeGNU-21.08.eb, with module fontconfig/2.13.94-cpeGNU-21.08</p> </li> <li> <p>EasyConfig fontconfig-2.13.94-cpeGNU-21.12.eb, with module fontconfig/2.13.94-cpeGNU-21.12</p> </li> <li> <p>EasyConfig fontconfig-2.14.0-cpeAOCC-22.06.eb, with module fontconfig/2.14.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig fontconfig-2.14.0-cpeCray-22.06.eb, with module fontconfig/2.14.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig fontconfig-2.14.0-cpeGNU-22.06.eb, with module fontconfig/2.14.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"f/fpocket/","title":"fpocket","text":"<p>[package list]</p>","boost":10},{"location":"f/fpocket/#fpocket","title":"fpocket","text":"","boost":10},{"location":"f/fpocket/#license-information","title":"License information","text":"<p>The fpocket package is distributed under a MIT license, a copy of which can be  found in the LICENSE file in the fpocket GitHub repository.</p> <p>The fpocket package also includes code from QHull whose license can be found in the QHULL_COPYING.txt file in the fpocket GitHub repository.</p> <p>After installing the package and loading the module, both license files can also be  found in <code>$EBROOTFPOCKET/share/licenses/fpocket</code>.</p>","boost":10},{"location":"f/fpocket/#user-documentation","title":"User documentation","text":"<p>The fpocket package only compiles with a rather high number of warnings, and the makefiles used for building are rather buggy and not written for LUMI. Use at your own risk. Fixing bugs is not the task of the LUMI User Support Team, but of the authors of the package, and as this package is neither parallel, nor supports GPU compute, it is not exactly the target software for LUMI and LUST cannot invest resources into it.</p>","boost":10},{"location":"f/fpocket/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider fpocket/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig fpocket-4.2.2-cpeGNU-24.03.eb, will build fpocket/4.2.2-cpeGNU-24.03</li> </ul>","boost":10},{"location":"f/fpocket/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>fpocket on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"f/fpocket/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for fpocket in the EasyBuilders or CSCS repositories.</p> </li> <li> <p>fpocket in the Spack repository</p> </li> </ul>","boost":10},{"location":"f/fpocket/#general-remarks","title":"General remarks","text":"<p>The makefile of fpocket is broken as it pushes its own compiler options without takeing into account options set elsewhere, knows only <code>gcc</code> and <code>clang</code> as a compiler, and  has the installation directory also hardcoded in the makefile. It then also tries to  install QHull through a modified Makefile rather than the usual CMake procedure, and makes some of the same mistakes.</p> <p>Hence some serious patching is needed.</p>","boost":10},{"location":"f/fpocket/#version-422-for-cpegnu-2403","title":"Version 4.2.2 for cpeGNU 24.03","text":"<ul> <li> <p>The EasyConfig is developed by LUST.</p> </li> <li> <p>We use the QHull package included with fpocket and don't try to install it as     a separate dependency, as it is linked in statically anyway.</p> </li> <li> <p>Some extensive patching was needed to work around problems with the makefiles of      the package.</p> </li> </ul>","boost":10},{"location":"f/freeglut/","title":"freeglut","text":"<p>[package list]</p>","boost":10},{"location":"f/freeglut/#freeglut","title":"freeglut","text":"","boost":10},{"location":"f/freeglut/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig freeglut-3.2.2-cpeGNU-22.08.eb, with module freeglut/3.2.2-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"f/freetype/","title":"freetype","text":"<p>[package list]</p>","boost":10},{"location":"f/freetype/#freetype","title":"freetype","text":"","boost":10},{"location":"f/freetype/#license-information","title":"License information","text":"<p>FreeType comes with two licenses from which you can choose the one which fits your needs best.</p> <ul> <li> <p>The FreeType License (FTL)      is the most commonly used one. It is a BSD-style license with a credit clause      and thus compatible with the GNU Public License (GPL) version 3,      but not with the GPL version 2.</p> </li> <li> <p>The GNU General Public License (GPL), version 2.      Use it for all projects which use the GPLv2 also, or which need a license      compatible to the GPLv2.</p> </li> </ul> <p>This information can be found on the  \"FreeType licenses\" page</p> <p>From LUMI/23.12 on, all license information can also be found in the <code>$EBROOTFREETYPE/share/licenses/freetype</code> subdirectory after loading the module.</p>","boost":10},{"location":"f/freetype/#user-documentation","title":"User documentation","text":"<p>FreeType 2  is a software font engine that is designed to be small, efficient, highly customizable, and portable while capable of producing high-quality output (glyph images). It can be used in graphics libraries, display servers, font conversion tools, text image generation tools, and many other products as well.</p> <p>There is web-based documentation for the package.</p>","boost":10},{"location":"f/freetype/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider freetype/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>freetype/2.12.1-cpeAMD-22.08 (EasyConfig: freetype-2.12.1-cpeAMD-22.08.eb)</p> </li> <li> <p>freetype/2.12.1-cpeAMD-22.12 (EasyConfig: freetype-2.12.1-cpeAMD-22.12.eb)</p> </li> <li> <p>freetype/2.12.1-cpeAOCC-22.08 (EasyConfig: freetype-2.12.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>freetype/2.12.1-cpeAOCC-22.12 (EasyConfig: freetype-2.12.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>freetype/2.12.1-cpeCray-22.08 (EasyConfig: freetype-2.12.1-cpeCray-22.08.eb)</p> </li> <li> <p>freetype/2.12.1-cpeCray-22.12 (EasyConfig: freetype-2.12.1-cpeCray-22.12.eb)</p> </li> <li> <p>freetype/2.12.1-cpeCray-23.03 (EasyConfig: freetype-2.12.1-cpeCray-23.03.eb)</p> </li> <li> <p>freetype/2.12.1-cpeGNU-22.08 (EasyConfig: freetype-2.12.1-cpeGNU-22.08.eb)</p> </li> <li> <p>freetype/2.12.1-cpeGNU-22.12 (EasyConfig: freetype-2.12.1-cpeGNU-22.12.eb)</p> </li> <li> <p>freetype/2.13.0-cpeAMD-23.09 (EasyConfig: freetype-2.13.0-cpeAMD-23.09.eb)</p> </li> <li> <p>freetype/2.13.0-cpeAMD-23.12 (EasyConfig: freetype-2.13.0-cpeAMD-23.12.eb)</p> </li> <li> <p>freetype/2.13.0-cpeAOCC-23.09 (EasyConfig: freetype-2.13.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>freetype/2.13.0-cpeAOCC-23.12 (EasyConfig: freetype-2.13.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>freetype/2.13.0-cpeCray-23.09 (EasyConfig: freetype-2.13.0-cpeCray-23.09.eb)</p> </li> <li> <p>freetype/2.13.0-cpeCray-23.12 (EasyConfig: freetype-2.13.0-cpeCray-23.12.eb)</p> </li> <li> <p>freetype/2.13.0-cpeGNU-23.09 (EasyConfig: freetype-2.13.0-cpeGNU-23.09.eb)</p> </li> <li> <p>freetype/2.13.0-cpeGNU-23.12 (EasyConfig: freetype-2.13.0-cpeGNU-23.12.eb)</p> </li> <li> <p>freetype/2.13.2-cpeAMD-24.03 (EasyConfig: freetype-2.13.2-cpeAMD-24.03.eb)</p> </li> <li> <p>freetype/2.13.2-cpeAOCC-24.03 (EasyConfig: freetype-2.13.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>freetype/2.13.2-cpeCray-24.03 (EasyConfig: freetype-2.13.2-cpeCray-24.03.eb)</p> </li> <li> <p>freetype/2.13.2-cpeGNU-24.03 (EasyConfig: freetype-2.13.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"f/freetype/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>FreeType home page</p> </li> <li> <p>FreeType downloads</p> </li> </ul>","boost":10},{"location":"f/freetype/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>freetype in the EasyBuilders repository</p> </li> <li> <p>freetype in the CSCS repository</p> </li> </ul>","boost":10},{"location":"f/freetype/#version-2104-from-cpe-2106-on","title":"Version 2.10.4 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one with documentation taken     from the University of Antwerpen one.</li> </ul>","boost":10},{"location":"f/freetype/#version-2110-from-2112-on","title":"Version 2.11.0 from 21.12 on","text":"<ul> <li>Straightforward port of the 2.10.4 one.</li> </ul>","boost":10},{"location":"f/freetype/#version-2121-from-cpe-2206-on","title":"Version 2.12.1 from CPE 22.06 on","text":"<ul> <li> <p>Started with a straightforward port of the 2.11.0 one.</p> </li> <li> <p>Dependency check</p> <ul> <li> <p>Brotli added.</p> </li> <li> <p>Can use HarfBuzz but this was not added as a dependency as that requires a      complete reorganisation of the build process, and it is also a circular     dependency.</p> </li> <li> <p>Gnome librsvg not added as a dependency as that pulls in a lot of      annoying dependencies, and there seems to be a circular dependency with     freetype.</p> </li> </ul> </li> </ul>","boost":10},{"location":"f/freetype/#version-2130","title":"Version 2.13.0","text":"<ul> <li> <p>Trivial version bump of the 2.12.1 EasyConfig.</p> </li> <li> <p>From LUMI/23.12 onwards, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"f/freetype/#version-2132-from-lumi2403-on","title":"Version 2.13.2 from LUMI/24.03 on","text":"<ul> <li>Trivial port of the EasyConfig for version 2.13.0 for LUMI/23.12.</li> </ul>","boost":10},{"location":"f/freetype/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig freetype-2.10.4-cpeAMD-21.06.eb, with module freetype/2.10.4-cpeAMD-21.06</p> </li> <li> <p>EasyConfig freetype-2.10.4-cpeCray-21.06.eb, with module freetype/2.10.4-cpeCray-21.06</p> </li> <li> <p>EasyConfig freetype-2.10.4-cpeCray-21.08.eb, with module freetype/2.10.4-cpeCray-21.08</p> </li> <li> <p>EasyConfig freetype-2.10.4-cpeGNU-21.06.eb, with module freetype/2.10.4-cpeGNU-21.06</p> </li> <li> <p>EasyConfig freetype-2.10.4-cpeGNU-21.08.eb, with module freetype/2.10.4-cpeGNU-21.08</p> </li> <li> <p>EasyConfig freetype-2.11.0-cpeAOCC-21.12.eb, with module freetype/2.11.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig freetype-2.11.0-cpeCray-21.12.eb, with module freetype/2.11.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig freetype-2.11.0-cpeGNU-21.12.eb, with module freetype/2.11.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig freetype-2.12.1-cpeAOCC-22.06.eb, with module freetype/2.12.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig freetype-2.12.1-cpeCray-22.06.eb, with module freetype/2.12.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig freetype-2.12.1-cpeGNU-22.06.eb, with module freetype/2.12.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/GDAL/","title":"GDAL","text":"<p>[package list]</p>","boost":10},{"location":"g/GDAL/#gdal","title":"GDAL","text":"","boost":10},{"location":"g/GDAL/#license-information","title":"License information","text":"<p>GDAL is mostly licensed under an MIT style license. However, due to the  many dependencies and other included packages, some components have a different license. The license information can be found in the LICENSE.TXT file in the GitHub.</p>","boost":10},{"location":"g/GDAL/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"g/GDAL/#what-is-gdal","title":"What is GDAL?","text":"<p>GDAL is a translator library for raster geospatial data formats that is released under an X/MIT style Open Source license by the Open Source Geospatial Foundation. As a library, it presents a single abstract data model to the  alling application for all supported formats. It also comes with a variety of useful commandline utilities for data translation and processing.</p>","boost":10},{"location":"g/GDAL/#installing","title":"Installing","text":"<p>The GDAL 3.5.x versions all use a similar installation process.  GDAL has an enormous amount of optional features, each requiring additional dependencies. The GDAL modules built by the available EasyConfigs are far from feature-complete (and several features would in fact not even make sense on LUMI). However, in version 3.5.3 (from LUMI/23.09 on) we did enable some additional features.</p> <p>The build process of GDAL is not completely stable and for that reason we cannot use a parallel build process. As a result, building GDAL 3.5.x is extremely slow and can easily take 2 hours or more.</p> <p>From GDAL 3.6 on, a different build process was imposed and the older build process is no longer supported. Unfortunately this new build process comes with several so far unsolved problems on LUMI so we cannot currently offer newer versions of GDAL.</p>","boost":10},{"location":"g/GDAL/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider GDAL/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig GDAL-3.5.3-cpeGNU-23.09-cray-python-3.10.10.eb, will build GDAL/3.5.3-cpeGNU-23.09-cray-python-3.10.10</p> </li> <li> <p>EasyConfig GDAL-3.5.3-cpeGNU-23.09-noPython.eb, will build GDAL/3.5.3-cpeGNU-23.09-noPython</p> </li> <li> <p>EasyConfig GDAL-3.9.0-cpeGNU-24.03-cray-python-3.11.7.eb, will build GDAL/3.9.0-cpeGNU-24.03-cray-python-3.11.7</p> </li> <li> <p>EasyConfig GDAL-3.9.0-cpeGNU-24.03-noPython.eb, will build GDAL/3.9.0-cpeGNU-24.03-noPython</p> </li> </ul>","boost":10},{"location":"g/GDAL/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GDAL home page</p> </li> <li> <p>GDAL on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"g/GDAL/#general-remarks","title":"General remarks","text":"<p>Installing GDAL takes a lot of time. It is a huge package and parallel compile is known to sometimes fail so the build process has to be entirely sequential and can take hours.    </p>","boost":10},{"location":"g/GDAL/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>GDAL support in the EasyBuilders repository</p> </li> <li> <p>GDAL support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/GDAL/#gdal-352-for-cpegnu-2208","title":"GDAL 3.5.2 for cpeGNU 22.08","text":"<ul> <li> <p>The EasyConfig file is derived from the EasyBuilders recipes, and with some     adaptations copied from the CSCS EasyConfigs.</p> </li> <li> <p>It looks like there may be timing issues during the build. With the same EasyConfig     builds sometimes fail and sometimes succeed. Hence we need to do a slow sequential     build.</p> </li> <li> <p>GDAL has way more optional features than are enabled in this EasyConfig, so feel free     to further extend.</p> </li> </ul>","boost":10},{"location":"g/GDAL/#gdal-353-for-cpegnu-2309","title":"GDAL 3.5.3 for cpeGNU 23.09","text":"<ul> <li> <p>3.5 is the last version of GDAL that can be built using autoconf, and this is the     most recent bugfix release as of now.</p> </li> <li> <p>The EasyConfig is a trivial port of the 3.5.2 one, with the usual version updates      and aligning the structure a bit more to other recent LUMI easyconfigs.</p> </li> </ul>","boost":10},{"location":"g/GDAL/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig GDAL-3.5.2-cpeGNU-22.08-cray-python-3.9.4.2.eb, with module GDAL/3.5.2-cpeGNU-22.08-cray-python-3.9.4.2</p> </li> <li> <p>EasyConfig GDAL-3.5.2-cpeGNU-22.08-noPython.eb, with module GDAL/3.5.2-cpeGNU-22.08-noPython</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/GEOS/","title":"GEOS","text":"<p>[package list]</p>","boost":10},{"location":"g/GEOS/#geos","title":"GEOS","text":"","boost":10},{"location":"g/GEOS/#license-information","title":"License information","text":"<p>GEOS is distributed under the GNU Lesser General Public License version 2.1, a copy of which can be found in the COPYING file in the GitHub repository.</p> <p>After installing and loading the module, the license information can also be found  in <code>$EBROOTGEOS/share/licenses/GEOS/COPYING</code>.</p>","boost":10},{"location":"g/GEOS/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider GEOS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig GEOS-3.12.1-cpeGNU-23.09.eb, will build GEOS/3.12.1-cpeGNU-23.09</p> </li> <li> <p>EasyConfig GEOS-3.12.1-cpeGNU-24.03.eb, will build GEOS/3.12.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"g/GEOS/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GEOS web site</p> </li> <li> <p>GEOS on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"g/GEOS/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>GEOS in the EasyBuilders repository</p> </li> <li> <p>GEOS in the CSCS repoistory</p> </li> </ul>","boost":10},{"location":"g/GEOS/#version-3110-for-cpegnu-2208","title":"Version 3.11.0 for cpeGNU 22.08","text":"<ul> <li> <p>The EasyConfig is based on the EasyBuilders one.</p> </li> <li> <p>The option was added to install libraries in lib instead of lib64 as most software      that we build with EasyBuild is currently installed in lib. This may make it easier     to transform this EasyConfig into a bundle component where it is important that all     components use the same directory.</p> </li> </ul>","boost":10},{"location":"g/GEOS/#version-3121-for-cpegnu-2309","title":"Version 3.12.1 for cpeGNU 23.09","text":"<ul> <li>The EasyConfig is a trivial version update of the 23.09 one.</li> </ul>","boost":10},{"location":"g/GEOS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig GEOS-3.11.0-cpeGNU-22.08.eb, with module GEOS/3.11.0-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"g/GLib/","title":"GLib","text":"<p>[package list]</p>","boost":10},{"location":"g/GLib/#glib","title":"GLib","text":"","boost":10},{"location":"g/GLib/#license-information","title":"License information","text":"<p>GLib is licensed under the GNU Library General Public License Version 2 a copy of which can be found in the COPYING file of the gtk GitLab.</p> <p>From LUMI/23.12 on, the license information can also be found in <code>$EBROOTGLIB/share/licenses/GLib</code> after loading the <code>GLib</code> module.</p>","boost":10},{"location":"g/GLib/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider GLib/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>GLib/2.73.0-cpeAMD-22.08 (EasyConfig: GLib-2.73.0-cpeAMD-22.08.eb)</p> </li> <li> <p>GLib/2.73.0-cpeAOCC-22.08 (EasyConfig: GLib-2.73.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>GLib/2.73.0-cpeCray-22.08 (EasyConfig: GLib-2.73.0-cpeCray-22.08.eb)</p> </li> <li> <p>GLib/2.73.0-cpeGNU-22.08 (EasyConfig: GLib-2.73.0-cpeGNU-22.08.eb)</p> </li> <li> <p>GLib/2.75.0-cpeAMD-22.12 (EasyConfig: GLib-2.75.0-cpeAMD-22.12.eb)</p> </li> <li> <p>GLib/2.75.0-cpeAOCC-22.12 (EasyConfig: GLib-2.75.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>GLib/2.75.0-cpeCray-22.12 (EasyConfig: GLib-2.75.0-cpeCray-22.12.eb)</p> </li> <li> <p>GLib/2.75.0-cpeCray-23.03 (EasyConfig: GLib-2.75.0-cpeCray-23.03.eb)</p> </li> <li> <p>GLib/2.75.0-cpeGNU-22.12 (EasyConfig: GLib-2.75.0-cpeGNU-22.12.eb)</p> </li> <li> <p>GLib/2.77.1-cpeAMD-23.09 (EasyConfig: GLib-2.77.1-cpeAMD-23.09.eb)</p> </li> <li> <p>GLib/2.77.1-cpeAMD-23.12 (EasyConfig: GLib-2.77.1-cpeAMD-23.12.eb)</p> </li> <li> <p>GLib/2.77.1-cpeAOCC-23.09 (EasyConfig: GLib-2.77.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>GLib/2.77.1-cpeAOCC-23.12 (EasyConfig: GLib-2.77.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>GLib/2.77.1-cpeCray-23.09 (EasyConfig: GLib-2.77.1-cpeCray-23.09.eb)</p> </li> <li> <p>GLib/2.77.1-cpeCray-23.12 (EasyConfig: GLib-2.77.1-cpeCray-23.12.eb)</p> </li> <li> <p>GLib/2.77.1-cpeGNU-23.09 (EasyConfig: GLib-2.77.1-cpeGNU-23.09.eb)</p> </li> <li> <p>GLib/2.77.1-cpeGNU-23.12 (EasyConfig: GLib-2.77.1-cpeGNU-23.12.eb)</p> </li> <li> <p>GLib/2.78.1-cpeAMD-24.03 (EasyConfig: GLib-2.78.1-cpeAMD-24.03.eb)</p> </li> <li> <p>GLib/2.78.1-cpeAOCC-24.03 (EasyConfig: GLib-2.78.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>GLib/2.78.1-cpeCray-24.03 (EasyConfig: GLib-2.78.1-cpeCray-24.03.eb)</p> </li> <li> <p>GLib/2.78.1-cpeGNU-24.03 (EasyConfig: GLib-2.78.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"g/GLib/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GLib home as part ot the GTK project</p> </li> <li> <p>GLib downloads</p> </li> </ul>","boost":10},{"location":"g/GLib/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>GLib in the EasyBuilders repository</p> </li> <li> <p>GLib in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/GLib/#2691-for-cpe-2106","title":"2.69.1 for CPE 21.06","text":"<ul> <li> <p>Started from a mix of the EasyBuilders and University of Antwerpen     EasyConfig files</p> </li> <li> <p>An additional dependency was needed: libiconv.</p> </li> <li> <p>NOTE 2021-12-06: Replaced PCRE2 dependency with PCRE dependency as it turned out     that GLib downloaded PCRE during the installation process.</p> </li> </ul>","boost":10},{"location":"g/GLib/#version-2730-from-cpe-2206-on","title":"Version 2.73.0 from CPE 22.06 on","text":"<ul> <li>Trivial version bump of the 2.69.1 one.</li> </ul>","boost":10},{"location":"g/GLib/#version-2750-from-cpe-2212-on","title":"Version 2.75.0 from CPE 22.12 on","text":"<ul> <li> <p>Almost trivial version bump of the 2.73.0 one, </p> <ul> <li> <p>but switched from PCRE to PCRE2</p> </li> <li> <p>and trying the new fix_python_shebang_for option.</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/GLib/#version-2771-from-cpe-2303-on","title":"Version 2.77.1 from CPE 23.03 on","text":"<ul> <li> <p>Trivial version bump of the 2.75.0 one.</p> </li> <li> <p>But it looks like the iconv flag is no longer supported, so remove this.</p> </li> <li> <p>Note: Even though GLib itself installs fine with Clang 16 (in cpe 23.03), it looks like     using its header files causes problems reporting type cast errors that      seem impossible to turn off.</p> </li> <li> <p>Building with cpeGNU using the compiler wrappers didn't work anymore.      It appears something in the options processing     has changed (the C compiler is different), and the build fails when processing <code>gio/tests/test5.gresource</code>.     The build procedure complains that it cannot find certain standard system libraries      that are certainly there. The command line generated by the build process does add a      <code>-nostdlib</code> to avoid trying to include those libraries, but the CPE compiler wrapper     then adds them again.</p> <p>The solution for now was to force meson to not use the wrappers.</p> </li> </ul>","boost":10},{"location":"g/GLib/#version-2781-for-liumi2403","title":"Version 2.78.1 for LIUMI/24.03","text":"<ul> <li>Trivial port of the EasyConfig for 2.776.1 in LUMI/23.12.</li> </ul>","boost":10},{"location":"g/GLib/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig GLib-2.69.1-cpeAMD-21.06.eb, with module GLib/2.69.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig GLib-2.69.1-cpeAOCC-21.12.eb, with module GLib/2.69.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig GLib-2.69.1-cpeCray-21.06.eb, with module GLib/2.69.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig GLib-2.69.1-cpeCray-21.08.eb, with module GLib/2.69.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig GLib-2.69.1-cpeCray-21.12.eb, with module GLib/2.69.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig GLib-2.69.1-cpeGNU-21.06.eb, with module GLib/2.69.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig GLib-2.69.1-cpeGNU-21.08.eb, with module GLib/2.69.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig GLib-2.69.1-cpeGNU-21.12.eb, with module GLib/2.69.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig GLib-2.73.0-cpeAOCC-22.06.eb, with module GLib/2.73.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig GLib-2.73.0-cpeCray-22.06.eb, with module GLib/2.73.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig GLib-2.73.0-cpeGNU-22.06.eb, with module GLib/2.73.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/GMP/","title":"GMP","text":"<p>[package list]</p>","boost":10},{"location":"g/GMP/#gmp","title":"GMP","text":"","boost":10},{"location":"g/GMP/#license-information","title":"License information","text":"<p>Since version 6, GMP is distributed under the dual licenses,  GNU Lesser General Public License(LGPL) version 3 and  GNU General Public License (GPL) version 2.  These licenses make the library free to use, share, and improve, and allow you  to pass on the result. The GNU licenses give freedoms, but also set firm restrictions  on the use with non-free programs.</p> <p>From LUMI/23.12 on, the license information can also be found in <code>$EBROOTGMP/share/licenses/GMP</code> after loading the module.</p>","boost":10},{"location":"g/GMP/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider GMP/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>GMP/6.2.1-cpeAOCC-22.08 (EasyConfig: GMP-6.2.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>GMP/6.2.1-cpeAOCC-22.12 (EasyConfig: GMP-6.2.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>GMP/6.2.1-cpeAOCC-23.09 (EasyConfig: GMP-6.2.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>GMP/6.2.1-cpeAOCC-23.12 (EasyConfig: GMP-6.2.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>GMP/6.2.1-cpeCray-22.08 (EasyConfig: GMP-6.2.1-cpeCray-22.08.eb)</p> </li> <li> <p>GMP/6.2.1-cpeCray-22.12 (EasyConfig: GMP-6.2.1-cpeCray-22.12.eb)</p> </li> <li> <p>GMP/6.2.1-cpeCray-23.03 (EasyConfig: GMP-6.2.1-cpeCray-23.03.eb)</p> </li> <li> <p>GMP/6.2.1-cpeCray-23.09 (EasyConfig: GMP-6.2.1-cpeCray-23.09.eb)</p> </li> <li> <p>GMP/6.2.1-cpeCray-23.12 (EasyConfig: GMP-6.2.1-cpeCray-23.12.eb)</p> </li> <li> <p>GMP/6.2.1-cpeGNU-22.08 (EasyConfig: GMP-6.2.1-cpeGNU-22.08.eb)</p> </li> <li> <p>GMP/6.2.1-cpeGNU-22.12 (EasyConfig: GMP-6.2.1-cpeGNU-22.12.eb)</p> </li> <li> <p>GMP/6.2.1-cpeGNU-23.09 (EasyConfig: GMP-6.2.1-cpeGNU-23.09.eb)</p> </li> <li> <p>GMP/6.2.1-cpeGNU-23.12 (EasyConfig: GMP-6.2.1-cpeGNU-23.12.eb)</p> </li> <li> <p>GMP/6.3.0-cpeAMD-24.03 (EasyConfig: GMP-6.3.0-cpeAMD-24.03.eb)</p> </li> <li> <p>GMP/6.3.0-cpeAOCC-24.03 (EasyConfig: GMP-6.3.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>GMP/6.3.0-cpeCray-24.03 (EasyConfig: GMP-6.3.0-cpeCray-24.03.eb)</p> </li> <li> <p>GMP/6.3.0-cpeGNU-24.03 (EasyConfig: GMP-6.3.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"g/GMP/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Home page</li> <li>GMP uses Mercurial for code development</li> </ul>","boost":10},{"location":"g/GMP/#easybuild-support","title":"EasyBuild support","text":"<ul> <li> <p>GMP in the EasyBuilders repositories.</p> </li> <li> <p>GMP in the CSCS repository</p> </li> </ul> <p>There is a difference in settings:</p> <ul> <li> <p>The CSCS version does not enable the C++ interfaces</p> </li> <li> <p>Different toolchain options:</p> <ul> <li> <p>CSCS: <code>toolchainopts = {'lowopt': True}</code>, and further down the EasyConfig     file <code>-mcmodel=large</code> is added to the C compiler flags.</p> </li> <li> <p>EasyBuilders: <code>toolchainopts = {'precise': True, 'pic': True}</code></p> </li> </ul> <p>One of the differences is that with the CSCS EasyConfig <code>-O1</code> is used while with the EasyBuilders EasyConfig <code>-O2 --ftree-vectorize</code> is used. As the manual suggests to use <code>-O2</code> with gcc when compiling GMP, we followed the EasyBuilders settings. However, we do keep the the <code>-mcmodel=large</code> flag as it was likely added from experiences that are still valid.</p> </li> </ul>","boost":10},{"location":"g/GMP/#differences-between-toolchains","title":"Differences between toolchains","text":"<ul> <li><code>cpeAMD</code> generates an unused option warning when <code>-mcmodel=large</code> is used so     it is omitted from the options in the <code>cpeAMD</code> version.</li> </ul>","boost":10},{"location":"g/GMP/#version-621-from-cpe-2106-on","title":"Version 6.2.1 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig file is a mix of the CSCS one and one at use in the University of     Antwerpen with more built-in checks, and some further sanity checks were added.</p> </li> <li> <p>Check in the log files for the results of the test suite: Grep for \"Testsuite\",     and there are multiple such tables.</p> </li> <li> <p>We still have problems with cpeAMD.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"g/GMP/#version-630-from-lumi2403-on","title":"Version 6.3.0 from LUMI/24.03 on","text":"<ul> <li>Straightforward port of the 6.2.1 EasyConfig for LUMI/23.12.</li> </ul>","boost":10},{"location":"g/GMP/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig GMP-6.2.1-cpeAMD-21.05.eb, with module GMP/6.2.1-cpeAMD-21.05</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeAMD-21.06.eb, with module GMP/6.2.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeAOCC-21.12.eb, with module GMP/6.2.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeAOCC-22.06.eb, with module GMP/6.2.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeCray-21.05.eb, with module GMP/6.2.1-cpeCray-21.05</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeCray-21.06.eb, with module GMP/6.2.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeCray-21.08.eb, with module GMP/6.2.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeCray-21.12.eb, with module GMP/6.2.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeCray-22.06.eb, with module GMP/6.2.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeGNU-21.05.eb, with module GMP/6.2.1-cpeGNU-21.05</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeGNU-21.06.eb, with module GMP/6.2.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeGNU-21.08.eb, with module GMP/6.2.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeGNU-21.12.eb, with module GMP/6.2.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig GMP-6.2.1-cpeGNU-22.06.eb, with module GMP/6.2.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/GOTCHA/","title":"GOTCHA","text":"<p>[package list]</p>","boost":10},{"location":"g/GOTCHA/#gotcha","title":"GOTCHA","text":"","boost":10},{"location":"g/GOTCHA/#license-information","title":"License information","text":"<p>GOTCHA is licensed under the GNU Lesser General Public License but with a  specific preamble. See the <code>LGPL</code> file in the GOTCHA GitHub repository.</p> <p>After installing and loading the module, this information can also be found in <code>$EBROOTGOTCHA/share/licenses/GOTCHA</code>.</p>","boost":10},{"location":"g/GOTCHA/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider GOTCHA/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig GOTCHA-1.0.8-cpeAMD-24.03.eb, will build GOTCHA/1.0.8-cpeAMD-24.03</p> </li> <li> <p>EasyConfig GOTCHA-1.0.8-cpeAOCC-24.03.eb, will build GOTCHA/1.0.8-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig GOTCHA-1.0.8-cpeCray-24.03.eb, will build GOTCHA/1.0.8-cpeCray-24.03</p> </li> <li> <p>EasyConfig GOTCHA-1.0.8-cpeGNU-24.03.eb, will build GOTCHA/1.0.8-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"g/GOTCHA/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GOTCHA web site</p> </li> <li> <p>GOTCHA on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul> <p>Gotcha is a library that wraps functions. Tools can use gotcha to install hooks into other libraries, for example putting a wrapper function around libc's malloc. It is similar to LD_PRELOAD, but operates via a programmable API. This enables easy methods of accomplishing tasks like code instrumentation or wholesale replacement of mechanisms in programs without disrupting their source code.</p>","boost":10},{"location":"g/GOTCHA/#easybuild-support","title":"EasyBuild support","text":"<ul> <li> <p>GOTCHA support in the EasyBuilders repository</p> </li> <li> <p>GOTCHA support in the JSC repository</p> </li> </ul>","boost":10},{"location":"g/GOTCHA/#version-108-for-cpe-2403","title":"Version 1.0.8 for CPE 24.03","text":"<ul> <li>The EasyConfig was prepared by Jan Andr\u00e9 Reuter of JSC and based on the EasyConfigs     in use at JSC and the EasyBuilders repository.</li> </ul>","boost":10},{"location":"g/GObject-Introspection/","title":"GObject-Introspection","text":"<p>[package list]</p>","boost":10},{"location":"g/GObject-Introspection/#gobject-introspection","title":"GObject-Introspection","text":"","boost":10},{"location":"g/GObject-Introspection/#license-information","title":"License information","text":"<p>GObject-introspection is distributed under multiple different licenses</p> <ul> <li> <p>The typelib libraries are licensed under the      GNU Library General Public License version 2.</p> </li> <li> <p>The remaining code is      GPLv2+      compatible (see the file COPYING.GPL) and     consists of a mix of GPLv2+, LGPLv2+ and MIT. See the license headers in     each file for details.</p> </li> </ul> <p>See also the COPYING, COPYING.LGPL and COPYING.GPL files in the source repository.</p> <p>From LUMI/23.12 on. the license can also be found in the directory <code>$EBROOTGOBJECTMININTROSPECTION/share/licenses/GObject-Introspection</code> after loading  the module.</p>","boost":10},{"location":"g/GObject-Introspection/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider GObject-Introspection/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>GObject-Introspection/1.72.0-cpeAMD-22.08-cray-python3.9 (EasyConfig: GObject-Introspection-1.72.0-cpeAMD-22.08-cray-python3.9.eb)</p> </li> <li> <p>GObject-Introspection/1.72.0-cpeAOCC-22.08-cray-python3.9 (EasyConfig: GObject-Introspection-1.72.0-cpeAOCC-22.08-cray-python3.9.eb)</p> </li> <li> <p>GObject-Introspection/1.72.0-cpeCray-22.08-cray-python3.9 (EasyConfig: GObject-Introspection-1.72.0-cpeCray-22.08-cray-python3.9.eb)</p> </li> <li> <p>GObject-Introspection/1.72.0-cpeGNU-22.08-cray-python3.9 (EasyConfig: GObject-Introspection-1.72.0-cpeGNU-22.08-cray-python3.9.eb)</p> </li> <li> <p>GObject-Introspection/1.74.0-cpeAMD-22.12-cray-python3.9 (EasyConfig: GObject-Introspection-1.74.0-cpeAMD-22.12-cray-python3.9.eb)</p> </li> <li> <p>GObject-Introspection/1.74.0-cpeAOCC-22.12-cray-python3.9 (EasyConfig: GObject-Introspection-1.74.0-cpeAOCC-22.12-cray-python3.9.eb)</p> </li> <li> <p>GObject-Introspection/1.74.0-cpeCray-22.12-cray-python3.9 (EasyConfig: GObject-Introspection-1.74.0-cpeCray-22.12-cray-python3.9.eb)</p> </li> <li> <p>GObject-Introspection/1.74.0-cpeCray-23.03-cray-python3.9 (EasyConfig: GObject-Introspection-1.74.0-cpeCray-23.03-cray-python3.9.eb)</p> </li> <li> <p>GObject-Introspection/1.74.0-cpeGNU-22.12-cray-python3.9 (EasyConfig: GObject-Introspection-1.74.0-cpeGNU-22.12-cray-python3.9.eb)</p> </li> <li> <p>GObject-Introspection/1.76.1-cpeAMD-23.09-cray-python3.10 (EasyConfig: GObject-Introspection-1.76.1-cpeAMD-23.09-cray-python3.10.eb)</p> </li> <li> <p>GObject-Introspection/1.76.1-cpeAMD-23.12-cray-python3.11 (EasyConfig: GObject-Introspection-1.76.1-cpeAMD-23.12-cray-python3.11.eb)</p> </li> <li> <p>GObject-Introspection/1.76.1-cpeAOCC-23.09-cray-python3.10 (EasyConfig: GObject-Introspection-1.76.1-cpeAOCC-23.09-cray-python3.10.eb)</p> </li> <li> <p>GObject-Introspection/1.76.1-cpeAOCC-23.12-cray-python3.11 (EasyConfig: GObject-Introspection-1.76.1-cpeAOCC-23.12-cray-python3.11.eb)</p> </li> <li> <p>GObject-Introspection/1.76.1-cpeCray-23.09-cray-python3.10 (EasyConfig: GObject-Introspection-1.76.1-cpeCray-23.09-cray-python3.10.eb)</p> </li> <li> <p>GObject-Introspection/1.76.1-cpeCray-23.12-cray-python3.11 (EasyConfig: GObject-Introspection-1.76.1-cpeCray-23.12-cray-python3.11.eb)</p> </li> <li> <p>GObject-Introspection/1.76.1-cpeGNU-23.09-cray-python3.10 (EasyConfig: GObject-Introspection-1.76.1-cpeGNU-23.09-cray-python3.10.eb)</p> </li> <li> <p>GObject-Introspection/1.76.1-cpeGNU-23.12-cray-python3.11 (EasyConfig: GObject-Introspection-1.76.1-cpeGNU-23.12-cray-python3.11.eb)</p> </li> <li> <p>GObject-Introspection/1.78.1-cpeAMD-24.03-cray-python3.11 (EasyConfig: GObject-Introspection-1.78.1-cpeAMD-24.03-cray-python3.11.eb)</p> </li> <li> <p>GObject-Introspection/1.78.1-cpeAOCC-24.03-cray-python3.11 (EasyConfig: GObject-Introspection-1.78.1-cpeAOCC-24.03-cray-python3.11.eb)</p> </li> <li> <p>GObject-Introspection/1.78.1-cpeCray-24.03-cray-python3.11 (EasyConfig: GObject-Introspection-1.78.1-cpeCray-24.03-cray-python3.11.eb)</p> </li> <li> <p>GObject-Introspection/1.78.1-cpeGNU-24.03-cray-python3.11 (EasyConfig: GObject-Introspection-1.78.1-cpeGNU-24.03-cray-python3.11.eb)</p> </li> </ul>","boost":10},{"location":"g/GObject-Introspection/#technical-documentation","title":"Technical documentation","text":"<ul> <li>GObject-Introspection web site</li> </ul>","boost":10},{"location":"g/GObject-Introspection/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>GObject-Introspection in the EasyBuilders repository</p> </li> <li> <p>GObject-Introspection in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/GObject-Introspection/#version-1680-for-cpe-2108","title":"Version 1.68.0 for cpe 21.08","text":"<ul> <li> <p>The recipe is a mix of the EasyBuilders and CSCS ones, with some input from     the UAntwerpen one also.</p> </li> <li> <p>Tried with the system Python but that did not work as there are no development     packages installed, so used cray-python as in the CSCS recipe.</p> <ul> <li>CSCS sets this as a build dependency, but that did not work in our case.</li> </ul> </li> <li> <p>Added additional sanity checks to test if the commands actually work. This coul,     e.g., catch the problem where cray-python is a build dependency.</p> </li> </ul>","boost":10},{"location":"g/GObject-Introspection/#version-1710-for-cpe-2112","title":"Version 1.71.0 for CPE 21.12","text":"<ul> <li>Updated to 1.71.0 rather than following the EasyBuild common toolchain for 21.12     because of problems with Meson not finding a file.</li> </ul>","boost":10},{"location":"g/GObject-Introspection/#version-1720-for-cpe-2206","title":"Version 1.72.0 for CPE 22.06","text":"<ul> <li>Trivial port of the EasyConfig, made last minute to align with EasyBuild 4.6.0.</li> </ul>","boost":10},{"location":"g/GObject-Introspection/#version-1740-from-cpe-2212-on","title":"Version 1.74.0 from CPE 22.12 on","text":"<ul> <li>Trivial port of the EasyConfig of 1.72.0.</li> </ul>","boost":10},{"location":"g/GObject-Introspection/#version-1761-from-cpe-2309-on","title":"Version 1.76.1 from CPE 23.09 on","text":"<ul> <li> <p>Port of the 1.74.0 EasyConfig.</p> </li> <li> <p>But needed to use a buildtools-python using the same version of cray-python     and with a newer version of Meson. It is not clear if it was a Python version     conflict or just a too old version of Meson that was causing problems, but     it is likely the former.</p> </li> </ul>","boost":10},{"location":"g/GObject-Introspection/#version-1781-for-lumi2403","title":"Version 1.78.1 for LUMI/24.03","text":"<ul> <li>Trivial port of the EasyConfig for version 1.76.1 in LUMI/23.12.</li> </ul>","boost":10},{"location":"g/GObject-Introspection/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig GObject-Introspection-1.68.0-cpeCray-21.08-cray-python3.8.eb, with module GObject-Introspection/1.68.0-cpeCray-21.08-cray-python3.8</p> </li> <li> <p>EasyConfig GObject-Introspection-1.68.0-cpeGNU-21.08-cray-python3.8.eb, with module GObject-Introspection/1.68.0-cpeGNU-21.08-cray-python3.8</p> </li> <li> <p>EasyConfig GObject-Introspection-1.71.0-cpeAOCC-21.12-cray-python3.9.eb, with module GObject-Introspection/1.71.0-cpeAOCC-21.12-cray-python3.9</p> </li> <li> <p>EasyConfig GObject-Introspection-1.71.0-cpeCray-21.12-cray-python3.9.eb, with module GObject-Introspection/1.71.0-cpeCray-21.12-cray-python3.9</p> </li> <li> <p>EasyConfig GObject-Introspection-1.71.0-cpeGNU-21.12-cray-python3.9.eb, with module GObject-Introspection/1.71.0-cpeGNU-21.12-cray-python3.9</p> </li> <li> <p>EasyConfig GObject-Introspection-1.72.0-cpeAOCC-22.06-cray-python3.9.eb, with module GObject-Introspection/1.72.0-cpeAOCC-22.06-cray-python3.9</p> </li> <li> <p>EasyConfig GObject-Introspection-1.72.0-cpeCray-22.06-cray-python3.9.eb, with module GObject-Introspection/1.72.0-cpeCray-22.06-cray-python3.9</p> </li> <li> <p>EasyConfig GObject-Introspection-1.72.0-cpeGNU-22.06-cray-python3.9.eb, with module GObject-Introspection/1.72.0-cpeGNU-22.06-cray-python3.9</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/GPAW/","title":"GPAW","text":"<p>[package list]</p>","boost":10},{"location":"g/GPAW/#gpaw","title":"GPAW","text":"","boost":10},{"location":"g/GPAW/#license-information","title":"License information","text":"<p>GPAW itself is licensed under the GNU General Public License version 3 which can also be found in the COPYING file in the GPAW GitLab.</p>","boost":10},{"location":"g/GPAW/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider GPAW/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig GPAW-24.1.0-cpeGNU-23.09-rocm.eb, will build GPAW/24.1.0-cpeGNU-23.09-rocm</p> </li> <li> <p>EasyConfig GPAW-24.6.0-cpeGNU-24.03-rocm.eb, will build GPAW/24.6.0-cpeGNU-24.03-rocm</p> </li> <li> <p>EasyConfig GPAW-24.6.0-cpeGNU-24.03.eb, will build GPAW/24.6.0-cpeGNU-24.03</p> </li> <li> <p>EasyConfig GPAW-25.1.0-cpeGNU-24.03.eb, will build GPAW/25.1.0-cpeGNU-24.03</p> <p>This is a version of GPAW built with libvdwxc for LUMI-C.</p> </li> </ul>","boost":10},{"location":"g/GPAW/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GPAW documentation</p> </li> <li> <p>GPAW on GitLab</p> </li> </ul>","boost":10},{"location":"g/GPAW/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>GPAW support in the EasyBuilders repository</p> </li> <li> <p>(Outdated) GPAW support in the CSCS repository</p> </li> <li> <p>GPAW support in Spack</p> </li> </ul>","boost":10},{"location":"g/GPAW/#2460-for-cpu","title":"24.6.0 for CPU","text":"<ul> <li> <p>The build procedure is based on     the GPAW documentation.</p> </li> <li> <p>ASE is installed within the GPAW module (without an independent easyconfig for it).</p> </li> <li> <p>The gpaw-setups are downloaded within GPAW module (comes as a separate easyconfig in the easybuilders repo).</p> </li> </ul>","boost":10},{"location":"g/GPAW/#2460-for-gpu","title":"24.6.0 for GPU","text":"<ul> <li> <p>Note! This GPU version does not pass all the tests.     Consider testing developer installation described in     the GPAW documentation.</p> </li> <li> <p>The GPU version is under continuous development     and has some limitations.</p> </li> <li> <p>OpenMP is now turned off while ELPA does not support it with AMD GPUs     (linking GPAW w/OMP against ELPA w/o OMP causes LibSci version mismatch).</p> </li> <li> <p>GPU device selection is patched compared to the upstream code version.</p> </li> </ul>","boost":10},{"location":"g/GROMACS/","title":"GROMACS","text":"<p>[package list]</p>","boost":10},{"location":"g/GROMACS/#gromacs","title":"GROMACS","text":"","boost":10},{"location":"g/GROMACS/#license-information","title":"License information","text":"<p>GROMACS is Free Software, available under the  GNU Lesser General Public License (LGPL), version 2.1.  You can redistribute it and/or modify it under the terms of the LGPL as published  by the Free Software Foundation; either version 2.1 of the License, or (at your  option) any later version.</p> <p>See the \"About it\" page on the GROMACS web site.</p>","boost":10},{"location":"g/GROMACS/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"g/GROMACS/#a-note-about-the-gpu-versions","title":"A note about the GPU versions.","text":"<p>There exist two different versions of GROMACS for AMD GPUs.</p> <ul> <li>The authors of GROMACS use SYCL for an implementation for AMD GPUs. These versions     are or will be part of the official GROMACS distribution channels.</li> <li>AMD has made a hip port of the CUDA version. It is not clear though to what extent     that branch will see further development as GROMACS evolves. GROMACS developers     don't provide support on using this version.</li> </ul> <p>According to tests in June 2023, the HIP port offered 15-25% more performance compared to SYCL port, but the GROMACS release has been more tested and is supported by the development team.</p> <p>Check the technical documentation of the EasyConfigs to find out on which branch of GROMACS the recipes are based. That documentation is more towards the bottom of the page.</p> <p>Alternatively, you can load one of the CSC compiled versions which are available as modules. Batch script templates for different use cases are also provided. Expect the performance from one GCD to exceed that of a 128 core CPU node. Please, consult the instructions on how to enable CSC installed module on LUMI. The CSC-compiled versions are supported by CSC rather than by the LUMI User Support  Team.</p>","boost":10},{"location":"g/GROMACS/#a-note-about-the-cpu-versions-with-plumed-after-the-marchapril-2023-system-maintenanceupdate","title":"A note about the CPU versions with PLUMED after the March/April 2023 system maintenance/update","text":"<p>After the March/April 2023 system update building PLUMED broke so those easyconfigs were replaced with two versions, one without Python support and one with a different way of enabling support for the <code>cray-python</code> modules. Therefore the corresponding  EasyConfigs of GROMACS have also been replaced.</p> <p>It is done this way because it is also unclear if the Python support is needed when used with GROMACS. </p> <p>See also the page on PLUMED.</p>","boost":10},{"location":"g/GROMACS/#training-materials","title":"Training materials","text":"<ul> <li>Workshop: How to run GROMACS efficiently on LUMI (January 24-25, 2024, BioExcel/CSC Finland/KTH Sweden)</li> </ul>","boost":10},{"location":"g/GROMACS/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider GROMACS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig GROMACS-2021.7-cpeGNU-23.09-CPU.eb, will build GROMACS/2021.7-cpeGNU-23.09-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.7-cpeGNU-23.09-PLUMED-2.8.3-noPython-CPU.eb, will build GROMACS/2021.7-cpeGNU-23.09-PLUMED-2.8.3-noPython-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.7-cpeGNU-23.09-PLUMED-2.9.0-noPython-CPU.eb, will build GROMACS/2021.7-cpeGNU-23.09-PLUMED-2.9.0-noPython-CPU</p> </li> <li> <p>EasyConfig GROMACS-2022.5-cpeGNU-23.09-PLUMED-2.8.3-noPython-CPU.eb, will build GROMACS/2022.5-cpeGNU-23.09-PLUMED-2.8.3-noPython-CPU</p> </li> <li> <p>EasyConfig GROMACS-2022.5-cpeGNU-23.09-PLUMED-2.9.0-noPython-CPU.eb, will build GROMACS/2022.5-cpeGNU-23.09-PLUMED-2.9.0-noPython-CPU</p> </li> <li> <p>EasyConfig GROMACS-2022.6-cpeCray-23.09-CPU.eb, will build GROMACS/2022.6-cpeCray-23.09-CPU</p> </li> <li> <p>EasyConfig GROMACS-2022.6-cpeGNU-23.09-CPU.eb, will build GROMACS/2022.6-cpeGNU-23.09-CPU</p> </li> <li> <p>EasyConfig GROMACS-2023.3-cpeCray-23.09-CPU.eb, will build GROMACS/2023.3-cpeCray-23.09-CPU</p> </li> <li> <p>EasyConfig GROMACS-2023.3-cpeGNU-23.09-CPU.eb, will build GROMACS/2023.3-cpeGNU-23.09-CPU</p> </li> <li> <p>EasyConfig GROMACS-2024.1-cpeAMD-23.09-HeFFTe-rocm.eb, will build GROMACS/2024.1-cpeAMD-23.09-HeFFTe-rocm</p> </li> <li> <p>EasyConfig GROMACS-2024.1-cpeAMD-23.09-VkFFT-rocm.eb, will build GROMACS/2024.1-cpeAMD-23.09-VkFFT-rocm</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeAMD-24.03-HeFFTe-rocm.eb, will build GROMACS/2024.3-cpeAMD-24.03-HeFFTe-rocm</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeAMD-24.03-PLUMED-2.9.3-noPython-rocm.eb, will build GROMACS/2024.3-cpeAMD-24.03-PLUMED-2.9.3-noPython-rocm</p> <p>This EasyConfig provides two versions of GROMACS for the AMD GPUs in LUMI: One compiled with heFFTe (gmx_mpi) and one compiled with VkFFT (gmx_mpi_vkffte). See the GROMACS installation guide for the differences between these two variants.</p> <p>Replaces the earlier version with PLUMED 2.9.2 as that turned out to be  a release with issues.</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeAMD-24.03-rocm.eb, will build GROMACS/2024.3-cpeAMD-24.03-rocm</p> <p>This EasyConfig provides two versions of GROMACS for the AMD GPUs in LUMI: One compiled with heFFTe (gmx_mpi) and one compiled with VkFFT (gmx_mpi_vkffte). See the GROMACS installation guide for the differences between these two variants.</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeCray-24.03-CPU.eb, will build GROMACS/2024.3-cpeCray-24.03-CPU</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeCray-24.03-PLUMED-2.9.3-noPython-CPU.eb, will build GROMACS/2024.3-cpeCray-24.03-PLUMED-2.9.3-noPython-CPU</p> <p>Replaces the earlier version with PLUMED 2.9.2 as that turned out to be  a release with issues.</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeGNU-24.03-CPU.eb, will build GROMACS/2024.3-cpeGNU-24.03-CPU</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeGNU-24.03-PLUMED-2.9.3-cray-python-3.11.7-CPU.eb, will build GROMACS/2024.3-cpeGNU-24.03-PLUMED-2.9.3-cray-python-3.11.7-CPU</p> <p>Version with PLUMED and GMXAPI with support for Cray Python 3.11.7.  Only the single precision MPI+OpenMP executable <code>gmx_mpi</code> is included as GMXAPI does not support a multiple binary setup. This is not a containerised build. The <code>gmxapi</code> package is not problematic, but care may be needed with <code>networkx</code> dependency as that contains a lot of small files. Unfortunately the Python developers in their infinite wisdom and lack of understanding of HPC stopped supporting running from zipped egg files as that would have been  perfect for the <code>networkx</code> package and solve all file system issues.  Hence this recipe is only useful if you don't need much more than what cray-python  provides and the base packages for PLUMED and GMXAPI with the mandatory dependencies.</p> <p>Replaces the earlier version with PLUMED 2.9.2 as that turned out to be  a release with issues.</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeGNU-24.03-PLUMED-2.9.3-noPython-CPU.eb, will build GROMACS/2024.3-cpeGNU-24.03-PLUMED-2.9.3-noPython-CPU</p> <p>Replaces the earlier version with PLUMED 2.9.2 as that turned out to be  a release with issues.</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeGNU-24.03-QMMM-PLUMED-2.9.3-noPython-CPU.eb, will build GROMACS/2024.3-cpeGNU-24.03-QMMM-PLUMED-2.9.3-noPython-CPU</p> <p>This version of GROMACS is built with support for PLUMED and with CP2K QM/MM support. Only MPI versions are provided due to the requirements for CP2K. Double precision recommended, but single precision binaries are also provided.</p> </li> <li> <p>EasyConfig GROMACS-2025.1-cpeAMD-24.03-HeFFTe-rocm.eb, will build GROMACS/2025.1-cpeAMD-24.03-HeFFTe-rocm</p> <p>The HeFFTe variant  allows offload to multiple GPUs (relies on rocFFT) with direct GPU communication and  PME decomposition across multiple GPUs.</p> </li> <li> <p>EasyConfig GROMACS-2025.1-cpeAMD-24.03-VkFFT-rocm.eb, will build GROMACS/2025.1-cpeAMD-24.03-VkFFT-rocm</p> <p>The VkFFT variant  is faster than the heFFTe version, but does not support PME decomposition. It is recommended for a single GPU runs (standalone or ensemble) or in multi GPU runs with  exactly one separate PME rank (i.e. <code>-npme 1</code> runtime option).</p> </li> <li> <p>EasyConfig GROMACS-2025.1-cpeGNU-24.03-CPU.eb, will build GROMACS/2025.1-cpeGNU-24.03-CPU</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GROMACS web site</p> <ul> <li>Check versions via the manual</li> </ul> </li> </ul>","boost":10},{"location":"g/GROMACS/#gromacs-and-plumed","title":"GROMACS and PLUMED","text":"<p>PLUMED is software that can be combined with GROMACS. It works via a patch for the GROMACS installation that should be applied before compiling GROMACS.</p> <p>It is rather difficult to figure out which versions of PLUMED and GROMACS can be combined. One option is to look at tags in the PLUMED GitHub and then check the contents of the patches subdirectory. Another way to find out which versions of GROMACS are supported is to load the PLUMED module and then run <code>plumed-patch -l</code> to get a list of the included engines.</p> PLUMED 2019 2020 2021 2022 2023 2024 2.9.3 2020.7 2021.7 2022.5 2023.5 2024.3 2.9.2 2020.7 2021.7 2022.5 2023.5 2024.2 2.9.0 2020.7 2021.7 2022.5 2023 2.8.3 2019.6 2020.7 2021.7 2022.5 2.8.0 2019.6 2020.6 2021.4 2.7.4 2019.6 2020.6 2021.4 2.7.3 2019.6 2020.6 2021.4 2.7.2 2019.6 2020.6 2021 2.7.1 2019.6 2020.5 2021 2.7.0 2019.6 2020.4 2.6.4 2019.6 2020.4 2.6.3 2019.6 2020.4 2.6.2 2019.6 2020.4 2.6.1 2019.6 2020.2 2.6.0 2019.4","boost":10},{"location":"g/GROMACS/#gromacs-and-gpu","title":"GROMACS and GPU","text":"<ul> <li>Latest available realease with AMD GPU support is 2024.3</li> <li>GROMACS 2023.2 support for AMD GPUs</li> <li>CSC page with example job scripts for GPU</li> </ul>","boost":10},{"location":"g/GROMACS/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>GROMACS support in the EasyBuilders repository</p> </li> <li> <p>GROMACS support in the CSCS repository</p> </li> <li> <p>GROMACS support in Spack</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#version-20206-for-cpe-2108","title":"Version 2020.6 for CPE 21.08","text":"<ul> <li> <p>The EasyConfig is a straightforward port of the CSCS one with some information     added borrowed from the UAntwerpen EasyConfig.</p> </li> <li> <p>We added a bash function, <code>gromacs-completion</code>, that can be used to turn the     command completion for GROMACS on.</p> </li> <li> <p>Note that the EasyConfig does not run the GROMACS tests, presumably because they     require an mpirun script and/or should be run in the context of a suitable compute     job.</p> </li> <li> <p>The AMD-version does not support cray-hugepages. Activating this causes the Cray     wrapper to add an option to the linker that it does not like.</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#version-20213-for-cpe-2108","title":"Version 2021.3 for CPE 21.08","text":"<ul> <li> <p>We started from our own EasyConfig for 2020.6 but had to omit <code>GMX_PREFER_STATIC_LIBS</code>     and add <code>BUILD_SHARED_LIBS=ON</code> to the CMake options to avoid an error message about     building GMXAPI.</p> </li> <li> <p>Note that the EasyConfig does not run the GROMACS tests, presumably because they     require an mpirun script and/or should be run in the context of a suitable compute     job.</p> </li> <li> <p>The AMD-version does not support cray-hugepages. Activating this causes the Cray     wrapper to add an option to the linker that it does not like.</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#version-20204-with-plumed-264-for-cpe-2108","title":"Version 2020.4 with PLUMED 2.6.4 for CPE 21.08","text":"<ul> <li> <p>The integration of the PLUMED patch is based on the CSCS EasyConfigs. We still     compile single and double precision versions as the CSCS version does this.</p> <p>Old documents claim that one should only run GROMACS in double precision when using PLUMED, but then I found comments on PLUMED 2.x that claim that that one always runs in double precision, also when used with a single precision GROMACS, to avoid numerical problems that can occur in single precision in some of the PLUMED routines.</p> </li> <li> <p>Note that it was not possible to get GROMACS 2020.X to work with the cpeGNU 21.12      environment which is based on GCC 11.2.0.</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#version-20215-for-cpe-2112","title":"Version 2021.5 for CPE 21.12","text":"<ul> <li> <p>Compiled with cpeGNU, cpeCray and cpeAOCC but not yet benchmarked.</p> </li> <li> <p>2020 versions did not work with the GNU compiler in LUMI/21.12</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#version-20214-with-plumed-274-and-280-for-cpe-2112-and-later","title":"Version 2021.4 with PLUMED 2.7.4 and 2.8.0 for CPE 21.12 and later","text":"<ul> <li> <p>As PLUMED 2.8.0 is a .0 version, we decided to also offer recipes for the latest     2.7 version at the time of developement.</p> </li> <li> <p>After the March/April 2023 system update building PLUMED broke so those easyconfigs     were replaced with two versions, one without Python support and one with a different way     of enabling support for the <code>cray-python</code> modules. Therefore the corresponding      EasyConfigs of GROMACS have also been replaced.</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#gromacs-2023-dev-cpegnu-2208-mpi-gpu","title":"GROMACS-2023-dev-cpeGNU-22.08-MPI-GPU","text":"<ul> <li>This is an EasyConfig for AMD's own, unofficial HIP-port of GROMACS which is a version     that is not supported by the main GROMACS developers, who prefer to work with     SYCL for support for AMD GPUs. It is derived from the container recipes of AMD.</li> </ul>","boost":10},{"location":"g/GROMACS/#gromacs-20232-and-20233-with-amd-gpu-support-for-cpe-2212","title":"GROMACS 2023.2 and 2023.3 with AMD GPU support for CPE 22.12","text":"<ul> <li>There are different choices for building GROMACS with AMD GPU acceleration on LUMI, that follows installation guide:<ul> <li>Easyconfig files for the 2023.2 release use hipSYCL GPU backend with ROCm v5.2.3</li> <li>These versions should be only built against AMD easybuild toolchain</li> <li>MPI versions are recommended to use on LUMI</li> <li>HeFFTe variant allows offload to multiple GPUs (relies on rocFFT) with direct GPU communication and PME decomposition across multiple GPUs</li> <li>VkFFT variant is faster but does not support PME decomposition, recommended for a single GPU runs (standalone or ensemble) or in multi GPU runs with exactly one separate PME rank (i.e. <code>-npme 1</code> runtime option).</li> <li>thread-MPI is for a single node use only and does not support direct GPU communication, recommended only for a single GPU use.</li> </ul> </li> </ul>","boost":10},{"location":"g/GROMACS/#version-20217-for-cpe-2309","title":"Version 2021.7 for CPE 23.09","text":"<ul> <li>Trivial version bump of our EasyConfigs for 2021.5 and 2021.6.</li> </ul>","boost":10},{"location":"g/GROMACS/#version-20226-for-cpe-2309","title":"Version 2022.6 for CPE 23.09","text":"<ul> <li>For now a trivial version bump of the 2021.5/2021.6 series.</li> </ul>","boost":10},{"location":"g/GROMACS/#version-20233-for-cpe-2309","title":"Version 2023.3 for CPE 23.09","text":"<ul> <li>For now a trivial version bump of the 2021.5/2021.6 series.</li> </ul>","boost":10},{"location":"g/GROMACS/#release-20241-for-cpe-2309","title":"Release 2024.1 for CPE 23.09","text":"<ul> <li> <p>For running on AMD GPUs recommended variants are:</p> </li> <li> <p>Multiple GPUs: AdaptiveCpp 23.10.0 with ROCm 5.4.6 and instant submission (enabled by default)</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#release-20243-for-cpe-2403","title":"Release 2024.3 for CPE 24.03","text":"<ul> <li> <p>Ports of the previous versions.</p> </li> <li> <p>Found in the PLUMED manual that it is incompatible with Thread-MPI so Thread-MPI has been     explicitly turned off in the modules with PLUMED support.</p> </li> <li> <p>Turned off GMXAPI support in cpeCray and cpeAMD builds as those libraries wouldn't work with     GCC-compiled Python distributions anyway due to OpenMP runtime conflicts.</p> </li> <li> <p>Updated to PLUMED 2.9.3 in February 2025 after reports on the internet of wrong results with     PLUMED 2.9.2 which had a bad reputation.</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#release-20243-with-qmmm-support-for-cpegnu-2403","title":"Release 2024.3 with QM/MM support for cpeGNU 24.03","text":"<ul> <li> <p>Build instructions in the GROMACS manual: \"Building with CP2K QM/MM support\"</p> </li> <li> <p>This build is incompatible with ThreadMPI. The manual also advises to use double      precision, but we have also included single precision support just in case.</p> </li> <li> <p>Linking turned out to be particularly troublesome. It turns out that in this mode,     GROMACS uses <code>g++-13</code> as the linker, so no compiler wrappers and no Fortran compiler,     so many libraries are not found by default and the Fortran interfaces to libraries     definitely need to be specified explicitly.</p> <p>The wrong <code>Libs:</code> filed in <code>libcp2k.pc</code> did not help. In the end we've chosen to fix that file and simply use <code>pkg-config</code> to get the flags to link the libraries. The  flags in <code>libcp2k</code> were already written to link via a regular C compiler, but needed to be cleaned up thoroughly which is done in the CP2K EasyConfig that we use as  a dependency as it is a file installed in the CP2K directories.</p> </li> </ul>","boost":10},{"location":"g/GROMACS/#release-20251-for-cpe-2403","title":"Release 2025.1 for CPE 24.03","text":"<ul> <li>Ports of the previous versions, but using a different technique to combine CMake options     that may improve readability of the EasyConfig.</li> </ul>","boost":10},{"location":"g/GROMACS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig GROMACS-2020.4-cpeCray-21.08-PLUMED-2.6.4-CPU.eb, with module GROMACS/2020.4-cpeCray-21.08-PLUMED-2.6.4-CPU</p> </li> <li> <p>EasyConfig GROMACS-2020.4-cpeGNU-21.08-PLUMED-2.6.4-CPU.eb, with module GROMACS/2020.4-cpeGNU-21.08-PLUMED-2.6.4-CPU</p> </li> <li> <p>EasyConfig GROMACS-2020.6-cpeCray-21.08-CPU.eb, with module GROMACS/2020.6-cpeCray-21.08-CPU</p> </li> <li> <p>EasyConfig GROMACS-2020.6-cpeCray-21.08-PLUMED-2.7.2-CPU.eb, with module GROMACS/2020.6-cpeCray-21.08-PLUMED-2.7.2-CPU</p> </li> <li> <p>EasyConfig GROMACS-2020.6-cpeGNU-21.08-CPU.eb, with module GROMACS/2020.6-cpeGNU-21.08-CPU</p> </li> <li> <p>EasyConfig GROMACS-2020.6-cpeGNU-21.08-PLUMED-2.7.2-CPU.eb, with module GROMACS/2020.6-cpeGNU-21.08-PLUMED-2.7.2-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021-cpeCray-21.08-PLUMED-2.7.2-CPU.eb, with module GROMACS/2021-cpeCray-21.08-PLUMED-2.7.2-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021-cpeGNU-21.08-PLUMED-2.7.2-CPU.eb, with module GROMACS/2021-cpeGNU-21.08-PLUMED-2.7.2-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.3-cpeCray-21.08-CPU.eb, with module GROMACS/2021.3-cpeCray-21.08-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.3-cpeGNU-21.08-CPU.eb, with module GROMACS/2021.3-cpeGNU-21.08-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeAOCC-21.12-PLUMED-2.7.4-CPU.eb, with module GROMACS/2021.4-cpeAOCC-21.12-PLUMED-2.7.4-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeAOCC-21.12-PLUMED-2.8.0-CPU.eb, with module GROMACS/2021.4-cpeAOCC-21.12-PLUMED-2.8.0-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-21.12-PLUMED-2.7.4-CPU.eb, with module GROMACS/2021.4-cpeCray-21.12-PLUMED-2.7.4-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-21.12-PLUMED-2.8.0-CPU.eb, with module GROMACS/2021.4-cpeCray-21.12-PLUMED-2.8.0-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-22.06-PLUMED-2.7.4-CPU.eb, with module GROMACS/2021.4-cpeCray-22.06-PLUMED-2.7.4-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-22.06-PLUMED-2.8.0-CPU.eb, with module GROMACS/2021.4-cpeCray-22.06-PLUMED-2.8.0-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-22.08-PLUMED-2.7.4-CPU.eb, with module GROMACS/2021.4-cpeCray-22.08-PLUMED-2.7.4-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-22.08-PLUMED-2.7.4-cray-python-3.9.12.1-CPU.eb, with module GROMACS/2021.4-cpeCray-22.08-PLUMED-2.7.4-cray-python-3.9.12.1-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-22.08-PLUMED-2.7.4-noPython-CPU.eb, with module GROMACS/2021.4-cpeCray-22.08-PLUMED-2.7.4-noPython-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-22.08-PLUMED-2.8.0-CPU.eb, with module GROMACS/2021.4-cpeCray-22.08-PLUMED-2.8.0-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-22.08-PLUMED-2.8.0-cray-python-3.9.12.1-CPU.eb, with module GROMACS/2021.4-cpeCray-22.08-PLUMED-2.8.0-cray-python-3.9.12.1-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeCray-22.08-PLUMED-2.8.0-noPython-CPU.eb, with module GROMACS/2021.4-cpeCray-22.08-PLUMED-2.8.0-noPython-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-21.12-PLUMED-2.7.4-CPU.eb, with module GROMACS/2021.4-cpeGNU-21.12-PLUMED-2.7.4-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-21.12-PLUMED-2.8.0-CPU.eb, with module GROMACS/2021.4-cpeGNU-21.12-PLUMED-2.8.0-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-22.06-PLUMED-2.7.4-CPU.eb, with module GROMACS/2021.4-cpeGNU-22.06-PLUMED-2.7.4-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-22.06-PLUMED-2.8.0-CPU.eb, with module GROMACS/2021.4-cpeGNU-22.06-PLUMED-2.8.0-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-22.08-PLUMED-2.7.4-CPU.eb, with module GROMACS/2021.4-cpeGNU-22.08-PLUMED-2.7.4-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-22.08-PLUMED-2.7.4-cray-python-3.9.12.1-CPU.eb, with module GROMACS/2021.4-cpeGNU-22.08-PLUMED-2.7.4-cray-python-3.9.12.1-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-22.08-PLUMED-2.7.4-noPython-CPU.eb, with module GROMACS/2021.4-cpeGNU-22.08-PLUMED-2.7.4-noPython-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-22.08-PLUMED-2.8.0-CPU.eb, with module GROMACS/2021.4-cpeGNU-22.08-PLUMED-2.8.0-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-22.08-PLUMED-2.8.0-cray-python-3.9.12.1-CPU.eb, with module GROMACS/2021.4-cpeGNU-22.08-PLUMED-2.8.0-cray-python-3.9.12.1-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.4-cpeGNU-22.08-PLUMED-2.8.0-noPython-CPU.eb, with module GROMACS/2021.4-cpeGNU-22.08-PLUMED-2.8.0-noPython-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.5-cpeAOCC-21.12-CPU.eb, with module GROMACS/2021.5-cpeAOCC-21.12-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.5-cpeCray-21.12-CPU.eb, with module GROMACS/2021.5-cpeCray-21.12-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.5-cpeGNU-21.12-CPU.eb, with module GROMACS/2021.5-cpeGNU-21.12-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.6-cpeCray-22.06-CPU.eb, with module GROMACS/2021.6-cpeCray-22.06-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.6-cpeCray-22.08-CPU.eb, with module GROMACS/2021.6-cpeCray-22.08-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.6-cpeGNU-22.06-CPU.eb, with module GROMACS/2021.6-cpeGNU-22.06-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.6-cpeGNU-22.08-CPU.eb, with module GROMACS/2021.6-cpeGNU-22.08-CPU</p> </li> <li> <p>EasyConfig GROMACS-2021.7-cpeCray-23.09-CPU.eb, with module GROMACS/2021.7-cpeCray-23.09-CPU</p> </li> <li> <p>EasyConfig GROMACS-2023-dev-cpeGNU-22.08-MPI-GPU.eb, with module GROMACS/2023-dev-cpeGNU-22.08-MPI-GPU</p> </li> <li> <p>EasyConfig GROMACS-2023.2-cpeAMD-22.12-HeFFTe-GPU.eb, with module GROMACS/2023.2-cpeAMD-22.12-HeFFTe-GPU</p> </li> <li> <p>EasyConfig GROMACS-2023.2-cpeAMD-22.12-VkFFT-GPU.eb, with module GROMACS/2023.2-cpeAMD-22.12-VkFFT-GPU</p> </li> <li> <p>EasyConfig GROMACS-2023.3-cpeAMD-22.12-HeFFTe-GPU.eb, with module GROMACS/2023.3-cpeAMD-22.12-HeFFTe-GPU</p> </li> <li> <p>EasyConfig GROMACS-2023.3-cpeAMD-22.12-VkFFT-GPU.eb, with module GROMACS/2023.3-cpeAMD-22.12-VkFFT-GPU</p> </li> <li> <p>EasyConfig GROMACS-2024.1-cpeAMD-23.09-HeFFTe-2.4-AdaptiveCpp-23.10.0-rocm-5.4.6.eb, with module GROMACS/2024.1-cpeAMD-23.09-HeFFTe-2.4-AdaptiveCpp-23.10.0-rocm-5.4.6</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeAMD-24.03-PLUMED-2.9.2-noPython-rocm.eb, with module GROMACS/2024.3-cpeAMD-24.03-PLUMED-2.9.2-noPython-rocm</p> <p>This EasyConfig provides two versions of GROMACS for the AMD GPUs in LUMI: One compiled with heFFTe (gmx_mpi) and one compiled with VkFFT (gmx_mpi_vkffte). See the GROMACS installation guide for the differences between these two variants.</p> <p>PLUMED 2.9.2 is known to produce wrong results for some computations, upgrade to the version with PLUMED 2.9.3.</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeCray-24.03-PLUMED-2.9.2-noPython-CPU.eb, with module GROMACS/2024.3-cpeCray-24.03-PLUMED-2.9.2-noPython-CPU</p> <p>PLUMED 2.9.2 is known to produce wrong results for some computations, upgrade to the version with PLUMED 2.9.3.</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeGNU-24.03-PLUMED-2.9.2-cray-python-3.11.7-CPU.eb, with module GROMACS/2024.3-cpeGNU-24.03-PLUMED-2.9.2-cray-python-3.11.7-CPU</p> <p>Version with PLUMED and GMXAPI with support for Cray Python 3.11.7.  Only the single precision MPI+OpenMP executable <code>gmx_mpi</code> is included as GMXAPI does not support a multiple binary setup. This is not a containerised build. The <code>gmxapi</code> package is not problematic, but care may be needed with <code>networkx</code> dependency as that contains a lot of small files. Unfortunately the Python developers in their infinite wisdom and lack of understanding of HPC stopped supporting running from zipped egg files as that would have been  perfect for the <code>networkx</code> package and solve all file system issues.  Hence this recipe is only useful if you don't need much more than what cray-python  provides and the base packages for PLUMED and GMXAPI with the mandatory dependencies.</p> <p>PLUMED 2.9.2 is known to produce wrong results for some computations, upgrade to the version with PLUMED 2.9.3.</p> </li> <li> <p>EasyConfig GROMACS-2024.3-cpeGNU-24.03-PLUMED-2.9.2-noPython-CPU.eb, with module GROMACS/2024.3-cpeGNU-24.03-PLUMED-2.9.2-noPython-CPU</p> <p>PLUMED 2.9.2 is known to produce wrong results for some computations, upgrade to the version with PLUMED 2.9.3.</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/GSL/","title":"GSL","text":"<p>[package list]</p>","boost":10},{"location":"g/GSL/#gsl","title":"GSL","text":"","boost":10},{"location":"g/GSL/#license-information","title":"License information","text":"<p>GSL is distributed under the terms of the  GNU General Public License (GPL).</p> <p>See also the  COPYING file in the source repository.</p> <p>From LUMI/23/12 on, the COPYING file can also be found in the <code>$EBROOTGSL/share/licenses/GSL</code> subdirectory after loading the module.</p>","boost":10},{"location":"g/GSL/#user-documentation","title":"User documentation","text":"<p>GSL does not yet work on the GPU nodes.</p> <p>There are two versions of GSL, and they differ in the version of LibSci they actually link. Which version you need depends on the other components of your code. And you  have to be consistent. Either all code that uses LibSci is compiled with OpenMP support or none of that code is compiled with OpenMP support (and the linking is also done with and without OpenMP support respectively).</p> <ul> <li>The <code>-sequential</code> versions are for use with code that does not use OpenMP.</li> <li>The <code>OpenMP</code> versions are for use with code that does use OpenMP.</li> </ul>","boost":10},{"location":"g/GSL/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider GSL/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>GSL/2.7.1-cpeAMD-24.03-OpenMP (EasyConfig: GSL-2.7.1-cpeAMD-24.03-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAMD-24.03-sequential (EasyConfig: GSL-2.7.1-cpeAMD-24.03-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-22.08-OpenMP (EasyConfig: GSL-2.7.1-cpeAOCC-22.08-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-22.08-sequential (EasyConfig: GSL-2.7.1-cpeAOCC-22.08-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-22.12-OpenMP (EasyConfig: GSL-2.7.1-cpeAOCC-22.12-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-22.12-sequential (EasyConfig: GSL-2.7.1-cpeAOCC-22.12-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-23.09-OpenMP (EasyConfig: GSL-2.7.1-cpeAOCC-23.09-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-23.09-sequential (EasyConfig: GSL-2.7.1-cpeAOCC-23.09-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-23.12-OpenMP (EasyConfig: GSL-2.7.1-cpeAOCC-23.12-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-23.12-sequential (EasyConfig: GSL-2.7.1-cpeAOCC-23.12-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-24.03-OpenMP (EasyConfig: GSL-2.7.1-cpeAOCC-24.03-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeAOCC-24.03-sequential (EasyConfig: GSL-2.7.1-cpeAOCC-24.03-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-22.08-OpenMP (EasyConfig: GSL-2.7.1-cpeCray-22.08-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-22.08-sequential (EasyConfig: GSL-2.7.1-cpeCray-22.08-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-22.12-OpenMP (EasyConfig: GSL-2.7.1-cpeCray-22.12-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-22.12-sequential (EasyConfig: GSL-2.7.1-cpeCray-22.12-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-23.03-OpenMP (EasyConfig: GSL-2.7.1-cpeCray-23.03-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-23.03-sequential (EasyConfig: GSL-2.7.1-cpeCray-23.03-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-23.09-OpenMP (EasyConfig: GSL-2.7.1-cpeCray-23.09-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-23.09-sequential (EasyConfig: GSL-2.7.1-cpeCray-23.09-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-23.12-OpenMP (EasyConfig: GSL-2.7.1-cpeCray-23.12-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-23.12-sequential (EasyConfig: GSL-2.7.1-cpeCray-23.12-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-24.03-OpenMP (EasyConfig: GSL-2.7.1-cpeCray-24.03-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeCray-24.03-sequential (EasyConfig: GSL-2.7.1-cpeCray-24.03-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-22.08-OpenMP (EasyConfig: GSL-2.7.1-cpeGNU-22.08-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-22.08-sequential (EasyConfig: GSL-2.7.1-cpeGNU-22.08-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-22.12-OpenMP (EasyConfig: GSL-2.7.1-cpeGNU-22.12-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-22.12-sequential (EasyConfig: GSL-2.7.1-cpeGNU-22.12-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-23.09-OpenMP (EasyConfig: GSL-2.7.1-cpeGNU-23.09-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-23.09-sequential (EasyConfig: GSL-2.7.1-cpeGNU-23.09-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-23.12-OpenMP (EasyConfig: GSL-2.7.1-cpeGNU-23.12-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-23.12-sequential (EasyConfig: GSL-2.7.1-cpeGNU-23.12-sequential.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-24.03-OpenMP (EasyConfig: GSL-2.7.1-cpeGNU-24.03-OpenMP.eb)</p> </li> <li> <p>GSL/2.7.1-cpeGNU-24.03-sequential (EasyConfig: GSL-2.7.1-cpeGNU-24.03-sequential.eb)</p> </li> </ul>","boost":10},{"location":"g/GSL/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GSL home page</p> <ul> <li>GSL download from the GNU server</li> </ul> </li> </ul>","boost":10},{"location":"g/GSL/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>GSL support in the EasyBuilders repository</p> </li> <li> <p>GSL support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/GSL/#version-27-from-cpe-2106-on","title":"Version 2.7 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is a mix of the CSCS and Univerity of Antwerpen ones.</li> </ul>","boost":10},{"location":"g/GSL/#version-271-from-cpe-2206-on","title":"Version 2.7.1 from CPE 22.06 on","text":"<ul> <li> <p>Build on the previous EasyConfig.</p> </li> <li> <p>There are now versions with OpenMP enabled and without. When in doubt which one to use: One     should never combine code compiled with the OpenMP version of LibSci with code with the      sequential version (or likely any code compiled without OpenMP) as this causes runtime crashed.</p> </li> <li> <p>For LUMI/23.12, additional license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"g/GSL/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig GSL-2.7-cpeAMD-21.06.eb, with module GSL/2.7-cpeAMD-21.06</p> </li> <li> <p>EasyConfig GSL-2.7-cpeAOCC-21.12.eb, with module GSL/2.7-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig GSL-2.7-cpeCray-21.06.eb, with module GSL/2.7-cpeCray-21.06</p> </li> <li> <p>EasyConfig GSL-2.7-cpeCray-21.08.eb, with module GSL/2.7-cpeCray-21.08</p> </li> <li> <p>EasyConfig GSL-2.7-cpeCray-21.12.eb, with module GSL/2.7-cpeCray-21.12</p> </li> <li> <p>EasyConfig GSL-2.7-cpeGNU-21.06.eb, with module GSL/2.7-cpeGNU-21.06</p> </li> <li> <p>EasyConfig GSL-2.7-cpeGNU-21.08.eb, with module GSL/2.7-cpeGNU-21.08</p> </li> <li> <p>EasyConfig GSL-2.7-cpeGNU-21.12.eb, with module GSL/2.7-cpeGNU-21.12</p> </li> <li> <p>EasyConfig GSL-2.7.1-cpeAOCC-22.06-OpenMP.eb, with module GSL/2.7.1-cpeAOCC-22.06-OpenMP</p> </li> <li> <p>EasyConfig GSL-2.7.1-cpeAOCC-22.06-sequential.eb, with module GSL/2.7.1-cpeAOCC-22.06-sequential</p> </li> <li> <p>EasyConfig GSL-2.7.1-cpeCray-22.06-OpenMP.eb, with module GSL/2.7.1-cpeCray-22.06-OpenMP</p> </li> <li> <p>EasyConfig GSL-2.7.1-cpeCray-22.06-sequential.eb, with module GSL/2.7.1-cpeCray-22.06-sequential</p> </li> <li> <p>EasyConfig GSL-2.7.1-cpeGNU-22.06-OpenMP.eb, with module GSL/2.7.1-cpeGNU-22.06-OpenMP</p> </li> <li> <p>EasyConfig GSL-2.7.1-cpeGNU-22.06-sequential.eb, with module GSL/2.7.1-cpeGNU-22.06-sequential</p> </li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li>EasyConfig GSL-2.7-cpeGNU-21.12-seq.eb, with module GSL/2.7-cpeGNU-21.12-seq</li> </ul> </li> </ul>","boost":10},{"location":"g/GlobalArrays/","title":"GlobalArrays","text":"<p>[package list]</p>","boost":10},{"location":"g/GlobalArrays/#globalarrays","title":"GlobalArrays","text":"","boost":10},{"location":"g/GlobalArrays/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig GlobalArrays-5.8-cpeGNU-21.08.eb, with module GlobalArrays/5.8-cpeGNU-21.08</li> </ul> </li> </ul>","boost":10},{"location":"g/gc/","title":"gc","text":"<p>[package list]</p>","boost":10},{"location":"g/gc/#gc","title":"gc","text":"","boost":10},{"location":"g/gc/#license-information","title":"License information","text":"<p>The license information is available on the  license page of the gc web site or in the  README.md file in the gc GitHub or LICENSE file in the gc GitHub for very recent versions.</p> <p>The module also uses \"libatomic_ops\".  Its license information can be found  in the LICENSE file of the libatomic_ops GitHub.</p> <p>From LUMI/23.12 on, the license information for these packages can also be found in  their respective subdirectories of <code>$EBROOTGC/share/licenses</code> after loading the module.</p>","boost":10},{"location":"g/gc/#user-documentation","title":"User documentation","text":"<p>The B\u00f6hm-Demers-Weiser conservative garbage collector can be used as a  garbage collecting replacement for C malloc or C++ new.  It allows you to allocate memory basically as you normally would,  without explicitly deallocating memory that is no longer useful.  The collector automatically recycles memory when it determines that  it can no longer be otherwise accessed.</p> <p>The collector is also used by a number of programming language implementations that  either use C as intermediate code, want to facilitate easier interoperation with C libraries,  or just prefer the simple collector interface.  Alternatively, the garbage collector may be used as a leak detector for C or C++ programs,  though that is not its primary goal.</p>","boost":10},{"location":"g/gc/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider gc/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>gc/8.2.0-cpeAMD-22.08 (EasyConfig: gc-8.2.0-cpeAMD-22.08.eb)</p> </li> <li> <p>gc/8.2.0-cpeAOCC-22.08 (EasyConfig: gc-8.2.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>gc/8.2.0-cpeCray-22.08 (EasyConfig: gc-8.2.0-cpeCray-22.08.eb)</p> </li> <li> <p>gc/8.2.0-cpeGNU-22.08 (EasyConfig: gc-8.2.0-cpeGNU-22.08.eb)</p> </li> <li> <p>gc/8.2.2-cpeAMD-22.12 (EasyConfig: gc-8.2.2-cpeAMD-22.12.eb)</p> </li> <li> <p>gc/8.2.2-cpeAOCC-22.12 (EasyConfig: gc-8.2.2-cpeAOCC-22.12.eb)</p> </li> <li> <p>gc/8.2.2-cpeCray-22.12 (EasyConfig: gc-8.2.2-cpeCray-22.12.eb)</p> </li> <li> <p>gc/8.2.2-cpeCray-23.03 (EasyConfig: gc-8.2.2-cpeCray-23.03.eb)</p> </li> <li> <p>gc/8.2.2-cpeGNU-22.12 (EasyConfig: gc-8.2.2-cpeGNU-22.12.eb)</p> </li> <li> <p>gc/8.2.4-cpeAMD-23.09 (EasyConfig: gc-8.2.4-cpeAMD-23.09.eb)</p> </li> <li> <p>gc/8.2.4-cpeAMD-23.12 (EasyConfig: gc-8.2.4-cpeAMD-23.12.eb)</p> </li> <li> <p>gc/8.2.4-cpeAOCC-23.09 (EasyConfig: gc-8.2.4-cpeAOCC-23.09.eb)</p> </li> <li> <p>gc/8.2.4-cpeAOCC-23.12 (EasyConfig: gc-8.2.4-cpeAOCC-23.12.eb)</p> </li> <li> <p>gc/8.2.4-cpeCray-23.09 (EasyConfig: gc-8.2.4-cpeCray-23.09.eb)</p> </li> <li> <p>gc/8.2.4-cpeCray-23.12 (EasyConfig: gc-8.2.4-cpeCray-23.12.eb)</p> </li> <li> <p>gc/8.2.4-cpeGNU-23.09 (EasyConfig: gc-8.2.4-cpeGNU-23.09.eb)</p> </li> <li> <p>gc/8.2.4-cpeGNU-23.12 (EasyConfig: gc-8.2.4-cpeGNU-23.12.eb)</p> </li> <li> <p>gc/8.2.6-cpeAMD-24.03 (EasyConfig: gc-8.2.6-cpeAMD-24.03.eb)</p> </li> <li> <p>gc/8.2.6-cpeAOCC-24.03 (EasyConfig: gc-8.2.6-cpeAOCC-24.03.eb)</p> </li> <li> <p>gc/8.2.6-cpeCray-24.03 (EasyConfig: gc-8.2.6-cpeCray-24.03.eb)</p> </li> <li> <p>gc/8.2.6-cpeGNU-24.03 (EasyConfig: gc-8.2.6-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"g/gc/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>gc home page</p> </li> <li> <p>gc download</p> </li> <li> <p>libatomic_ops download</p> </li> </ul>","boost":10},{"location":"g/gc/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>gc in the EasyBuilders repository</p> </li> <li> <p>gc in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/gc/#version-804-from-cpe-2106-on","title":"Version 8.04 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is based on the EasyBuilders one with some input from the     University of Antwerpen one.</li> </ul>","boost":10},{"location":"g/gc/#version-820-from-cpe-2112-on","title":"Version 8.2.0 from CPE 21.12 on","text":"<ul> <li>The EasyConfig is based on the EasyBuilders one with some input from the     University of Antwerpen one.</li> </ul>","boost":10},{"location":"g/gc/#version-822-from-cpe-2212-on","title":"Version 8.2.2 from CPE 22.12 on","text":"<ul> <li>The EasyConfig is a straightforward port of the 8.2.0 one, but with     the checksums adapted to the more robust way of specifying them.</li> </ul>","boost":10},{"location":"g/gc/#version-824-from-cpe-2309-on","title":"Version 8.2.4 from CPE 23.09 on","text":"<ul> <li> <p>Trivial port of the 8.2.2 EasyConfig.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"g/gc/#version-826-from-lumi2403-on","title":"Version 8.2.6 from LUMI/24.03 on","text":"<ul> <li>Trivial version bump of the 8.2.4 EasyConfig.</li> </ul>","boost":10},{"location":"g/gc/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig gc-8.0.4-cpeAMD-21.06.eb, with module gc/8.0.4-cpeAMD-21.06</p> </li> <li> <p>EasyConfig gc-8.0.4-cpeCray-21.06.eb, with module gc/8.0.4-cpeCray-21.06</p> </li> <li> <p>EasyConfig gc-8.0.4-cpeCray-21.08.eb, with module gc/8.0.4-cpeCray-21.08</p> </li> <li> <p>EasyConfig gc-8.0.4-cpeGNU-21.06.eb, with module gc/8.0.4-cpeGNU-21.06</p> </li> <li> <p>EasyConfig gc-8.0.4-cpeGNU-21.08.eb, with module gc/8.0.4-cpeGNU-21.08</p> </li> <li> <p>EasyConfig gc-8.2.0-cpeAOCC-21.12.eb, with module gc/8.2.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig gc-8.2.0-cpeAOCC-22.06.eb, with module gc/8.2.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig gc-8.2.0-cpeCray-21.12.eb, with module gc/8.2.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig gc-8.2.0-cpeCray-22.06.eb, with module gc/8.2.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig gc-8.2.0-cpeGNU-21.12.eb, with module gc/8.2.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig gc-8.2.0-cpeGNU-22.06.eb, with module gc/8.2.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/gdbm/","title":"gdbm","text":"<p>[package list]</p>","boost":10},{"location":"g/gdbm/#gdbm","title":"gdbm","text":"","boost":10},{"location":"g/gdbm/#license-information","title":"License information","text":"<p>GDBM is currently distributed under the terms of the GNU General Public License, Version 3.</p> <p>The licensing information can also be found on the  \"Copying Conditions\" page in the GDBM manual.</p> <p>From LUMI/23.12 on, the license information can also be found in the <code>COPYING</code> file  in <code>$EBROOTGDBM/share/licenses/gdbm</code> after loading the module.</p>","boost":10},{"location":"g/gdbm/#user-documentation","title":"User documentation","text":"<p>GNU dbm  (or GDBM, for short) is a library of database functions that use extensible hashing and work similar to the standard UNIX dbm. These routines are provided to a programmer needing to create and manipulate a hashed database.</p> <p>The basic use of GDBM is to store key/data pairs in a data file. Each key must be unique and each key is paired with only one data item.</p> <p>The library provides primitives for storing key/data pairs, searching and retrieving the data by its key and deleting a key along with its data. It also support sequential iteration over all key/data pairs in a database.</p> <p>For compatibility with programs using old UNIX dbm function, the package also provides traditional dbm and ndbm interfaces.</p> <p>There is a web-based manual.</p>","boost":10},{"location":"g/gdbm/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider gdbm/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>gdbm/1.23-cpeAMD-22.08 (EasyConfig: gdbm-1.23-cpeAMD-22.08.eb)</p> </li> <li> <p>gdbm/1.23-cpeAMD-22.12 (EasyConfig: gdbm-1.23-cpeAMD-22.12.eb)</p> </li> <li> <p>gdbm/1.23-cpeAMD-23.09 (EasyConfig: gdbm-1.23-cpeAMD-23.09.eb)</p> </li> <li> <p>gdbm/1.23-cpeAMD-23.12 (EasyConfig: gdbm-1.23-cpeAMD-23.12.eb)</p> </li> <li> <p>gdbm/1.23-cpeAMD-24.03 (EasyConfig: gdbm-1.23-cpeAMD-24.03.eb)</p> </li> <li> <p>gdbm/1.23-cpeAOCC-22.08 (EasyConfig: gdbm-1.23-cpeAOCC-22.08.eb)</p> </li> <li> <p>gdbm/1.23-cpeAOCC-22.12 (EasyConfig: gdbm-1.23-cpeAOCC-22.12.eb)</p> </li> <li> <p>gdbm/1.23-cpeAOCC-23.09 (EasyConfig: gdbm-1.23-cpeAOCC-23.09.eb)</p> </li> <li> <p>gdbm/1.23-cpeAOCC-23.12 (EasyConfig: gdbm-1.23-cpeAOCC-23.12.eb)</p> </li> <li> <p>gdbm/1.23-cpeAOCC-24.03 (EasyConfig: gdbm-1.23-cpeAOCC-24.03.eb)</p> </li> <li> <p>gdbm/1.23-cpeCray-22.08 (EasyConfig: gdbm-1.23-cpeCray-22.08.eb)</p> </li> <li> <p>gdbm/1.23-cpeCray-22.12 (EasyConfig: gdbm-1.23-cpeCray-22.12.eb)</p> </li> <li> <p>gdbm/1.23-cpeCray-23.03 (EasyConfig: gdbm-1.23-cpeCray-23.03.eb)</p> </li> <li> <p>gdbm/1.23-cpeCray-23.09 (EasyConfig: gdbm-1.23-cpeCray-23.09.eb)</p> </li> <li> <p>gdbm/1.23-cpeCray-23.12 (EasyConfig: gdbm-1.23-cpeCray-23.12.eb)</p> </li> <li> <p>gdbm/1.23-cpeCray-24.03 (EasyConfig: gdbm-1.23-cpeCray-24.03.eb)</p> </li> <li> <p>gdbm/1.23-cpeGNU-22.08 (EasyConfig: gdbm-1.23-cpeGNU-22.08.eb)</p> </li> <li> <p>gdbm/1.23-cpeGNU-22.12 (EasyConfig: gdbm-1.23-cpeGNU-22.12.eb)</p> </li> <li> <p>gdbm/1.23-cpeGNU-23.09 (EasyConfig: gdbm-1.23-cpeGNU-23.09.eb)</p> </li> <li> <p>gdbm/1.23-cpeGNU-23.12 (EasyConfig: gdbm-1.23-cpeGNU-23.12.eb)</p> </li> <li> <p>gdbm/1.23-cpeGNU-24.03 (EasyConfig: gdbm-1.23-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"g/gdbm/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>gdbm home page</p> <ul> <li>Download from GNU</li> </ul> </li> </ul>","boost":10},{"location":"g/gdbm/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>gdbm in the EasyBuilders repository</p> </li> <li> <p>There is no support for gdbm in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/gdbm/#version-120-from-cpe-2106-on","title":"Version 1.20 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is derived from the University of Antwerpen one as that one     is more complete in terms of dependencies.</li> </ul>","boost":10},{"location":"g/gdbm/#version-123-from-cpe-2206-on","title":"Version 1.23 from CPE 22.06 on","text":"<ul> <li> <p>Trivial version bump of the EasyConfig, but we removed unnecessary variables     from the EasyConfig accidentally left in when copying from the UAntwerpen     repository.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"g/gdbm/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig gdbm-1.20-cpeAMD-21.06.eb, with module gdbm/1.20-cpeAMD-21.06</p> </li> <li> <p>EasyConfig gdbm-1.20-cpeAOCC-21.12.eb, with module gdbm/1.20-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig gdbm-1.20-cpeCray-21.06.eb, with module gdbm/1.20-cpeCray-21.06</p> </li> <li> <p>EasyConfig gdbm-1.20-cpeCray-21.08.eb, with module gdbm/1.20-cpeCray-21.08</p> </li> <li> <p>EasyConfig gdbm-1.20-cpeCray-21.12.eb, with module gdbm/1.20-cpeCray-21.12</p> </li> <li> <p>EasyConfig gdbm-1.20-cpeGNU-21.06.eb, with module gdbm/1.20-cpeGNU-21.06</p> </li> <li> <p>EasyConfig gdbm-1.20-cpeGNU-21.08.eb, with module gdbm/1.20-cpeGNU-21.08</p> </li> <li> <p>EasyConfig gdbm-1.20-cpeGNU-21.12.eb, with module gdbm/1.20-cpeGNU-21.12</p> </li> <li> <p>EasyConfig gdbm-1.23-cpeAOCC-22.06.eb, with module gdbm/1.23-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig gdbm-1.23-cpeCray-22.06.eb, with module gdbm/1.23-cpeCray-22.06</p> </li> <li> <p>EasyConfig gdbm-1.23-cpeGNU-22.06.eb, with module gdbm/1.23-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/gettext/","title":"gettext","text":"<p>[package list]</p>","boost":10},{"location":"g/gettext/#gettext","title":"gettext","text":"","boost":10},{"location":"g/gettext/#license-information","title":"License information","text":"<p>The gettext package is distributed under the GNU General Public License version 3, a copy of which can also be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the license information can also be found in the  <code>$EBROOTGETTEXT/share/licenses/gettext</code> subdirectory after loading the module.</p>","boost":10},{"location":"g/gettext/#user-documentation","title":"User documentation","text":"<p>Usually, programs are written and documented in English, and use English at execution time for interacting with users. This is true not only from within GNU, but also in a great deal of proprietary and free software. Using a common language is quite handy for communication between developers, maintainers and users from all countries. On the other hand, most people are less comfortable with English than with their own native language, and would rather be using their mother tongue for day to day's work, as far as possible. Many would simply love seeing their computer screen showing a lot less of English, and far more of their own language.</p> <p>GNU <code>gettext</code>  is an important step for the GNU Translation Project, as it is an asset on which we may build many other steps. This package offers to programmers, translators, and even users, a well integrated set of tools and documentation. Specifically, the GNU `gettext' utilities are a set of tools that provides a framework to help other GNU packages produce multi-lingual messages. These tools include a set of conventions about how programs should be written to support message catalogs, a directory and file naming organization for the message catalogs themselves, a runtime library supporting the retrieval of translated messages, and a few stand-alone programs to massage in various ways the sets of translatable strings, or already translated strings. A special GNU Emacs mode also helps interested parties in preparing these sets, or bringing them up to date.</p> <p>There is web-based documentation for GNU gettext.</p>","boost":10},{"location":"g/gettext/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider gettext/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>gettext/0.21-cpeAMD-22.08-minimal (EasyConfig: gettext-0.21-cpeAMD-22.08-minimal.eb)</p> </li> <li> <p>gettext/0.21-cpeAMD-22.08 (EasyConfig: gettext-0.21-cpeAMD-22.08.eb)</p> </li> <li> <p>gettext/0.21-cpeAOCC-22.08-minimal (EasyConfig: gettext-0.21-cpeAOCC-22.08-minimal.eb)</p> </li> <li> <p>gettext/0.21-cpeAOCC-22.08 (EasyConfig: gettext-0.21-cpeAOCC-22.08.eb)</p> </li> <li> <p>gettext/0.21-cpeCray-22.08-minimal (EasyConfig: gettext-0.21-cpeCray-22.08-minimal.eb)</p> </li> <li> <p>gettext/0.21-cpeCray-22.08 (EasyConfig: gettext-0.21-cpeCray-22.08.eb)</p> </li> <li> <p>gettext/0.21-cpeGNU-22.08-minimal (EasyConfig: gettext-0.21-cpeGNU-22.08-minimal.eb)</p> </li> <li> <p>gettext/0.21-cpeGNU-22.08 (EasyConfig: gettext-0.21-cpeGNU-22.08.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAMD-22.12-minimal (EasyConfig: gettext-0.21.1-cpeAMD-22.12-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAMD-22.12 (EasyConfig: gettext-0.21.1-cpeAMD-22.12.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAMD-23.09-minimal (EasyConfig: gettext-0.21.1-cpeAMD-23.09-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAMD-23.09 (EasyConfig: gettext-0.21.1-cpeAMD-23.09.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAMD-23.12-minimal (EasyConfig: gettext-0.21.1-cpeAMD-23.12-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAMD-23.12 (EasyConfig: gettext-0.21.1-cpeAMD-23.12.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAOCC-22.12-minimal (EasyConfig: gettext-0.21.1-cpeAOCC-22.12-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAOCC-22.12 (EasyConfig: gettext-0.21.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAOCC-23.09-minimal (EasyConfig: gettext-0.21.1-cpeAOCC-23.09-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAOCC-23.09 (EasyConfig: gettext-0.21.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAOCC-23.12-minimal (EasyConfig: gettext-0.21.1-cpeAOCC-23.12-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeAOCC-23.12 (EasyConfig: gettext-0.21.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>gettext/0.21.1-cpeCray-22.12-minimal (EasyConfig: gettext-0.21.1-cpeCray-22.12-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeCray-22.12 (EasyConfig: gettext-0.21.1-cpeCray-22.12.eb)</p> </li> <li> <p>gettext/0.21.1-cpeCray-23.03-minimal (EasyConfig: gettext-0.21.1-cpeCray-23.03-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeCray-23.03 (EasyConfig: gettext-0.21.1-cpeCray-23.03.eb)</p> </li> <li> <p>gettext/0.21.1-cpeCray-23.09-minimal (EasyConfig: gettext-0.21.1-cpeCray-23.09-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeCray-23.09 (EasyConfig: gettext-0.21.1-cpeCray-23.09.eb)</p> </li> <li> <p>gettext/0.21.1-cpeCray-23.12-minimal (EasyConfig: gettext-0.21.1-cpeCray-23.12-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeCray-23.12 (EasyConfig: gettext-0.21.1-cpeCray-23.12.eb)</p> </li> <li> <p>gettext/0.21.1-cpeGNU-22.12-minimal (EasyConfig: gettext-0.21.1-cpeGNU-22.12-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeGNU-22.12 (EasyConfig: gettext-0.21.1-cpeGNU-22.12.eb)</p> </li> <li> <p>gettext/0.21.1-cpeGNU-23.09-minimal (EasyConfig: gettext-0.21.1-cpeGNU-23.09-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeGNU-23.09 (EasyConfig: gettext-0.21.1-cpeGNU-23.09.eb)</p> </li> <li> <p>gettext/0.21.1-cpeGNU-23.12-minimal (EasyConfig: gettext-0.21.1-cpeGNU-23.12-minimal.eb)</p> </li> <li> <p>gettext/0.21.1-cpeGNU-23.12 (EasyConfig: gettext-0.21.1-cpeGNU-23.12.eb)</p> </li> <li> <p>gettext/0.22-cpeAMD-24.03-minimal (EasyConfig: gettext-0.22-cpeAMD-24.03-minimal.eb)</p> </li> <li> <p>gettext/0.22-cpeAMD-24.03 (EasyConfig: gettext-0.22-cpeAMD-24.03.eb)</p> </li> <li> <p>gettext/0.22-cpeAOCC-24.03-minimal (EasyConfig: gettext-0.22-cpeAOCC-24.03-minimal.eb)</p> </li> <li> <p>gettext/0.22-cpeAOCC-24.03 (EasyConfig: gettext-0.22-cpeAOCC-24.03.eb)</p> </li> <li> <p>gettext/0.22-cpeCray-24.03-minimal (EasyConfig: gettext-0.22-cpeCray-24.03-minimal.eb)</p> </li> <li> <p>gettext/0.22-cpeCray-24.03 (EasyConfig: gettext-0.22-cpeCray-24.03.eb)</p> </li> <li> <p>gettext/0.22-cpeGNU-24.03-minimal (EasyConfig: gettext-0.22-cpeGNU-24.03-minimal.eb)</p> </li> <li> <p>gettext/0.22-cpeGNU-24.03 (EasyConfig: gettext-0.22-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"g/gettext/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GNU gettext home page</p> </li> <li> <p>Download from the GNU download repository</p> </li> </ul>","boost":10},{"location":"g/gettext/#easybuild","title":"EasyBuild","text":"<ul> <li> <p> gettext support in the EasyBuilders repository</p> </li> <li> <p>gettext support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/gettext/#gettext-021-from-2106-on","title":"gettext 0.21 from 21.06 on","text":"<ul> <li> <p>This repository provides 2 configurations of gettext</p> <ul> <li> <p>The <code>-minimal</code> configuration is compiled with a minimum of external dependencies.     i.e., only ncurses</p> </li> <li> <p>The regular configuration is more full-featured. It has however dependencies that     themselves use gettext during the build process so we had to provide a more     minimalistic version to work around circular dependencies.</p> </li> </ul> <p>This aspect is different from the EasyConfigs in the Easybuilders and CSCS repositories. These repositories provide an in-between version that uses a libxml2 produced with EasyBuild rather than the internal one used in the <code>-minimal</code> configuration and hence also uses zlib.</p> </li> </ul>","boost":10},{"location":"g/gettext/#version-0211-from-lumi2212-on","title":"Version 0.21.1 from LUMI/22.12 on","text":"<ul> <li> <p>Trivial port of the EasyConfig for 0.21.</p> </li> <li> <p>LUMI/23.12: Added license information to the installation.</p> </li> </ul>","boost":10},{"location":"g/gettext/#version-022-for-lumi2403","title":"Version 0.22 for LUMI/24.03","text":"<ul> <li>Trivial port of the EasyConfigs for 0.21.1 for LUMI/23.12.</li> </ul>","boost":10},{"location":"g/gettext/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig gettext-0.21-cpeAMD-21.06-minimal.eb, with module gettext/0.21-cpeAMD-21.06-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeAMD-21.06.eb, with module gettext/0.21-cpeAMD-21.06</p> </li> <li> <p>EasyConfig gettext-0.21-cpeAOCC-21.12-minimal.eb, with module gettext/0.21-cpeAOCC-21.12-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeAOCC-21.12.eb, with module gettext/0.21-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig gettext-0.21-cpeAOCC-22.06-minimal.eb, with module gettext/0.21-cpeAOCC-22.06-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeAOCC-22.06.eb, with module gettext/0.21-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig gettext-0.21-cpeCray-21.06-minimal.eb, with module gettext/0.21-cpeCray-21.06-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeCray-21.06.eb, with module gettext/0.21-cpeCray-21.06</p> </li> <li> <p>EasyConfig gettext-0.21-cpeCray-21.08-minimal.eb, with module gettext/0.21-cpeCray-21.08-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeCray-21.08.eb, with module gettext/0.21-cpeCray-21.08</p> </li> <li> <p>EasyConfig gettext-0.21-cpeCray-21.12-minimal.eb, with module gettext/0.21-cpeCray-21.12-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeCray-21.12.eb, with module gettext/0.21-cpeCray-21.12</p> </li> <li> <p>EasyConfig gettext-0.21-cpeCray-22.06-minimal.eb, with module gettext/0.21-cpeCray-22.06-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeCray-22.06.eb, with module gettext/0.21-cpeCray-22.06</p> </li> <li> <p>EasyConfig gettext-0.21-cpeGNU-21.06-minimal.eb, with module gettext/0.21-cpeGNU-21.06-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeGNU-21.06.eb, with module gettext/0.21-cpeGNU-21.06</p> </li> <li> <p>EasyConfig gettext-0.21-cpeGNU-21.08-minimal.eb, with module gettext/0.21-cpeGNU-21.08-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeGNU-21.08.eb, with module gettext/0.21-cpeGNU-21.08</p> </li> <li> <p>EasyConfig gettext-0.21-cpeGNU-21.12-minimal.eb, with module gettext/0.21-cpeGNU-21.12-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeGNU-21.12.eb, with module gettext/0.21-cpeGNU-21.12</p> </li> <li> <p>EasyConfig gettext-0.21-cpeGNU-22.06-minimal.eb, with module gettext/0.21-cpeGNU-22.06-minimal</p> </li> <li> <p>EasyConfig gettext-0.21-cpeGNU-22.06.eb, with module gettext/0.21-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/giflib/","title":"giflib","text":"<p>[package list]</p>","boost":10},{"location":"g/giflib/#giflib","title":"giflib","text":"","boost":10},{"location":"g/giflib/#license-information","title":"License information","text":"<p>The licensing information for GIFLIB is available in the COPYING file in the sourceforge source repository.</p> <p>From LUMI/23.12 on, this file can also be found in the <code>$EBROOTGIFLIB/share/licenses/giflib</code> subdirectory after loading the module.</p>","boost":10},{"location":"g/giflib/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider giflib/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>giflib/5.2.1-cpeAMD-22.08 (EasyConfig: giflib-5.2.1-cpeAMD-22.08.eb)</p> </li> <li> <p>giflib/5.2.1-cpeAMD-22.12 (EasyConfig: giflib-5.2.1-cpeAMD-22.12.eb)</p> </li> <li> <p>giflib/5.2.1-cpeAMD-23.09 (EasyConfig: giflib-5.2.1-cpeAMD-23.09.eb)</p> </li> <li> <p>giflib/5.2.1-cpeAMD-23.12 (EasyConfig: giflib-5.2.1-cpeAMD-23.12.eb)</p> </li> <li> <p>giflib/5.2.1-cpeAMD-24.03 (EasyConfig: giflib-5.2.1-cpeAMD-24.03.eb)</p> </li> <li> <p>giflib/5.2.1-cpeAOCC-22.08 (EasyConfig: giflib-5.2.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>giflib/5.2.1-cpeAOCC-22.12 (EasyConfig: giflib-5.2.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>giflib/5.2.1-cpeAOCC-23.09 (EasyConfig: giflib-5.2.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>giflib/5.2.1-cpeAOCC-23.12 (EasyConfig: giflib-5.2.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>giflib/5.2.1-cpeAOCC-24.03 (EasyConfig: giflib-5.2.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>giflib/5.2.1-cpeCray-22.08 (EasyConfig: giflib-5.2.1-cpeCray-22.08.eb)</p> </li> <li> <p>giflib/5.2.1-cpeCray-22.12 (EasyConfig: giflib-5.2.1-cpeCray-22.12.eb)</p> </li> <li> <p>giflib/5.2.1-cpeCray-23.03 (EasyConfig: giflib-5.2.1-cpeCray-23.03.eb)</p> </li> <li> <p>giflib/5.2.1-cpeCray-23.09 (EasyConfig: giflib-5.2.1-cpeCray-23.09.eb)</p> </li> <li> <p>giflib/5.2.1-cpeCray-23.12 (EasyConfig: giflib-5.2.1-cpeCray-23.12.eb)</p> </li> <li> <p>giflib/5.2.1-cpeCray-24.03 (EasyConfig: giflib-5.2.1-cpeCray-24.03.eb)</p> </li> <li> <p>giflib/5.2.1-cpeGNU-22.08 (EasyConfig: giflib-5.2.1-cpeGNU-22.08.eb)</p> </li> <li> <p>giflib/5.2.1-cpeGNU-22.12 (EasyConfig: giflib-5.2.1-cpeGNU-22.12.eb)</p> </li> <li> <p>giflib/5.2.1-cpeGNU-23.09 (EasyConfig: giflib-5.2.1-cpeGNU-23.09.eb)</p> </li> <li> <p>giflib/5.2.1-cpeGNU-23.12 (EasyConfig: giflib-5.2.1-cpeGNU-23.12.eb)</p> </li> <li> <p>giflib/5.2.1-cpeGNU-24.03 (EasyConfig: giflib-5.2.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"g/giflib/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>giflib home page</p> </li> <li> <p>giflib on SourceForge</p> </li> </ul>","boost":10},{"location":"g/giflib/#easybuild","title":"EasyBuild","text":"<ul> <li> <p> giflib support in the EasyBuilders repository</p> </li> <li> <p>There is no support for giflib in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/giflib/#version-521-from-cpe-2106-on","title":"Version 5.2.1 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is derived from the default EasyBuilders EasyConfig file.</p> </li> <li> <p>From LUMI/23.12 on, license info was added to the installation.</p> </li> </ul>","boost":10},{"location":"g/giflib/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig giflib-5.2.1-cpeAMD-21.06.eb, with module giflib/5.2.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeAOCC-21.12.eb, with module giflib/5.2.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeAOCC-22.06.eb, with module giflib/5.2.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeCray-21.06.eb, with module giflib/5.2.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeCray-21.08.eb, with module giflib/5.2.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeCray-21.12.eb, with module giflib/5.2.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeCray-22.06.eb, with module giflib/5.2.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeGNU-21.06.eb, with module giflib/5.2.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeGNU-21.08.eb, with module giflib/5.2.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeGNU-21.12.eb, with module giflib/5.2.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig giflib-5.2.1-cpeGNU-22.06.eb, with module giflib/5.2.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/git/","title":"git","text":"<p>[package list]</p>","boost":10},{"location":"g/git/#git","title":"git","text":"","boost":10},{"location":"g/git/#license-information","title":"License information","text":"<p>The git tool is licensed under the GNU General Public License Version 2 a copy of which can be found in the  COPYING file of the git GitHub.</p>","boost":10},{"location":"g/git/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider git/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>git/2.37.2 (EasyConfig: git-2.37.2.eb)</p> </li> <li> <p>git/2.40.0 (EasyConfig: git-2.40.0.eb)</p> </li> <li> <p>git/2.42.1 (EasyConfig: git-2.42.1.eb)</p> </li> <li> <p>git/2.43.4 (EasyConfig: git-2.43.4.eb)</p> </li> <li> <p>git/2.45.1 (EasyConfig: git-2.45.1.eb)</p> </li> </ul>","boost":10},{"location":"g/git/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Git home page</p> </li> <li> <p>Git on GitHub</p> <ul> <li>GitHub releases via tags</li> </ul> </li> </ul>","boost":10},{"location":"g/git/#build-instructions","title":"Build instructions","text":"<p>To install git against the sytem toolchain, several libraries need to be installed in development versions:   * Header files libintl.h, iconv.h (glibc-devel on SUSE)   * zlib with zlib.h (zlib-devel on SUSE)   * libexpat with expat.h (libexpat-devel on SUSE)   * libcurl with curl.h (libcurl-devel on SUSE)   * OpenSSL development libraries?? Needed according to EasyBuilders but not found     in the configure log.</p> <p>To generate man pages or info pages, AsciiDoc is needed. Furthermore, to generate man pages, xmlto is needed and to generate info pages, TeX is needed (which we really don't want on a cluster).</p>","boost":10},{"location":"g/git/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for git in the EasyBuilders repository</p> </li> <li> <p>Support for git in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/git/#git-2331-for-cpe-2108","title":"git 2.33.1 for cpe 21.08","text":"<ul> <li> <p>Started from the EasyBuilders recipe that doesn't build the documentation,     but checked options from configure, switched to OS dependencies and the     SYSTEM toolchain.</p> </li> <li> <p>Further extended that one to one that can also generate the html documentation     and man pages (but not the texinfo documentation at the moment) by building     additional packages that provide the necessary tools. This is not yet finished     on LUMI though as more packages are missing than on eiger.</p> </li> </ul>","boost":10},{"location":"g/git/#git-2351-for-lumi2112","title":"git 2.35.1 for LUMI/21.12","text":"<ul> <li>Straightforward port of the 2.33.1 EasyConfig file</li> </ul>","boost":10},{"location":"g/git/#git-2370-for-lumi2206","title":"git 2.37.0 for LUMI/22.06","text":"<ul> <li>Straightforward port of the 2.35.1 EasyConfig file</li> </ul>","boost":10},{"location":"g/git/#git-2372-for-lumi2208","title":"git 2.37.2 for LUMI/22.08","text":"<ul> <li>Straightforward port of the 2.37.0 EasyConfig file.</li> </ul>","boost":10},{"location":"g/git/#git-2400-for-22122303","title":"git 2.40.0 for 22.12/23.03","text":"<ul> <li> <p>Straightforward port of the 2.37.2 EasyConfig file.</p> </li> <li> <p>Decided to not yet include git-lfs in the module itself as the latter is still      installed from binaries and needs some additional treatment in <code>postinstallcmds</code>.</p> </li> </ul>","boost":10},{"location":"g/git/#git-2421-for-2309","title":"git 2.42.1 for 23.09","text":"<ul> <li>Straightforward port of the 2.40.0 EasyConfig file.</li> </ul>","boost":10},{"location":"g/git/#git-2434-for-2309","title":"git 2.43.4 for 23.09","text":"<ul> <li>Straightforward port of the 2.42.1 EasyConfig file.</li> </ul>","boost":10},{"location":"g/git/#git-2451-for-2403","title":"git 2.45.1 for 24.03","text":"<ul> <li>Straightforward port of the 2.43.4 EasyConfig file.</li> </ul>","boost":10},{"location":"g/git/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig git-2.33.1.eb, with module git/2.33.1</p> </li> <li> <p>EasyConfig git-2.35.1.eb, with module git/2.35.1</p> </li> <li> <p>EasyConfig git-2.37.0.eb, with module git/2.37.0</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/git-lfs/","title":"git-lfs","text":"<p>[package list]</p>","boost":10},{"location":"g/git-lfs/#git-lfs","title":"git-lfs","text":"","boost":10},{"location":"g/git-lfs/#license-information","title":"License information","text":"<p>The git-lfs package is licensed under the MIT license. The license and copyright can be found in the LICENSE file in the git-lfs GitHub repository.</p>","boost":10},{"location":"g/git-lfs/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider git-lfs/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig git-lfs.3.3.0.eb, will build git-lfs/git-lfs.3.3.0</p> </li> <li> <p>EasyConfig git-lfs.3.4.0.eb, will build git-lfs/git-lfs.3.4.0</p> </li> </ul>","boost":10},{"location":"g/git-lfs/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>git-lfs GitHub</p> </li> <li> <p>git-lfs project on GitHub</p> </li> </ul>","boost":10},{"location":"g/git-lfs/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>git-lfs support in the EasyBuilders repository.      The EasyBuilders install from sources, but then Go is needed.</p> </li> <li> <p>git-lfs support in the CSCS repository.     CSCS installs generic downloaded binaries.</p> </li> </ul>","boost":10},{"location":"g/git-lfs/#version-330-for-the-whole-system","title":"Version 3.3.0 (for the whole system)","text":"<ul> <li>The EasyConfig is a direct rework of the CSCS EasyConfigs,     with a version bump. We decided for an installation from      binaries to avoid having to install Go which is also not a good     fit in our current software stacks.</li> </ul>","boost":10},{"location":"g/git-lfs/#version-340","title":"Version 3.4.0","text":"<ul> <li> <p>The EasyConfig is a straightforward port of our EasyConfig for 3.3.0,     so with an installation from binaries to avoid having to install Go.</p> <p>This version already supports some features of git 2.41.</p> </li> </ul>","boost":10},{"location":"g/glew/","title":"glew","text":"<p>[package list]</p>","boost":10},{"location":"g/glew/#glew","title":"glew","text":"","boost":10},{"location":"g/glew/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig glew-2.2.0-cpeGNU-22.08-egl.eb, with module glew/2.2.0-cpeGNU-22.08-egl</p> </li> <li> <p>EasyConfig glew-2.2.0-cpeGNU-22.08-glx.eb, with module glew/2.2.0-cpeGNU-22.08-glx</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/gnuplot/","title":"gnuplot","text":"<p>[package list]</p>","boost":10},{"location":"g/gnuplot/#gnuplot","title":"gnuplot","text":"","boost":10},{"location":"g/gnuplot/#license-information","title":"License information","text":"<p>The gnuplot licensing seems to be a bit of a mess due to a complicated history. Different components may be covered by different licenses because of this.</p> <p>There is a copyright notice in the git repository.</p> <p>From LUMI/23.12 on, the <code>Copyright</code> file can also be found in the directory `$EBROOTGNUPLOT/share/licenses/gnuplot' after loading the module.</p>","boost":10},{"location":"g/gnuplot/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider gnuplot/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>gnuplot/5.4.10-cpeAMD-24.03 (EasyConfig: gnuplot-5.4.10-cpeAMD-24.03.eb)</p> </li> <li> <p>gnuplot/5.4.10-cpeAOCC-24.03 (EasyConfig: gnuplot-5.4.10-cpeAOCC-24.03.eb)</p> </li> <li> <p>gnuplot/5.4.10-cpeCray-24.03 (EasyConfig: gnuplot-5.4.10-cpeCray-24.03.eb)</p> </li> <li> <p>gnuplot/5.4.10-cpeGNU-24.03 (EasyConfig: gnuplot-5.4.10-cpeGNU-24.03.eb)</p> </li> <li> <p>gnuplot/5.4.3-cpeAMD-22.08 (EasyConfig: gnuplot-5.4.3-cpeAMD-22.08.eb)</p> </li> <li> <p>gnuplot/5.4.3-cpeAOCC-22.08 (EasyConfig: gnuplot-5.4.3-cpeAOCC-22.08.eb)</p> </li> <li> <p>gnuplot/5.4.3-cpeCray-22.08 (EasyConfig: gnuplot-5.4.3-cpeCray-22.08.eb)</p> </li> <li> <p>gnuplot/5.4.3-cpeGNU-22.08 (EasyConfig: gnuplot-5.4.3-cpeGNU-22.08.eb)</p> </li> <li> <p>gnuplot/5.4.6-cpeAMD-22.12 (EasyConfig: gnuplot-5.4.6-cpeAMD-22.12.eb)</p> </li> <li> <p>gnuplot/5.4.6-cpeAOCC-22.12 (EasyConfig: gnuplot-5.4.6-cpeAOCC-22.12.eb)</p> </li> <li> <p>gnuplot/5.4.6-cpeCray-22.12 (EasyConfig: gnuplot-5.4.6-cpeCray-22.12.eb)</p> </li> <li> <p>gnuplot/5.4.6-cpeCray-23.03 (EasyConfig: gnuplot-5.4.6-cpeCray-23.03.eb)</p> </li> <li> <p>gnuplot/5.4.6-cpeGNU-22.12 (EasyConfig: gnuplot-5.4.6-cpeGNU-22.12.eb)</p> </li> <li> <p>gnuplot/5.4.8-cpeAMD-23.12 (EasyConfig: gnuplot-5.4.8-cpeAMD-23.12.eb)</p> </li> <li> <p>gnuplot/5.4.8-cpeAOCC-23.09 (EasyConfig: gnuplot-5.4.8-cpeAOCC-23.09.eb)</p> </li> <li> <p>gnuplot/5.4.8-cpeAOCC-23.12 (EasyConfig: gnuplot-5.4.8-cpeAOCC-23.12.eb)</p> </li> <li> <p>gnuplot/5.4.8-cpeCray-23.12 (EasyConfig: gnuplot-5.4.8-cpeCray-23.12.eb)</p> </li> <li> <p>gnuplot/5.4.8-cpeGNU-23.09 (EasyConfig: gnuplot-5.4.8-cpeGNU-23.09.eb)</p> </li> <li> <p>gnuplot/5.4.8-cpeGNU-23.12 (EasyConfig: gnuplot-5.4.8-cpeGNU-23.12.eb)</p> </li> </ul>","boost":10},{"location":"g/gnuplot/#technical-documentation","title":"Technical documentation","text":"<ul> <li>gnuplot home page</li> </ul>","boost":10},{"location":"g/gnuplot/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>gnuplot support in the EasyBuilders repository</p> </li> <li> <p>gnuplot support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/gnuplot/#version-542-for-cpe-2108","title":"Version 5.4.2 for cpe 21.08.","text":"<ul> <li>Given the complexity of installing Qt5, we decided to go for an old-style     gnuplot installation without Qt5. Hence we started from the UAntwerpen     EasyConfig.</li> </ul>","boost":10},{"location":"g/gnuplot/#version-543-for-cpe-2112","title":"Version 5.4.3 for CPE 21.12","text":"<ul> <li>Needed to add <code>--without-latex</code> to <code>configopts</code> as the makefiles did not honour     <code>--prefix</code> for this option and tried to install files in a system directory.</li> </ul>","boost":10},{"location":"g/gnuplot/#version-546-from-cpe-2212-on","title":"Version 5.4.6 from CPE 22.12 on","text":"<ul> <li> <p>Trivial version bump of the 5.4.3 EasyConfig.</p> </li> <li> <p>Problem with the cpeCray version: For some reason <code>-lfreetype</code> was not added to the     link line or found automatically, causing a missing symbol error for a FreeType symbol.     This may be due to errors in the pkg-config files of some other packages so that     the configure script fails to determine the right options while the linker of the Cray PE     may not be able to find libraries based on <code>LIBRARY_PATH</code>.</p> <p>The solution to the problem is to add <code>LDFLAGS=\"$LDFLAGS -L$EBROOTFREETYPE/lib\"</code> to the <code>preconfigopts</code>.</p> </li> </ul>","boost":10},{"location":"g/gnuplot/#version-548-from-cpe-2309-on","title":"Version 5.4.8 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 5.4.6 EasyConfig.</p> </li> <li> <p>It turns out it now also needs libiconv as a dependency as that came previously in      through another package that doesn't need it anymore.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation and the sanity checks     were improved.</p> </li> </ul>","boost":10},{"location":"g/gnuplot/#version-5410-for-lumi2403","title":"Version 5.4.10 for LUMI/24.03","text":"<ul> <li>Trivial version bump of the 5.4.8 EasyConfig for LUMI/23.12.</li> </ul>","boost":10},{"location":"g/gnuplot/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig gnuplot-5.4.2-cpeCray-21.08.eb, with module gnuplot/5.4.2-cpeCray-21.08</p> </li> <li> <p>EasyConfig gnuplot-5.4.2-cpeGNU-21.08.eb, with module gnuplot/5.4.2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig gnuplot-5.4.3-cpeAOCC-21.12.eb, with module gnuplot/5.4.3-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig gnuplot-5.4.3-cpeAOCC-22.06.eb, with module gnuplot/5.4.3-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig gnuplot-5.4.3-cpeCray-21.12.eb, with module gnuplot/5.4.3-cpeCray-21.12</p> </li> <li> <p>EasyConfig gnuplot-5.4.3-cpeCray-22.06.eb, with module gnuplot/5.4.3-cpeCray-22.06</p> </li> <li> <p>EasyConfig gnuplot-5.4.3-cpeGNU-21.12.eb, with module gnuplot/5.4.3-cpeGNU-21.12</p> </li> <li> <p>EasyConfig gnuplot-5.4.3-cpeGNU-22.06.eb, with module gnuplot/5.4.3-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"g/googletest/","title":"googletest","text":"<p>[package list]</p>","boost":10},{"location":"g/googletest/#googletest","title":"googletest","text":"","boost":10},{"location":"g/googletest/#license-information","title":"License information","text":"<p>The googletest package is covered by the BSD 3-Clause License.  A copy of this license is available as the <code>LICENSE</code> file in the googletest GitHub repository.</p> <p>After loading the package, the <code>LICENSE</code> file can also be found in the <code>$EBROOTGOOGLETEST/share/licenses/googletest</code> directory.</p>","boost":10},{"location":"g/googletest/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider googletest/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>googletest/1.13.0-cpeAMD-23.09 (EasyConfig: googletest-1.13.0-cpeAMD-23.09.eb)</p> </li> <li> <p>googletest/1.13.0-cpeAMD-23.12 (EasyConfig: googletest-1.13.0-cpeAMD-23.12.eb)</p> </li> <li> <p>googletest/1.13.0-cpeAOCC-23.09 (EasyConfig: googletest-1.13.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>googletest/1.13.0-cpeAOCC-23.12 (EasyConfig: googletest-1.13.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>googletest/1.13.0-cpeCray-23.09 (EasyConfig: googletest-1.13.0-cpeCray-23.09.eb)</p> </li> <li> <p>googletest/1.13.0-cpeCray-23.12 (EasyConfig: googletest-1.13.0-cpeCray-23.12.eb)</p> </li> <li> <p>googletest/1.13.0-cpeGNU-23.09 (EasyConfig: googletest-1.13.0-cpeGNU-23.09.eb)</p> </li> <li> <p>googletest/1.13.0-cpeGNU-23.12 (EasyConfig: googletest-1.13.0-cpeGNU-23.12.eb)</p> </li> <li> <p>googletest/1.14.0-cpeAMD-24.03 (EasyConfig: googletest-1.14.0-cpeAMD-24.03.eb)</p> </li> <li> <p>googletest/1.14.0-cpeAOCC-24.03 (EasyConfig: googletest-1.14.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>googletest/1.14.0-cpeCray-24.03 (EasyConfig: googletest-1.14.0-cpeCray-24.03.eb)</p> </li> <li> <p>googletest/1.14.0-cpeGNU-24.03 (EasyConfig: googletest-1.14.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"g/googletest/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>googletest documentation</p> </li> <li> <p>googletest on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"g/googletest/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>googletest in the EasyBuilders repository</p> </li> <li> <p>googletest in the CSCS repository</p> </li> <li> <p>Spack support for googletest</p> </li> </ul>","boost":10},{"location":"g/googletest/#version-1130-for-cpe-2312","title":"Version 1.13.0 for CPE 23.12","text":"<ul> <li>The EasyConfig was taken from the EasyBuilders repository and adapted to      the LUMI way of documenting modules and software licecenses, etc.</li> </ul>","boost":10},{"location":"g/googletest/#version-1140-for-cpe-2403","title":"Version 1.14.0 for CPE 24.03","text":"<ul> <li>Direct port of the 1.13.0 EasyConfig for LUMI/23.12.</li> </ul>","boost":10},{"location":"g/graphite2/","title":"graphite2","text":"<p>[package list]</p>","boost":10},{"location":"g/graphite2/#graphite2","title":"graphite2","text":"","boost":10},{"location":"g/graphite2/#license-information","title":"License information","text":"<p>The graphite package is licensed under the GNU Lesser General Public License Version  2.1. A copy of the license is also available in the LICENSE file in the GitHub repository.</p> <p>After loading the module, a copy of this file can also be found in <code>$EBROOTGRAPHITE2/share/licenses/graphite2</code>.</p>","boost":10},{"location":"g/graphite2/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider graphite2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>graphite2/1.3.14-cpeGNU-24.03 (EasyConfig: graphite2-1.3.14-cpeGNU-24.03.eb)</li> </ul>","boost":10},{"location":"g/graphite2/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Web site</p> </li> <li> <p>Code on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"g/graphite2/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>graphite2 support in the EasyBuilders repository</p> </li> <li> <p>There is no support for graphite2 in the CSCS repository.</p> </li> <li> <p>graphite2 in Spack</p> </li> </ul>","boost":10},{"location":"g/graphite2/#version-1314-for-cpegnu-2403","title":"Version 1.3.14 for cpeGNU 24.03","text":"<ul> <li>The EasyConfig is developed based on the one in the EasyBuilders repository but     with the LUST layout and conventions.</li> </ul>","boost":10},{"location":"g/gzip/","title":"gzip","text":"<p>[package list]</p>","boost":10},{"location":"g/gzip/#gzip","title":"gzip","text":"","boost":10},{"location":"g/gzip/#license-information","title":"License information","text":"<p>Gzip is free software; you can redistribute it and/or modify it under the terms of the  GNU General Public License  as published by the Free Software Foundation; either version 3 of the License,  or (at your option) any later version.</p> <p>See also the COPYING file in the gzip source repository.</p> <p>From LUMI/23.12 on, the COPYING file can also be found in the directory <code>$EBROOTGZIP/share/licenses/gzip</code> after loading the module.</p>","boost":10},{"location":"g/gzip/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider gzip/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>gzip/1.12-cpeAMD-22.08 (EasyConfig: gzip-1.12-cpeAMD-22.08.eb)</p> </li> <li> <p>gzip/1.12-cpeAMD-22.12 (EasyConfig: gzip-1.12-cpeAMD-22.12.eb)</p> </li> <li> <p>gzip/1.12-cpeAMD-23.09 (EasyConfig: gzip-1.12-cpeAMD-23.09.eb)</p> </li> <li> <p>gzip/1.12-cpeAMD-23.12 (EasyConfig: gzip-1.12-cpeAMD-23.12.eb)</p> </li> <li> <p>gzip/1.12-cpeAOCC-22.08 (EasyConfig: gzip-1.12-cpeAOCC-22.08.eb)</p> </li> <li> <p>gzip/1.12-cpeAOCC-22.12 (EasyConfig: gzip-1.12-cpeAOCC-22.12.eb)</p> </li> <li> <p>gzip/1.12-cpeAOCC-23.09 (EasyConfig: gzip-1.12-cpeAOCC-23.09.eb)</p> </li> <li> <p>gzip/1.12-cpeAOCC-23.12 (EasyConfig: gzip-1.12-cpeAOCC-23.12.eb)</p> </li> <li> <p>gzip/1.12-cpeCray-22.08 (EasyConfig: gzip-1.12-cpeCray-22.08.eb)</p> </li> <li> <p>gzip/1.12-cpeCray-22.12 (EasyConfig: gzip-1.12-cpeCray-22.12.eb)</p> </li> <li> <p>gzip/1.12-cpeCray-23.03 (EasyConfig: gzip-1.12-cpeCray-23.03.eb)</p> </li> <li> <p>gzip/1.12-cpeCray-23.09 (EasyConfig: gzip-1.12-cpeCray-23.09.eb)</p> </li> <li> <p>gzip/1.12-cpeCray-23.12 (EasyConfig: gzip-1.12-cpeCray-23.12.eb)</p> </li> <li> <p>gzip/1.12-cpeGNU-22.08 (EasyConfig: gzip-1.12-cpeGNU-22.08.eb)</p> </li> <li> <p>gzip/1.12-cpeGNU-22.12 (EasyConfig: gzip-1.12-cpeGNU-22.12.eb)</p> </li> <li> <p>gzip/1.12-cpeGNU-23.09 (EasyConfig: gzip-1.12-cpeGNU-23.09.eb)</p> </li> <li> <p>gzip/1.12-cpeGNU-23.12 (EasyConfig: gzip-1.12-cpeGNU-23.12.eb)</p> </li> <li> <p>gzip/1.13-cpeAMD-24.03 (EasyConfig: gzip-1.13-cpeAMD-24.03.eb)</p> </li> <li> <p>gzip/1.13-cpeAOCC-24.03 (EasyConfig: gzip-1.13-cpeAOCC-24.03.eb)</p> </li> <li> <p>gzip/1.13-cpeCray-24.03 (EasyConfig: gzip-1.13-cpeCray-24.03.eb)</p> </li> <li> <p>gzip/1.13-cpeGNU-24.03 (EasyConfig: gzip-1.13-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"g/gzip/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>gzip home page on gnu,org</p> <ul> <li>Download gzip from the GNU site</li> </ul> </li> <li> <p>Alternative gzip home page at gzip.org</p> </li> </ul>","boost":10},{"location":"g/gzip/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>gzip support in the EasyBuilders repository</p> </li> <li> <p>There is no gzip in the CSCS repository</p> </li> </ul>","boost":10},{"location":"g/gzip/#110-from-cpe-2106-on","title":"1.10 from CPE 21.06 on","text":"<ul> <li> <p>Standard EasyConfig converted to the LUMI conventions.</p> </li> <li> <p>On Cray one of the tests in configure fails on LUMI/C. This is because     the compiler always prints a message that znver3 is not yet supported     for optimisation. There are two possible solutions</p> <ul> <li>Either change some modules so that crape-x86-rome is loaded on all     LUMI nodes until the Cray compiler supports zen3, which is tricky as     it is likely EasyBuild has the last word and that option is the same     for all Cray environments.</li> <li>Disable the warning via extra_cflags which is what we have done here.</li> </ul> </li> </ul>","boost":10},{"location":"g/gzip/#112-from-cpe-2206-on","title":"1.12 from CPE 22.06 on","text":"<ul> <li> <p>Trivial port of the EasyConfig.</p> </li> <li> <p>The extra flag to deal with problems with zen3 optimisation is no longer needed.</p> </li> <li> <p>For LUMI/23.12 license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"g/gzip/#113-from-lumi2403-on","title":"1.13 from LUMI/24.03 on","text":"<ul> <li>Trivial port of the EasyConfig for 1.12 in LUMI/23.12. </li> </ul>","boost":10},{"location":"g/gzip/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig gzip-1.10-cpeAMD-21.06.eb, with module gzip/1.10-cpeAMD-21.06</p> </li> <li> <p>EasyConfig gzip-1.10-cpeAOCC-21.12.eb, with module gzip/1.10-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig gzip-1.10-cpeCray-21.06.eb, with module gzip/1.10-cpeCray-21.06</p> </li> <li> <p>EasyConfig gzip-1.10-cpeCray-21.08.eb, with module gzip/1.10-cpeCray-21.08</p> </li> <li> <p>EasyConfig gzip-1.10-cpeCray-21.12.eb, with module gzip/1.10-cpeCray-21.12</p> </li> <li> <p>EasyConfig gzip-1.10-cpeGNU-21.06.eb, with module gzip/1.10-cpeGNU-21.06</p> </li> <li> <p>EasyConfig gzip-1.10-cpeGNU-21.08.eb, with module gzip/1.10-cpeGNU-21.08</p> </li> <li> <p>EasyConfig gzip-1.10-cpeGNU-21.12.eb, with module gzip/1.10-cpeGNU-21.12</p> </li> <li> <p>EasyConfig gzip-1.12-cpeAOCC-22.06.eb, with module gzip/1.12-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig gzip-1.12-cpeCray-22.06.eb, with module gzip/1.12-cpeCray-22.06</p> </li> <li> <p>EasyConfig gzip-1.12-cpeGNU-22.06.eb, with module gzip/1.12-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"h/HDF/","title":"HDF","text":"<p>[package list]</p>","boost":10},{"location":"h/HDF/#hdf","title":"HDF","text":"","boost":10},{"location":"h/HDF/#license-information","title":"License information","text":"<p>The HDF libraries are distributed under a BSD-style open source license. The license information can be found in the source files in a file called COPYING.  Until the link dies (as the package is no longer supported), a copy is also available on the web.</p> <p>After installing and loading the module, the license file can also be found on the system  as <code>$EBROOTHDF/share/licenses/HDF/COPYING</code>.</p>","boost":10},{"location":"h/HDF/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider HDF/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig HDF-4.2.16-2-cpeGNU-23.09.eb, will build HDF/4.2.16-2-cpeGNU-23.09</p> </li> <li> <p>EasyConfig HDF-4.2.16-2-cpeGNU-24.03.eb, will build HDF/4.2.16-2-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"h/HDF/#technical-documentation","title":"Technical documentation","text":"<p>This is a module for those packages that would still use the old HDF4 format.</p> <p>Its main use seems to be as a dependency for GDAL. One should not develop new code  using it.</p> <ul> <li>HDF(4) web site</li> </ul>","boost":10},{"location":"h/HDF/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for HDF in the EasyBuilders repository</p> </li> <li> <p>Support for HDF in the CSCS repository</p> </li> </ul>","boost":10},{"location":"h/HDF/#version-4215-for-cpegnu-2208-and-later","title":"Version 4.2.15 for cpeGNU 22.08 and later","text":"<ul> <li>The EasyConfig is a mix of the CSCS and EasyBuilder ones.</li> </ul>","boost":10},{"location":"h/HDF/#version-4216-2-for-cpegnu-2309-and-later","title":"Version 4.2.16-2 for cpeGNU 23.09 and later","text":"<ul> <li>Trivial port of the EasyConfig for 4.2.15</li> </ul>","boost":10},{"location":"h/HDF/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig HDF-4.2.15-cpeGNU-22.08.eb, with module HDF/4.2.15-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"h/HTSlib/","title":"HTSlib","text":"<p>[package list]</p>","boost":10},{"location":"h/HTSlib/#htslib","title":"HTSlib","text":"","boost":10},{"location":"h/HTSlib/#license-information","title":"License information","text":"<p>Source files of HTSlib are covered by different licesnes. Some source files are covered by the MIT/Expat license while others are covered by a modifed 3-clause BSD license.</p> <p>See the LICENSE file in the GitHub repository for complete information.</p> <p>Please also note the \"Citing\" section in the README file in that repository: users are asked to cite a particular paper when usig HTSlib for publications.</p> <p>After installation of the package and loading of the module, the LICENSE and README  files are available in <code>$EBROOTHTSLIB/share/licenses/HTSlib</code> (from version 1.17  on).</p>","boost":10},{"location":"h/HTSlib/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider HTSlib/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig HTSlib-1.18-cpeGNU-23.09.eb, will build HTSlib/1.18-cpeGNU-23.09</p> </li> <li> <p>EasyConfig HTSlib-1.19.1-cpeGNU-24.03.eb, will build HTSlib/1.19.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"h/HTSlib/#technical-documentation","title":"Technical documentation","text":"<ul> <li>HTSlib home page</li> <li>Development on GitHub<ul> <li>HTSlib GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"h/HTSlib/#general-information","title":"General information","text":"<ul> <li>HTSlib is the underlying library of SAMtools</li> <li>The build process creates three binaries, a shared and a static library.</li> <li>HTSlib dependencies:<ul> <li>zlib</li> <li>libdeflate can substitute for zlib for zlib compression</li> <li>libbz2</li> <li>liblzma</li> <li>libcurl: Optional but recommended for network access.</li> <li>libcrypto: We always take this one from the OS to ensure that security patches     are applied.</li> </ul> </li> </ul>","boost":10},{"location":"h/HTSlib/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for HTSlib in the EasyBuilders repository</p> </li> <li> <p>There is no support for HTSlib in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"h/HTSlib/#version-114-for-cpegnu-2112","title":"Version 1.14 for cpeGNU 21.12","text":"<ul> <li>We started from the EasyBuilders EasyConfig for the 2021b common     toolchains but added documentation from UAntwerpen.</li> </ul>","boost":10},{"location":"h/HTSlib/#version-1151-for-cpegnu-2112","title":"Version 1.15.1 for cpeGNU 21.12","text":"<ul> <li>Trivial version bump, but we now also unload a few modules that are     not needed for compilation, just in case that would solve some problems     detected on LUMI.</li> </ul>","boost":10},{"location":"h/HTSlib/#version-1151-for-cpegnu-2206-and-2208","title":"Version 1.15.1 for cpeGNU 22.06 and 22.08","text":"<ul> <li> <p>Switched from zlib to libdeflate for zlib compression based on a recommendation on the SAMtools     documentation page \"A comparison of zlib implementations\".</p> <p>The zlib module still comes in as a dependency through other libraries, but this does not seem to be a problem as the configure script indicates the APIs are different (looking  at the tests).</p> </li> <li> <p>Checked the configure options, leading to a new <code>configopts</code> line. S3 and Google      Cloud Integration were not tested, so it is not clear if this fully works or not.</p> </li> </ul>","boost":10},{"location":"h/HTSlib/#version-117-for-cpegnu-2212","title":"Version 1.17 for cpeGNU 22.12","text":"<ul> <li> <p>Trivial port of the EasyConfig for 1.15.1.</p> </li> <li> <p>Some reworking for our system to update versions of dependencies.</p> </li> <li> <p>Some reworking to also copy the LICENSE and README files to the system.</p> </li> </ul>","boost":10},{"location":"h/HTSlib/#version-118-from-2309-on","title":"Version 1.18 from 23.09 on","text":"<ul> <li>Trivial port of the 1.17 EasyConfig</li> </ul>","boost":10},{"location":"h/HTSlib/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig HTSlib-1.14-cpeGNU-21.12.eb, with module HTSlib/1.14-cpeGNU-21.12</p> </li> <li> <p>EasyConfig HTSlib-1.15.1-cpeGNU-21.12.eb, with module HTSlib/1.15.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig HTSlib-1.15.1-cpeGNU-22.06.eb, with module HTSlib/1.15.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig HTSlib-1.15.1-cpeGNU-22.08.eb, with module HTSlib/1.15.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig HTSlib-1.17-cpeGNU-22.12.eb, with module HTSlib/1.17-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"h/HarfBuzz/","title":"HarfBuzz","text":"<p>[package list]</p>","boost":10},{"location":"h/HarfBuzz/#harfbuzz","title":"HarfBuzz","text":"","boost":10},{"location":"h/HarfBuzz/#license-information","title":"License information","text":"<p>HArfBuzz is licensed under the so-called \"Old MIT\" license.</p> <p>See the  COPYING file in the GitHub repository.</p>","boost":10},{"location":"h/HarfBuzz/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider HarfBuzz/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>HarfBuzz/4.2.1-cpeAMD-22.08 (EasyConfig: HarfBuzz-4.2.1-cpeAMD-22.08.eb)</p> </li> <li> <p>HarfBuzz/4.2.1-cpeAOCC-22.08 (EasyConfig: HarfBuzz-4.2.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>HarfBuzz/4.2.1-cpeCray-22.08 (EasyConfig: HarfBuzz-4.2.1-cpeCray-22.08.eb)</p> </li> <li> <p>HarfBuzz/4.2.1-cpeGNU-22.08 (EasyConfig: HarfBuzz-4.2.1-cpeGNU-22.08.eb)</p> </li> <li> <p>HarfBuzz/5.3.1-cpeAMD-22.12 (EasyConfig: HarfBuzz-5.3.1-cpeAMD-22.12.eb)</p> </li> <li> <p>HarfBuzz/5.3.1-cpeAOCC-22.12 (EasyConfig: HarfBuzz-5.3.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>HarfBuzz/5.3.1-cpeAOCC-23.09 (EasyConfig: HarfBuzz-5.3.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>HarfBuzz/5.3.1-cpeCray-22.12 (EasyConfig: HarfBuzz-5.3.1-cpeCray-22.12.eb)</p> </li> <li> <p>HarfBuzz/5.3.1-cpeCray-23.03 (EasyConfig: HarfBuzz-5.3.1-cpeCray-23.03.eb)</p> </li> <li> <p>HarfBuzz/5.3.1-cpeGNU-22.12 (EasyConfig: HarfBuzz-5.3.1-cpeGNU-22.12.eb)</p> </li> <li> <p>HarfBuzz/5.3.1-cpeGNU-23.09 (EasyConfig: HarfBuzz-5.3.1-cpeGNU-23.09.eb)</p> </li> <li> <p>HarfBuzz/8.2.2-cpeAMD-23.12 (EasyConfig: HarfBuzz-8.2.2-cpeAMD-23.12.eb)</p> </li> <li> <p>HarfBuzz/8.2.2-cpeAMD-24.03 (EasyConfig: HarfBuzz-8.2.2-cpeAMD-24.03.eb)</p> </li> <li> <p>HarfBuzz/8.2.2-cpeAOCC-23.12 (EasyConfig: HarfBuzz-8.2.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>HarfBuzz/8.2.2-cpeAOCC-24.03 (EasyConfig: HarfBuzz-8.2.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>HarfBuzz/8.2.2-cpeCray-23.12 (EasyConfig: HarfBuzz-8.2.2-cpeCray-23.12.eb)</p> </li> <li> <p>HarfBuzz/8.2.2-cpeCray-24.03 (EasyConfig: HarfBuzz-8.2.2-cpeCray-24.03.eb)</p> </li> <li> <p>HarfBuzz/8.2.2-cpeGNU-23.12 (EasyConfig: HarfBuzz-8.2.2-cpeGNU-23.12.eb)</p> </li> <li> <p>HarfBuzz/8.2.2-cpeGNU-24.03 (EasyConfig: HarfBuzz-8.2.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"h/HarfBuzz/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>HarfBuzz web site</p> </li> <li> <p>HarfBuzz on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"h/HarfBuzz/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>HarfBuzz support in the EasyBuilders repository</p> </li> <li> <p>Three is no HarfBuzz support in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"h/HarfBuzz/#version-282-for-cpe-2108","title":"Version 2.8.2 for cpe 21.08","text":"<ul> <li> <p>It was a deliberate choice to stick to version 2.8.2 even though there     was already a 3.1.1 version. There were API changes in version 3.0.0 (and     the 2.9 versions which were really a preparation for 3.0) so there were     concerns that it might break builds.</p> </li> <li> <p>The EasyConfig is a mix of the EasyBuilders and UAntwerpen ones.</p> </li> </ul>","boost":10},{"location":"h/HarfBuzz/#version-421-for-cpe-2206","title":"Version 4.2.1 for CPE 22.06","text":"<ul> <li> <p>Last-minute update to align with the 2022a toolchains in EasyBuild 4.6.0.</p> </li> <li> <p>Sources taken from where we took them before rather than using the sources     statements from the EasyBuild 4.6.0 version as that one produced problems     during the configure step.</p> </li> </ul>","boost":10},{"location":"h/HarfBuzz/#version-531-from-cpe-2212-on","title":"Version 5.3.1 from CPE 22.12 on","text":"<ul> <li>Trivial port of the 4.2.1 EasyConfig.</li> </ul>","boost":10},{"location":"h/HarfBuzz/#version-822-from-lumi2312-on","title":"Version 8.2.2 from LUMI/23.12 on","text":"<ul> <li> <p>Almost trivial port of the 5.3.1 EasyConfig for 22.12, but added license      information. </p> </li> <li> <p>Upgraded already for LUMI/23.12 as this version compiles with the Cray compiler.</p> </li> </ul>","boost":10},{"location":"h/HarfBuzz/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig HarfBuzz-2.8.2-cpeAOCC-21.12.eb, with module HarfBuzz/2.8.2-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig HarfBuzz-2.8.2-cpeCray-21.08.eb, with module HarfBuzz/2.8.2-cpeCray-21.08</p> </li> <li> <p>EasyConfig HarfBuzz-2.8.2-cpeCray-21.12.eb, with module HarfBuzz/2.8.2-cpeCray-21.12</p> </li> <li> <p>EasyConfig HarfBuzz-2.8.2-cpeGNU-21.08.eb, with module HarfBuzz/2.8.2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig HarfBuzz-2.8.2-cpeGNU-21.12.eb, with module HarfBuzz/2.8.2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig HarfBuzz-4.2.1-cpeAOCC-22.06.eb, with module HarfBuzz/4.2.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig HarfBuzz-4.2.1-cpeCray-22.06.eb, with module HarfBuzz/4.2.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig HarfBuzz-4.2.1-cpeGNU-22.06.eb, with module HarfBuzz/4.2.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"h/HeFFTe/","title":"HeFFTe","text":"<p>[package list]</p>","boost":10},{"location":"h/HeFFTe/#heffte","title":"HeFFTe","text":"","boost":10},{"location":"h/HeFFTe/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider HeFFTe/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig HeFFTe-2.4.0-cpeAMD-23.09-rocm.eb, will build HeFFTe/2.4.0-cpeAMD-23.09-rocm</p> </li> <li> <p>EasyConfig HeFFTe-2.4.0-cpeAMD-24.03-rocm.eb, will build HeFFTe/2.4.0-cpeAMD-24.03-rocm</p> </li> </ul>","boost":10},{"location":"h/HeFFTe/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig HeFFTe-2.3.0-cpeAMD-22.12-rocm-5.2.3.eb, with module HeFFTe/2.3.0-cpeAMD-22.12-rocm-5.2.3</p> </li> <li> <p>EasyConfig HeFFTe-2.3.0-cpeGNU-22.12-rocm-5.2.3.eb, with module HeFFTe/2.3.0-cpeGNU-22.12-rocm-5.2.3</p> </li> <li> <p>EasyConfig HeFFTe-2.4.0-cpeAMD-22.12-rocm-5.2.3.eb, with module HeFFTe/2.4.0-cpeAMD-22.12-rocm-5.2.3</p> </li> <li> <p>EasyConfig HeFFTe-2.4.0-cpeAMD-23.09-rocm-5.6.1.eb, with module HeFFTe/2.4.0-cpeAMD-23.09-rocm-5.6.1</p> </li> </ul> </li> </ul>","boost":10},{"location":"h/HyperQueue/","title":"HyperQueue","text":"<p>[package list]</p>","boost":10},{"location":"h/HyperQueue/#hyperqueue","title":"HyperQueue","text":"","boost":10},{"location":"h/HyperQueue/#license-information","title":"License information","text":"<p>HyperQueue is licensed under the MIT License. See the LICENSE file in the GitHub repositorty.</p> <p>From version 0.17.0 on, the LICENSE file is also available in <code>$EBROOTHYPERQUEUE/share/licenses/HyperQueue</code> after installation of the package and loading of the module.</p>","boost":10},{"location":"h/HyperQueue/#user-documentation","title":"User documentation","text":"<p>HyperQueue is software developed at LUMI-partner IT4Innovations.</p> <p>It is a tool designed to simplify execution of large workflows on HPC clusters.  It allows you to execute a large number of tasks in a simple way, without having  to manually submit jobs into batch schedulers like PBS or Slurm. You just specify  what you want to compute \u2013 HyperQueue will automatically ask for computational  resources and dynamically load-balance tasks across all allocated nodes and cores. Hence it is one of the tools that can be used to work around the strict limits for the number of jobs for the Slurm scheduler on LUMI.</p> <p>Besides the user documentation you may also want to have a look at the  change log of the code as breaking changes do occur from time to time.</p>","boost":10},{"location":"h/HyperQueue/#installation","title":"Installation","text":"<p>HyperQueue requires Rust as a dependency. Hence each version has a preferred version of the LUMI software stack. However, from HyperQueue 0.17.0 on, we try  to build our Rust build recipes so that they can also be installed in other than the intended versions of the LUMI stack, using a different version of the buildtools that are needed to compile Rust. We have not tested those combinations though.</p> <p>As HyperQueue doesn't really benefit from processor-specific optimisations (and Rust as a compiler isn't run frequently so doesn't really need it either) we suggest the following slightly non-standard procedures to install HyperQueue: To install in a LUMI software stack, use <code>partition/common</code>, and afterwards HyperQueue will be available in all main partitions of the software stack with just a single install.</p> <p>E.g., HyperQueue 0.17.0 was tested specifically in LUMI/23.09 (as can be seen if you open the EasyConfig via the links on this page). So one can install it as follows:</p> <pre><code>module load LUMI/23.09 partition/common\nmodule load EasyBuild-user\neb HyperQueue-0.17.0.eb -r\n</code></pre> <p>This will also install the required version of the Rust compiler first which is actually a rather time-consuming thing, so don't be surprised if the build takes one hour.</p> <p>After a successful installation, Rust and HyperQueue will be available in  all partitions of the LUMI/23.09 stack. </p> <p>Installation of HyperQueue 0.17.0 or later may work in other versions of the LUMI stack also but this has not been tested neither do we support it.</p>","boost":10},{"location":"h/HyperQueue/#training-materials","title":"Training materials","text":"<ul> <li>HyperQueue was discussed during the     January 31, 2024 LUMI User Coffee Break.</li> </ul>","boost":10},{"location":"h/HyperQueue/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider HyperQueue/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig HyperQueue-0.16.0.eb, will build HyperQueue/0.16.0</p> </li> <li> <p>EasyConfig HyperQueue-0.17.0.eb, will build HyperQueue/0.17.0</p> </li> <li> <p>EasyConfig HyperQueue-0.19.0.eb, will build HyperQueue/0.19.0</p> </li> </ul>","boost":10},{"location":"h/HyperQueue/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>HyperQueye home page and documentation</p> </li> <li> <p>HyperQueue GitHub</p> <ul> <li> <p>GitHub releases</p> </li> <li> <p>Check the change log on GitHub</p> </li> </ul> </li> <li> <p>Guide for Cargo, the package manager used to install HyperQueue</p> </li> </ul>","boost":10},{"location":"h/HyperQueue/#installation_1","title":"Installation","text":"<ul> <li> <p>HyperQueue is installed via the Rust package manager <code>cargo</code> which in its     default setup may not be compatible with the file systems on the cluster as     it needs <code>$HOME/.cargo</code> and will try to lock a file in there. This does not     work on GPFS. It does work on a Lustre file system though.</p> <p>The workaround is to use the CARGO_HOME environment variable and to point to a file system where locking is possible. It does work pointing to a subdirectory in <code>$XDG_RUNTIME_DIR</code>.</p> </li> <li> <p>Add the end of the build with <code>cargo build --release</code>, the <code>hq</code> executable     can be found in <code>target/release</code> in the source directory.</p> </li> </ul>","boost":10},{"location":"h/HyperQueue/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for HyperQueue in the EasyBuilders repository</p> </li> <li> <p>There is no support for HyperQueue in the CSCS repository</p> </li> </ul> <p>We build our own EasyConfig. Two big warnings are needed though:</p> <ul> <li> <p>It would likely not pass the criteria set forward by the EasyBuild community for     inclusion as the build process itself downloads a lot of files. It is very hard to     figure out which files are neede and where they can be put in a way that <code>cargo</code>     can find them, if this is possible at all.</p> <p>As a result of this there is no way to get this to work on a cluster that does not allow outgoing https connections.</p> <p>It also implies that it might be impossible to reproduce the build at a later time as not all sources are stored locally. So if the sources that are downloaded change or are removed, the build may produce a different result or fail alltogether.</p> </li> <li> <p>The <code>cargo</code> command needs a directory in which it can lock files which may not be     possible on all file systems. We currently redirect cargo to the file system used     for <code>EASYBUILD_BUILDPATH</code> as that is often on a local tmp directory or RAM disk     that supports file locking. Building on GPFS fails.</p> </li> </ul>","boost":10},{"location":"h/HyperQueue/#040-for-2108","title":"0.4.0 for 21.08","text":"<ul> <li> <p>We created our own EasyConfig file using the generic <code>CmdCp</code> EasyBlock.</p> <ul> <li> <p>In the build phase we execute the <code>cargo build --release</code> command via the     command map (and first create the directory that we point to with <code>CARGO_HOME</code>)</p> </li> <li> <p>In the install step we copy the binary.</p> </li> </ul> </li> <li> <p>As this is not performance-critical software and as it should work with all toolchains     and on all partitions, we decided to use the system compilers and install in     <code>partition/common</code>.</p> </li> <li> <p>As EasyBuild doesn't support Rust, we have to set the target CPU by hand or rely on the     default which should be to compile to the current CPU. To ensure compatibility with all     nodes of LUMI we currently set '<code>RUSTFLAGS=\"-C target-cpu=znver2\"</code>'. You will have to change     <code>cmds_map</code> for other platforms or to simply compile to the CPU target that the compile is     run on.</p> </li> </ul>","boost":10},{"location":"h/HyperQueue/#050-for-2108","title":"0.5.0 for 21.08","text":"<ul> <li>This is a trivial edit of the 0.4.0 one.</li> </ul>","boost":10},{"location":"h/HyperQueue/#0160-for-use-with-rust1700","title":"0.16.0 for use with Rust/1.70.0","text":"<ul> <li>Trivial modification of the 0.5.0 one, but we do take extra care to avoid picking up      toolchain components.</li> </ul>","boost":10},{"location":"h/HyperQueue/#0170-for-use-with-rust1750","title":"0.17.0 for use with Rust/1.75.0","text":"<ul> <li>Trivial modification of the 0.16.0. However, we now also copy the LICENSE and CHANGELOG.md     files to the software installation and took care to warn for a breaking change in the help     information of the module.</li> </ul>","boost":10},{"location":"h/HyperQueue/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig HyperQueue-0.4.0.eb, with module HyperQueue/0.4.0</p> </li> <li> <p>EasyConfig HyperQueue-0.5.0.eb, with module HyperQueue/0.5.0</p> </li> </ul> </li> </ul>","boost":10},{"location":"h/Hypre/","title":"Hypre","text":"<p>[package list]</p>","boost":10},{"location":"h/Hypre/#hypre","title":"Hypre","text":"","boost":10},{"location":"h/Hypre/#license-information","title":"License information","text":"<p>HYPRE is distributed under the terms of both the MIT license and the Apache License (Version 2.0). Users may choose either license, at their option.</p> <p>All new contributions must be made under both the MIT and Apache-2.0 licenses.</p> <p>See  README.md, LICENSE-MIT,  LICENSE-APACHE,  COPYRIGHT, and  NOTICE in the GitHub repository for details.</p>","boost":10},{"location":"h/Hypre/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Hypre/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Hypre-2.26.0-cpeGNU-23.09.eb, will build Hypre/2.26.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig Hypre-2.31.0-cpeGNU-24.03.eb, will build Hypre/2.31.0-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"h/Hypre/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>HYPRE web site</p> </li> <li> <p>HYPRE GitHub repo</p> <ul> <li>GitHub releases via tags</li> </ul> </li> </ul>","boost":10},{"location":"h/Hypre/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>HYPRE support in the EasyBuilders repository</p> </li> <li> <p>There is no HYPRE support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"h/Hypre/#version-2260-for-cpegnu-2208","title":"Version 2.26.0 for cpeGNU 22.08","text":"<ul> <li>The EasyConfig is adapted from those in the EasyBuilders repository.</li> </ul>","boost":10},{"location":"h/Hypre/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Hypre-2.26.0-cpeGNU-22.08.eb, with module Hypre/2.26.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig Hypre-2.26.0-cpeGNU-22.12.eb, with module Hypre/2.26.0-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"h/h5py/","title":"h5py","text":"<p>[package list]</p>","boost":10},{"location":"h/h5py/#h5py","title":"h5py","text":"","boost":10},{"location":"h/h5py/#license-information","title":"License information","text":"<p>The h5py package is covered by a BSD 3-clause license, a copy of which can be found in the LICENSE file in the GitHub repository.</p>","boost":10},{"location":"h/h5py/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider h5py/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig h5py-3.11.0-cpeGNU-24.03-parallel.eb, will build h5py/3.11.0-cpeGNU-24.03-parallel</p> </li> <li> <p>EasyConfig h5py-3.11.0-cpeGNU-24.03.eb, will build h5py/3.11.0-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"h/h5py/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>h5py web site</p> <ul> <li>h5py Documentation</li> </ul> </li> <li> <p>h5py on GitHub</p> </li> <li> <p>h5py on PyPi</p> </li> </ul>","boost":10},{"location":"h/h5py/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>h5py support in the EasyBuilders repository</p> </li> <li> <p>h5py support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"h/h5py/#version-360-for-cpe-gnu-2208","title":"Version 3.6.0 for CPE GNU 22.08","text":"<ul> <li>Is taken from the CSCS repository</li> </ul>","boost":10},{"location":"h/h5py/#version-370-for-cpe-2208","title":"Version 3.7.0 for CPE 22.08","text":"<ul> <li>Based on CSCS version with additional information added</li> </ul>","boost":10},{"location":"h/h5py/#version-3110-for-cpe-2403","title":"Version 3.11.0 for CPE 24.03","text":"<ul> <li>Based on previous easyconfigs</li> </ul>","boost":10},{"location":"h/h5py/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig h5py-3.6.0-cpeGNU-22.08-parallel.eb, with module h5py/3.6.0-cpeGNU-22.08-parallel</p> </li> <li> <p>EasyConfig h5py-3.7.0-cpeAMD-22.08-parallel.eb, with module h5py/3.7.0-cpeAMD-22.08-parallel</p> </li> <li> <p>EasyConfig h5py-3.7.0-cpeCray-22.08-parallel.eb, with module h5py/3.7.0-cpeCray-22.08-parallel</p> </li> <li> <p>EasyConfig h5py-3.7.0-cpeGNU-22.08-parallel.eb, with module h5py/3.7.0-cpeGNU-22.08-parallel</p> </li> </ul> </li> </ul>","boost":10},{"location":"h/hipSYCL/","title":"hipSYCL","text":"<p>[package list]</p>","boost":10},{"location":"h/hipSYCL/#hipsycl","title":"hipSYCL","text":"","boost":10},{"location":"h/hipSYCL/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig hipSYCL-0.9.3-cpeGNU-22.08.eb, with module hipSYCL/0.9.3-cpeGNU-22.08</p> </li> <li> <p>EasyConfig hipSYCL-0.9.4-cpeAMD-22.12-rocm-5.2.3.eb, with module hipSYCL/0.9.4-cpeAMD-22.12-rocm-5.2.3</p> </li> <li> <p>EasyConfig hipSYCL-0.9.4-cpeGNU-22.08.eb, with module hipSYCL/0.9.4-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"h/hipfort/","title":"hipfort","text":"<p>[package list]</p>","boost":10},{"location":"h/hipfort/#hipfort","title":"hipfort","text":"","boost":10},{"location":"h/hipfort/#license-information","title":"License information","text":"<p>hipfort is released under the MITx11 License. A copy of the license can be found in the hipfort Github repository.</p>","boost":10},{"location":"h/hipfort/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider hipfort/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig hipfort-0.4-0-cpeCray-23.09.eb, will build hipfort/0.4-0-cpeCray-23.09</p> </li> <li> <p>EasyConfig hipfort-0.4-0-cpeCray-23.12.eb, will build hipfort/0.4-0-cpeCray-23.12</p> </li> <li> <p>EasyConfig hipfort-0.4-0-cpeCray-24.03.eb, will build hipfort/0.4-0-cpeCray-24.03</p> </li> </ul>","boost":10},{"location":"h/hipfort/#technical-documentation","title":"Technical documentation","text":"<ul> <li>hipfort web site</li> <li>hipfort on GitHub</li> </ul>","boost":10},{"location":"h/hipfort/#easybuild","title":"EasyBuild","text":"<ul> <li>No support in the EasyBuilders repository at the time of writing.</li> <li>No support in the CSCS repository at the time of writing.</li> </ul>","boost":10},{"location":"h/hipfort/#version-040-for-cpecray-2208-2212-and-2303-archived","title":"Version 0.4.0 for cpeCray 22.08, 22.12 and 23.03 (archived)","text":"<ul> <li>Custom easyconfig created for LUMI</li> </ul>","boost":10},{"location":"h/hipfort/#version-040-for-cpecray-2309-2312-and-2403","title":"Version 0.4.0 for cpeCray 23.09, 23.12 and 24.03","text":"<ul> <li>Port for previous CPE versions with additional patch to support ROCm 6.</li> </ul>","boost":10},{"location":"h/hipfort/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig hipfort-0.4-0-cpeCray-22.08-rocm5.2.eb, with module hipfort/0.4-0-cpeCray-22.08-rocm5.2</p> </li> <li> <p>EasyConfig hipfort-0.4-0-cpeCray-22.08-rocm5.3.eb, with module hipfort/0.4-0-cpeCray-22.08-rocm5.3</p> </li> <li> <p>EasyConfig hipfort-0.4-0-cpeCray-22.12-rocm5.2.eb, with module hipfort/0.4-0-cpeCray-22.12-rocm5.2</p> </li> <li> <p>EasyConfig hipfort-0.4-0-cpeCray-23.03-rocm5.2.eb, with module hipfort/0.4-0-cpeCray-23.03-rocm5.2</p> </li> </ul> </li> </ul>","boost":10},{"location":"h/hpcat/","title":"hpcat","text":"<p>[package list]</p>","boost":10},{"location":"h/hpcat/#hpcat","title":"hpcat","text":"","boost":10},{"location":"h/hpcat/#user-documentation","title":"User documentation","text":"<p><code>hpcat</code> is a tool developed by HPE to display process and thread distribution and binding on LUMI and other clusters.</p> <p>The tool is currently considered a bit experimental and only offered for use in the Cray Compilation Environment. Since the default OpenMP thread-to-core binding depends on the compiler, the tool may not produce the right result to check binding for a program compiled with a different compiler. It is an alternative to the tools offered in lumi-CPEtools with the advantage that it can also give information about the binding to NICs on the LUMI GPU nodes.</p> <p>Over time, it will be integrated in a new version of the  lumi-CPEtools module and not be maintained anymore as a separate user-installable program.</p>","boost":10},{"location":"h/hpcat/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider hpcat/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig hpcat-0.1-cpeCray-24.03.eb, will build hpcat/0.1-cpeCray-24.03</li> </ul>","boost":10},{"location":"h/hpcat/#technical-documentation","title":"Technical documentation","text":"<p><code>hpcat</code> is a program developed by HPE in their support teams for supercomputer centres and is currently not open-sourced. It is currently installed from binaries.</p>","boost":10},{"location":"h/hpcat/#version-10-for-cpecray-in-lumi2403","title":"Version 1.0 for cpeCray in LUMI/24.03","text":"<ul> <li>The EasyConfig is a LUST development. Currently this is just installing     the binaries from a tar file prepared by HPE.</li> </ul>","boost":10},{"location":"i/ICU/","title":"ICU","text":"<p>[package list]</p>","boost":10},{"location":"i/ICU/#icu","title":"ICU","text":"","boost":10},{"location":"i/ICU/#license-information","title":"License information","text":"<p>ICU is released under a restricted open source license. The license can be found in the LICENSE file in the icu4c subidrecitroy in the GitHub repository.</p> <p>Some more legalese covering Unicode can be found on the Unicode Copyright and Terms of Use page on their web site.</p> <p>From LUMI/23.12 on, the LICENSE file can also be found in the subdirectory <code>$EBROOTICU/share/licenses/ICU</code> after loading the module.</p>","boost":10},{"location":"i/ICU/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider ICU/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>ICU/71.1-cpeAMD-22.08 (EasyConfig: ICU-71.1-cpeAMD-22.08.eb)</p> </li> <li> <p>ICU/71.1-cpeAOCC-22.08 (EasyConfig: ICU-71.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>ICU/71.1-cpeCray-22.08 (EasyConfig: ICU-71.1-cpeCray-22.08.eb)</p> </li> <li> <p>ICU/71.1-cpeGNU-22.08 (EasyConfig: ICU-71.1-cpeGNU-22.08.eb)</p> </li> <li> <p>ICU/72.1-cpeAMD-22.12 (EasyConfig: ICU-72.1-cpeAMD-22.12.eb)</p> </li> <li> <p>ICU/72.1-cpeAOCC-22.12 (EasyConfig: ICU-72.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>ICU/72.1-cpeCray-22.12 (EasyConfig: ICU-72.1-cpeCray-22.12.eb)</p> </li> <li> <p>ICU/72.1-cpeCray-23.03 (EasyConfig: ICU-72.1-cpeCray-23.03.eb)</p> </li> <li> <p>ICU/72.1-cpeGNU-22.12 (EasyConfig: ICU-72.1-cpeGNU-22.12.eb)</p> </li> <li> <p>ICU/73.2-cpeAMD-23.09 (EasyConfig: ICU-73.2-cpeAMD-23.09.eb)</p> </li> <li> <p>ICU/73.2-cpeAMD-23.12 (EasyConfig: ICU-73.2-cpeAMD-23.12.eb)</p> </li> <li> <p>ICU/73.2-cpeAOCC-23.09 (EasyConfig: ICU-73.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>ICU/73.2-cpeAOCC-23.12 (EasyConfig: ICU-73.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>ICU/73.2-cpeCray-23.09 (EasyConfig: ICU-73.2-cpeCray-23.09.eb)</p> </li> <li> <p>ICU/73.2-cpeCray-23.12 (EasyConfig: ICU-73.2-cpeCray-23.12.eb)</p> </li> <li> <p>ICU/73.2-cpeGNU-23.09 (EasyConfig: ICU-73.2-cpeGNU-23.09.eb)</p> </li> <li> <p>ICU/73.2-cpeGNU-23.12 (EasyConfig: ICU-73.2-cpeGNU-23.12.eb)</p> </li> <li> <p>ICU/74.1-cpeAMD-24.03 (EasyConfig: ICU-74.1-cpeAMD-24.03.eb)</p> </li> <li> <p>ICU/74.1-cpeAOCC-24.03 (EasyConfig: ICU-74.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>ICU/74.1-cpeCray-24.03 (EasyConfig: ICU-74.1-cpeCray-24.03.eb)</p> </li> <li> <p>ICU/74.1-cpeGNU-24.03 (EasyConfig: ICU-74.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"i/ICU/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>ICU home page</p> <ul> <li>Downloads from the ICU home page</li> </ul> </li> <li> <p>ICU on GitHub</p> <ul> <li>GitHub releases of ICU</li> </ul> </li> </ul>","boost":10},{"location":"i/ICU/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ICU support in the EasyBuilders repository</p> </li> <li> <p>ICU is not in the CSCS repository</p> </li> <li> <p>ICU is icu4c in the Spack repository</p> </li> </ul>","boost":10},{"location":"i/ICU/#691-from-2106-on","title":"69.1 from 21.06 on","text":"<ul> <li>We started from an EasyConfig file from the University of Antwerpen which     itself is based on the ones in the EasyBuilders repository.</li> </ul>","boost":10},{"location":"i/ICU/#711-from-cpe-2206-on","title":"71.1 from CPE 22.06 on","text":"<ul> <li> <p>Trivial port of the EasyConfig.</p> </li> <li> <p>Added <code>sanity_check_commands</code>.</p> </li> <li> <p>Checked the documentation for further testing procedures bud coulnd't find any at the moment.</p> </li> </ul>","boost":10},{"location":"i/ICU/#721-from-cpe-2212-on","title":"72.1 from CPE 22.12 on","text":"<ul> <li> <p>Trivial port of the EasyConfig</p> </li> <li> <p>Switched to the new home page URL, as in the EasyBuilders repository.</p> </li> </ul> <p>Build problem with cpeGNU when using the 12.2.0 compilers:</p> <ul> <li> <p>The .so files build correctly and take the runtime libraries from GCC 12.</p> </li> <li> <p>The regular binaries however take the ones in /opt/cray/pe/gcc-libs/ instead     which on LUMI are currently the ones from GCC 11</p> </li> </ul>","boost":10},{"location":"i/ICU/#732-from-cpe-2309","title":"73.2 from CPE 23.09","text":"<ul> <li> <p>Trivial port of the 72.1 EasyConfig.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"i/ICU/#741-for-lumi2403","title":"74.1 for LUMI/24.03","text":"<ul> <li>Trivial port of the 73.2 EasyConfig for LUMI/23.12.</li> </ul>","boost":10},{"location":"i/ICU/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig ICU-69.1-cpeAMD-21.06.eb, with module ICU/69.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig ICU-69.1-cpeAOCC-21.12.eb, with module ICU/69.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig ICU-69.1-cpeCray-21.06.eb, with module ICU/69.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig ICU-69.1-cpeCray-21.08.eb, with module ICU/69.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig ICU-69.1-cpeCray-21.12.eb, with module ICU/69.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig ICU-69.1-cpeGNU-21.06.eb, with module ICU/69.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig ICU-69.1-cpeGNU-21.08.eb, with module ICU/69.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig ICU-69.1-cpeGNU-21.12.eb, with module ICU/69.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig ICU-71.1-cpeAOCC-22.06.eb, with module ICU/71.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig ICU-71.1-cpeCray-22.06.eb, with module ICU/71.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig ICU-71.1-cpeGNU-22.06.eb, with module ICU/71.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"i/Imlib2/","title":"Imlib2","text":"<p>[package list]</p>","boost":10},{"location":"i/Imlib2/#imlib2","title":"Imlib2","text":"","boost":10},{"location":"i/Imlib2/#license-information","title":"License information","text":"<p>Imlib2 does not use any of the standard licenses. It includes a COPYING file basicallyo granting everybody the right to deal with the software without restrictions as long as the copyright notice is included.</p> <p>After installing and loading the module, the files explaining the license can be found in <code>$EBROOTIMLIB2/share/licenses/Imlib2</code>.</p>","boost":10},{"location":"i/Imlib2/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Imlib2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Imlib2-1.12.3-cpeGNU-24.03.eb, will build Imlib2/1.12.3-cpeGNU-24.03</p> </li> <li> <p>EasyConfig Imlib2-1.5.1-cpeGNU-24.03.eb, will build Imlib2/1.5.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"i/Imlib2/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Imlib2 home page     though this page doesn't seem to be maintained anymore.</p> </li> <li> <p>Download from SourceForge</p> </li> </ul>","boost":10},{"location":"i/Imlib2/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for Imlib2 in the EasyBuilders repository</p> </li> <li> <p>There is no support for Imlib2 in the CSCS repository</p> </li> <li> <p>Imlib2 support in Spack</p> </li> </ul>","boost":10},{"location":"i/Imlib2/#version-151-in-2403","title":"Version 1.5.1 in 24.03","text":"<ul> <li>The EasyConfig is a direct port of the EasyBuilders one,     but we also copy the license files.</li> </ul>","boost":10},{"location":"i/Imlib2/#version-1123-in-2403","title":"Version 1.12.3 in 24.03","text":"<ul> <li>The EasyConfig is a direct port of the EasyBuilders one,     but we also copy the license files.</li> </ul>","boost":10},{"location":"i/Info-ZIP/","title":"Info-ZIP","text":"<p>[package list]</p>","boost":10},{"location":"i/Info-ZIP/#info-zip","title":"Info-ZIP","text":"","boost":10},{"location":"i/Info-ZIP/#license-information","title":"License information","text":"<p>The current Info-ZIP license is baded on the BSD license. It can be found on the  \"License\" page of the Info-ZIP site on SourceForge.</p>","boost":10},{"location":"i/Info-ZIP/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Info-ZIP/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Info-ZIP-3.0-6.0-cpeGNU-23.09.eb, will build Info-ZIP/3.0-6.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig Info-ZIP-3.0-6.0-cpeGNU-24.03.eb, will build Info-ZIP/3.0-6.0-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"i/Info-ZIP/#technical-documentation","title":"Technical documentation","text":"<p>This EasyConfig is a bundle of the Zip and UnZip EasyConfigs to offer a full suit of zip file tools, an ported to the Cray PE.</p> <p>This is just for in case one for some reason needs the utilities built with the Cray PE compilers rather than the versions of the tools installed in the system image of LUMI. The package only contains binaries and no libraries, so this is likely not needed.</p> <ul> <li> <p>Info-ZIP Zip home page</p> </li> <li> <p>Info-ZIP UnZip home page</p> </li> <li> <p>Info-ZIP on SourceForge</p> </li> </ul>","boost":10},{"location":"i/Info-ZIP/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Zip support in the EasyBuilders repository</p> </li> <li> <p>UnZip support in the EasyBuilders repository</p> </li> <li> <p>There is no support for UnZip or Zip in the CSCS repository</p> </li> <li> <p>Spack zip package</p> </li> <li> <p>Spack unzip package</p> </li> </ul>","boost":10},{"location":"i/Info-ZIP/#zip-version-30-and-unzip-version-60-for-cpegnu-2206-and-later","title":"Zip version 3.0 and unzip version 6.0 for cpeGNU 22.06 and later","text":"<ul> <li> <p>The EasyConfig is a straightforward adaptation and bundling of the EasyBuilders ones for the     <code>GCCcore</code> toolchains.</p> </li> <li> <p>It may need work for Clang-based compilers.</p> </li> </ul>","boost":10},{"location":"i/Info-ZIP/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Info-ZIP-3.0-6.0-cpeGNU-22.06.eb, with module Info-ZIP/3.0-6.0-cpeGNU-22.06</p> </li> <li> <p>EasyConfig Info-ZIP-3.0-6.0-cpeGNU-22.08.eb, with module Info-ZIP/3.0-6.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig Info-ZIP-3.0-6.0-cpeGNU-22.12.eb, with module Info-ZIP/3.0-6.0-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"i/IntelRenderingToolkit/","title":"IntelRenderingToolkit","text":"<p>[package list]</p>","boost":10},{"location":"i/IntelRenderingToolkit/#intelrenderingtoolkit","title":"IntelRenderingToolkit","text":"","boost":10},{"location":"i/IntelRenderingToolkit/#license-information","title":"License information","text":"<p>The licenses can be found in the GitHub repositories of the components.</p> <ul> <li>ISPC - Intel Implicit SPMD Program Compiler</li> <li>Intel Open Image Denoise</li> <li>Embree</li> <li>Intel RenderKit common C++/CMake infrastructure</li> <li>OpenVKL - Intel Open Volume Kerner Library</li> <li>Intel OSPRay</li> </ul>","boost":10},{"location":"i/IntelRenderingToolkit/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider IntelRenderingToolkit/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>IntelRenderingToolkit/1.10.0-cpeGNU-24.03 (EasyConfig: IntelRenderingToolkit-1.10.0-cpeGNU-24.03.eb)</li> </ul>","boost":10},{"location":"i/IntelRenderingToolkit/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Intel Rendering Toolkit homepage</p> </li> <li> <p>RenderKit superbuild</p> <ul> <li>GitHub releases</li> <li>Version numbers of the components are taken from the      CMakeLists.txt file     for the specific release (around line 122).</li> </ul> </li> </ul> <p>The toolkit consists of multiple components:</p> <ul> <li>ISPC - Intel Implicit SPMD Program Compiler<ul> <li>ISPC on GitHub<ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li>Intel Open Image Denoise<ul> <li>Home page</li> <li>GitHub repository<ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li>Intel RenderKit common C++/CMake infrastructure<ul> <li>GitHub<ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li>Intel Open Volume Kernel Library<ul> <li>Home page</li> <li>OpenVKL on GitHub<ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li>Embree - A collection of high-performance ray tracing kernels<ul> <li>GitHub<ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li>Intel OSPRay<ul> <li>OSPRay homepage</li> <li>GitHub<ul> <li>GitHub releases</li> </ul> </li> </ul> </li> </ul>","boost":10},{"location":"i/IntelRenderingToolkit/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"i/IntelRenderingToolkit/#1100","title":"1.10.0","text":"<ul> <li> <p>This Bundle is a LUST development.</p> </li> <li> <p>Version numbers of the components for this version</p> </li> </ul>","boost":10},{"location":"i/intltool/","title":"intltool","text":"<p>[package list]</p>","boost":10},{"location":"i/intltool/#intltool","title":"intltool","text":"","boost":10},{"location":"i/intltool/#license-information","title":"License information","text":"<p>The intltool software is licensed under the GNU General Public License version 2 a copy of which can be found in the  COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the subdirectory <code>$EBROOTINTLTOOL/share/licenses/intltool</code> after loading the module.</p>","boost":10},{"location":"i/intltool/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider intltool/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>intltool/0.51.0-cpeAMD-22.08 (EasyConfig: intltool-0.51.0-cpeAMD-22.08.eb)</p> </li> <li> <p>intltool/0.51.0-cpeAMD-22.12 (EasyConfig: intltool-0.51.0-cpeAMD-22.12.eb)</p> </li> <li> <p>intltool/0.51.0-cpeAMD-23.09 (EasyConfig: intltool-0.51.0-cpeAMD-23.09.eb)</p> </li> <li> <p>intltool/0.51.0-cpeAMD-23.12 (EasyConfig: intltool-0.51.0-cpeAMD-23.12.eb)</p> </li> <li> <p>intltool/0.51.0-cpeAMD-24.03 (EasyConfig: intltool-0.51.0-cpeAMD-24.03.eb)</p> </li> <li> <p>intltool/0.51.0-cpeAOCC-22.08 (EasyConfig: intltool-0.51.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>intltool/0.51.0-cpeAOCC-22.12 (EasyConfig: intltool-0.51.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>intltool/0.51.0-cpeAOCC-23.09 (EasyConfig: intltool-0.51.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>intltool/0.51.0-cpeAOCC-23.12 (EasyConfig: intltool-0.51.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>intltool/0.51.0-cpeAOCC-24.03 (EasyConfig: intltool-0.51.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>intltool/0.51.0-cpeCray-22.08 (EasyConfig: intltool-0.51.0-cpeCray-22.08.eb)</p> </li> <li> <p>intltool/0.51.0-cpeCray-22.12 (EasyConfig: intltool-0.51.0-cpeCray-22.12.eb)</p> </li> <li> <p>intltool/0.51.0-cpeCray-23.03 (EasyConfig: intltool-0.51.0-cpeCray-23.03.eb)</p> </li> <li> <p>intltool/0.51.0-cpeCray-23.09 (EasyConfig: intltool-0.51.0-cpeCray-23.09.eb)</p> </li> <li> <p>intltool/0.51.0-cpeCray-23.12 (EasyConfig: intltool-0.51.0-cpeCray-23.12.eb)</p> </li> <li> <p>intltool/0.51.0-cpeCray-24.03 (EasyConfig: intltool-0.51.0-cpeCray-24.03.eb)</p> </li> <li> <p>intltool/0.51.0-cpeGNU-22.08 (EasyConfig: intltool-0.51.0-cpeGNU-22.08.eb)</p> </li> <li> <p>intltool/0.51.0-cpeGNU-22.12 (EasyConfig: intltool-0.51.0-cpeGNU-22.12.eb)</p> </li> <li> <p>intltool/0.51.0-cpeGNU-23.09 (EasyConfig: intltool-0.51.0-cpeGNU-23.09.eb)</p> </li> <li> <p>intltool/0.51.0-cpeGNU-23.12 (EasyConfig: intltool-0.51.0-cpeGNU-23.12.eb)</p> </li> <li> <p>intltool/0.51.0-cpeGNU-24.03 (EasyConfig: intltool-0.51.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"i/intltool/#technical-documentation","title":"Technical documentation","text":"<p>A tool usually used as a build dependency so we may consider building it in a different way to avoid multiple installations? It is used. e.g., in the installation of certain X11 libraries.</p> <ul> <li> <p>intltool home page</p> </li> <li> <p>Downloads</p> </li> </ul>","boost":10},{"location":"i/intltool/#installation","title":"Installation","text":"<ul> <li>intltool needs the Perl package XML::Parser during installation.</li> </ul>","boost":10},{"location":"i/intltool/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>intltool support in the EasyBuilders repository</p> </li> <li> <p>There is no support for intltool in the CSCS repository</p> </li> </ul>","boost":10},{"location":"i/intltool/#version-0510-from-cpe-2106-onwards","title":"Version 0.51.0 from CPE 21.06 onwards.","text":"<ul> <li> <p>The EasyConfig is taken from the EasyBuilders repository with documentation     from the University of Antwerpen added to it.</p> </li> <li> <p>On eiger the Perl package XML::Parser is actually installed in the system Perl     so we may be able to build without the EasyBuild Perl as a dependency. However,     for now we avoid this as we do not know what the situation on LUMI will be.</p> </li> <li> <p>From LUMI/23.12 on, license information is included in the installation.</p> </li> </ul>","boost":10},{"location":"i/intltool/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig intltool-0.51.0-cpeAMD-21.06.eb, with module intltool/0.51.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeAOCC-21.12.eb, with module intltool/0.51.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeAOCC-22.06.eb, with module intltool/0.51.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeCray-21.06.eb, with module intltool/0.51.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeCray-21.08.eb, with module intltool/0.51.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeCray-21.12.eb, with module intltool/0.51.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeCray-22.06.eb, with module intltool/0.51.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeGNU-21.06.eb, with module intltool/0.51.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeGNU-21.08.eb, with module intltool/0.51.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeGNU-21.12.eb, with module intltool/0.51.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig intltool-0.51.0-cpeGNU-22.06.eb, with module intltool/0.51.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"j/JasPer/","title":"JasPer","text":"<p>[package list]</p>","boost":10},{"location":"j/JasPer/#jasper","title":"JasPer","text":"","boost":10},{"location":"j/JasPer/#license-information","title":"License information","text":"<p>JasPer license information is avaialble in the LICENSE.txt and COPYRIGHT.txt files in the JasPer GitHub repository.</p> <p>From LUMI/23.12 on, these files can also be found in the <code>$EBROOTJASPER/share/licenses/JasPer</code> subdirectory after loading the module.</p>","boost":10},{"location":"j/JasPer/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider JasPer/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>JasPer/3.0.4-cpeAMD-22.08 (EasyConfig: JasPer-3.0.4-cpeAMD-22.08.eb)</p> </li> <li> <p>JasPer/3.0.4-cpeAOCC-22.08 (EasyConfig: JasPer-3.0.4-cpeAOCC-22.08.eb)</p> </li> <li> <p>JasPer/3.0.4-cpeCray-22.08 (EasyConfig: JasPer-3.0.4-cpeCray-22.08.eb)</p> </li> <li> <p>JasPer/3.0.4-cpeGNU-22.08 (EasyConfig: JasPer-3.0.4-cpeGNU-22.08.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeAMD-22.12 (EasyConfig: JasPer-4.0.0-cpeAMD-22.12.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeAMD-23.09 (EasyConfig: JasPer-4.0.0-cpeAMD-23.09.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeAMD-23.12 (EasyConfig: JasPer-4.0.0-cpeAMD-23.12.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeAMD-24.03 (EasyConfig: JasPer-4.0.0-cpeAMD-24.03.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeAOCC-22.12 (EasyConfig: JasPer-4.0.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeAOCC-23.09 (EasyConfig: JasPer-4.0.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeAOCC-23.12 (EasyConfig: JasPer-4.0.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeAOCC-24.03 (EasyConfig: JasPer-4.0.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeCray-22.12 (EasyConfig: JasPer-4.0.0-cpeCray-22.12.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeCray-23.03 (EasyConfig: JasPer-4.0.0-cpeCray-23.03.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeCray-23.09 (EasyConfig: JasPer-4.0.0-cpeCray-23.09.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeCray-23.12 (EasyConfig: JasPer-4.0.0-cpeCray-23.12.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeCray-24.03 (EasyConfig: JasPer-4.0.0-cpeCray-24.03.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeGNU-22.12 (EasyConfig: JasPer-4.0.0-cpeGNU-22.12.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeGNU-23.09 (EasyConfig: JasPer-4.0.0-cpeGNU-23.09.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeGNU-23.12 (EasyConfig: JasPer-4.0.0-cpeGNU-23.12.eb)</p> </li> <li> <p>JasPer/4.0.0-cpeGNU-24.03 (EasyConfig: JasPer-4.0.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"j/JasPer/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>JasPer on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> <li> <p>JasPer home page (outdated downloads)</p> </li> </ul>","boost":10},{"location":"j/JasPer/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>JasPer support in the EasyBuilders repository</p> </li> <li> <p>JasPer support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"j/JasPer/#2033-from-cpe-2106-on","title":"2.0.33 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is derived from the University of Antwerpen one with a version     bump and change of download location.</li> </ul>","boost":10},{"location":"j/JasPer/#304-from-cpe-2206-on","title":"3.0.4 from CPE 22.06 on","text":"<ul> <li> <p>Trivial version bump of the EasyConfig</p> </li> <li> <p>Did a check of the tests in the log file and there don't seem to be any new optional     dependencies.</p> </li> </ul>","boost":10},{"location":"j/JasPer/#version-400-from-cpe-2212-on","title":"Version 4.0.0 from CPE 22.12 on","text":"<ul> <li> <p>Trivial version bump of the EasyConfig, but we did copy the improved sanity check     from the EasyBuilders version.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation and the sanity checks     were improved.</p> </li> </ul>","boost":10},{"location":"j/JasPer/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig JasPer-2.0.33-cpeAMD-21.06.eb, with module JasPer/2.0.33-cpeAMD-21.06</p> </li> <li> <p>EasyConfig JasPer-2.0.33-cpeAOCC-21.12.eb, with module JasPer/2.0.33-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig JasPer-2.0.33-cpeCray-21.06.eb, with module JasPer/2.0.33-cpeCray-21.06</p> </li> <li> <p>EasyConfig JasPer-2.0.33-cpeCray-21.08.eb, with module JasPer/2.0.33-cpeCray-21.08</p> </li> <li> <p>EasyConfig JasPer-2.0.33-cpeCray-21.12.eb, with module JasPer/2.0.33-cpeCray-21.12</p> </li> <li> <p>EasyConfig JasPer-2.0.33-cpeGNU-21.06.eb, with module JasPer/2.0.33-cpeGNU-21.06</p> </li> <li> <p>EasyConfig JasPer-2.0.33-cpeGNU-21.08.eb, with module JasPer/2.0.33-cpeGNU-21.08</p> </li> <li> <p>EasyConfig JasPer-2.0.33-cpeGNU-21.12.eb, with module JasPer/2.0.33-cpeGNU-21.12</p> </li> <li> <p>EasyConfig JasPer-3.0.4-cpeAOCC-22.06.eb, with module JasPer/3.0.4-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig JasPer-3.0.4-cpeCray-22.06.eb, with module JasPer/3.0.4-cpeCray-22.06</p> </li> <li> <p>EasyConfig JasPer-3.0.4-cpeGNU-22.06.eb, with module JasPer/3.0.4-cpeGNU-22.06</p> </li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig JasPer-2.0.33-cpeGNU-22.06.eb, with module JasPer/2.0.33-cpeGNU-22.06</p> </li> <li> <p>EasyConfig JasPer-2.0.33-cpeGNU-22.08.eb, with module JasPer/2.0.33-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"j/Java/","title":"Java","text":"<p>[package list]</p>","boost":10},{"location":"j/Java/#java","title":"Java","text":"","boost":10},{"location":"j/Java/#license-information","title":"License information","text":"<p>We use the Eclispe Adoptium Temurin releases, which are based on the  OpenJDK releases.</p> <p>OpenJDK is licensed under the GNU General Public License version 2.0 license a copy of which can also be found in the LICENSE file in the OpenJDK GitJHub repository.</p> <p>The Eclipse Adoptium Temurin distributions are very careful about specifying their  license consitions, and the licenses for all packages contained in the distribution. After installing and loading the <code>Java</code> module, the main license notice can be  found in the file <code>$EBROOTJAVA/NOTICE</code> while more information for specific components is available in the subdirectories of the  <code>$EBROOTJAVA/legal</code> directory.</p>","boost":10},{"location":"j/Java/#user-documentation","title":"User documentation","text":"<p>Note that there is also a version of Java already on the system installed with the  OS. The contributed EasyConfigs are for those who need a more recent version then what may be on the system at that time.</p> <p>As Java is already on the system and can be provided by modules also, you'll have to ensure that any program using Java is using the intended version.  After loading the module provided by EasyBuild all variables should refer to that version and it should be first in the path. Also be careful when checking the manual pages. In the standard configuration of the <code>man</code> command on LUMI, you may be asked which section to use. In that case, <code>1</code> should give you the manual pages for the version in these modules while <code>1+1</code> should give you those from the system as they are further in the search path for manual pages.</p> <p>We currently only provide installation recipes for LTS releases of Java.</p> <p>Users are recommended to always load a Java module using only the major version, e.g.,</p> <pre><code>module load Java/17\n</code></pre> <p>rather then whatever patch level is currently installed on the system. That way it  is easier to always load the latest patched version.</p> <p>When installing using EasyBuild:</p> <ul> <li> <p>For a first install of a major version it is sufficient to simply call <code>eb</code>     with the <code>-r</code> flag and the EasyConfig with the major-only version number, e.g.:</p> <pre><code>eb Java-17.eb -r\n</code></pre> </li> <li> <p>However, due to the way EasyBuild searches for EasyConfigs on LUMI, if you want      to update to a new version, you'll have to go to the directory with the right     versions of the EasyConfig (<code>.eb</code>) files, e.b.,</p> <pre><code>cd /appl/lumi/LUMI-EasyBuild-contrib/easybuild/easyconfigs/j/Java\n</code></pre> <p>if you are just using the centrally provided EasyConfigs for Java, as otherwise EasyBuild will try to reproduce the previous installation automatically.</p> </li> </ul>","boost":10},{"location":"j/Java/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Java/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Java-11.0.21.eb, will build Java/11.0.21</p> </li> <li> <p>EasyConfig Java-11.eb, will build Java/11</p> </li> <li> <p>EasyConfig Java-17.0.9.eb, will build Java/17.0.9</p> </li> <li> <p>EasyConfig Java-17.eb, will build Java/17</p> </li> <li> <p>EasyConfig Java-21.0.1.eb, will build Java/21.0.1</p> </li> <li> <p>EasyConfig Java-21.eb, will build Java/21</p> </li> </ul>","boost":10},{"location":"j/Java/#technical-documentation","title":"Technical documentation","text":"<p>Java in EasyBuild currently uses the OpenJDK distributions and no longer the ones provided by Oracle.</p> <p>Installing Java in EasyBuild needs two EasyConfigs. The one with the major version  only creates an Lmod file telling Lmod which version of Java should be loaded when that major version is given, while there is also a separate EasyConfig to install the specific version. So to install, e.g., Java 11, one would use</p> <pre><code>eb Java-11.eb -r\n</code></pre> <p>where the <code>-r</code> is important here to ensure that also the matching actual version gets installed.</p> <p>Java can be installed in the special <code>partition/common</code> partition to avoid installing it multiple times in the same <code>LUMI</code> stack.</p> <ul> <li>Java OpenJDK web site</li> </ul>","boost":10},{"location":"j/Java/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Java support in the EasyBuilders repository</p> </li> <li> <p>Java support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"j/Java/#java-11-lts-release","title":"Java 11 (LTS release)","text":"<ul> <li> <p>The EasyConfigs come from the EasyBuilders repository with only some     changes to the documentation, but we've also updated to the lates Java 11     release at the time of writing from the Eclipse Adoptium Temurin project.</p> </li> <li> <p>Additional change though: <code>JAVA_ROOT</code> and <code>JAVA_BINDIR</code> are also set (<code>JAVA_HOME</code>      is set by the EasyBlock) to ensure that all references to the system Java are     removed when the Java module is loaded.</p> </li> <li> <p>Also added sanity checks, basically to verify if the applications load.</p> </li> </ul>","boost":10},{"location":"j/Java/#java-17-lts-release","title":"Java 17 (LTS release)","text":"<ul> <li> <p>Derived from standard EasyConfigs in the EasyBuilders repository just as Java 11,     with the same changes and version updates.</p> </li> <li> <p>Note that the list of binaries is different from Java/11 so the sanity checks are     also reworked.</p> </li> <li> <p>Update to 17.0.9 made in-house following the standard EasyConfigs.</p> </li> </ul>","boost":10},{"location":"j/Java/#java-21-lts-release","title":"Java 21 (LTS release)","text":"<ul> <li>Straightforward port of the EasyConfigs for 17, did not wait for an update in the     EasyBuilders repository.</li> </ul>","boost":10},{"location":"j/Java/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Java-11.0.18.eb, with module Java/11.0.18</p> </li> <li> <p>EasyConfig Java-17.0.6.eb, with module Java/17.0.6</p> </li> </ul> </li> </ul>","boost":10},{"location":"j/jax/","title":"jax","text":"<p>[package list]</p>","boost":10},{"location":"j/jax/#jax","title":"jax","text":"","boost":10},{"location":"j/jax/#user-documentation","title":"User documentation","text":"<p>The JAX container is developed by AMD specifically for LUMI and contains the necessary parts to run JAX on LUMI, including the plugin needed for RCCL when doing distributed AI, and a suitable version of ROCm for the version of JAX.</p> <p>Note that JAX is still very much in development. Moreover, we sometimes have to use newer version of ROCm than the drivers on LUMI support, so there is no guarantee that this container will work for you (even though it did pass some tests we did), and there might be problems that cannot be fixed by the support team. JAX is software for users with a development spirit, not for users who expect something that simply and always works, and this is reflected in its 0.x version numbers. LUST cannot offer more than a best effort support and has no link to the JAX developers.</p>","boost":10},{"location":"j/jax/#use-via-easybuild-generated-modules","title":"Use via EasyBuild-generated modules","text":"<p>Changes to the EasyConfigs in late July 2025</p> <p>The EasyConfigs for the jax containers for the 2025 versions received a major  update at the end of July. Instructions below are only valid if you (rei)installed the container afterwards.</p> <p>Re-installing is tricky as by default EasyBuild will take the already installed version of the EasyConfig, so before re-installing, change your directory to the directory containing the EasyConfigs, which is  <code>/appl/local/containers/LUMI-EasyBuild-containers/easybuild/easyconfigs/j/jax</code>.</p> <p>The EasyBuild installation with the EasyConfigs mentioned below will do four things:</p> <ol> <li> <p>It will copy the container to your own file space. We realise containers can be     big, but it ensures that you have complete control over when a container is     removed again.</p> <p>We will remove a container from the system when it is not sufficiently functional anymore, but the container may still work for you. E.g., after an upgrade of the  network drivers on LUMI, the RCCL plugin for the LUMI Slingshot interconnect may be broken, but if you run on only one node PyTorch may still work for you.</p> <p>If you prefer to use the centrally provided container, you can remove your copy  after loading of the module with <code>rm $SIF</code> followed by reloading the module. This is however at your own risk. </p> </li> <li> <p>It will create a module file.      When loading the module, a number of environment variables will     be set to help you use the module and to make it easy to swap the module with a     different version in your job scripts.</p> <ul> <li> <p><code>SIF</code> and <code>SIFJAX</code> both contain the name and full path of the singularity     container file.</p> </li> <li> <p><code>SINGULARITY_BIND</code> will mount all necessary directories from the system,     including everything that is needed to access the project, scratch and flash     file systems.</p> </li> <li> <p><code>RUNSCRIPTS</code> and <code>RUNSCRIPTSJAX</code> contain the full path of the directory     containing some sample run scripts that can be used to run software in the      container, or as inspiration for your own variants.</p> </li> </ul> <p>The 2025 container modules installed after the end of July, 2025 also define  <code>SINGULARITYENV_PREPEND_PATH</code> in a way that ensures that the <code>/runscripts</code>  subdirectory in the container will be in the search path in the container.</p> <p>These containers also offer support for a virtual environment and define a few other <code>SINGULARITYENV_*</code> environment variables that inject environment variables in the container that are equivalent to those created by the activate script for  the Python virtual environment.</p> </li> <li> <p>It creates the $RUNSCRIPTS directory with scripts to be run in the container:</p> <ul> <li> <p><code>conda-python-simple</code>: This initialises Python in the container and then calls Python     with the arguments of <code>conda-python-simple</code>. It can be used, e.g., to run commands     through Python that utilise a single task but all GPUs.</p> <p>Note that in the 2025 and later JAX containers this script doesn't make much  sense anymore and one could just as well call <code>python</code> in the container as the  activation of the conda environment used to install JAX is now fully automatic. It is left in for compatibility with older containers as it may be used in some 3rd party documentation that we are not aware of.</p> </li> </ul> <p>From the 2025 containers onwards, the directory with runscripts is in the PATH in  the container if the module is loaded before entering the container.</p> </li> <li> <p>It creates a <code>bin</code> directory with scripts to be run outside of the container:</p> <ul> <li> <p><code>start-shell</code>: Serves a double purpose:</p> <ul> <li> <p>Without further arguments, it will start a shell in the container with      the Conda environment used to build the container activated.</p> </li> <li> <p>With arguments it simply runs a shell in the container, but the Conda      environment will not be activated.</p> </li> </ul> </li> </ul> <p>For the 2025 containers there is also support for a pre-initialised virtual environment that works in the same way as in the PyTorch modules. This comes with two extra scripts in the <code>bin</code> subdirectory:</p> <ul> <li> <p><code>make-squashfs</code>: Make the user-software.squashfs file that would then be mounted     in the container after reloading the module. This will enhance performance if     the extra installation in user-software contains a lot of files.</p> </li> <li> <p><code>unmake-squashfs</code>: Unpack the user-software.squashfs file into the user-software     subdirectory of $CONTAINERROOT to enable installing additional packages.</p> </li> </ul> <p>The <code>bin</code> directory is not mounted in the container, but if you would, the  scripts would recognise this and work or print a message that they cannot  be used in that environment.</p> </li> <li> <p>From the 2025 containers onwards, it also creates wrapper scripts for the     <code>python</code>and <code>pip</code> commands (including the commands with major and major.minor Python     version in their name), and also has a <code>list-packages</code> script. These scripts should work in the same      way as those in the CSC local software stacks as documented in the CSC PyTorch documentation     and the CSC machine learning guide.</p> </li> </ol> <p>From the 2025 container versions onwards installed after the end of July 2025,  EasyBuild will also activate the Python virtual environment <code>jax</code>.  Inside the container, the virtual environment is available in <code>/user-software/venv</code> while outside the container the files can be found in  <code>$CONTAINERROOT/user-software/venv</code> (if this directory has not been removed after creating a SquashFS file from it for better file system performance). You can also use the  <code>/user-software</code> subdirectory in the container to install other software through other methods.</p> <p>Note though that when using our CSC-like python and pip wrapper scripts, there is one important difference with the way the CSC scripts  work: Our module works with a predefined virtual environment which is in a different place in the file system in the container and outside the container, but can also  be squashed into a SquashFS file to avoid killing the file system when running a  big virtual environment. Moreover, that environment is also automatically activated when loading the module. So creating another virtual environment may conflict. If this would be a real issue, contace LUMI support and we may look for a custom solution (e.g., by telling you how to install separate modules for each virtual environment).</p>","boost":10},{"location":"j/jax/#initialising-the-conda-environment-in-the-pre-2025-containers","title":"Initialising the Conda environment in the pre-2025 containers","text":"<p>The container uses a miniconda environment in which Python and its packages are installed. Before the 2025 containers, that environment needs to be activated in the container when running, which can be done with the command that is available in the container as the environment variable <code>WITH_CONDA</code> (which for this container it is <code>source /opt/miniconda3/bin/activate jax</code>).</p> <p>Example of the use of <code>WITH_CONDA</code>: Check the Python packages in the container in an interactive session:</p> <pre><code>module load LUMI jax/0.4.28-rocm-6.2.0-python-3.12-singularity-20241007\nsingularity shell $SIF\n</code></pre> <p>which takes you in the container, and then in the container, at the <code>Singularity&gt;</code>  prompt:</p> <pre><code>$WITH_CONDA\npip list\n</code></pre> <p>An example of the use of <code>start-shell</code> that even works on the login nodes is:</p> <pre><code>module load LUMI jax/0.4.28-rocm-6.2.0-python-3.12-singularity-20241007\nstart-shell -c '/runscripts/conda-python-simple -c \"import numpy ; import scipy ; import jax ; print( f'\"'JAX {jax.__version__}, NumPy {numpy.__version__}, SciPy {scipy.__version__}.'\"' )\"'\n</code></pre> <p>The container (when used with <code>SINGULARITY_BIND</code> of the module) also provides one or more wrapper scripts to start Python from the conda environment in the container. Those scripts are also available outside the  container for inspection after loading the module in the  <code>$RUNSCRIPTS</code> subdirectory and you can use those scripts as a source of inspiration to develop a script that more directly executes your commands or does additional initialisations.</p> <p>Example (in an interactive session):</p> <pre><code>salloc -N1 -pstandard-g -t 10:00\nmodule load LUMI jax/0.4.28-rocm-6.2.0-python-3.12-singularity-20241007\nsrun -N1 -n1 --gpus 8 singularity exec $SIF /runscripts/conda-python-simple \\\n    -c 'import jax; print(\"I have these devices:\", jax.devices(\"gpu\"))'\n</code></pre>","boost":10},{"location":"j/jax/#virtual-environment-support","title":"Virtual environment support","text":"<p>This support is implemented in the same way as in the PyTorch containers, so we refer  to the documentation in the PyTorch page.</p>","boost":10},{"location":"j/jax/#installation-with-easybuild","title":"Installation with EasyBuild","text":"<p>To install the container with EasyBuild, follow the instructions in the EasyBuild section of the LUMI documentation, section \"Software\", and use the dummy partition <code>container</code>, e.g.:</p> <pre><code>module load LUMI partition/container EasyBuild-user\neb jax-0.4.28-rocm-6.2.0-python-3.12-singularity-20241007.eb\n</code></pre> <p>To use the container after installation, the <code>EasyBuild-user</code> module is not needed nor is the <code>container</code> partition. The module will be available in all versions of the LUMI stack and in the <code>CrayEnv</code> stack (provided the environment variable <code>EBU_USER_PREFIX</code> points to the right location).</p>","boost":10},{"location":"j/jax/#direct-access-use-without-the-container-module","title":"Direct access (use without the container module)","text":"<p>The jax containers are available in the following subdirectories of <code>/appl/local/containers</code>:</p> <ul> <li> <p><code>/appl/local/containers/sif-images</code>: Symbolic link to the latest version of the container     for each ROCm version provided. Those links can change without notice!</p> </li> <li> <p><code>/appl/local/containers/tested-containers</code>: Tested containers provided as a Singulartiy <code>.sif</code> file     and a docker-generated tarball. Containers in this directory are removed quickly when a new version     becomes available.</p> </li> <li> <p><code>/appl/local/containers/easybuild-sif-images</code>: Singularity <code>.sif</code> images used with the EasyConfigs     that we provide. They tend to be available for a longer time than in the other two subdirectories.</p> </li> </ul> <p>If you depend on a particular version of a container, we recommend that you copy the container to your own file space (e.g., in <code>/project</code>) as there is no guarantee the specific version will remain available centrally on the system for as long as you want.</p> <p>When using the containers without the modules, you will have to take care of the bindings as some system files are needed for, e.g., MPI. The recommended minimal bindings are:</p> <pre><code>-B /var/spool/slurmd,/opt/cray/,/usr/lib64/libcxi.so.1\n</code></pre> <p>and the bindings you need to access the files you want to use from <code>/scratch</code>, <code>/flash</code> and/or <code>/project</code>. You can get access to your files on LUMI in the regular location by also using the bindings</p> <pre><code>-B /pfs,/scratch,/projappl,/project,/flash,/appl\n</code></pre> <p>Note that the list recommended bindings may change after a system update or between containers. E.g., the containers provided since early 2025 already contain their own <code>libcxi.so.1</code> but the container is configured in such a way that binding the one from the system will do no harm. Some containers in the past also required binding <code>/usr/lib64/libjansson.so.4</code> but there is now a version in the newer containers, and overwriting that version may in fact create incompatibilities with other  software in the container.</p>","boost":10},{"location":"j/jax/#singularity-containers-with-modules-for-binding-and-extras","title":"Singularity containers with modules for binding and extras","text":"<p>Install with the EasyBuild-user module in <code>partition/container</code>: <pre><code>module load LUMI partition/container EasyBuild-user\neb &lt;easyconfig&gt;\n</code></pre> The module will be available in all versions of the LUMI stack and in the CrayEnv stack.</p> <p>To access module help after installation use <code>module spider jax/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig jax-0.4.13-rocm-5.6.1-python-3.10-singularity-20231215.eb, will provide jax/0.4.13-rocm-5.6.1-python-3.10-singularity-20231215</p> <p>Contains JAX 0.4.13 with NumPy 1.26.0 and SciPy 1.11.4.</p> </li> <li> <p>EasyConfig jax-0.4.13-rocm-5.6.1-python-3.10-singularity-20240207.eb, will provide jax/0.4.13-rocm-5.6.1-python-3.10-singularity-20240207</p> <p>Contains JAX 0.4.13 with NumPy 1.26.3 and SciPy 1.12.0.</p> </li> <li> <p>EasyConfig jax-0.4.28-rocm-6.2.0-python-3.12-singularity-20241007.eb, will provide jax/0.4.28-rocm-6.2.0-python-3.12-singularity-20241007</p> <p>Contains JAX 0.4.28 with NumPy 1.26.4, SciPy 1.14.1 and pandas 2.2.2.</p> </li> <li> <p>EasyConfig jax-0.4.28-rocm-6.2.0-python-3.12-singularity-20250404.eb, will provide jax/0.4.28-rocm-6.2.0-python-3.12-singularity-20250404</p> <p>Contains JAX 0.4.28 with NumPy 2.2.2, SciPy 1.15.1 and pandas 2.2.3.</p> </li> <li> <p>EasyConfig jax-0.4.35-rocm-6.2.4-python-3.12-singularity-20250404.eb, will provide jax/0.4.35-rocm-6.2.4-python-3.12-singularity-20250404</p> <p>Contains JAX 0.4.35.dev20250321 with NumPy 2.2.4 and SciPy 1.15.2.</p> <p>Updated late July 2025 with support for list-packages and python/pip command wrapper outside the container for better compatibility with the CSC installations.</p> </li> <li> <p>EasyConfig jax-community-0.5.0-rocm-6.2.4-python-3.12-singularity-20250404.eb, will provide jax/community-0.5.0-rocm-6.2.4-python-3.12-singularity-20250404</p> <p>Contains JAX 0.5.0 (community version) with NumPy 2.2.4 and SciPy 1.15.2.</p> </li> </ul>","boost":10},{"location":"j/jax/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig jax-0.3.20-cpeCray-22.08-rocm5.2.eb, with module jax/0.3.20-cpeCray-22.08-rocm5.2</p> </li> <li> <p>EasyConfig jax-0.3.20-cpeCray-22.12-rocm5.2.eb, with module jax/0.3.20-cpeCray-22.12-rocm5.2</p> </li> <li> <p>EasyConfig jax-0.3.20-cpeCray-23.03-rocm5.2.eb, with module jax/0.3.20-cpeCray-23.03-rocm5.2</p> </li> <li> <p>EasyConfig jax-0.3.20-cpeGNU-22.08-rocm5.2.eb, with module jax/0.3.20-cpeGNU-22.08-rocm5.2</p> </li> <li> <p>EasyConfig jax-0.3.20-cpeGNU-22.12-rocm5.2.eb, with module jax/0.3.20-cpeGNU-22.12-rocm5.2</p> </li> <li> <p>EasyConfig jax-0.4.1-cpeCray-22.08-rocm5.3.eb, with module jax/0.4.1-cpeCray-22.08-rocm5.3</p> </li> <li> <p>EasyConfig jax-0.4.1-cpeGNU-22.08-rocm5.3.eb, with module jax/0.4.1-cpeGNU-22.08-rocm5.3</p> </li> </ul> </li> </ul>","boost":10},{"location":"j/json-c/","title":"json-c","text":"<p>[package list]</p>","boost":10},{"location":"j/json-c/#json-c","title":"json-c","text":"","boost":10},{"location":"j/json-c/#license-information","title":"License information","text":"<p>The json-c license can be found in the COPYING file in the json-c GitHub repository.</p> <p>For the more recent toolchains a copy of this file is also available  after loading the module in <code>$EBROOTJSONMINCshare/licenses/json-c</code>.</p>","boost":10},{"location":"j/json-c/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider json-c/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig json-c-0.16-cpeAOCC-23.03.eb, will build json-c/0.16-cpeAOCC-23.03</p> </li> <li> <p>EasyConfig json-c-0.16-cpeAOCC-23.09.eb, will build json-c/0.16-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig json-c-0.16-cpeCray-23.03.eb, will build json-c/0.16-cpeCray-23.03</p> </li> <li> <p>EasyConfig json-c-0.16-cpeCray-23.09.eb, will build json-c/0.16-cpeCray-23.09</p> </li> <li> <p>EasyConfig json-c-0.16-cpeGNU-23.09.eb, will build json-c/0.16-cpeGNU-23.09</p> </li> <li> <p>EasyConfig json-c-0.17-cpeAOCC-24.03.eb, will build json-c/0.17-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig json-c-0.17-cpeCray-24.03.eb, will build json-c/0.17-cpeCray-24.03</p> </li> <li> <p>EasyConfig json-c-0.17-cpeGNU-24.03.eb, will build json-c/0.17-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"j/json-c/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>json-c development on GitHub</p> </li> <li> <p>Downloads from Amazon</p> </li> </ul>","boost":10},{"location":"j/json-c/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>json-c support in the EasyBuilders repository</p> </li> <li> <p>No support for json-c in the CSCS repository</p> </li> </ul>","boost":10},{"location":"j/json-c/#version-015-for-cpe-2108","title":"Version 0.15 for CPE 21.08","text":"<ul> <li> <p>The EasyConfig is derived from the EasyBuilders one with a change of     the download location to avoid having to use the suffix used in the     GitHub downloads.</p> </li> <li> <p>Install libraries in lib instead of lib64 for consistency with the     majority of packages installed on the system.</p> </li> </ul>","boost":10},{"location":"j/json-c/#version-016-for-cpe-2112-2206-2208-2212-2303","title":"Version 0.16 for CPE 21.12, 22.06, 22.08, 22.12, 23.03","text":"<ul> <li> <p>Trivial version bump.</p> </li> <li> <p>Added a simple sanity check testing if pkg-config can find the package.</p> </li> <li> <p>For Clang 15 and later the error messages about strict prototypes need to     be turned off as the code is not compliant with C standards when it comes     to the use of prototypes.</p> </li> </ul>","boost":10},{"location":"j/json-c/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig json-c-0.15-cpeCray-21.08.eb, with module json-c/0.15-cpeCray-21.08</p> </li> <li> <p>EasyConfig json-c-0.15-cpeGNU-21.08.eb, with module json-c/0.15-cpeGNU-21.08</p> </li> <li> <p>EasyConfig json-c-0.16-cpeAOCC-21.12.eb, with module json-c/0.16-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig json-c-0.16-cpeAOCC-22.08.eb, with module json-c/0.16-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig json-c-0.16-cpeAOCC-22.12.eb, with module json-c/0.16-cpeAOCC-22.12</p> </li> <li> <p>EasyConfig json-c-0.16-cpeCray-21.12.eb, with module json-c/0.16-cpeCray-21.12</p> </li> <li> <p>EasyConfig json-c-0.16-cpeCray-22.06.eb, with module json-c/0.16-cpeCray-22.06</p> </li> <li> <p>EasyConfig json-c-0.16-cpeCray-22.08.eb, with module json-c/0.16-cpeCray-22.08</p> </li> <li> <p>EasyConfig json-c-0.16-cpeCray-22.12.eb, with module json-c/0.16-cpeCray-22.12</p> </li> <li> <p>EasyConfig json-c-0.16-cpeGNU-21.12.eb, with module json-c/0.16-cpeGNU-21.12</p> </li> <li> <p>EasyConfig json-c-0.16-cpeGNU-22.06.eb, with module json-c/0.16-cpeGNU-22.06</p> </li> <li> <p>EasyConfig json-c-0.16-cpeGNU-22.08.eb, with module json-c/0.16-cpeGNU-22.08</p> </li> <li> <p>EasyConfig json-c-0.16-cpeGNU-22.12.eb, with module json-c/0.16-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"j/json-fortran/","title":"json-fortran","text":"<p>[package list]</p>","boost":10},{"location":"j/json-fortran/#json-fortran","title":"json-fortran","text":"","boost":10},{"location":"j/json-fortran/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider json-fortran/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig json-fortran-8.3.0-cpeCray-24.03.eb, will build json-fortran/8.3.0-cpeCray-24.03</p> </li> <li> <p>EasyConfig json-fortran-9.0.2-cpeGNU-24.03.eb, will build json-fortran/9.0.2-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"k/KaHIP/","title":"KaHIP","text":"<p>[package list]</p>","boost":10},{"location":"k/KaHIP/#kahip","title":"KaHIP","text":"","boost":10},{"location":"k/KaHIP/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig KaHIP-3.14-cpeGNU-22.12.eb, with module KaHIP/3.14-cpeGNU-22.12</li> </ul> </li> </ul>","boost":10},{"location":"k/Kokkos/","title":"Kokkos","text":"<p>[package list]</p>","boost":10},{"location":"k/Kokkos/#kokkos","title":"Kokkos","text":"","boost":10},{"location":"k/Kokkos/#license-information","title":"License information","text":"<p>Kokkos is under the Apache License, Version 2.0.</p> <p>A copy of the license can also be found in the \"LICENSE\" file in the Kokkos GitHub repository.</p>","boost":10},{"location":"k/Kokkos/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Kokkos/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Kokkos-4.5.1-cpeAMD-24.03-rocm.eb, will build Kokkos/4.5.1-cpeAMD-24.03-rocm</p> </li> <li> <p>EasyConfig Kokkos-4.5.1-cpeGNU-24.03-rocm.eb, will build Kokkos/4.5.1-cpeGNU-24.03-rocm</p> <p>This version offers only the serial host backend and not the OpenMP one for CPU, to avoid a mismatch between the GNU and ROCm OpenMP libraries.</p> </li> </ul>","boost":10},{"location":"k/Kokkos/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Kokkos website</p> </li> <li> <p>Kokkos core GitHub repository</p> <ul> <li>Kokkos GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"k/Kokkos/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>No EasyBuild support Kokkos at the time of writing in either the EasyBuilders or the CSCS repository.</p> </li> <li> <p>kokkos package in Spack</p> </li> </ul>","boost":10},{"location":"k/Kokkos/#version-451-for-cpegnu-and-cpeamd-with-rocm-603","title":"Version 4.5.1 for cpeGNU and cpeAMD with ROCm 6.0.3","text":"<ul> <li> <p>The EasyConfig is a LUST development.</p> </li> <li> <p>The cpeGNU recipe offers the serial host backend only to avoid OpenMP runtime library mismatch      between the GNU one and ROCm one.</p> </li> </ul>","boost":10},{"location":"k/Kokkos-kernels/","title":"Kokkos-kernels","text":"<p>[package list]</p>","boost":10},{"location":"k/Kokkos-kernels/#kokkos-kernels","title":"Kokkos-kernels","text":"","boost":10},{"location":"k/Kokkos-kernels/#license-information","title":"License information","text":"<p>Kokkos-kernels is under the Apache License, Version 2.0.</p> <p>A copy of the license can also be found in the \"LICENSE\" file in the Kokkos-kernels GitHub repository.</p>","boost":10},{"location":"k/Kokkos-kernels/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Kokkos-kernels/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Kokkos-kernels-4.5.1-cpeAMD-24.03-rocm.eb, will build Kokkos-kernels/4.5.1-cpeAMD-24.03-rocm</p> </li> <li> <p>EasyConfig Kokkos-kernels-4.5.1-cpeGNU-24.03-rocm.eb, will build Kokkos-kernels/4.5.1-cpeGNU-24.03-rocm</p> </li> </ul>","boost":10},{"location":"k/Kokkos-kernels/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Kokkos website</p> </li> <li> <p>Kokkos-kernels GitHub repository</p> <ul> <li>Kokkos-kernels GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"k/Kokkos-kernels/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>No EasyBuild support Kokkos-kernels at the time of writing in either the EasyBuilders or the CSCS repository.</p> </li> <li> <p>kokkos-kernels package in Spack</p> </li> </ul>","boost":10},{"location":"k/Kokkos-kernels/#version-451-for-cpegnu-and-cpeamd-with-rocm-603","title":"Version 4.5.1 for cpeGNU and cpeAMD with ROCm 6.0.3","text":"<ul> <li>The EasyConfig is a LUST development.</li> </ul>","boost":10},{"location":"l/LAME/","title":"LAME","text":"<p>[package list]</p>","boost":10},{"location":"l/LAME/#lame","title":"LAME","text":"","boost":10},{"location":"l/LAME/#license-information","title":"License information","text":"<p>There is some license information in the license.txt file in the LAME SourceForge site</p> <p>From LUMI/23.12 on, this information can also be found in the <code>$EBROOTLAME/share/licenses/LAME</code> subdirectory.</p>","boost":10},{"location":"l/LAME/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider LAME/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>LAME/3.100-cpeAMD-22.08 (EasyConfig: LAME-3.100-cpeAMD-22.08.eb)</p> </li> <li> <p>LAME/3.100-cpeAMD-22.12 (EasyConfig: LAME-3.100-cpeAMD-22.12.eb)</p> </li> <li> <p>LAME/3.100-cpeAMD-23.09 (EasyConfig: LAME-3.100-cpeAMD-23.09.eb)</p> </li> <li> <p>LAME/3.100-cpeAMD-23.12 (EasyConfig: LAME-3.100-cpeAMD-23.12.eb)</p> </li> <li> <p>LAME/3.100-cpeAMD-24.03 (EasyConfig: LAME-3.100-cpeAMD-24.03.eb)</p> </li> <li> <p>LAME/3.100-cpeAOCC-22.08 (EasyConfig: LAME-3.100-cpeAOCC-22.08.eb)</p> </li> <li> <p>LAME/3.100-cpeAOCC-22.12 (EasyConfig: LAME-3.100-cpeAOCC-22.12.eb)</p> </li> <li> <p>LAME/3.100-cpeAOCC-23.09 (EasyConfig: LAME-3.100-cpeAOCC-23.09.eb)</p> </li> <li> <p>LAME/3.100-cpeAOCC-23.12 (EasyConfig: LAME-3.100-cpeAOCC-23.12.eb)</p> </li> <li> <p>LAME/3.100-cpeAOCC-24.03 (EasyConfig: LAME-3.100-cpeAOCC-24.03.eb)</p> </li> <li> <p>LAME/3.100-cpeCray-22.08 (EasyConfig: LAME-3.100-cpeCray-22.08.eb)</p> </li> <li> <p>LAME/3.100-cpeCray-22.12 (EasyConfig: LAME-3.100-cpeCray-22.12.eb)</p> </li> <li> <p>LAME/3.100-cpeCray-23.03 (EasyConfig: LAME-3.100-cpeCray-23.03.eb)</p> </li> <li> <p>LAME/3.100-cpeCray-23.09 (EasyConfig: LAME-3.100-cpeCray-23.09.eb)</p> </li> <li> <p>LAME/3.100-cpeCray-23.12 (EasyConfig: LAME-3.100-cpeCray-23.12.eb)</p> </li> <li> <p>LAME/3.100-cpeCray-24.03 (EasyConfig: LAME-3.100-cpeCray-24.03.eb)</p> </li> <li> <p>LAME/3.100-cpeGNU-22.08 (EasyConfig: LAME-3.100-cpeGNU-22.08.eb)</p> </li> <li> <p>LAME/3.100-cpeGNU-22.12 (EasyConfig: LAME-3.100-cpeGNU-22.12.eb)</p> </li> <li> <p>LAME/3.100-cpeGNU-23.09 (EasyConfig: LAME-3.100-cpeGNU-23.09.eb)</p> </li> <li> <p>LAME/3.100-cpeGNU-23.12 (EasyConfig: LAME-3.100-cpeGNU-23.12.eb)</p> </li> <li> <p>LAME/3.100-cpeGNU-24.03 (EasyConfig: LAME-3.100-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/LAME/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>LAME home page on SourceForge</p> <ul> <li>Downloads on SourceForge</li> </ul> </li> </ul>","boost":10},{"location":"l/LAME/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>LAME in the EasyBuilders repository</p> </li> <li> <p>There is no support for LAME in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/LAME/#version-3100-from-cpe-2106-on","title":"version 3.100 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is based on the EasyBuilders one with documentation from the     University of Antwerpen.</p> </li> <li> <p>For LUMI/23.12, license information was added to the EasyConfig.</p> <p>The EasyConfig for the Cray compiler also needed a fix: Adding  <code>-Wl,--undefined-version</code> to <code>LDFLAGS</code>, as otherwise linking failed with undefined version symbols which is really a bug in LAME, not in the Cray compiler, which follows what recent versions of Clang od, i.e., run the linker with <code>--no-undefined-symbols</code> as a default.</p> </li> </ul>","boost":10},{"location":"l/LAME/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig LAME-3.100-cpeAMD-21.06.eb, with module LAME/3.100-cpeAMD-21.06</p> </li> <li> <p>EasyConfig LAME-3.100-cpeAOCC-21.12.eb, with module LAME/3.100-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig LAME-3.100-cpeAOCC-22.06.eb, with module LAME/3.100-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig LAME-3.100-cpeCray-21.06.eb, with module LAME/3.100-cpeCray-21.06</p> </li> <li> <p>EasyConfig LAME-3.100-cpeCray-21.08.eb, with module LAME/3.100-cpeCray-21.08</p> </li> <li> <p>EasyConfig LAME-3.100-cpeCray-21.12.eb, with module LAME/3.100-cpeCray-21.12</p> </li> <li> <p>EasyConfig LAME-3.100-cpeCray-22.06.eb, with module LAME/3.100-cpeCray-22.06</p> </li> <li> <p>EasyConfig LAME-3.100-cpeGNU-21.06.eb, with module LAME/3.100-cpeGNU-21.06</p> </li> <li> <p>EasyConfig LAME-3.100-cpeGNU-21.08.eb, with module LAME/3.100-cpeGNU-21.08</p> </li> <li> <p>EasyConfig LAME-3.100-cpeGNU-21.12.eb, with module LAME/3.100-cpeGNU-21.12</p> </li> <li> <p>EasyConfig LAME-3.100-cpeGNU-22.06.eb, with module LAME/3.100-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/LAMMPS/","title":"LAMMPS","text":"<p>[package list]</p>","boost":10},{"location":"l/LAMMPS/#lammps","title":"LAMMPS","text":"","boost":10},{"location":"l/LAMMPS/#license-information","title":"License information","text":"<p>LAMMPS is licensed under the terms of the  GNU Public License Version 2. More information can be found on the  \"LAMMPS open-source license\" page in the LAMMPS documentation. A copy of the license can also be found in the  LICENSE file in the LAMMPS GitHub.</p> <p>The LAMMPS developers also appreciate being cited when you use LAMMPS.  See the \"Citing LAMMPS in your papers\" page on the LAMMPS web site for the appropriate citations, depending on which components of LAMMPS you use.</p>","boost":10},{"location":"l/LAMMPS/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider LAMMPS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig LAMMPS-2Aug2023_update3-cpeAMD-24.03-rocm.eb, will build LAMMPS/2Aug2023_update3-cpeAMD-24.03-rocm</p> </li> <li> <p>EasyConfig LAMMPS-2Aug2023_update3-cpeGNU-24.03-CPU.eb, will build LAMMPS/2Aug2023_update3-cpeGNU-24.03-CPU</p> </li> </ul>","boost":10},{"location":"l/LAMMPS/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>LAMMPS web site</p> </li> <li> <p>LAMMPS GitHub</p> </li> <li> <p>JSC had public notes on LAMMPS optimization (link was      fzj-jsc.github.io/tuning_lammps/)     but these are no longer available.</p> <p>Basically the advice from JSC is to use Kokkos as it covers multicore and GPU,  but it does need to be enabled also by users running LAMMPS. </p> </li> </ul>","boost":10},{"location":"l/LAMMPS/#easybuild-support","title":"EasyBuild support","text":"<ul> <li> <p>LAMMPS support in the EasyBuilders repository.     This is based on a custom EasyBlock with support for most but not yet all optional packages.     Likely due to this and the continyous rapid changes in the package the support for recent     versions is lagging.</p> </li> <li> <p>LAMMPS support in the CSCS repository.     CSCS uses the plain CMakeMake generic easyblock but does not support most of the additional     packages. There are recipes for newer versions though, but often for Piz Daint. They should     port over easily though.</p> </li> <li> <p>LAMMPS support in Spack</p> </li> </ul>","boost":10},{"location":"l/LAMMPS/#29oct20-minimal-for-cpegnu-2108","title":"29Oct20-*-minimal for cpeGNU 21.08","text":"<ul> <li> <p>This is an EasyConfig file directly derived from the CSCS one.</p> </li> <li> <p>Added support for jpeg and png based on the Spack recipe.</p> </li> <li> <p>It does not yet work with cpeCray because FFmpeg does not compile.</p> </li> </ul>","boost":10},{"location":"l/LAMMPS/#23jun22_update2-minimal-for-cpegnu-2208","title":"23Jun22_update2-*-minimal for cpeGNU 22.08","text":"<ul> <li>Fairly trivial update of the one for the 29Oct20 version.</li> </ul>","boost":10},{"location":"l/LAMMPS/#2aug2023_update3-for-cpegnu-2403","title":"2Aug2023_update3 for cpeGNU 24.03","text":"<ul> <li> <p>Based on previous easyconfigs but adapted to make it closer to the      EasyBuilders one. We enable packages which requires no extra dependency     or with dependency already present in the central software stack.</p> </li> <li> <p>It turns out this version is only compatible with PLUMED      2.4.x, 2.5.x, 2.6.x, 2.7.x, 2.8.x and not with the 2.9.x version which     we tried to use for other software in 24.03.</p> </li> </ul>","boost":10},{"location":"l/LAMMPS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig LAMMPS-23Jun22_update2-cpeGNU-22.08-minimal.eb, with module LAMMPS/23Jun22_update2-cpeGNU-22.08-minimal</p> </li> <li> <p>EasyConfig LAMMPS-29Oct20-cpeGNU-21.08-minimal.eb, with module LAMMPS/29Oct20-cpeGNU-21.08-minimal</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/LLVM/","title":"LLVM","text":"<p>[package list]</p>","boost":10},{"location":"l/LLVM/#llvm","title":"LLVM","text":"","boost":10},{"location":"l/LLVM/#license-information","title":"License information","text":"<p>LLVM is distrubuted under the Apache License Version 2.0 which can also be found in the <code>LICENSE.TXT</code> file in the LLVM GitHub repo.</p> <p>After loading the module, the <code>LICENSE.TXT</code> file can also be found in <code>$EBROOTLLVM/share/licenses/LLVM</code>.</p>","boost":10},{"location":"l/LLVM/#user-documentation","title":"User documentation","text":"<p>This LLVM module is not a complete compiler and does not replace the compilers from the Cray Programming Environment. It provides the LLVM core libraries that are used by the software OpenGL renderer.</p>","boost":10},{"location":"l/LLVM/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider LLVM/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>LLVM/17.0.6-cpeGNU-24.03 (EasyConfig: LLVM-17.0.6-cpeGNU-24.03.eb)</li> </ul>","boost":10},{"location":"l/LLVM/#technical-documentation","title":"Technical documentation","text":"<p>Use of the LLVM module:</p> <ul> <li>Currently only for the OpenGL software renderer.</li> </ul> <p>Where to find?</p> <ul> <li> <p>LLVM website</p> </li> <li> <p>LLVM GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/LLVM/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>LLVM in the EasyBuilders repository</p> </li> <li> <p>LLVM in the CSCS repository</p> </li> <li> <p>llvm support in Spack</p> </li> </ul>","boost":10},{"location":"l/LLVM/#1706-for-lumi2403","title":"17.0.6 for LUMI/24.03","text":"<ul> <li> <p>Version alligned with the version used by Cray and ROCm 6.0.</p> </li> <li> <p>The EasyConfig is largely a LUST development, but based on the EasyBuilders EasyBlock      for LLVM.</p> </li> </ul>","boost":10},{"location":"l/LLVM/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig LLVM-14.0.6-cpeGNU-22.08.eb, with module LLVM/14.0.6-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"l/LMDB/","title":"LMDB","text":"<p>[package list]</p>","boost":10},{"location":"l/LMDB/#lmdb","title":"LMDB","text":"","boost":10},{"location":"l/LMDB/#license-information","title":"License information","text":"<p>LMDB is licensed under the OpenLDAP Public License, see the LICENSE file in the source repository.</p> <p>From LUMI/23.12 on, a copy of the LICENSE file can also be found in the <code>$EBROOTLMDB/share/licenses/LMDB</code> directory after loading the module.</p>","boost":10},{"location":"l/LMDB/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider LMDB/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>LMDB/0.9.29-cpeAMD-22.08 (EasyConfig: LMDB-0.9.29-cpeAMD-22.08.eb)</p> </li> <li> <p>LMDB/0.9.29-cpeAMD-22.12 (EasyConfig: LMDB-0.9.29-cpeAMD-22.12.eb)</p> </li> <li> <p>LMDB/0.9.29-cpeAOCC-22.08 (EasyConfig: LMDB-0.9.29-cpeAOCC-22.08.eb)</p> </li> <li> <p>LMDB/0.9.29-cpeAOCC-22.12 (EasyConfig: LMDB-0.9.29-cpeAOCC-22.12.eb)</p> </li> <li> <p>LMDB/0.9.29-cpeCray-22.08 (EasyConfig: LMDB-0.9.29-cpeCray-22.08.eb)</p> </li> <li> <p>LMDB/0.9.29-cpeCray-22.12 (EasyConfig: LMDB-0.9.29-cpeCray-22.12.eb)</p> </li> <li> <p>LMDB/0.9.29-cpeCray-23.03 (EasyConfig: LMDB-0.9.29-cpeCray-23.03.eb)</p> </li> <li> <p>LMDB/0.9.29-cpeGNU-22.08 (EasyConfig: LMDB-0.9.29-cpeGNU-22.08.eb)</p> </li> <li> <p>LMDB/0.9.29-cpeGNU-22.12 (EasyConfig: LMDB-0.9.29-cpeGNU-22.12.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeAMD-23.09 (EasyConfig: LMDB-0.9.31-cpeAMD-23.09.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeAMD-23.12 (EasyConfig: LMDB-0.9.31-cpeAMD-23.12.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeAMD-24.03 (EasyConfig: LMDB-0.9.31-cpeAMD-24.03.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeAOCC-23.09 (EasyConfig: LMDB-0.9.31-cpeAOCC-23.09.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeAOCC-23.12 (EasyConfig: LMDB-0.9.31-cpeAOCC-23.12.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeAOCC-24.03 (EasyConfig: LMDB-0.9.31-cpeAOCC-24.03.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeCray-23.09 (EasyConfig: LMDB-0.9.31-cpeCray-23.09.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeCray-23.12 (EasyConfig: LMDB-0.9.31-cpeCray-23.12.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeCray-24.03 (EasyConfig: LMDB-0.9.31-cpeCray-24.03.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeGNU-23.09 (EasyConfig: LMDB-0.9.31-cpeGNU-23.09.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeGNU-23.12 (EasyConfig: LMDB-0.9.31-cpeGNU-23.12.eb)</p> </li> <li> <p>LMDB/0.9.31-cpeGNU-24.03 (EasyConfig: LMDB-0.9.31-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/LMDB/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>LMDB web site</p> </li> <li> <p>GitHub mirror of the code</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/LMDB/#general-information","title":"General information","text":"<ul> <li>LMDB comes without a configure script, only a Makefile</li> <li>The Makefile does support <code>make install</code> but of course      <code>prefix</code> needs to be redefined.</li> <li>The Makefile doesn't honour compiler-related environment      flags. Hence the need to redefine CC and OPT when calling      make to build the code. Re-defining CFLAGS may be dangerous      as the Makefile doesn't only use the optimization options but      adds various options that are necessary.</li> </ul>","boost":10},{"location":"l/LMDB/#easybuild-information","title":"EasyBuild information","text":"<ul> <li> <p>LMDB support in the EasyBuilders repository</p> </li> <li> <p>LMDB support in the CSCS repository</p> </li> </ul> <p>There is support for LMDB in the EasyBuilders repositories. However, that support uses the MakeCp generic EasyBlock rather than the install target in the Makefile. It also copies <code>midl.h</code> which on inspection is only used internally in LMDB and not copies by the install Makefile target.</p>","boost":10},{"location":"l/LMDB/#0929-from-cpe-2106-on","title":"0.9.29 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is derived from the University of Antwerpen one.</p> <p>It uses the ConfigureMake generic EasyBlock to use the install target from the Makefile rather than the MakeCp block used by the EasyBuilders EasyConfig.</p> <ul> <li> <p>Required skipping the configure step</p> </li> <li> <p>Required adding the definition of <code>prefix</code> when calling <code>make install</code>.</p> </li> <li> <p>Required a correction of the sanity_check from the EasyBuilders recipes     as <code>midl.h</code> is not installed.</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/LMDB/#0931-from-cpe-2309-on","title":"0.9.31 from CPE 23.09 on","text":"<ul> <li> <p>Trivial port of the 0.9.29 EasyConfig</p> </li> <li> <p>For LUMI/23.12, additional license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/LMDB/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig LMDB-0.9.29-cpeAMD-21.06.eb, with module LMDB/0.9.29-cpeAMD-21.06</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeAOCC-21.12.eb, with module LMDB/0.9.29-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeAOCC-22.06.eb, with module LMDB/0.9.29-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeCray-21.06.eb, with module LMDB/0.9.29-cpeCray-21.06</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeCray-21.08.eb, with module LMDB/0.9.29-cpeCray-21.08</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeCray-21.12.eb, with module LMDB/0.9.29-cpeCray-21.12</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeCray-22.06.eb, with module LMDB/0.9.29-cpeCray-22.06</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeGNU-21.06.eb, with module LMDB/0.9.29-cpeGNU-21.06</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeGNU-21.08.eb, with module LMDB/0.9.29-cpeGNU-21.08</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeGNU-21.12.eb, with module LMDB/0.9.29-cpeGNU-21.12</p> </li> <li> <p>EasyConfig LMDB-0.9.29-cpeGNU-22.06.eb, with module LMDB/0.9.29-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/LZO/","title":"LZO","text":"<p>[package list]</p>","boost":10},{"location":"l/LZO/#lzo","title":"LZO","text":"","boost":10},{"location":"l/LZO/#license-information","title":"License information","text":"<p>LZO is distributed under the terms of the  GNU General Public License (GPL v2+).</p> <p>From LUMI/23.12 on, the license information can also be found in the COPYING file in  the <code>$EBROOTLZO/share/licenses/LZO</code> directory after loading the module.</p>","boost":10},{"location":"l/LZO/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider LZO/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>LZO/2.10-cpeAMD-22.08 (EasyConfig: LZO-2.10-cpeAMD-22.08.eb)</p> </li> <li> <p>LZO/2.10-cpeAMD-22.12 (EasyConfig: LZO-2.10-cpeAMD-22.12.eb)</p> </li> <li> <p>LZO/2.10-cpeAMD-23.09 (EasyConfig: LZO-2.10-cpeAMD-23.09.eb)</p> </li> <li> <p>LZO/2.10-cpeAMD-23.12 (EasyConfig: LZO-2.10-cpeAMD-23.12.eb)</p> </li> <li> <p>LZO/2.10-cpeAMD-24.03 (EasyConfig: LZO-2.10-cpeAMD-24.03.eb)</p> </li> <li> <p>LZO/2.10-cpeAOCC-22.08 (EasyConfig: LZO-2.10-cpeAOCC-22.08.eb)</p> </li> <li> <p>LZO/2.10-cpeAOCC-22.12 (EasyConfig: LZO-2.10-cpeAOCC-22.12.eb)</p> </li> <li> <p>LZO/2.10-cpeAOCC-23.09 (EasyConfig: LZO-2.10-cpeAOCC-23.09.eb)</p> </li> <li> <p>LZO/2.10-cpeAOCC-23.12 (EasyConfig: LZO-2.10-cpeAOCC-23.12.eb)</p> </li> <li> <p>LZO/2.10-cpeAOCC-24.03 (EasyConfig: LZO-2.10-cpeAOCC-24.03.eb)</p> </li> <li> <p>LZO/2.10-cpeCray-22.08 (EasyConfig: LZO-2.10-cpeCray-22.08.eb)</p> </li> <li> <p>LZO/2.10-cpeCray-22.12 (EasyConfig: LZO-2.10-cpeCray-22.12.eb)</p> </li> <li> <p>LZO/2.10-cpeCray-23.03 (EasyConfig: LZO-2.10-cpeCray-23.03.eb)</p> </li> <li> <p>LZO/2.10-cpeCray-23.09 (EasyConfig: LZO-2.10-cpeCray-23.09.eb)</p> </li> <li> <p>LZO/2.10-cpeCray-23.12 (EasyConfig: LZO-2.10-cpeCray-23.12.eb)</p> </li> <li> <p>LZO/2.10-cpeCray-24.03 (EasyConfig: LZO-2.10-cpeCray-24.03.eb)</p> </li> <li> <p>LZO/2.10-cpeGNU-22.08 (EasyConfig: LZO-2.10-cpeGNU-22.08.eb)</p> </li> <li> <p>LZO/2.10-cpeGNU-22.12 (EasyConfig: LZO-2.10-cpeGNU-22.12.eb)</p> </li> <li> <p>LZO/2.10-cpeGNU-23.09 (EasyConfig: LZO-2.10-cpeGNU-23.09.eb)</p> </li> <li> <p>LZO/2.10-cpeGNU-23.12 (EasyConfig: LZO-2.10-cpeGNU-23.12.eb)</p> </li> <li> <p>LZO/2.10-cpeGNU-24.03 (EasyConfig: LZO-2.10-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/LZO/#technical-documentation","title":"Technical documentation","text":"<ul> <li>LZO home page</li> </ul>","boost":10},{"location":"l/LZO/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>LZO support in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/LZO/#210-from-2106-on","title":"2.10 from 21.06 on","text":"<ul> <li> <p>The EasyConfig is a mix of the EasyBuilders one with documentation extensions taken     from the University of Antwerpen one.</p> </li> <li> <p>For LUMI/23.12, additional license information was added to the installation and      the sanity checks were improved. </p> </li> </ul>","boost":10},{"location":"l/LZO/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig LZO-2.10-cpeAMD-21.06.eb, with module LZO/2.10-cpeAMD-21.06</p> </li> <li> <p>EasyConfig LZO-2.10-cpeAOCC-21.12.eb, with module LZO/2.10-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig LZO-2.10-cpeAOCC-22.06.eb, with module LZO/2.10-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig LZO-2.10-cpeCray-21.06.eb, with module LZO/2.10-cpeCray-21.06</p> </li> <li> <p>EasyConfig LZO-2.10-cpeCray-21.08.eb, with module LZO/2.10-cpeCray-21.08</p> </li> <li> <p>EasyConfig LZO-2.10-cpeCray-21.12.eb, with module LZO/2.10-cpeCray-21.12</p> </li> <li> <p>EasyConfig LZO-2.10-cpeCray-22.06.eb, with module LZO/2.10-cpeCray-22.06</p> </li> <li> <p>EasyConfig LZO-2.10-cpeGNU-21.06.eb, with module LZO/2.10-cpeGNU-21.06</p> </li> <li> <p>EasyConfig LZO-2.10-cpeGNU-21.08.eb, with module LZO/2.10-cpeGNU-21.08</p> </li> <li> <p>EasyConfig LZO-2.10-cpeGNU-21.12.eb, with module LZO/2.10-cpeGNU-21.12</p> </li> <li> <p>EasyConfig LZO-2.10-cpeGNU-22.06.eb, with module LZO/2.10-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/LibTIFF/","title":"LibTIFF","text":"<p>[package list]</p>","boost":10},{"location":"l/LibTIFF/#libtiff","title":"LibTIFF","text":"","boost":10},{"location":"l/LibTIFF/#license-information","title":"License information","text":"<p>There is a  \"Use and Copyright\" notice towards the bottom of the README.md file and further license information in the LICENSE.md file in the source repository.</p> <p>From LUMI/23.12 on, copies of the <code>README.md</code> and <code>LICENSE.md</code> file can be found in  the subdirectory <code>$EBROOTLIBTIFF/share/licenses/LibTIFF</code> after loading the module.</p>","boost":10},{"location":"l/LibTIFF/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider LibTIFF/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>LibTIFF/4.4.0-cpeAMD-22.08 (EasyConfig: LibTIFF-4.4.0-cpeAMD-22.08.eb)</p> </li> <li> <p>LibTIFF/4.4.0-cpeAMD-22.12 (EasyConfig: LibTIFF-4.4.0-cpeAMD-22.12.eb)</p> </li> <li> <p>LibTIFF/4.4.0-cpeAOCC-22.08 (EasyConfig: LibTIFF-4.4.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>LibTIFF/4.4.0-cpeAOCC-22.12 (EasyConfig: LibTIFF-4.4.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>LibTIFF/4.4.0-cpeCray-22.08 (EasyConfig: LibTIFF-4.4.0-cpeCray-22.08.eb)</p> </li> <li> <p>LibTIFF/4.4.0-cpeCray-22.12 (EasyConfig: LibTIFF-4.4.0-cpeCray-22.12.eb)</p> </li> <li> <p>LibTIFF/4.4.0-cpeCray-23.03 (EasyConfig: LibTIFF-4.4.0-cpeCray-23.03.eb)</p> </li> <li> <p>LibTIFF/4.4.0-cpeGNU-22.08 (EasyConfig: LibTIFF-4.4.0-cpeGNU-22.08.eb)</p> </li> <li> <p>LibTIFF/4.4.0-cpeGNU-22.12 (EasyConfig: LibTIFF-4.4.0-cpeGNU-22.12.eb)</p> </li> <li> <p>LibTIFF/4.5.0-cpeAMD-23.09 (EasyConfig: LibTIFF-4.5.0-cpeAMD-23.09.eb)</p> </li> <li> <p>LibTIFF/4.5.0-cpeAMD-23.12 (EasyConfig: LibTIFF-4.5.0-cpeAMD-23.12.eb)</p> </li> <li> <p>LibTIFF/4.5.0-cpeAOCC-23.09 (EasyConfig: LibTIFF-4.5.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>LibTIFF/4.5.0-cpeAOCC-23.12 (EasyConfig: LibTIFF-4.5.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>LibTIFF/4.5.0-cpeCray-23.09 (EasyConfig: LibTIFF-4.5.0-cpeCray-23.09.eb)</p> </li> <li> <p>LibTIFF/4.5.0-cpeCray-23.12 (EasyConfig: LibTIFF-4.5.0-cpeCray-23.12.eb)</p> </li> <li> <p>LibTIFF/4.5.0-cpeGNU-23.09 (EasyConfig: LibTIFF-4.5.0-cpeGNU-23.09.eb)</p> </li> <li> <p>LibTIFF/4.5.0-cpeGNU-23.12 (EasyConfig: LibTIFF-4.5.0-cpeGNU-23.12.eb)</p> </li> <li> <p>LibTIFF/4.6.0-cpeAMD-24.03 (EasyConfig: LibTIFF-4.6.0-cpeAMD-24.03.eb)</p> </li> <li> <p>LibTIFF/4.6.0-cpeAOCC-24.03 (EasyConfig: LibTIFF-4.6.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>LibTIFF/4.6.0-cpeCray-24.03 (EasyConfig: LibTIFF-4.6.0-cpeCray-24.03.eb)</p> </li> <li> <p>LibTIFF/4.6.0-cpeGNU-24.03 (EasyConfig: LibTIFF-4.6.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/LibTIFF/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Home page 1</p> </li> <li> <p>Home page 2 (if it works) on gitlab</p> </li> <li> <p>Home page 3 (dead when I checked but used in the default EasyConfig)</p> </li> <li> <p>GitLab repsitory</p> <ul> <li>version tags on GitLab</li> </ul> </li> <li> <p>Offical download site</p> </li> </ul>","boost":10},{"location":"l/LibTIFF/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>LibTIFF in the EasyBuilders repository</p> </li> <li> <p>LibTIFF in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/LibTIFF/#special-issues","title":"Special issues","text":"<ul> <li>Note that there is a circular dependency between LibTIFF and libwebp as both     can use the other for their command line tools. In the 21.06 version of the LUMI     stack, we let libwebp use LibTIFF but not the other way around.</li> </ul>","boost":10},{"location":"l/LibTIFF/#version-430-from-cpe-2106-on","title":"Version 4.3.0 from CPE 21.06 on","text":"<ul> <li>Our EasyConfig is derived from the University of Antwerpen one which has more     dependencies (that are used by some of the command line tools it seems).</li> </ul>","boost":10},{"location":"l/LibTIFF/#version-440-for-cpe-2206","title":"Version 4.4.0 for CPE 22.06","text":"<ul> <li> <p>Trivial version bump of the 4.3.0 one.</p> </li> <li> <p>Added libdeflate as a dependency. libwebp can also be a dependency but then     we'd create a circular dependency as libwebp can also use LibTIFF.</p> </li> <li> <p>Support for OpenGL is incomplete in this version as the libraries are not installed      everywhere.</p> </li> </ul>","boost":10},{"location":"l/LibTIFF/#version-450-from-cpe-2309-on","title":"Version 4.5.0 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 4.4.0 EasyConfig</p> </li> <li> <p>Support for OpenGL still incomplete.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/LibTIFF/#versuib-460-from-lumi2403-on","title":"Versuib 4.6.0 from LUMI/24.03 on","text":"<ul> <li> <p>Almost trivial version bump of the EasyConfig for 4.6.0 in LUMI/23.12.</p> </li> <li> <p>The list of included executables has also changed so we needed to adapt the sanity checks.</p> </li> <li> <p>When compiling with cpeGNU in partition/G, we needed to unload rocm as it was trying      to link with ROCm while producing an error when running.</p> </li> <li> <p>Ensuring that in the whole chain of dependencies no unnecessary libraries are picked      up, turned out to be essential for <code>cpeAMD</code>.</p> </li> </ul>","boost":10},{"location":"l/LibTIFF/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig LibTIFF-4.3.0-cpeAMD-21.06.eb, with module LibTIFF/4.3.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig LibTIFF-4.3.0-cpeAOCC-21.12.eb, with module LibTIFF/4.3.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig LibTIFF-4.3.0-cpeCray-21.06.eb, with module LibTIFF/4.3.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig LibTIFF-4.3.0-cpeCray-21.08.eb, with module LibTIFF/4.3.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig LibTIFF-4.3.0-cpeCray-21.12.eb, with module LibTIFF/4.3.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig LibTIFF-4.3.0-cpeGNU-21.06.eb, with module LibTIFF/4.3.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig LibTIFF-4.3.0-cpeGNU-21.08.eb, with module LibTIFF/4.3.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig LibTIFF-4.3.0-cpeGNU-21.12.eb, with module LibTIFF/4.3.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig LibTIFF-4.4.0-cpeAOCC-22.06.eb, with module LibTIFF/4.4.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig LibTIFF-4.4.0-cpeCray-22.06.eb, with module LibTIFF/4.4.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig LibTIFF-4.4.0-cpeGNU-22.06.eb, with module LibTIFF/4.4.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/Libint-CP2K/","title":"Libint-CP2K","text":"<p>[package list]</p>","boost":10},{"location":"l/Libint-CP2K/#libint-cp2k","title":"Libint-CP2K","text":"","boost":10},{"location":"l/Libint-CP2K/#license-information","title":"License information","text":"<p>Libint uses a mixed license. See the  LICENSE file in the GitHub repository for more details, and the COPYING and COPYING.LESSER files referred to.</p> <p>When using Libint, users should also cite it according to the information in the CITATION file in the GitHub repository.</p>","boost":10},{"location":"l/Libint-CP2K/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Libint-CP2K/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Libint-CP2K-2.6.0-cpeGNU-23.09.eb, will build Libint-CP2K/2.6.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig Libint-CP2K-2.7.2-cpeGNU-24.03.eb, will build Libint-CP2K/2.7.2-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"l/Libint-CP2K/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Libint for CP2K on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> <li> <p>Regular Libint GitHub</p> </li> </ul>","boost":10},{"location":"l/Libint-CP2K/#easybuild","title":"EasyBuild","text":"<ul> <li>Libint-CP2K in the CSCS repository</li> </ul>","boost":10},{"location":"l/Libint-CP2K/#version-260-for-cp2k-91-and-later","title":"Version 2.6.0 for CP2K 9.1 and later","text":"<ul> <li> <p>The EasyConfig is a direct port from the CSCS one.</p> </li> <li> <p>Always update to the Boost version for the specific toolchain.</p> </li> </ul>","boost":10},{"location":"l/Libint-CP2K/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Libint-CP2K-2.6.0-cpeGNU-21.08.eb, with module Libint-CP2K/2.6.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Libint-CP2K-2.6.0-cpeGNU-21.12.eb, with module Libint-CP2K/2.6.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Libint-CP2K-2.6.0-cpeGNU-22.08.eb, with module Libint-CP2K/2.6.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig Libint-CP2K-2.6.0-cpeGNU-22.12.eb, with module Libint-CP2K/2.6.0-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/Lzip/","title":"Lzip","text":"<p>[package list]</p>","boost":10},{"location":"l/Lzip/#lzip","title":"Lzip","text":"","boost":10},{"location":"l/Lzip/#license-information","title":"License information","text":"<p>Lzip is free software: you can redistribute it and/or modify it under the  terms of the GNU General Public License as published by the Free Software Foundation,  either version 2 of the License, or (at your option) any later version.</p> <p>From LUMI/23.12 on, the license information can also be found in the COPYING file in  the <code>$EBROOTLZIP/share/licenses/Lzip</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/Lzip/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Lzip/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Lzip/1.23-cpeAMD-22.08 (EasyConfig: Lzip-1.23-cpeAMD-22.08.eb)</p> </li> <li> <p>Lzip/1.23-cpeAMD-22.12 (EasyConfig: Lzip-1.23-cpeAMD-22.12.eb)</p> </li> <li> <p>Lzip/1.23-cpeAMD-23.09 (EasyConfig: Lzip-1.23-cpeAMD-23.09.eb)</p> </li> <li> <p>Lzip/1.23-cpeAMD-23.12 (EasyConfig: Lzip-1.23-cpeAMD-23.12.eb)</p> </li> <li> <p>Lzip/1.23-cpeAMD-24.03 (EasyConfig: Lzip-1.23-cpeAMD-24.03.eb)</p> </li> <li> <p>Lzip/1.23-cpeAOCC-22.08 (EasyConfig: Lzip-1.23-cpeAOCC-22.08.eb)</p> </li> <li> <p>Lzip/1.23-cpeAOCC-22.12 (EasyConfig: Lzip-1.23-cpeAOCC-22.12.eb)</p> </li> <li> <p>Lzip/1.23-cpeAOCC-23.09 (EasyConfig: Lzip-1.23-cpeAOCC-23.09.eb)</p> </li> <li> <p>Lzip/1.23-cpeAOCC-23.12 (EasyConfig: Lzip-1.23-cpeAOCC-23.12.eb)</p> </li> <li> <p>Lzip/1.23-cpeAOCC-24.03 (EasyConfig: Lzip-1.23-cpeAOCC-24.03.eb)</p> </li> <li> <p>Lzip/1.23-cpeCray-22.08 (EasyConfig: Lzip-1.23-cpeCray-22.08.eb)</p> </li> <li> <p>Lzip/1.23-cpeCray-22.12 (EasyConfig: Lzip-1.23-cpeCray-22.12.eb)</p> </li> <li> <p>Lzip/1.23-cpeCray-23.03 (EasyConfig: Lzip-1.23-cpeCray-23.03.eb)</p> </li> <li> <p>Lzip/1.23-cpeCray-23.09 (EasyConfig: Lzip-1.23-cpeCray-23.09.eb)</p> </li> <li> <p>Lzip/1.23-cpeCray-23.12 (EasyConfig: Lzip-1.23-cpeCray-23.12.eb)</p> </li> <li> <p>Lzip/1.23-cpeCray-24.03 (EasyConfig: Lzip-1.23-cpeCray-24.03.eb)</p> </li> <li> <p>Lzip/1.23-cpeGNU-22.08 (EasyConfig: Lzip-1.23-cpeGNU-22.08.eb)</p> </li> <li> <p>Lzip/1.23-cpeGNU-22.12 (EasyConfig: Lzip-1.23-cpeGNU-22.12.eb)</p> </li> <li> <p>Lzip/1.23-cpeGNU-23.09 (EasyConfig: Lzip-1.23-cpeGNU-23.09.eb)</p> </li> <li> <p>Lzip/1.23-cpeGNU-23.12 (EasyConfig: Lzip-1.23-cpeGNU-23.12.eb)</p> </li> <li> <p>Lzip/1.23-cpeGNU-24.03 (EasyConfig: Lzip-1.23-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/Lzip/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Lzip home page</p> </li> <li> <p>Lzip downloads</p> </li> </ul>","boost":10},{"location":"l/Lzip/#easybuild","title":"EasyBuild","text":"<p>There is no support for Lzip in EasyBuild</p>","boost":10},{"location":"l/Lzip/#version-122-from-cpe-2106-on","title":"Version 1.22 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is derived from a bundle of tools in use at the     University of Antwerpen.</li> </ul>","boost":10},{"location":"l/Lzip/#version-123-from-cpe-2112-on","title":"Version 1.23 from CPE 21.12 on","text":"<ul> <li> <p>The EasyConfig is a trivial port of the previous one.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/Lzip/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Lzip-1.22-cpeAMD-21.06.eb, with module Lzip/1.22-cpeAMD-21.06</p> </li> <li> <p>EasyConfig Lzip-1.22-cpeCray-21.06.eb, with module Lzip/1.22-cpeCray-21.06</p> </li> <li> <p>EasyConfig Lzip-1.22-cpeCray-21.08.eb, with module Lzip/1.22-cpeCray-21.08</p> </li> <li> <p>EasyConfig Lzip-1.22-cpeGNU-21.06.eb, with module Lzip/1.22-cpeGNU-21.06</p> </li> <li> <p>EasyConfig Lzip-1.22-cpeGNU-21.08.eb, with module Lzip/1.22-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Lzip-1.23-cpeAOCC-21.12.eb, with module Lzip/1.23-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig Lzip-1.23-cpeAOCC-22.06.eb, with module Lzip/1.23-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig Lzip-1.23-cpeCray-21.12.eb, with module Lzip/1.23-cpeCray-21.12</p> </li> <li> <p>EasyConfig Lzip-1.23-cpeCray-22.06.eb, with module Lzip/1.23-cpeCray-22.06</p> </li> <li> <p>EasyConfig Lzip-1.23-cpeGNU-21.12.eb, with module Lzip/1.23-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Lzip-1.23-cpeGNU-22.06.eb, with module Lzip/1.23-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libFLAME/","title":"libFLAME","text":"<p>[package list]</p>","boost":10},{"location":"l/libFLAME/#libflame","title":"libFLAME","text":"","boost":10},{"location":"l/libFLAME/#license-information","title":"License information","text":"<p>LibFLAME is licensed under the  3-clause BSD license, a copy of which can be found in the LICENSE file in the source repository.</p> <p>From version 4.0 on, a copy of the license can be found in <code>$EBROOTLIBFLAME/share/licenses/libFLAME</code> after installation and loading of the libFLAME module.</p>","boost":10},{"location":"l/libFLAME/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libFLAME/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig libFLAME-4.0-cpeCray-23.03-amd-ILP64.eb, will build libFLAME/4.0-cpeCray-23.03-amd-ILP64</p> </li> <li> <p>EasyConfig libFLAME-4.0-cpeCray-23.03-amd.eb, will build libFLAME/4.0-cpeCray-23.03-amd</p> </li> <li> <p>EasyConfig libFLAME-4.2-cpeCray-23.12-amd-ILP64.eb, will build libFLAME/4.2-cpeCray-23.12-amd-ILP64</p> </li> <li> <p>EasyConfig libFLAME-4.2-cpeCray-23.12-amd.eb, will build libFLAME/4.2-cpeCray-23.12-amd</p> </li> <li> <p>EasyConfig libFLAME-4.2-cpeCray-24.03-amd-ILP64.eb, will build libFLAME/4.2-cpeCray-24.03-amd-ILP64</p> </li> <li> <p>EasyConfig libFLAME-4.2-cpeCray-24.03-amd.eb, will build libFLAME/4.2-cpeCray-24.03-amd</p> </li> <li> <p>EasyConfig libFLAME-4.2-cpeGNU-23.12-amd-ILP64.eb, will build libFLAME/4.2-cpeGNU-23.12-amd-ILP64</p> </li> <li> <p>EasyConfig libFLAME-4.2-cpeGNU-23.12-amd.eb, will build libFLAME/4.2-cpeGNU-23.12-amd</p> </li> <li> <p>EasyConfig libFLAME-4.2-cpeGNU-24.03-amd-ILP64.eb, will build libFLAME/4.2-cpeGNU-24.03-amd-ILP64</p> </li> <li> <p>EasyConfig libFLAME-4.2-cpeGNU-24.03-amd.eb, will build libFLAME/4.2-cpeGNU-24.03-amd</p> </li> </ul>","boost":10},{"location":"l/libFLAME/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libFLAME development and home page on GitHub</p> </li> <li> <p>AMD's fork of libFLAME home page</p> </li> <li> <p>AMD's GitHub with the libFLAME fork</p> </li> </ul>","boost":10},{"location":"l/libFLAME/#notes","title":"Notes","text":"<ul> <li>The regular versions use 32-bit integers in the Lapack interfaces but we also created     versions with a 64-bit interface.</li> </ul>","boost":10},{"location":"l/libFLAME/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>No support in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"l/libFLAME/#version-31-for-cpe-2108-archived","title":"Version 3.1 for CPE 21.08 (archived)","text":"<ul> <li>Build from the AMD branch of libFLAME but starting from the EasyBuilders     EasyConfig.</li> </ul>","boost":10},{"location":"l/libFLAME/#version-32-for-cpe-2206-and-2208-archived","title":"Version 3.2 for CPE 22.06 and 22.08 (archived)","text":"<ul> <li> <p>Almost straightforwared port of the 3.1 one but with a different     edit of the configure script that might be more robust across     versions.</p> </li> <li> <p>Added <code>--enable-amd-flags</code> which is said to give better performance     on AMD CPUs. Note that <code>--enable-amd-aocc-flags</code> is needed instead with     the AOCC compiler. And then also added <code>--enable-amd-opt</code> which should     take an AMD-specific code path.</p> </li> <li> <p>Fixed the setup for the Cray compilers.</p> </li> <li> <p>Added a cpeAOCC variant in 22.08.</p> </li> </ul>","boost":10},{"location":"l/libFLAME/#version-40-for-cpe-2212-archived-and-2303","title":"Version 4.0 for CPE 22.12 (archived) and 23.03","text":"<ul> <li> <p>EasyConfig started as a port but needed some work:</p> <ul> <li> <p><code>-march</code> in configure is now <code>-mtune</code> so needed to adapt that line</p> </li> <li> <p>Need to patch a python script that has the Python-interpreter hard-coded as      <code>python</code> instead of <code>python3</code>. We do so with another <code>sed</code> in <code>preconfigopts</code>     as the edit is so simple a ptach isn't really needed.'</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libFLAME/#version-42-for-cpe-2312-and-2403","title":"Version 4.2 for CPE 23.12 and 24.03","text":"<ul> <li>Trivial port of the EasyConfig file for 4.2</li> </ul>","boost":10},{"location":"l/libFLAME/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig libFLAME-3.1-cpeGNU-21.08-amd.eb, with module libFLAME/3.1-cpeGNU-21.08-amd</p> </li> <li> <p>EasyConfig libFLAME-3.2-cpeAOCC-22.08-amd.eb, with module libFLAME/3.2-cpeAOCC-22.08-amd</p> </li> <li> <p>EasyConfig libFLAME-3.2-cpeCray-22.06-amd.eb, with module libFLAME/3.2-cpeCray-22.06-amd</p> </li> <li> <p>EasyConfig libFLAME-3.2-cpeCray-22.08-amd.eb, with module libFLAME/3.2-cpeCray-22.08-amd</p> </li> <li> <p>EasyConfig libFLAME-3.2-cpeGNU-22.06-amd.eb, with module libFLAME/3.2-cpeGNU-22.06-amd</p> </li> <li> <p>EasyConfig libFLAME-3.2-cpeGNU-22.08-amd.eb, with module libFLAME/3.2-cpeGNU-22.08-amd</p> </li> <li> <p>EasyConfig libFLAME-4.0-cpeAOCC-22.12-amd-ILP64.eb, with module libFLAME/4.0-cpeAOCC-22.12-amd-ILP64</p> </li> <li> <p>EasyConfig libFLAME-4.0-cpeAOCC-22.12-amd.eb, with module libFLAME/4.0-cpeAOCC-22.12-amd</p> </li> <li> <p>EasyConfig libFLAME-4.0-cpeCray-22.12-amd-ILP64.eb, with module libFLAME/4.0-cpeCray-22.12-amd-ILP64</p> </li> <li> <p>EasyConfig libFLAME-4.0-cpeCray-22.12-amd.eb, with module libFLAME/4.0-cpeCray-22.12-amd</p> </li> <li> <p>EasyConfig libFLAME-4.0-cpeGNU-22.12-amd-ILP64.eb, with module libFLAME/4.0-cpeGNU-22.12-amd-ILP64</p> </li> <li> <p>EasyConfig libFLAME-4.0-cpeGNU-22.12-amd.eb, with module libFLAME/4.0-cpeGNU-22.12-amd</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libGLU/","title":"libGLU","text":"<p>[package list]</p>","boost":10},{"location":"l/libGLU/#libglu","title":"libGLU","text":"","boost":10},{"location":"l/libGLU/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig libGLU-9.0.2-cpeGNU-22.08.eb, with module libGLU/9.0.2-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"l/libaec/","title":"libaec","text":"<p>[package list]</p>","boost":10},{"location":"l/libaec/#libaec","title":"libaec","text":"","boost":10},{"location":"l/libaec/#license-information","title":"License information","text":"<p>See the  LICENSE.txt file in the source repository.</p> <p>From LUMI 23.12 on, this file can also be found in <code>$EBROOTLIBAEC/share/licenses/libaec</code> after loading the module.</p>","boost":10},{"location":"l/libaec/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libaec/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libaec/1.0.6-cpeAMD-22.08 (EasyConfig: libaec-1.0.6-cpeAMD-22.08.eb)</p> </li> <li> <p>libaec/1.0.6-cpeAMD-22.12 (EasyConfig: libaec-1.0.6-cpeAMD-22.12.eb)</p> </li> <li> <p>libaec/1.0.6-cpeAMD-23.09 (EasyConfig: libaec-1.0.6-cpeAMD-23.09.eb)</p> </li> <li> <p>libaec/1.0.6-cpeAMD-23.12 (EasyConfig: libaec-1.0.6-cpeAMD-23.12.eb)</p> </li> <li> <p>libaec/1.0.6-cpeAMD-24.03 (EasyConfig: libaec-1.0.6-cpeAMD-24.03.eb)</p> </li> <li> <p>libaec/1.0.6-cpeAOCC-22.08 (EasyConfig: libaec-1.0.6-cpeAOCC-22.08.eb)</p> </li> <li> <p>libaec/1.0.6-cpeAOCC-22.12 (EasyConfig: libaec-1.0.6-cpeAOCC-22.12.eb)</p> </li> <li> <p>libaec/1.0.6-cpeAOCC-23.09 (EasyConfig: libaec-1.0.6-cpeAOCC-23.09.eb)</p> </li> <li> <p>libaec/1.0.6-cpeAOCC-23.12 (EasyConfig: libaec-1.0.6-cpeAOCC-23.12.eb)</p> </li> <li> <p>libaec/1.0.6-cpeAOCC-24.03 (EasyConfig: libaec-1.0.6-cpeAOCC-24.03.eb)</p> </li> <li> <p>libaec/1.0.6-cpeCray-22.08 (EasyConfig: libaec-1.0.6-cpeCray-22.08.eb)</p> </li> <li> <p>libaec/1.0.6-cpeCray-22.12 (EasyConfig: libaec-1.0.6-cpeCray-22.12.eb)</p> </li> <li> <p>libaec/1.0.6-cpeCray-23.03 (EasyConfig: libaec-1.0.6-cpeCray-23.03.eb)</p> </li> <li> <p>libaec/1.0.6-cpeCray-23.09 (EasyConfig: libaec-1.0.6-cpeCray-23.09.eb)</p> </li> <li> <p>libaec/1.0.6-cpeCray-23.12 (EasyConfig: libaec-1.0.6-cpeCray-23.12.eb)</p> </li> <li> <p>libaec/1.0.6-cpeCray-24.03 (EasyConfig: libaec-1.0.6-cpeCray-24.03.eb)</p> </li> <li> <p>libaec/1.0.6-cpeGNU-22.08 (EasyConfig: libaec-1.0.6-cpeGNU-22.08.eb)</p> </li> <li> <p>libaec/1.0.6-cpeGNU-22.12 (EasyConfig: libaec-1.0.6-cpeGNU-22.12.eb)</p> </li> <li> <p>libaec/1.0.6-cpeGNU-23.09 (EasyConfig: libaec-1.0.6-cpeGNU-23.09.eb)</p> </li> <li> <p>libaec/1.0.6-cpeGNU-23.12 (EasyConfig: libaec-1.0.6-cpeGNU-23.12.eb)</p> </li> <li> <p>libaec/1.0.6-cpeGNU-24.03 (EasyConfig: libaec-1.0.6-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libaec/#technical-documentation","title":"Technical documentation","text":"<ul> <li>libaec web site / gitlab</li> </ul>","boost":10},{"location":"l/libaec/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no libaec support in the EasyBuilders repository.</p> </li> <li> <p>libaec in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libaec/#version-106-for-cpe-2108-and-later","title":"Version 1.0.6 for CPE 21.08 and later","text":"<ul> <li> <p>The EasyConfig is derived from the CSCS EasyConfig with a version bump.</p> </li> <li> <p>But switched to CMake as this is now the main configuration tool for     libaec.</p> </li> <li> <p>From LUMI/23.12 on, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libaec/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libaec-1.0.6-cpeAOCC-21.12.eb, with module libaec/1.0.6-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libaec-1.0.6-cpeAOCC-22.06.eb, with module libaec/1.0.6-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libaec-1.0.6-cpeCray-21.08.eb, with module libaec/1.0.6-cpeCray-21.08</p> </li> <li> <p>EasyConfig libaec-1.0.6-cpeCray-21.12.eb, with module libaec/1.0.6-cpeCray-21.12</p> </li> <li> <p>EasyConfig libaec-1.0.6-cpeCray-22.06.eb, with module libaec/1.0.6-cpeCray-22.06</p> </li> <li> <p>EasyConfig libaec-1.0.6-cpeGNU-21.08.eb, with module libaec/1.0.6-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libaec-1.0.6-cpeGNU-21.12.eb, with module libaec/1.0.6-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libaec-1.0.6-cpeGNU-22.06.eb, with module libaec/1.0.6-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libaio/","title":"libaio","text":"<p>[package list]</p>","boost":10},{"location":"l/libaio/#libaio","title":"libaio","text":"","boost":10},{"location":"l/libaio/#license-information","title":"License information","text":"<p>The libaio library is licensed under the  GNU Lesser General Public License version 2.1 a copy of which can also be found as  the COPYING file in the libaio repository.</p> <p>After installation and loading of the module a copy of the license can also be found  in <code>$EBROOTLIBAIO/share/licenses/libaio</code>.</p>","boost":10},{"location":"l/libaio/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libaio/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig libaio-0.3.113-cpeCray-23.03.eb, will build libaio/0.3.113-cpeCray-23.03</p> </li> <li> <p>EasyConfig libaio-0.3.113.eb, will build libaio/0.3.113</p> </li> </ul>","boost":10},{"location":"l/libaio/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libaio home page</p> <ul> <li>libaio releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libaio/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libaio support in the EasyBuilders repository</p> </li> <li> <p>There is no support for libaio in the CSCS repository.</p> </li> <li> <p>Spack support for libaio</p> </li> </ul>","boost":10},{"location":"l/libaio/#version-03113-for-22122303","title":"Version 0.3.113 for 22.12/23.03","text":"<ul> <li> <p>The EasyConfig is derived from the 2022b one in the EasyBuilders repository.</p> </li> <li> <p>Extensions: include license information, and install the manual pages.</p> </li> <li> <p>The toolchain option for position-independent code is not needed as that is     already hardcoded in the Makefile.</p> </li> <li> <p>A version compiled with the SYSTEM toolchain is also included for just in case.</p> </li> </ul>","boost":10},{"location":"l/libaio/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig libaio-0.3.113-cpeAMD-22.12.eb, with module libaio/0.3.113-cpeAMD-22.12</p> </li> <li> <p>EasyConfig libaio-0.3.113-cpeAOCC-22.12.eb, with module libaio/0.3.113-cpeAOCC-22.12</p> </li> <li> <p>EasyConfig libaio-0.3.113-cpeCray-22.12.eb, with module libaio/0.3.113-cpeCray-22.12</p> </li> <li> <p>EasyConfig libaio-0.3.113-cpeGNU-22.12.eb, with module libaio/0.3.113-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libarchive/","title":"libarchive","text":"<p>[package list]</p>","boost":10},{"location":"l/libarchive/#libarchive","title":"libarchive","text":"","boost":10},{"location":"l/libarchive/#license-information","title":"License information","text":"<p>See the COPYING file in the source repository. Different source files are covered by different licenses.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the <code>$EBROOTLIBARCHIVE/share/licenses/libarchive</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libarchive/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libarchive/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libarchive/3.6.1-cpeAMD-22.08 (EasyConfig: libarchive-3.6.1-cpeAMD-22.08.eb)</p> </li> <li> <p>libarchive/3.6.1-cpeAMD-22.12 (EasyConfig: libarchive-3.6.1-cpeAMD-22.12.eb)</p> </li> <li> <p>libarchive/3.6.1-cpeAOCC-22.08 (EasyConfig: libarchive-3.6.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>libarchive/3.6.1-cpeAOCC-22.12 (EasyConfig: libarchive-3.6.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>libarchive/3.6.1-cpeCray-22.08 (EasyConfig: libarchive-3.6.1-cpeCray-22.08.eb)</p> </li> <li> <p>libarchive/3.6.1-cpeCray-22.12 (EasyConfig: libarchive-3.6.1-cpeCray-22.12.eb)</p> </li> <li> <p>libarchive/3.6.1-cpeCray-23.03 (EasyConfig: libarchive-3.6.1-cpeCray-23.03.eb)</p> </li> <li> <p>libarchive/3.6.1-cpeGNU-22.08 (EasyConfig: libarchive-3.6.1-cpeGNU-22.08.eb)</p> </li> <li> <p>libarchive/3.6.1-cpeGNU-22.12 (EasyConfig: libarchive-3.6.1-cpeGNU-22.12.eb)</p> </li> <li> <p>libarchive/3.6.2-cpeAMD-23.09 (EasyConfig: libarchive-3.6.2-cpeAMD-23.09.eb)</p> </li> <li> <p>libarchive/3.6.2-cpeAMD-23.12 (EasyConfig: libarchive-3.6.2-cpeAMD-23.12.eb)</p> </li> <li> <p>libarchive/3.6.2-cpeAOCC-23.09 (EasyConfig: libarchive-3.6.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>libarchive/3.6.2-cpeAOCC-23.12 (EasyConfig: libarchive-3.6.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>libarchive/3.6.2-cpeCray-23.09 (EasyConfig: libarchive-3.6.2-cpeCray-23.09.eb)</p> </li> <li> <p>libarchive/3.6.2-cpeCray-23.12 (EasyConfig: libarchive-3.6.2-cpeCray-23.12.eb)</p> </li> <li> <p>libarchive/3.6.2-cpeGNU-23.09 (EasyConfig: libarchive-3.6.2-cpeGNU-23.09.eb)</p> </li> <li> <p>libarchive/3.6.2-cpeGNU-23.12 (EasyConfig: libarchive-3.6.2-cpeGNU-23.12.eb)</p> </li> <li> <p>libarchive/3.7.2-cpeAMD-24.03 (EasyConfig: libarchive-3.7.2-cpeAMD-24.03.eb)</p> </li> <li> <p>libarchive/3.7.2-cpeAOCC-24.03 (EasyConfig: libarchive-3.7.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>libarchive/3.7.2-cpeCray-24.03 (EasyConfig: libarchive-3.7.2-cpeCray-24.03.eb)</p> </li> <li> <p>libarchive/3.7.2-cpeGNU-24.03 (EasyConfig: libarchive-3.7.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libarchive/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libarchive on GitHub</p> <ul> <li>GitHub release</li> </ul> </li> </ul>","boost":10},{"location":"l/libarchive/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libarchive support in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libarchive/#351","title":"3.5.1","text":"<ul> <li>The EasyConfig file is derived from the one used at the University of     Antwerpen which supports more compression tools than the one from the     EasyBuilders repository.</li> </ul>","boost":10},{"location":"l/libarchive/#361-for-cpe-2206","title":"3.6.1 for CPE 22.06","text":"<ul> <li> <p>Trivial port of the EasyConfig of 3.5.1</p> </li> <li> <p>Added libxml2 as dependency as it turns out that it is looking for that     libraries in the configure step.</p> </li> </ul>","boost":10},{"location":"l/libarchive/#version-362-from-cpe-2309-on","title":"Version 3.6.2 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 3.6.1 EasyConfig</p> </li> <li> <p>But aligned the sources with those used by EasyBuild.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation and     the sanity checks were improved.</p> </li> </ul>","boost":10},{"location":"l/libarchive/#372-ffrom-lumi2403-on","title":"3.7.2 ffrom LUMI/24.03 on","text":"<ul> <li> <p>Almost trivial version bump of the 3.7.2 EasyConfig for LUMI/23.12</p> </li> <li> <p>But there is now one additional executable in the package, so sanity checks were      updated.</p> </li> </ul>","boost":10},{"location":"l/libarchive/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libarchive-3.5.1-cpeAMD-21.06.eb, with module libarchive/3.5.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libarchive-3.5.1-cpeAOCC-21.12.eb, with module libarchive/3.5.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libarchive-3.5.1-cpeCray-21.06.eb, with module libarchive/3.5.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig libarchive-3.5.1-cpeCray-21.08.eb, with module libarchive/3.5.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig libarchive-3.5.1-cpeCray-21.12.eb, with module libarchive/3.5.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig libarchive-3.5.1-cpeGNU-21.06.eb, with module libarchive/3.5.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libarchive-3.5.1-cpeGNU-21.08.eb, with module libarchive/3.5.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libarchive-3.5.1-cpeGNU-21.12.eb, with module libarchive/3.5.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libarchive-3.6.1-cpeAOCC-22.06.eb, with module libarchive/3.6.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libarchive-3.6.1-cpeCray-22.06.eb, with module libarchive/3.6.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig libarchive-3.6.1-cpeGNU-22.06.eb, with module libarchive/3.6.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libb2/","title":"libb2","text":"<p>[package list]</p>","boost":10},{"location":"l/libb2/#libb2","title":"libb2","text":"","boost":10},{"location":"l/libb2/#license-information","title":"License information","text":"<p>Libb2 is distributed under the Creativew Commons Zero v1.0 Universal license, see the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the COPYING file can also be found in <code>$EBROOTLIBB2/share/licenses/libb2</code> after loading the module.</p>","boost":10},{"location":"l/libb2/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libb2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libb2/0.98.1-cpeAMD-22.08 (EasyConfig: libb2-0.98.1-cpeAMD-22.08.eb)</p> </li> <li> <p>libb2/0.98.1-cpeAMD-22.12 (EasyConfig: libb2-0.98.1-cpeAMD-22.12.eb)</p> </li> <li> <p>libb2/0.98.1-cpeAMD-23.09 (EasyConfig: libb2-0.98.1-cpeAMD-23.09.eb)</p> </li> <li> <p>libb2/0.98.1-cpeAMD-23.12 (EasyConfig: libb2-0.98.1-cpeAMD-23.12.eb)</p> </li> <li> <p>libb2/0.98.1-cpeAMD-24.03 (EasyConfig: libb2-0.98.1-cpeAMD-24.03.eb)</p> </li> <li> <p>libb2/0.98.1-cpeAOCC-22.08 (EasyConfig: libb2-0.98.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>libb2/0.98.1-cpeAOCC-22.12 (EasyConfig: libb2-0.98.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>libb2/0.98.1-cpeAOCC-23.09 (EasyConfig: libb2-0.98.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>libb2/0.98.1-cpeAOCC-23.12 (EasyConfig: libb2-0.98.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>libb2/0.98.1-cpeAOCC-24.03 (EasyConfig: libb2-0.98.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>libb2/0.98.1-cpeCray-22.08 (EasyConfig: libb2-0.98.1-cpeCray-22.08.eb)</p> </li> <li> <p>libb2/0.98.1-cpeCray-22.12 (EasyConfig: libb2-0.98.1-cpeCray-22.12.eb)</p> </li> <li> <p>libb2/0.98.1-cpeCray-23.03 (EasyConfig: libb2-0.98.1-cpeCray-23.03.eb)</p> </li> <li> <p>libb2/0.98.1-cpeCray-23.09 (EasyConfig: libb2-0.98.1-cpeCray-23.09.eb)</p> </li> <li> <p>libb2/0.98.1-cpeCray-23.12 (EasyConfig: libb2-0.98.1-cpeCray-23.12.eb)</p> </li> <li> <p>libb2/0.98.1-cpeCray-24.03 (EasyConfig: libb2-0.98.1-cpeCray-24.03.eb)</p> </li> <li> <p>libb2/0.98.1-cpeGNU-22.08 (EasyConfig: libb2-0.98.1-cpeGNU-22.08.eb)</p> </li> <li> <p>libb2/0.98.1-cpeGNU-22.12 (EasyConfig: libb2-0.98.1-cpeGNU-22.12.eb)</p> </li> <li> <p>libb2/0.98.1-cpeGNU-23.09 (EasyConfig: libb2-0.98.1-cpeGNU-23.09.eb)</p> </li> <li> <p>libb2/0.98.1-cpeGNU-23.12 (EasyConfig: libb2-0.98.1-cpeGNU-23.12.eb)</p> </li> <li> <p>libb2/0.98.1-cpeGNU-24.03 (EasyConfig: libb2-0.98.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libb2/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libb2 on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libb2/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libb2/#version-0981","title":"Version 0.98.1","text":"<ul> <li> <p>The EasyConfig is an adaptation of an internal EasyConfig file from the     University of Antwerpen. It is a straightforward configure - make - make     install process.</p> </li> <li> <p>For LUMI/23.12, added license information to the installation, and added     the  <code>--enable-native=no</code> to ensure proper cross-compiling.</p> </li> </ul>","boost":10},{"location":"l/libb2/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libb2-0.98.1-cpeAMD-21.06.eb, with module libb2/0.98.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeAOCC-21.12.eb, with module libb2/0.98.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeAOCC-22.06.eb, with module libb2/0.98.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeCray-21.06.eb, with module libb2/0.98.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeCray-21.08.eb, with module libb2/0.98.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeCray-21.12.eb, with module libb2/0.98.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeCray-22.06.eb, with module libb2/0.98.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeGNU-21.06.eb, with module libb2/0.98.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeGNU-21.08.eb, with module libb2/0.98.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeGNU-21.12.eb, with module libb2/0.98.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libb2-0.98.1-cpeGNU-22.06.eb, with module libb2/0.98.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libbfd/","title":"libbfd","text":"<p>[package list]</p>","boost":10},{"location":"l/libbfd/#libbfd","title":"libbfd","text":"","boost":10},{"location":"l/libbfd/#license-information","title":"License information","text":"<p>As libbfd is licensed under the  GNU General Public License version 3.</p> <p>See also the COPYING file in the <code>bfd</code> subdirectory of the Git repository.</p>","boost":10},{"location":"l/libbfd/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libbfd/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig libbfd-2.42-cpeAMD-23.09.eb, will build libbfd/2.42-cpeAMD-23.09</p> </li> <li> <p>EasyConfig libbfd-2.42-cpeAMD-24.03.eb, will build libbfd/2.42-cpeAMD-24.03</p> </li> <li> <p>EasyConfig libbfd-2.42-cpeAOCC-23.09.eb, will build libbfd/2.42-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig libbfd-2.42-cpeAOCC-24.03.eb, will build libbfd/2.42-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig libbfd-2.42-cpeCray-23.09.eb, will build libbfd/2.42-cpeCray-23.09</p> </li> <li> <p>EasyConfig libbfd-2.42-cpeCray-24.03.eb, will build libbfd/2.42-cpeCray-24.03</p> </li> <li> <p>EasyConfig libbfd-2.42-cpeGNU-23.09.eb, will build libbfd/2.42-cpeGNU-23.09</p> </li> <li> <p>EasyConfig libbfd-2.42-cpeGNU-24.03.eb, will build libbfd/2.42-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"l/libbfd/#technical-documentation","title":"Technical documentation","text":"<p>libbfd is distrubuted as part of binutils </p> <ul> <li> <p>binutils home page</p> <ul> <li>binutils downloads for version info</li> </ul> </li> </ul> <p>BFD is a package which allows applications to use the same routines to operate on object files whatever the object file format. A new object file format can be supported simply by creating a new BFD back end and adding it to the library.</p> <p>BFD is split into two parts: the front end, and the back ends (one for each object file format).</p> <ul> <li>The front end of BFD provides the interface to the user. It manages memory     and various canonical data structures. The front end also decides which back     end to use and when to call back end routines.</li> <li>The back ends provide BFD its view of the real world. Each back end provides     a set of calls which the BFD front end can use to maintain its canonical     form. The back ends also may keep around information for their own use, for     greater efficiency.</li> </ul> <p>This package also include libiberty as most tools requiring libbfd also requires it.</p>","boost":10},{"location":"l/libbfd/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no package for libbfd in the EasyBuilders repository, likely as it can be part of binutils.</p> </li> <li> <p>There is no package for libbfd in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libbfd/#version-242-for-cpe-2309","title":"Version 2.42 for CPE 23.09","text":"<ul> <li> <p>Created for LUMI, contributed by Jan Andr\u00e9 Reuter of JSC.</p> </li> <li> <p>The cpeAMD version needed special care as preprocessor flags needed to be disabled.</p> <p>The older version of the <code>craype</code> module which Jan Andr\u00e9 Reuter used when contributing, doesn't seem  to be needed though.</p> </li> </ul>","boost":10},{"location":"l/libcerf/","title":"libcerf","text":"<p>[package list]</p>","boost":10},{"location":"l/libcerf/#libcerf","title":"libcerf","text":"","boost":10},{"location":"l/libcerf/#license-information","title":"License information","text":"<p>Libcerf is licensed under an MIT-style license. See the LICENSE file in the source repository.</p> <p>From LUMI/23.12 on, the LICENSE file can also be found in the  <code>$EBROOTLIBCERF/share/licenses/libcerf</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libcerf/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libcerf/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libcerf/2.1-cpeAMD-22.08 (EasyConfig: libcerf-2.1-cpeAMD-22.08.eb)</p> </li> <li> <p>libcerf/2.1-cpeAOCC-22.08 (EasyConfig: libcerf-2.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>libcerf/2.1-cpeCray-22.08 (EasyConfig: libcerf-2.1-cpeCray-22.08.eb)</p> </li> <li> <p>libcerf/2.1-cpeGNU-22.08 (EasyConfig: libcerf-2.1-cpeGNU-22.08.eb)</p> </li> <li> <p>libcerf/2.3-cpeAMD-22.12 (EasyConfig: libcerf-2.3-cpeAMD-22.12.eb)</p> </li> <li> <p>libcerf/2.3-cpeAMD-23.09 (EasyConfig: libcerf-2.3-cpeAMD-23.09.eb)</p> </li> <li> <p>libcerf/2.3-cpeAMD-23.12 (EasyConfig: libcerf-2.3-cpeAMD-23.12.eb)</p> </li> <li> <p>libcerf/2.3-cpeAMD-24.03 (EasyConfig: libcerf-2.3-cpeAMD-24.03.eb)</p> </li> <li> <p>libcerf/2.3-cpeAOCC-22.12 (EasyConfig: libcerf-2.3-cpeAOCC-22.12.eb)</p> </li> <li> <p>libcerf/2.3-cpeAOCC-23.09 (EasyConfig: libcerf-2.3-cpeAOCC-23.09.eb)</p> </li> <li> <p>libcerf/2.3-cpeAOCC-23.12 (EasyConfig: libcerf-2.3-cpeAOCC-23.12.eb)</p> </li> <li> <p>libcerf/2.3-cpeAOCC-24.03 (EasyConfig: libcerf-2.3-cpeAOCC-24.03.eb)</p> </li> <li> <p>libcerf/2.3-cpeCray-22.12 (EasyConfig: libcerf-2.3-cpeCray-22.12.eb)</p> </li> <li> <p>libcerf/2.3-cpeCray-23.03 (EasyConfig: libcerf-2.3-cpeCray-23.03.eb)</p> </li> <li> <p>libcerf/2.3-cpeCray-23.09 (EasyConfig: libcerf-2.3-cpeCray-23.09.eb)</p> </li> <li> <p>libcerf/2.3-cpeCray-23.12 (EasyConfig: libcerf-2.3-cpeCray-23.12.eb)</p> </li> <li> <p>libcerf/2.3-cpeCray-24.03 (EasyConfig: libcerf-2.3-cpeCray-24.03.eb)</p> </li> <li> <p>libcerf/2.3-cpeGNU-22.12 (EasyConfig: libcerf-2.3-cpeGNU-22.12.eb)</p> </li> <li> <p>libcerf/2.3-cpeGNU-23.09 (EasyConfig: libcerf-2.3-cpeGNU-23.09.eb)</p> </li> <li> <p>libcerf/2.3-cpeGNU-23.12 (EasyConfig: libcerf-2.3-cpeGNU-23.12.eb)</p> </li> <li> <p>libcerf/2.3-cpeGNU-24.03 (EasyConfig: libcerf-2.3-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libcerf/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libderf home page on the Juelich GitLab</p> <ul> <li>Releases on the GitLab</li> </ul> </li> </ul>","boost":10},{"location":"l/libcerf/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libcerf in the EasyBuilders repository</p> </li> <li> <p>libcerf in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libcerf/#version-117-from-cpe-2106-on","title":"Version 1.17 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is derived from the EasyBuilders and University of Antwerpen ones     with additional testing.</p> </li> <li> <p>NOTE: The build process also uses Perl which is currently taken from the system     to avoid having to build an incomplete Perl that early in the build cycle.</p> </li> </ul>","boost":10},{"location":"l/libcerf/#version-21-from-cpe-2206-on","title":"Version 2.1 from CPE 22.06 on","text":"<ul> <li>Trivial update of the EasyConfig.</li> </ul>","boost":10},{"location":"l/libcerf/#version-23-from-cpe-2212-on","title":"Version 2.3 from CPE 22.12 on","text":"<ul> <li> <p>Trivial update of the EasyConfig.</p> </li> <li> <p>For LUMI 23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libcerf/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libcerf-1.17-cpeAMD-21.06.eb, with module libcerf/1.17-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libcerf-1.17-cpeAOCC-21.12.eb, with module libcerf/1.17-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libcerf-1.17-cpeCray-21.06.eb, with module libcerf/1.17-cpeCray-21.06</p> </li> <li> <p>EasyConfig libcerf-1.17-cpeCray-21.08.eb, with module libcerf/1.17-cpeCray-21.08</p> </li> <li> <p>EasyConfig libcerf-1.17-cpeCray-21.12.eb, with module libcerf/1.17-cpeCray-21.12</p> </li> <li> <p>EasyConfig libcerf-1.17-cpeGNU-21.06.eb, with module libcerf/1.17-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libcerf-1.17-cpeGNU-21.08.eb, with module libcerf/1.17-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libcerf-1.17-cpeGNU-21.12.eb, with module libcerf/1.17-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libcerf-2.1-cpeAOCC-22.06.eb, with module libcerf/2.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libcerf-2.1-cpeCray-22.06.eb, with module libcerf/2.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig libcerf-2.1-cpeGNU-22.06.eb, with module libcerf/2.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libdap/","title":"libdap","text":"<p>[package list]</p>","boost":10},{"location":"l/libdap/#libdap","title":"libdap","text":"","boost":10},{"location":"l/libdap/#license-information","title":"License information","text":"<p>Libdap is licensed under the GNU Lesser General Public License version 2.1 a copy of which can be found in the COPYING file in the source repository.</p> <p>From version 3.20.11 on: After installation and loading of the module, the license information can also be found in the <code>$EBROOTLIBDAP/share/licenses/libdap</code> directory.</p>","boost":10},{"location":"l/libdap/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libdap/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig libdap-3.20.11-cpeAOCC-23.03.eb, will build libdap/3.20.11-cpeAOCC-23.03</p> </li> <li> <p>EasyConfig libdap-3.20.11-cpeCray-23.03.eb, will build libdap/3.20.11-cpeCray-23.03</p> </li> <li> <p>EasyConfig libdap-3.20.11-cpeCray-23.09.eb, will build libdap/3.20.11-cpeCray-23.09</p> </li> <li> <p>EasyConfig libdap-3.20.11-cpeGNU-23.09.eb, will build libdap/3.20.11-cpeGNU-23.09</p> </li> <li> <p>EasyConfig libdap-3.21.0-27-cpeCray-24.03.eb, will build libdap/3.21.0-27-cpeCray-24.03</p> </li> <li> <p>EasyConfig libdap-3.21.0-27-cpeGNU-24.03.eb, will build libdap/3.21.0-27-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"l/libdap/#technical-documentation","title":"Technical documentation","text":"<p>libdap is a dependency for NCO but as of September 2021 is not used in any other EasyBuild package.</p> <ul> <li> <p>libdap web site</p> <ul> <li>libdap downloads,     sometimes contains newer versions than mentioned on the web site.</li> </ul> </li> <li> <p>libdap GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libdap/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libdap support in the EasyBuilders repository</p> </li> <li> <p>There is no libdap support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libdap/#version-3208-for-cpe-2008","title":"Version 3.20.8 for CPE 20.08","text":"<ul> <li>The EasyConfig is adapted from the EasyBuilders one for version 3.20.7.</li> </ul>","boost":10},{"location":"l/libdap/#version-3209-for-cpe-2112","title":"Version 3.20.9 for CPE 21.12","text":"<ul> <li>Trivial port of the 3.20.8 EasyConfig file.</li> </ul>","boost":10},{"location":"l/libdap/#version-32010-for-cpe-2206-2208","title":"Version 3.20.10 for CPE 22.06, 22.08","text":"<ul> <li> <p>Trivial port of the 3.20.9 EasyConfig file.</p> </li> <li> <p>Note: EasyConfig changed in November 2023 to download from GitHub     with a slightly different installation procedure as the original download     location was not available.</p> </li> </ul>","boost":10},{"location":"l/libdap/#version-32011-for-cpe-2212-2303","title":"Version 3.20.11 for CPE 22.12, 23.03","text":"<ul> <li> <p>Trivial version bump of the 3.20.10 EasyConfig.</p> </li> <li> <p>Note: EasyConfig changed in November 2023 to download from GitHub     with a slightly different installation procedure as the original download     location was not available.</p> </li> </ul>","boost":10},{"location":"l/libdap/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig libdap-3.20.10-cpeAOCC-22.08.eb, with module libdap/3.20.10-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig libdap-3.20.10-cpeCray-22.06.eb, with module libdap/3.20.10-cpeCray-22.06</p> </li> <li> <p>EasyConfig libdap-3.20.10-cpeCray-22.08.eb, with module libdap/3.20.10-cpeCray-22.08</p> </li> <li> <p>EasyConfig libdap-3.20.10-cpeGNU-22.06.eb, with module libdap/3.20.10-cpeGNU-22.06</p> </li> <li> <p>EasyConfig libdap-3.20.10-cpeGNU-22.08.eb, with module libdap/3.20.10-cpeGNU-22.08</p> </li> <li> <p>EasyConfig libdap-3.20.11-cpeAOCC-22.12.eb, with module libdap/3.20.11-cpeAOCC-22.12</p> </li> <li> <p>EasyConfig libdap-3.20.11-cpeCray-22.12.eb, with module libdap/3.20.11-cpeCray-22.12</p> </li> <li> <p>EasyConfig libdap-3.20.11-cpeGNU-22.12.eb, with module libdap/3.20.11-cpeGNU-22.12</p> </li> <li> <p>EasyConfig libdap-3.20.8-cpeCray-21.08.eb, with module libdap/3.20.8-cpeCray-21.08</p> </li> <li> <p>EasyConfig libdap-3.20.8-cpeGNU-21.08.eb, with module libdap/3.20.8-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libdap-3.20.9-cpeAOCC-21.12.eb, with module libdap/3.20.9-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libdap-3.20.9-cpeCray-21.12.eb, with module libdap/3.20.9-cpeCray-21.12</p> </li> <li> <p>EasyConfig libdap-3.20.9-cpeGNU-21.12.eb, with module libdap/3.20.9-cpeGNU-21.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libdeflate/","title":"libdeflate","text":"<p>[package list]</p>","boost":10},{"location":"l/libdeflate/#libdeflate","title":"libdeflate","text":"","boost":10},{"location":"l/libdeflate/#license-information","title":"License information","text":"<p>Libdeflate is distributed under an MIT licesne a copy of which can be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, a copy of the COPYING file can also be found in the <code>$EBROOTLIBDEFLATE/share/licenses/libdeflate</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libdeflate/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libdeflate/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libdeflate/1.12-cpeAMD-22.08 (EasyConfig: libdeflate-1.12-cpeAMD-22.08.eb)</p> </li> <li> <p>libdeflate/1.12-cpeAOCC-22.08 (EasyConfig: libdeflate-1.12-cpeAOCC-22.08.eb)</p> </li> <li> <p>libdeflate/1.12-cpeCray-22.08 (EasyConfig: libdeflate-1.12-cpeCray-22.08.eb)</p> </li> <li> <p>libdeflate/1.12-cpeGNU-22.08 (EasyConfig: libdeflate-1.12-cpeGNU-22.08.eb)</p> </li> <li> <p>libdeflate/1.15-cpeAMD-22.12 (EasyConfig: libdeflate-1.15-cpeAMD-22.12.eb)</p> </li> <li> <p>libdeflate/1.15-cpeAOCC-22.12 (EasyConfig: libdeflate-1.15-cpeAOCC-22.12.eb)</p> </li> <li> <p>libdeflate/1.15-cpeCray-22.12 (EasyConfig: libdeflate-1.15-cpeCray-22.12.eb)</p> </li> <li> <p>libdeflate/1.15-cpeCray-23.03 (EasyConfig: libdeflate-1.15-cpeCray-23.03.eb)</p> </li> <li> <p>libdeflate/1.15-cpeGNU-22.12 (EasyConfig: libdeflate-1.15-cpeGNU-22.12.eb)</p> </li> <li> <p>libdeflate/1.18-cpeAMD-23.09 (EasyConfig: libdeflate-1.18-cpeAMD-23.09.eb)</p> </li> <li> <p>libdeflate/1.18-cpeAMD-23.12 (EasyConfig: libdeflate-1.18-cpeAMD-23.12.eb)</p> </li> <li> <p>libdeflate/1.18-cpeAOCC-23.09 (EasyConfig: libdeflate-1.18-cpeAOCC-23.09.eb)</p> </li> <li> <p>libdeflate/1.18-cpeAOCC-23.12 (EasyConfig: libdeflate-1.18-cpeAOCC-23.12.eb)</p> </li> <li> <p>libdeflate/1.18-cpeCray-23.09 (EasyConfig: libdeflate-1.18-cpeCray-23.09.eb)</p> </li> <li> <p>libdeflate/1.18-cpeCray-23.12 (EasyConfig: libdeflate-1.18-cpeCray-23.12.eb)</p> </li> <li> <p>libdeflate/1.18-cpeGNU-23.09 (EasyConfig: libdeflate-1.18-cpeGNU-23.09.eb)</p> </li> <li> <p>libdeflate/1.18-cpeGNU-23.12 (EasyConfig: libdeflate-1.18-cpeGNU-23.12.eb)</p> </li> <li> <p>libdeflate/1.19-cpeAMD-24.03 (EasyConfig: libdeflate-1.19-cpeAMD-24.03.eb)</p> </li> <li> <p>libdeflate/1.19-cpeAOCC-24.03 (EasyConfig: libdeflate-1.19-cpeAOCC-24.03.eb)</p> </li> <li> <p>libdeflate/1.19-cpeCray-24.03 (EasyConfig: libdeflate-1.19-cpeCray-24.03.eb)</p> </li> <li> <p>libdeflate/1.19-cpeGNU-24.03 (EasyConfig: libdeflate-1.19-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libdeflate/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libdeflate on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libdeflate/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libdeflate support in the EasyBuilders repository</p> </li> <li> <p>No libdeflate support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libdeflate/#version-18-from-cpe-2106-on","title":"Version 1.8 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one with additional documentation     added.</li> </ul>","boost":10},{"location":"l/libdeflate/#version-112-from-cpe-2206-on","title":"Version 1.12 from CPE 22.06 on","text":"<ul> <li>Trivial version bump of the EasyConfig.</li> </ul>","boost":10},{"location":"l/libdeflate/#version-115-from-cpe-2212-on","title":"Version 1.15 from CPE 22.12 on","text":"<ul> <li> <p>Switched to a CMakeMake build process to align again with the EasyBuilders EasyConfig      but otherwise a port of the 1.12 one.</p> </li> <li> <p>Did tell CMake to use <code>lib</code> instead of <code>lib64</code>.</p> </li> </ul>","boost":10},{"location":"l/libdeflate/#version-118-from-cpe-2309-on","title":"Version 1.18 from CPE 23.09 on","text":"<ul> <li> <p>Trivial port of the 1.15 one.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libdeflate/#version-119-from-lumi2403-on","title":"Version 1.19 from LUMI/24.03 on","text":"<ul> <li>Trivial port of the 1.18 EasyConfig for LUMI/23.12, and version sync with the      2023b common toolchain.</li> </ul>","boost":10},{"location":"l/libdeflate/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libdeflate-1.12-cpeAOCC-22.06.eb, with module libdeflate/1.12-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libdeflate-1.12-cpeCray-22.06.eb, with module libdeflate/1.12-cpeCray-22.06</p> </li> <li> <p>EasyConfig libdeflate-1.12-cpeGNU-22.06.eb, with module libdeflate/1.12-cpeGNU-22.06</p> </li> <li> <p>EasyConfig libdeflate-1.8-cpeAMD-21.06.eb, with module libdeflate/1.8-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libdeflate-1.8-cpeAOCC-21.12.eb, with module libdeflate/1.8-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libdeflate-1.8-cpeCray-21.06.eb, with module libdeflate/1.8-cpeCray-21.06</p> </li> <li> <p>EasyConfig libdeflate-1.8-cpeCray-21.08.eb, with module libdeflate/1.8-cpeCray-21.08</p> </li> <li> <p>EasyConfig libdeflate-1.8-cpeCray-21.12.eb, with module libdeflate/1.8-cpeCray-21.12</p> </li> <li> <p>EasyConfig libdeflate-1.8-cpeGNU-21.06.eb, with module libdeflate/1.8-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libdeflate-1.8-cpeGNU-21.08.eb, with module libdeflate/1.8-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libdeflate-1.8-cpeGNU-21.12.eb, with module libdeflate/1.8-cpeGNU-21.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libevent/","title":"libevent","text":"<p>[package list]</p>","boost":10},{"location":"l/libevent/#libevent","title":"libevent","text":"","boost":10},{"location":"l/libevent/#license-information","title":"License information","text":"<p>Libevent is licensed under the 3-clause BSD license. See the  \"LICENSE.txt\" page on the libevent web site.</p> <p>From LUMI/23.12 on, this file can also be found in the <code>$EBROOTLIBEVENT/share/licenses/libevent</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libevent/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libevent/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libevent/2.1.12-cpeAMD-22.08 (EasyConfig: libevent-2.1.12-cpeAMD-22.08.eb)</p> </li> <li> <p>libevent/2.1.12-cpeAMD-22.12 (EasyConfig: libevent-2.1.12-cpeAMD-22.12.eb)</p> </li> <li> <p>libevent/2.1.12-cpeAMD-23.09 (EasyConfig: libevent-2.1.12-cpeAMD-23.09.eb)</p> </li> <li> <p>libevent/2.1.12-cpeAMD-23.12 (EasyConfig: libevent-2.1.12-cpeAMD-23.12.eb)</p> </li> <li> <p>libevent/2.1.12-cpeAMD-24.03 (EasyConfig: libevent-2.1.12-cpeAMD-24.03.eb)</p> </li> <li> <p>libevent/2.1.12-cpeAOCC-22.08 (EasyConfig: libevent-2.1.12-cpeAOCC-22.08.eb)</p> </li> <li> <p>libevent/2.1.12-cpeAOCC-22.12 (EasyConfig: libevent-2.1.12-cpeAOCC-22.12.eb)</p> </li> <li> <p>libevent/2.1.12-cpeAOCC-23.09 (EasyConfig: libevent-2.1.12-cpeAOCC-23.09.eb)</p> </li> <li> <p>libevent/2.1.12-cpeAOCC-23.12 (EasyConfig: libevent-2.1.12-cpeAOCC-23.12.eb)</p> </li> <li> <p>libevent/2.1.12-cpeAOCC-24.03 (EasyConfig: libevent-2.1.12-cpeAOCC-24.03.eb)</p> </li> <li> <p>libevent/2.1.12-cpeCray-22.08 (EasyConfig: libevent-2.1.12-cpeCray-22.08.eb)</p> </li> <li> <p>libevent/2.1.12-cpeCray-22.12 (EasyConfig: libevent-2.1.12-cpeCray-22.12.eb)</p> </li> <li> <p>libevent/2.1.12-cpeCray-23.03 (EasyConfig: libevent-2.1.12-cpeCray-23.03.eb)</p> </li> <li> <p>libevent/2.1.12-cpeCray-23.09 (EasyConfig: libevent-2.1.12-cpeCray-23.09.eb)</p> </li> <li> <p>libevent/2.1.12-cpeCray-23.12 (EasyConfig: libevent-2.1.12-cpeCray-23.12.eb)</p> </li> <li> <p>libevent/2.1.12-cpeCray-24.03 (EasyConfig: libevent-2.1.12-cpeCray-24.03.eb)</p> </li> <li> <p>libevent/2.1.12-cpeGNU-22.08 (EasyConfig: libevent-2.1.12-cpeGNU-22.08.eb)</p> </li> <li> <p>libevent/2.1.12-cpeGNU-22.12 (EasyConfig: libevent-2.1.12-cpeGNU-22.12.eb)</p> </li> <li> <p>libevent/2.1.12-cpeGNU-23.09 (EasyConfig: libevent-2.1.12-cpeGNU-23.09.eb)</p> </li> <li> <p>libevent/2.1.12-cpeGNU-23.12 (EasyConfig: libevent-2.1.12-cpeGNU-23.12.eb)</p> </li> <li> <p>libevent/2.1.12-cpeGNU-24.03 (EasyConfig: libevent-2.1.12-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libevent/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libevent home page</p> </li> <li> <p>libevent development on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libevent/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libevent in the EasyBuilders repository</p> </li> <li> <p>libevent in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libevent/#version-2112-from-cpe-2106-on","title":"Version 2.1.12 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig was derived from the EasyBuilder one with some input from the     University of Antwerpen one and additional checks.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> <li> <p>In LUMI/23.12 and 24.03, we needed to disable support for OpenSSL as it failed      to compile when preparing the build in containers.</p> </li> </ul>","boost":10},{"location":"l/libevent/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libevent-2.1.12-cpeAMD-21.06.eb, with module libevent/2.1.12-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeAOCC-21.12.eb, with module libevent/2.1.12-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeAOCC-22.06.eb, with module libevent/2.1.12-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeCray-21.06.eb, with module libevent/2.1.12-cpeCray-21.06</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeCray-21.08.eb, with module libevent/2.1.12-cpeCray-21.08</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeCray-21.12.eb, with module libevent/2.1.12-cpeCray-21.12</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeCray-22.06.eb, with module libevent/2.1.12-cpeCray-22.06</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeGNU-21.06.eb, with module libevent/2.1.12-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeGNU-21.08.eb, with module libevent/2.1.12-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeGNU-21.12.eb, with module libevent/2.1.12-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libevent-2.1.12-cpeGNU-22.06.eb, with module libevent/2.1.12-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libexif/","title":"libexif","text":"<p>[package list]</p>","boost":10},{"location":"l/libexif/#libexif","title":"libexif","text":"","boost":10},{"location":"l/libexif/#license-information","title":"License information","text":"<p>Libexif is distributed under the  GNu Lesser General Public License v2.1. A copy of the license can be found in the COPYING file in the libexif GitHub.</p> <p>After installing and loading the module, this file is also available in the  <code>$EBROOTLIBEXIF/share/licenses/libexif</code> directory.</p>","boost":10},{"location":"l/libexif/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libexif/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig libexif-0.6.25-cpeGNU-24.03.eb, will build libexif/0.6.25-cpeGNU-24.03</li> </ul>","boost":10},{"location":"l/libexif/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libexif home page</p> </li> <li> <p>libexif on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libexif/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for libexif in the EasyBuilders repository</p> </li> <li> <p>There is no support for libexif in the CSCS repository</p> </li> <li> <p>Spack package for libexif</p> </li> </ul>","boost":10},{"location":"l/libexif/#version-0625-for-cpegnu-2403","title":"Version 0.6.25 for cpeGNU 24.03","text":"<ul> <li>EasyConfig derived from the EasyBuilders one, but we also store the license     information in the installation directories.</li> </ul>","boost":10},{"location":"l/libffi/","title":"libffi","text":"<p>[package list]</p>","boost":10},{"location":"l/libffi/#libffi","title":"libffi","text":"","boost":10},{"location":"l/libffi/#license-information","title":"License information","text":"<p>The libffi license information can be found in the LICENSE file in the source repository.</p> <p>From LUMI/23.12 on, the LICENSE file can also be found in the <code>$EBROOTLIBFFI/share/licenses/ffi/LICENSE</code> directory after loading the module.</p>","boost":10},{"location":"l/libffi/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libffi/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libffi/3.4.2-cpeAMD-22.08 (EasyConfig: libffi-3.4.2-cpeAMD-22.08.eb)</p> </li> <li> <p>libffi/3.4.2-cpeAOCC-22.08 (EasyConfig: libffi-3.4.2-cpeAOCC-22.08.eb)</p> </li> <li> <p>libffi/3.4.2-cpeCray-22.08 (EasyConfig: libffi-3.4.2-cpeCray-22.08.eb)</p> </li> <li> <p>libffi/3.4.2-cpeGNU-22.08 (EasyConfig: libffi-3.4.2-cpeGNU-22.08.eb)</p> </li> <li> <p>libffi/3.4.4-cpeAMD-22.12 (EasyConfig: libffi-3.4.4-cpeAMD-22.12.eb)</p> </li> <li> <p>libffi/3.4.4-cpeAMD-23.09 (EasyConfig: libffi-3.4.4-cpeAMD-23.09.eb)</p> </li> <li> <p>libffi/3.4.4-cpeAMD-23.12 (EasyConfig: libffi-3.4.4-cpeAMD-23.12.eb)</p> </li> <li> <p>libffi/3.4.4-cpeAMD-24.03 (EasyConfig: libffi-3.4.4-cpeAMD-24.03.eb)</p> </li> <li> <p>libffi/3.4.4-cpeAOCC-22.12 (EasyConfig: libffi-3.4.4-cpeAOCC-22.12.eb)</p> </li> <li> <p>libffi/3.4.4-cpeAOCC-23.09 (EasyConfig: libffi-3.4.4-cpeAOCC-23.09.eb)</p> </li> <li> <p>libffi/3.4.4-cpeAOCC-23.12 (EasyConfig: libffi-3.4.4-cpeAOCC-23.12.eb)</p> </li> <li> <p>libffi/3.4.4-cpeAOCC-24.03 (EasyConfig: libffi-3.4.4-cpeAOCC-24.03.eb)</p> </li> <li> <p>libffi/3.4.4-cpeCray-22.12 (EasyConfig: libffi-3.4.4-cpeCray-22.12.eb)</p> </li> <li> <p>libffi/3.4.4-cpeCray-23.03 (EasyConfig: libffi-3.4.4-cpeCray-23.03.eb)</p> </li> <li> <p>libffi/3.4.4-cpeCray-23.09 (EasyConfig: libffi-3.4.4-cpeCray-23.09.eb)</p> </li> <li> <p>libffi/3.4.4-cpeCray-23.12 (EasyConfig: libffi-3.4.4-cpeCray-23.12.eb)</p> </li> <li> <p>libffi/3.4.4-cpeCray-24.03 (EasyConfig: libffi-3.4.4-cpeCray-24.03.eb)</p> </li> <li> <p>libffi/3.4.4-cpeGNU-22.12 (EasyConfig: libffi-3.4.4-cpeGNU-22.12.eb)</p> </li> <li> <p>libffi/3.4.4-cpeGNU-23.09 (EasyConfig: libffi-3.4.4-cpeGNU-23.09.eb)</p> </li> <li> <p>libffi/3.4.4-cpeGNU-23.12 (EasyConfig: libffi-3.4.4-cpeGNU-23.12.eb)</p> </li> <li> <p>libffi/3.4.4-cpeGNU-24.03 (EasyConfig: libffi-3.4.4-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libffi/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libffi home page</p> </li> <li> <p>libffi on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libffi/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libffi in the EasyBuilders repository</p> </li> <li> <p>libffi in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libffi/#version-342-from-cpe-2106-on","title":"Version 3.4.2 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is a mix of the EasyBuilders and University of Antwerpen one, with     some important changes:</p> <ul> <li> <p>Switch to GitHub as the download site</p> </li> <li> <p>Install libraries in lib instead of in lib64 as most other packages install in lib.</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libffi/#version-344-from-cpe-2212-on","title":"Version 3.4.4 from CPE 22.12 on","text":"<ul> <li> <p>The EasyConfig is a trivial port of the 3.4.2 one.</p> </li> <li> <p>But added the <code>--disable-exec-static-tramp</code> that is also used in the EasyBuilders     EasyConfig.</p> </li> <li> <p>From LUMI/23.12 on, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libffi/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libffi-3.4.2-cpeAMD-21.06.eb, with module libffi/3.4.2-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeAOCC-21.12.eb, with module libffi/3.4.2-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeAOCC-22.06.eb, with module libffi/3.4.2-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeCray-21.06.eb, with module libffi/3.4.2-cpeCray-21.06</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeCray-21.08.eb, with module libffi/3.4.2-cpeCray-21.08</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeCray-21.12.eb, with module libffi/3.4.2-cpeCray-21.12</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeCray-22.06.eb, with module libffi/3.4.2-cpeCray-22.06</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeGNU-21.06.eb, with module libffi/3.4.2-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeGNU-21.08.eb, with module libffi/3.4.2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeGNU-21.12.eb, with module libffi/3.4.2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libffi-3.4.2-cpeGNU-22.06.eb, with module libffi/3.4.2-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libgd/","title":"libgd","text":"<p>[package list]</p>","boost":10},{"location":"l/libgd/#libgd","title":"libgd","text":"","boost":10},{"location":"l/libgd/#license-information","title":"License information","text":"<p>Libgd has a complicated license that can be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the <code>$EBROOTLIBGD/share/licenses/libgd</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libgd/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libgd/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libgd/2.3.3-cpeAMD-22.08 (EasyConfig: libgd-2.3.3-cpeAMD-22.08.eb)</p> </li> <li> <p>libgd/2.3.3-cpeAMD-22.12 (EasyConfig: libgd-2.3.3-cpeAMD-22.12.eb)</p> </li> <li> <p>libgd/2.3.3-cpeAMD-23.09 (EasyConfig: libgd-2.3.3-cpeAMD-23.09.eb)</p> </li> <li> <p>libgd/2.3.3-cpeAMD-23.12 (EasyConfig: libgd-2.3.3-cpeAMD-23.12.eb)</p> </li> <li> <p>libgd/2.3.3-cpeAMD-24.03 (EasyConfig: libgd-2.3.3-cpeAMD-24.03.eb)</p> </li> <li> <p>libgd/2.3.3-cpeAOCC-22.08 (EasyConfig: libgd-2.3.3-cpeAOCC-22.08.eb)</p> </li> <li> <p>libgd/2.3.3-cpeAOCC-22.12 (EasyConfig: libgd-2.3.3-cpeAOCC-22.12.eb)</p> </li> <li> <p>libgd/2.3.3-cpeAOCC-23.09 (EasyConfig: libgd-2.3.3-cpeAOCC-23.09.eb)</p> </li> <li> <p>libgd/2.3.3-cpeAOCC-23.12 (EasyConfig: libgd-2.3.3-cpeAOCC-23.12.eb)</p> </li> <li> <p>libgd/2.3.3-cpeAOCC-24.03 (EasyConfig: libgd-2.3.3-cpeAOCC-24.03.eb)</p> </li> <li> <p>libgd/2.3.3-cpeCray-22.08 (EasyConfig: libgd-2.3.3-cpeCray-22.08.eb)</p> </li> <li> <p>libgd/2.3.3-cpeCray-22.12 (EasyConfig: libgd-2.3.3-cpeCray-22.12.eb)</p> </li> <li> <p>libgd/2.3.3-cpeCray-23.03 (EasyConfig: libgd-2.3.3-cpeCray-23.03.eb)</p> </li> <li> <p>libgd/2.3.3-cpeCray-23.09 (EasyConfig: libgd-2.3.3-cpeCray-23.09.eb)</p> </li> <li> <p>libgd/2.3.3-cpeCray-23.12 (EasyConfig: libgd-2.3.3-cpeCray-23.12.eb)</p> </li> <li> <p>libgd/2.3.3-cpeCray-24.03 (EasyConfig: libgd-2.3.3-cpeCray-24.03.eb)</p> </li> <li> <p>libgd/2.3.3-cpeGNU-22.08 (EasyConfig: libgd-2.3.3-cpeGNU-22.08.eb)</p> </li> <li> <p>libgd/2.3.3-cpeGNU-22.12 (EasyConfig: libgd-2.3.3-cpeGNU-22.12.eb)</p> </li> <li> <p>libgd/2.3.3-cpeGNU-23.09 (EasyConfig: libgd-2.3.3-cpeGNU-23.09.eb)</p> </li> <li> <p>libgd/2.3.3-cpeGNU-23.12 (EasyConfig: libgd-2.3.3-cpeGNU-23.12.eb)</p> </li> <li> <p>libgd/2.3.3-cpeGNU-24.03 (EasyConfig: libgd-2.3.3-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libgd/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libgd web site</p> </li> <li> <p>libgd GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libgd/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libgd support in the EasyBuilders repository</p> </li> <li> <p>libgd support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libgd/#version-233-for-cpe-2108","title":"Version 2.3.3 for cpe 21.08","text":"<ul> <li> <p>The EasyConfig file is a mix of the EasyBuilders and UAntwerpen ones.</p> </li> <li> <p>Added a better sanity check from CPE 22.12 on.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libgd/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libgd-2.3.3-cpeAOCC-21.12.eb, with module libgd/2.3.3-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libgd-2.3.3-cpeAOCC-22.06.eb, with module libgd/2.3.3-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libgd-2.3.3-cpeCray-21.08.eb, with module libgd/2.3.3-cpeCray-21.08</p> </li> <li> <p>EasyConfig libgd-2.3.3-cpeCray-21.12.eb, with module libgd/2.3.3-cpeCray-21.12</p> </li> <li> <p>EasyConfig libgd-2.3.3-cpeCray-22.06.eb, with module libgd/2.3.3-cpeCray-22.06</p> </li> <li> <p>EasyConfig libgd-2.3.3-cpeGNU-21.08.eb, with module libgd/2.3.3-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libgd-2.3.3-cpeGNU-21.12.eb, with module libgd/2.3.3-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libgd-2.3.3-cpeGNU-22.06.eb, with module libgd/2.3.3-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libgeotiff/","title":"libgeotiff","text":"<p>[package list]</p>","boost":10},{"location":"l/libgeotiff/#libgeotiff","title":"libgeotiff","text":"","boost":10},{"location":"l/libgeotiff/#license-information","title":"License information","text":"<p>The license for libgeotiff can be found in the  LICENSE file in the GitHub repository.</p> <p>After installation and loading the module, the license can also be found in <code>$EBROOTLIBGEOTIFF/share/licenses/libgeotiff/LICENSE</code>.</p>","boost":10},{"location":"l/libgeotiff/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libgeotiff/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig libgeotiff-1.7.1-cpeGNU-23.09.eb, will build libgeotiff/1.7.1-cpeGNU-23.09</p> </li> <li> <p>EasyConfig libgeotiff-1.7.3-cpeGNU-24.03.eb, will build libgeotiff/1.7.3-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"l/libgeotiff/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libgeotiff Wiki</p> </li> <li> <p> GeoTIFF web page</p> </li> <li> <p>libgeotiff on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libgeotiff/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libgeotiff in the EasyBuilders repository</p> </li> <li> <p>libgeotiff in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libgeotiff/#version-171-for-cpegnu2208-and-cpegnu2309","title":"Version 1.7.1 for cpeGNU/22.08 and cpeGNU/23.09","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one.</li> </ul>","boost":10},{"location":"l/libgeotiff/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig libgeotiff-1.7.1-cpeGNU-22.08.eb, with module libgeotiff/1.7.1-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"l/libglvnd/","title":"libglvnd","text":"<p>[package list]</p>","boost":10},{"location":"l/libglvnd/#libglvnd","title":"libglvnd","text":"","boost":10},{"location":"l/libglvnd/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig libglvnd-1.4.0-cpeGNU-22.08.eb, with module libglvnd/1.4.0-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"l/libiconv/","title":"libiconv","text":"<p>[package list]</p>","boost":10},{"location":"l/libiconv/#libiconv","title":"libiconv","text":"","boost":10},{"location":"l/libiconv/#license-information","title":"License information","text":"<p>The libiconv and libcharset libraries and their header files are under LGPL, see the COPYING.LIB file in the source repository.</p> <p>The iconv program and the documentation are under GPL, see  the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, these files can also be found in the subdirectory <code>$EBROOTLIBICONV/share/licenses/libiconv</code> after loading the module.</p>","boost":10},{"location":"l/libiconv/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libiconv/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libiconv/1.17-cpeAMD-22.08 (EasyConfig: libiconv-1.17-cpeAMD-22.08.eb)</p> </li> <li> <p>libiconv/1.17-cpeAMD-22.12 (EasyConfig: libiconv-1.17-cpeAMD-22.12.eb)</p> </li> <li> <p>libiconv/1.17-cpeAMD-23.09 (EasyConfig: libiconv-1.17-cpeAMD-23.09.eb)</p> </li> <li> <p>libiconv/1.17-cpeAMD-23.12 (EasyConfig: libiconv-1.17-cpeAMD-23.12.eb)</p> </li> <li> <p>libiconv/1.17-cpeAMD-24.03 (EasyConfig: libiconv-1.17-cpeAMD-24.03.eb)</p> </li> <li> <p>libiconv/1.17-cpeAOCC-22.08 (EasyConfig: libiconv-1.17-cpeAOCC-22.08.eb)</p> </li> <li> <p>libiconv/1.17-cpeAOCC-22.12 (EasyConfig: libiconv-1.17-cpeAOCC-22.12.eb)</p> </li> <li> <p>libiconv/1.17-cpeAOCC-23.09 (EasyConfig: libiconv-1.17-cpeAOCC-23.09.eb)</p> </li> <li> <p>libiconv/1.17-cpeAOCC-23.12 (EasyConfig: libiconv-1.17-cpeAOCC-23.12.eb)</p> </li> <li> <p>libiconv/1.17-cpeAOCC-24.03 (EasyConfig: libiconv-1.17-cpeAOCC-24.03.eb)</p> </li> <li> <p>libiconv/1.17-cpeCray-22.08 (EasyConfig: libiconv-1.17-cpeCray-22.08.eb)</p> </li> <li> <p>libiconv/1.17-cpeCray-22.12 (EasyConfig: libiconv-1.17-cpeCray-22.12.eb)</p> </li> <li> <p>libiconv/1.17-cpeCray-23.03 (EasyConfig: libiconv-1.17-cpeCray-23.03.eb)</p> </li> <li> <p>libiconv/1.17-cpeCray-23.09 (EasyConfig: libiconv-1.17-cpeCray-23.09.eb)</p> </li> <li> <p>libiconv/1.17-cpeCray-23.12 (EasyConfig: libiconv-1.17-cpeCray-23.12.eb)</p> </li> <li> <p>libiconv/1.17-cpeCray-24.03 (EasyConfig: libiconv-1.17-cpeCray-24.03.eb)</p> </li> <li> <p>libiconv/1.17-cpeGNU-22.08 (EasyConfig: libiconv-1.17-cpeGNU-22.08.eb)</p> </li> <li> <p>libiconv/1.17-cpeGNU-22.12 (EasyConfig: libiconv-1.17-cpeGNU-22.12.eb)</p> </li> <li> <p>libiconv/1.17-cpeGNU-23.09 (EasyConfig: libiconv-1.17-cpeGNU-23.09.eb)</p> </li> <li> <p>libiconv/1.17-cpeGNU-23.12 (EasyConfig: libiconv-1.17-cpeGNU-23.12.eb)</p> </li> <li> <p>libiconv/1.17-cpeGNU-24.03 (EasyConfig: libiconv-1.17-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libiconv/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libiconv home page</p> </li> <li> <p>Download libiconv from the GNU repository</p> </li> </ul>","boost":10},{"location":"l/libiconv/#easybuild","title":"EasyBuild","text":"<ul> <li>libiconv support in the EasyBuilders repository</li> </ul>","boost":10},{"location":"l/libiconv/#116-from-2106-on","title":"1.16 from 21.06 on","text":"<ul> <li>We started from an EasyConfig file obtained from the University of Antwerpen     which already employs gettext (which is in fact the first source of a circular     dependency as gettext can also benefit from libiconv).</li> </ul>","boost":10},{"location":"l/libiconv/#117-from-2206-on","title":"1.17 from 22.06 on","text":"<ul> <li> <p>Trivial port of the 1.16 EasyConfig.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libiconv/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libiconv-1.16-cpeAMD-21.06.eb, with module libiconv/1.16-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libiconv-1.16-cpeAOCC-21.12.eb, with module libiconv/1.16-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libiconv-1.16-cpeCray-21.06.eb, with module libiconv/1.16-cpeCray-21.06</p> </li> <li> <p>EasyConfig libiconv-1.16-cpeCray-21.08.eb, with module libiconv/1.16-cpeCray-21.08</p> </li> <li> <p>EasyConfig libiconv-1.16-cpeCray-21.12.eb, with module libiconv/1.16-cpeCray-21.12</p> </li> <li> <p>EasyConfig libiconv-1.16-cpeGNU-21.06.eb, with module libiconv/1.16-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libiconv-1.16-cpeGNU-21.08.eb, with module libiconv/1.16-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libiconv-1.16-cpeGNU-21.12.eb, with module libiconv/1.16-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libiconv-1.17-cpeAOCC-22.06.eb, with module libiconv/1.17-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libiconv-1.17-cpeCray-22.06.eb, with module libiconv/1.17-cpeCray-22.06</p> </li> <li> <p>EasyConfig libiconv-1.17-cpeGNU-22.06.eb, with module libiconv/1.17-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libidn/","title":"libidn","text":"<p>[package list]</p>","boost":10},{"location":"l/libidn/#libidn","title":"libidn","text":"","boost":10},{"location":"l/libidn/#license-information","title":"License information","text":"<p>Libidn is distributed under a mix of licenses for various components.</p> <p>See the COPYING file in the source repository, and the COPYING.LESSERv2, COPYING.LESSERv3, COPYING.v2, and COPYING.v3 files referred to.</p>","boost":10},{"location":"l/libidn/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libidn/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libidn/1.38-cpeAMD-22.08 (EasyConfig: libidn-1.38-cpeAMD-22.08.eb)</p> </li> <li> <p>libidn/1.38-cpeAOCC-22.08 (EasyConfig: libidn-1.38-cpeAOCC-22.08.eb)</p> </li> <li> <p>libidn/1.38-cpeCray-22.08 (EasyConfig: libidn-1.38-cpeCray-22.08.eb)</p> </li> <li> <p>libidn/1.38-cpeGNU-22.08 (EasyConfig: libidn-1.38-cpeGNU-22.08.eb)</p> </li> </ul>","boost":10},{"location":"l/libidn/#technical-documentation","title":"Technical documentation","text":"<p>libidn is old software that we would like to retire. Codes should use the newer replacement, libidn2 instead.</p> <ul> <li> <p>libidn page at GNU</p> <ul> <li>libidn downloads at GNU</li> </ul> </li> </ul>","boost":10},{"location":"l/libidn/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libidn support in the EasyBuilders repository</p> </li> <li> <p>There is no libidn support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libidn/#version-138-from-cpe-2106-on","title":"Version 1.38 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is a mix of the EasyBuilders and University of Antwerpen ones.</li> </ul>","boost":10},{"location":"l/libidn/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libidn-1.38-cpeAMD-21.06.eb, with module libidn/1.38-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libidn-1.38-cpeAOCC-21.12.eb, with module libidn/1.38-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libidn-1.38-cpeAOCC-22.06.eb, with module libidn/1.38-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libidn-1.38-cpeCray-21.06.eb, with module libidn/1.38-cpeCray-21.06</p> </li> <li> <p>EasyConfig libidn-1.38-cpeCray-21.08.eb, with module libidn/1.38-cpeCray-21.08</p> </li> <li> <p>EasyConfig libidn-1.38-cpeCray-21.12.eb, with module libidn/1.38-cpeCray-21.12</p> </li> <li> <p>EasyConfig libidn-1.38-cpeCray-22.06.eb, with module libidn/1.38-cpeCray-22.06</p> </li> <li> <p>EasyConfig libidn-1.38-cpeGNU-21.06.eb, with module libidn/1.38-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libidn-1.38-cpeGNU-21.08.eb, with module libidn/1.38-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libidn-1.38-cpeGNU-21.12.eb, with module libidn/1.38-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libidn-1.38-cpeGNU-22.06.eb, with module libidn/1.38-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libidn2/","title":"libidn2","text":"<p>[package list]</p>","boost":10},{"location":"l/libidn2/#libidn2","title":"libidn2","text":"","boost":10},{"location":"l/libidn2/#license-information","title":"License information","text":"<p>Libidn2 is distributed under a mix of licenses for various components.</p> <p>See the COPYING file in the source repository, and the COPYING.LESSERv3, COPYING.v2, and COPYING.unicode files referred to.</p> <p>From LUMI/23.12 on, these files can also be found in <code>$EBROOTLIBIDN2/share/licenses/libidn2</code> after loading the module.</p>","boost":10},{"location":"l/libidn2/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libidn2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libidn2/2.3.2-cpeAMD-22.08 (EasyConfig: libidn2-2.3.2-cpeAMD-22.08.eb)</p> </li> <li> <p>libidn2/2.3.2-cpeAOCC-22.08 (EasyConfig: libidn2-2.3.2-cpeAOCC-22.08.eb)</p> </li> <li> <p>libidn2/2.3.2-cpeCray-22.08 (EasyConfig: libidn2-2.3.2-cpeCray-22.08.eb)</p> </li> <li> <p>libidn2/2.3.2-cpeGNU-22.08 (EasyConfig: libidn2-2.3.2-cpeGNU-22.08.eb)</p> </li> <li> <p>libidn2/2.3.4-cpeAMD-22.12 (EasyConfig: libidn2-2.3.4-cpeAMD-22.12.eb)</p> </li> <li> <p>libidn2/2.3.4-cpeAMD-23.09 (EasyConfig: libidn2-2.3.4-cpeAMD-23.09.eb)</p> </li> <li> <p>libidn2/2.3.4-cpeAOCC-22.12 (EasyConfig: libidn2-2.3.4-cpeAOCC-22.12.eb)</p> </li> <li> <p>libidn2/2.3.4-cpeAOCC-23.09 (EasyConfig: libidn2-2.3.4-cpeAOCC-23.09.eb)</p> </li> <li> <p>libidn2/2.3.4-cpeCray-22.12 (EasyConfig: libidn2-2.3.4-cpeCray-22.12.eb)</p> </li> <li> <p>libidn2/2.3.4-cpeCray-23.03 (EasyConfig: libidn2-2.3.4-cpeCray-23.03.eb)</p> </li> <li> <p>libidn2/2.3.4-cpeCray-23.09 (EasyConfig: libidn2-2.3.4-cpeCray-23.09.eb)</p> </li> <li> <p>libidn2/2.3.4-cpeGNU-22.12 (EasyConfig: libidn2-2.3.4-cpeGNU-22.12.eb)</p> </li> <li> <p>libidn2/2.3.4-cpeGNU-23.09 (EasyConfig: libidn2-2.3.4-cpeGNU-23.09.eb)</p> </li> <li> <p>libidn2/2.3.7-cpeAMD-23.12 (EasyConfig: libidn2-2.3.7-cpeAMD-23.12.eb)</p> </li> <li> <p>libidn2/2.3.7-cpeAMD-24.03 (EasyConfig: libidn2-2.3.7-cpeAMD-24.03.eb)</p> </li> <li> <p>libidn2/2.3.7-cpeAOCC-23.12 (EasyConfig: libidn2-2.3.7-cpeAOCC-23.12.eb)</p> </li> <li> <p>libidn2/2.3.7-cpeAOCC-24.03 (EasyConfig: libidn2-2.3.7-cpeAOCC-24.03.eb)</p> </li> <li> <p>libidn2/2.3.7-cpeCray-23.12 (EasyConfig: libidn2-2.3.7-cpeCray-23.12.eb)</p> </li> <li> <p>libidn2/2.3.7-cpeCray-24.03 (EasyConfig: libidn2-2.3.7-cpeCray-24.03.eb)</p> </li> <li> <p>libidn2/2.3.7-cpeGNU-23.12 (EasyConfig: libidn2-2.3.7-cpeGNU-23.12.eb)</p> </li> <li> <p>libidn2/2.3.7-cpeGNU-24.03 (EasyConfig: libidn2-2.3.7-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libidn2/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libidn page at GNU</p> <ul> <li>libidn downloads at GNU</li> </ul> </li> <li> <p>libidn2 development on GitLab</p> </li> </ul>","boost":10},{"location":"l/libidn2/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libidn2 support in the EasyBuilders repository</p> </li> <li> <p>There is no libidn2 support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libidn2/#version-232-from-cpe-2106-on","title":"Version 2.3.2 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is a mix of the EasyBuilders and University of Antwerpen ones.</li> </ul>","boost":10},{"location":"l/libidn2/#version-234-from-cpe-2212-on","title":"Version 2.3.4 from CPE 22.12 on","text":"<ul> <li>Trivial port of the 2.3.2 EasyConfig.</li> </ul>","boost":10},{"location":"l/libidn2/#version-237-from-lumi2312-on","title":"Version 2.3.7 from LUMI/23.12 on","text":"<ul> <li> <p>Trivial port of the 2.3.4 EasycConfig for LUMI/23.09, but added license information      to the installation.</p> </li> <li> <p>Needed to upgrade to this version for compatibility with CCE 17.</p> </li> </ul>","boost":10},{"location":"l/libidn2/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libidn2-2.3.2-cpeAMD-21.06.eb, with module libidn2/2.3.2-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeAOCC-21.12.eb, with module libidn2/2.3.2-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeAOCC-22.06.eb, with module libidn2/2.3.2-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeCray-21.06.eb, with module libidn2/2.3.2-cpeCray-21.06</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeCray-21.08.eb, with module libidn2/2.3.2-cpeCray-21.08</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeCray-21.12.eb, with module libidn2/2.3.2-cpeCray-21.12</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeCray-22.06.eb, with module libidn2/2.3.2-cpeCray-22.06</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeGNU-21.06.eb, with module libidn2/2.3.2-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeGNU-21.08.eb, with module libidn2/2.3.2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeGNU-21.12.eb, with module libidn2/2.3.2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libidn2-2.3.2-cpeGNU-22.06.eb, with module libidn2/2.3.2-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libjpeg-turbo/","title":"libjpeg-turbo","text":"<p>[package list]</p>","boost":10},{"location":"l/libjpeg-turbo/#libjpeg-turbo","title":"libjpeg-turbo","text":"","boost":10},{"location":"l/libjpeg-turbo/#license-information","title":"License information","text":"<p>License information for libjpeg-turbo is available in the LICENSE.md file in the GitHub repository.</p> <p>From LUMI/23.12 on, this file can also be found in the <code>$EBROOTLIBJPEGMINTURBO/share/licenses/libjpeg-turbo</code> directory after loading the module.</p>","boost":10},{"location":"l/libjpeg-turbo/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libjpeg-turbo/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libjpeg-turbo/2.1.3-cpeAMD-22.08 (EasyConfig: libjpeg-turbo-2.1.3-cpeAMD-22.08.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.3-cpeAOCC-22.08 (EasyConfig: libjpeg-turbo-2.1.3-cpeAOCC-22.08.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.3-cpeCray-22.08 (EasyConfig: libjpeg-turbo-2.1.3-cpeCray-22.08.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.3-cpeGNU-22.08 (EasyConfig: libjpeg-turbo-2.1.3-cpeGNU-22.08.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.4-cpeAMD-22.12 (EasyConfig: libjpeg-turbo-2.1.4-cpeAMD-22.12.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.4-cpeAOCC-22.12 (EasyConfig: libjpeg-turbo-2.1.4-cpeAOCC-22.12.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.4-cpeCray-22.12 (EasyConfig: libjpeg-turbo-2.1.4-cpeCray-22.12.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.4-cpeCray-23.03 (EasyConfig: libjpeg-turbo-2.1.4-cpeCray-23.03.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.4-cpeGNU-22.12 (EasyConfig: libjpeg-turbo-2.1.4-cpeGNU-22.12.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.5.1-cpeAMD-23.09 (EasyConfig: libjpeg-turbo-2.1.5.1-cpeAMD-23.09.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.5.1-cpeAMD-23.12 (EasyConfig: libjpeg-turbo-2.1.5.1-cpeAMD-23.12.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.5.1-cpeAOCC-23.09 (EasyConfig: libjpeg-turbo-2.1.5.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.5.1-cpeAOCC-23.12 (EasyConfig: libjpeg-turbo-2.1.5.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.5.1-cpeCray-23.09 (EasyConfig: libjpeg-turbo-2.1.5.1-cpeCray-23.09.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.5.1-cpeCray-23.12 (EasyConfig: libjpeg-turbo-2.1.5.1-cpeCray-23.12.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.5.1-cpeGNU-23.09 (EasyConfig: libjpeg-turbo-2.1.5.1-cpeGNU-23.09.eb)</p> </li> <li> <p>libjpeg-turbo/2.1.5.1-cpeGNU-23.12 (EasyConfig: libjpeg-turbo-2.1.5.1-cpeGNU-23.12.eb)</p> </li> <li> <p>libjpeg-turbo/3.0.1-cpeAMD-24.03 (EasyConfig: libjpeg-turbo-3.0.1-cpeAMD-24.03.eb)</p> </li> <li> <p>libjpeg-turbo/3.0.1-cpeAOCC-24.03 (EasyConfig: libjpeg-turbo-3.0.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>libjpeg-turbo/3.0.1-cpeCray-24.03 (EasyConfig: libjpeg-turbo-3.0.1-cpeCray-24.03.eb)</p> </li> <li> <p>libjpeg-turbo/3.0.1-cpeGNU-24.03 (EasyConfig: libjpeg-turbo-3.0.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libjpeg-turbo/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libjpeg-turbo on GitHub</p> <ul> <li> GitHub releases</li> </ul> </li> <li> <p>libjpeg-turbo on SourceForge</p> </li> </ul>","boost":10},{"location":"l/libjpeg-turbo/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libjpeg-turbo in the EasyBuilders repository</p> </li> <li> <p>libjpeg-turbo in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libjpeg-turbo/#version-210-from-cpe-2106-on","title":"Version 2.1.0 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is a mix derived from various sources but mostly from the one in     use at the University of Antwerpen. Some changes:</p> <ul> <li> <p>NASM is only included as a build dependency as it is not clear where it is     is used at runtime. In the documentation I can only find that it is used to     compile some x86-specific code in the source.</p> </li> <li> <p>Switched to GitHub as the source of the files and the home page.</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libjpeg-turbo/#version-213-from-cpe-2206-on","title":"Version 2.1.3 from CPE 22.06 on","text":"<ul> <li> <p>Trivial version bump,</p> </li> <li> <p>Added some sanity_check_commands, but this may not be that useful as there is a      testing procedure during the build.</p> </li> </ul>","boost":10},{"location":"l/libjpeg-turbo/#version-214-from-cpe-2212-on","title":"Version 2.1.4 from CPE 22.12 on","text":"<ul> <li>Trivial version bump of the 2.1.3 EasyConfig.</li> </ul>","boost":10},{"location":"l/libjpeg-turbo/#version-2151-from-cpe-2309-on","title":"Version 2.1.5.1 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 2.1.4 EasyConfig.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> <li> <p>And also improved the sanity checks in LUMI/23.12.</p> </li> </ul>","boost":10},{"location":"l/libjpeg-turbo/#version-301-for-lumi2403","title":"Version 3.0.1 for LUMI/24.03","text":"<ul> <li> <p>Trivial version bump of the 2.1.5.1 EasyConfig for LUMI/23.12.</p> </li> <li> <p>12-bit support turned on again as the CMake problem that occured is gone.</p> </li> <li> <p>Note that two tests still fail with cpeCray. Since the 588 other tests passed,     we decided to simply edit those tests out of the CMake <code>CTestTestfile.cmake</code>     file so that we would still notice other failures if they would pop up in      newer versions.</p> <p>These tests now also fail with cpeAOCC and cpeAMD, so it is likely an issue with libjpeg-turbo with recent Clang compilers, so we take the same measures.</p> <p>The failure is likely caused by slightly different FP rounding behaviour for the chosen options in the Cray compiler than other compilers.</p> <p>Tried <code>-DFLOATTEST12=no-fp-contract</code> suggested for some similar problems but that didn't help. Same for <code>-DFLOATTEST12=fp-contract</code>.</p> </li> </ul>","boost":10},{"location":"l/libjpeg-turbo/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libjpeg-turbo-2.1.0-cpeAMD-21.06.eb, with module libjpeg-turbo/2.1.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.0-cpeAOCC-21.12.eb, with module libjpeg-turbo/2.1.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.0-cpeCray-21.06.eb, with module libjpeg-turbo/2.1.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.0-cpeCray-21.08.eb, with module libjpeg-turbo/2.1.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.0-cpeCray-21.12.eb, with module libjpeg-turbo/2.1.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.0-cpeGNU-21.06.eb, with module libjpeg-turbo/2.1.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.0-cpeGNU-21.08.eb, with module libjpeg-turbo/2.1.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.0-cpeGNU-21.12.eb, with module libjpeg-turbo/2.1.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.3-cpeAOCC-22.06.eb, with module libjpeg-turbo/2.1.3-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.3-cpeCray-22.06.eb, with module libjpeg-turbo/2.1.3-cpeCray-22.06</p> </li> <li> <p>EasyConfig libjpeg-turbo-2.1.3-cpeGNU-22.06.eb, with module libjpeg-turbo/2.1.3-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libogg/","title":"libogg","text":"<p>[package list]</p>","boost":10},{"location":"l/libogg/#libogg","title":"libogg","text":"","boost":10},{"location":"l/libogg/#license-information","title":"License information","text":"<p>Libogg is licensed under a 3-Clause BSD License, see the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the COPYING file can also be found in the <code>$EBROOTLIBOGG/share/licenses/libogg</code> directory after loading the module.</p>","boost":10},{"location":"l/libogg/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libogg/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libogg/1.3.5-cpeAMD-22.08 (EasyConfig: libogg-1.3.5-cpeAMD-22.08.eb)</p> </li> <li> <p>libogg/1.3.5-cpeAMD-22.12 (EasyConfig: libogg-1.3.5-cpeAMD-22.12.eb)</p> </li> <li> <p>libogg/1.3.5-cpeAMD-23.09 (EasyConfig: libogg-1.3.5-cpeAMD-23.09.eb)</p> </li> <li> <p>libogg/1.3.5-cpeAMD-23.12 (EasyConfig: libogg-1.3.5-cpeAMD-23.12.eb)</p> </li> <li> <p>libogg/1.3.5-cpeAMD-24.03 (EasyConfig: libogg-1.3.5-cpeAMD-24.03.eb)</p> </li> <li> <p>libogg/1.3.5-cpeAOCC-22.08 (EasyConfig: libogg-1.3.5-cpeAOCC-22.08.eb)</p> </li> <li> <p>libogg/1.3.5-cpeAOCC-22.12 (EasyConfig: libogg-1.3.5-cpeAOCC-22.12.eb)</p> </li> <li> <p>libogg/1.3.5-cpeAOCC-23.09 (EasyConfig: libogg-1.3.5-cpeAOCC-23.09.eb)</p> </li> <li> <p>libogg/1.3.5-cpeAOCC-23.12 (EasyConfig: libogg-1.3.5-cpeAOCC-23.12.eb)</p> </li> <li> <p>libogg/1.3.5-cpeAOCC-24.03 (EasyConfig: libogg-1.3.5-cpeAOCC-24.03.eb)</p> </li> <li> <p>libogg/1.3.5-cpeCray-22.08 (EasyConfig: libogg-1.3.5-cpeCray-22.08.eb)</p> </li> <li> <p>libogg/1.3.5-cpeCray-22.12 (EasyConfig: libogg-1.3.5-cpeCray-22.12.eb)</p> </li> <li> <p>libogg/1.3.5-cpeCray-23.03 (EasyConfig: libogg-1.3.5-cpeCray-23.03.eb)</p> </li> <li> <p>libogg/1.3.5-cpeCray-23.09 (EasyConfig: libogg-1.3.5-cpeCray-23.09.eb)</p> </li> <li> <p>libogg/1.3.5-cpeCray-23.12 (EasyConfig: libogg-1.3.5-cpeCray-23.12.eb)</p> </li> <li> <p>libogg/1.3.5-cpeCray-24.03 (EasyConfig: libogg-1.3.5-cpeCray-24.03.eb)</p> </li> <li> <p>libogg/1.3.5-cpeGNU-22.08 (EasyConfig: libogg-1.3.5-cpeGNU-22.08.eb)</p> </li> <li> <p>libogg/1.3.5-cpeGNU-22.12 (EasyConfig: libogg-1.3.5-cpeGNU-22.12.eb)</p> </li> <li> <p>libogg/1.3.5-cpeGNU-23.09 (EasyConfig: libogg-1.3.5-cpeGNU-23.09.eb)</p> </li> <li> <p>libogg/1.3.5-cpeGNU-23.12 (EasyConfig: libogg-1.3.5-cpeGNU-23.12.eb)</p> </li> <li> <p>libogg/1.3.5-cpeGNU-24.03 (EasyConfig: libogg-1.3.5-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libogg/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libogg web site</p> <ul> <li>downloads via the web site</li> </ul> </li> <li> <p>libogg on GitHub</p> <ul> <li>libogg releases on GitHub</li> </ul> </li> </ul>","boost":10},{"location":"l/libogg/#general-information","title":"General information","text":"<ul> <li>libogg has a configure - make - make install build process.</li> </ul>","boost":10},{"location":"l/libogg/#easyconfig","title":"EasyConfig","text":"<ul> <li> <p>libogg in the EasyBuilders repository</p> </li> <li> <p>There is no support for libogg in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libogg/#135-from-cpe-2106-on","title":"1.3.5 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is a mix of the one from the EasyBuilders repository and the     one developed before there was official support at the University of Antwerpen.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation and sanity checks     were improved.</p> </li> </ul>","boost":10},{"location":"l/libogg/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libogg-1.3.5-cpeAMD-21.06.eb, with module libogg/1.3.5-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeAOCC-21.12.eb, with module libogg/1.3.5-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeAOCC-22.06.eb, with module libogg/1.3.5-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeCray-21.06.eb, with module libogg/1.3.5-cpeCray-21.06</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeCray-21.08.eb, with module libogg/1.3.5-cpeCray-21.08</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeCray-21.12.eb, with module libogg/1.3.5-cpeCray-21.12</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeCray-22.06.eb, with module libogg/1.3.5-cpeCray-22.06</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeGNU-21.06.eb, with module libogg/1.3.5-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeGNU-21.08.eb, with module libogg/1.3.5-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeGNU-21.12.eb, with module libogg/1.3.5-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libogg-1.3.5-cpeGNU-22.06.eb, with module libogg/1.3.5-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libopus/","title":"libopus","text":"<p>[package list]</p>","boost":10},{"location":"l/libopus/#libopus","title":"libopus","text":"","boost":10},{"location":"l/libopus/#license-information","title":"License information","text":"<p>Libopus is licensed under a BSD-style license. More information can be found on the \"License\" page of the opus codec web page or the COPYING file in the opus GitLab.</p> <p>From LUMI/23.12 on, the COPYING file can also be found in the <code>$EBROOTLIBOPUS/share/licenses/libopus</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libopus/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libopus/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libopus/1.3.1-cpeAMD-22.08 (EasyConfig: libopus-1.3.1-cpeAMD-22.08.eb)</p> </li> <li> <p>libopus/1.3.1-cpeAMD-22.12 (EasyConfig: libopus-1.3.1-cpeAMD-22.12.eb)</p> </li> <li> <p>libopus/1.3.1-cpeAMD-23.09 (EasyConfig: libopus-1.3.1-cpeAMD-23.09.eb)</p> </li> <li> <p>libopus/1.3.1-cpeAMD-23.12 (EasyConfig: libopus-1.3.1-cpeAMD-23.12.eb)</p> </li> <li> <p>libopus/1.3.1-cpeAOCC-22.08 (EasyConfig: libopus-1.3.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>libopus/1.3.1-cpeAOCC-22.12 (EasyConfig: libopus-1.3.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>libopus/1.3.1-cpeAOCC-23.09 (EasyConfig: libopus-1.3.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>libopus/1.3.1-cpeAOCC-23.12 (EasyConfig: libopus-1.3.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>libopus/1.3.1-cpeCray-22.08 (EasyConfig: libopus-1.3.1-cpeCray-22.08.eb)</p> </li> <li> <p>libopus/1.3.1-cpeCray-22.12 (EasyConfig: libopus-1.3.1-cpeCray-22.12.eb)</p> </li> <li> <p>libopus/1.3.1-cpeCray-23.03 (EasyConfig: libopus-1.3.1-cpeCray-23.03.eb)</p> </li> <li> <p>libopus/1.3.1-cpeCray-23.09 (EasyConfig: libopus-1.3.1-cpeCray-23.09.eb)</p> </li> <li> <p>libopus/1.3.1-cpeCray-23.12 (EasyConfig: libopus-1.3.1-cpeCray-23.12.eb)</p> </li> <li> <p>libopus/1.3.1-cpeGNU-22.08 (EasyConfig: libopus-1.3.1-cpeGNU-22.08.eb)</p> </li> <li> <p>libopus/1.3.1-cpeGNU-22.12 (EasyConfig: libopus-1.3.1-cpeGNU-22.12.eb)</p> </li> <li> <p>libopus/1.3.1-cpeGNU-23.09 (EasyConfig: libopus-1.3.1-cpeGNU-23.09.eb)</p> </li> <li> <p>libopus/1.3.1-cpeGNU-23.12 (EasyConfig: libopus-1.3.1-cpeGNU-23.12.eb)</p> </li> <li> <p>libopus/1.4-cpeAMD-24.03 (EasyConfig: libopus-1.4-cpeAMD-24.03.eb)</p> </li> <li> <p>libopus/1.4-cpeAOCC-24.03 (EasyConfig: libopus-1.4-cpeAOCC-24.03.eb)</p> </li> <li> <p>libopus/1.4-cpeCray-24.03 (EasyConfig: libopus-1.4-cpeCray-24.03.eb)</p> </li> <li> <p>libopus/1.4-cpeGNU-24.03 (EasyConfig: libopus-1.4-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libopus/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libopus home page</p> <ul> <li>libopus downloads</li> </ul> </li> <li> <p>libopus GitLAb</p> </li> </ul>","boost":10},{"location":"l/libopus/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libopus in the EasyBuilders repository</p> </li> <li> <p>No support found in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libopus/#version-131-from-cpe-2106-on","title":"Version 1.3.1 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is derived from the one of the University of Antwerpen.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation and the sanity     checks were improved.</p> </li> </ul>","boost":10},{"location":"l/libopus/#version-14-from-lumi2403-on","title":"Version 1.4 from LUMI/24.03 on","text":"<ul> <li>The EasyConfig is a trivial port of the one for version 1.3.1 for LUMI/23.12.</li> </ul>","boost":10},{"location":"l/libopus/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libopus-1.3.1-cpeAMD-21.06.eb, with module libopus/1.3.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeAOCC-21.12.eb, with module libopus/1.3.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeAOCC-22.06.eb, with module libopus/1.3.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeCray-21.06.eb, with module libopus/1.3.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeCray-21.08.eb, with module libopus/1.3.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeCray-21.12.eb, with module libopus/1.3.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeCray-22.06.eb, with module libopus/1.3.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeGNU-21.06.eb, with module libopus/1.3.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeGNU-21.08.eb, with module libopus/1.3.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeGNU-21.12.eb, with module libopus/1.3.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libopus-1.3.1-cpeGNU-22.06.eb, with module libopus/1.3.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libpciaccess/","title":"libpciaccess","text":"<p>[package list]</p>","boost":10},{"location":"l/libpciaccess/#libpciaccess","title":"libpciaccess","text":"","boost":10},{"location":"l/libpciaccess/#license-information","title":"License information","text":"<p>The libpciaccess license information can be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the COPYING file can also be found in the <code>$EBROOTLIBPCIACCESS/share/licenses/libpciacces</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libpciaccess/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libpciaccess/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libpciaccess/0.16-cpeAMD-22.08 (EasyConfig: libpciaccess-0.16-cpeAMD-22.08.eb)</p> </li> <li> <p>libpciaccess/0.16-cpeAOCC-22.08 (EasyConfig: libpciaccess-0.16-cpeAOCC-22.08.eb)</p> </li> <li> <p>libpciaccess/0.16-cpeCray-22.08 (EasyConfig: libpciaccess-0.16-cpeCray-22.08.eb)</p> </li> <li> <p>libpciaccess/0.16-cpeGNU-22.08 (EasyConfig: libpciaccess-0.16-cpeGNU-22.08.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeAMD-22.12 (EasyConfig: libpciaccess-0.17-cpeAMD-22.12.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeAMD-23.09 (EasyConfig: libpciaccess-0.17-cpeAMD-23.09.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeAMD-23.12 (EasyConfig: libpciaccess-0.17-cpeAMD-23.12.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeAMD-24.03 (EasyConfig: libpciaccess-0.17-cpeAMD-24.03.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeAOCC-22.12 (EasyConfig: libpciaccess-0.17-cpeAOCC-22.12.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeAOCC-23.09 (EasyConfig: libpciaccess-0.17-cpeAOCC-23.09.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeAOCC-23.12 (EasyConfig: libpciaccess-0.17-cpeAOCC-23.12.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeAOCC-24.03 (EasyConfig: libpciaccess-0.17-cpeAOCC-24.03.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeCray-22.12 (EasyConfig: libpciaccess-0.17-cpeCray-22.12.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeCray-23.03 (EasyConfig: libpciaccess-0.17-cpeCray-23.03.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeCray-23.09 (EasyConfig: libpciaccess-0.17-cpeCray-23.09.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeCray-23.12 (EasyConfig: libpciaccess-0.17-cpeCray-23.12.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeCray-24.03 (EasyConfig: libpciaccess-0.17-cpeCray-24.03.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeGNU-22.12 (EasyConfig: libpciaccess-0.17-cpeGNU-22.12.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeGNU-23.09 (EasyConfig: libpciaccess-0.17-cpeGNU-23.09.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeGNU-23.12 (EasyConfig: libpciaccess-0.17-cpeGNU-23.12.eb)</p> </li> <li> <p>libpciaccess/0.17-cpeGNU-24.03 (EasyConfig: libpciaccess-0.17-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libpciaccess/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libpciaccess home page</p> </li> <li> <p>libpciaccess main development gitlab</p> </li> </ul>","boost":10},{"location":"l/libpciaccess/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libpciaccess support in the EasyBuilders repository</p> </li> <li> <p>There is no support for libpciaccess in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libpciaccess/#version-016-from-cpe-2106-on","title":"Version 0.16 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one with some refinements     to the sanity checks.</li> </ul>","boost":10},{"location":"l/libpciaccess/#version-017-from-cpe-2212-on","title":"Version 0.17 from CPE 22.12 on","text":"<ul> <li> <p>The EasyConfig is a trivial version bump of the 0.16 one.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libpciaccess/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libpciaccess-0.16-cpeAMD-21.06.eb, with module libpciaccess/0.16-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeAOCC-21.12.eb, with module libpciaccess/0.16-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeAOCC-22.06.eb, with module libpciaccess/0.16-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeCray-21.06.eb, with module libpciaccess/0.16-cpeCray-21.06</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeCray-21.08.eb, with module libpciaccess/0.16-cpeCray-21.08</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeCray-21.12.eb, with module libpciaccess/0.16-cpeCray-21.12</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeCray-22.06.eb, with module libpciaccess/0.16-cpeCray-22.06</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeGNU-21.06.eb, with module libpciaccess/0.16-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeGNU-21.08.eb, with module libpciaccess/0.16-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeGNU-21.12.eb, with module libpciaccess/0.16-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libpciaccess-0.16-cpeGNU-22.06.eb, with module libpciaccess/0.16-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libpng/","title":"libpng","text":"<p>[package list]</p>","boost":10},{"location":"l/libpng/#libpng","title":"libpng","text":"","boost":10},{"location":"l/libpng/#license-information","title":"License information","text":"<p>The libpng license differs between versions of the softgware. All versions available on LUMI use the PNG Reference Library License version 2. See the  \"libpng-LICENSE.txt\" file on the libpng web site.</p> <p>From LUMI/23.12 on, the LICENSE file can also be found in the <code>$EBROOTLIBPNG/share/licenses/libpng</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libpng/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libpng/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libpng/1.6.37-cpeAMD-22.08 (EasyConfig: libpng-1.6.37-cpeAMD-22.08.eb)</p> </li> <li> <p>libpng/1.6.37-cpeAOCC-22.08 (EasyConfig: libpng-1.6.37-cpeAOCC-22.08.eb)</p> </li> <li> <p>libpng/1.6.37-cpeCray-22.08 (EasyConfig: libpng-1.6.37-cpeCray-22.08.eb)</p> </li> <li> <p>libpng/1.6.37-cpeGNU-22.08 (EasyConfig: libpng-1.6.37-cpeGNU-22.08.eb)</p> </li> <li> <p>libpng/1.6.38-cpeAMD-22.12 (EasyConfig: libpng-1.6.38-cpeAMD-22.12.eb)</p> </li> <li> <p>libpng/1.6.38-cpeAOCC-22.12 (EasyConfig: libpng-1.6.38-cpeAOCC-22.12.eb)</p> </li> <li> <p>libpng/1.6.38-cpeCray-22.12 (EasyConfig: libpng-1.6.38-cpeCray-22.12.eb)</p> </li> <li> <p>libpng/1.6.38-cpeCray-23.03 (EasyConfig: libpng-1.6.38-cpeCray-23.03.eb)</p> </li> <li> <p>libpng/1.6.38-cpeGNU-22.12 (EasyConfig: libpng-1.6.38-cpeGNU-22.12.eb)</p> </li> <li> <p>libpng/1.6.39-cpeAMD-23.09 (EasyConfig: libpng-1.6.39-cpeAMD-23.09.eb)</p> </li> <li> <p>libpng/1.6.39-cpeAMD-23.12 (EasyConfig: libpng-1.6.39-cpeAMD-23.12.eb)</p> </li> <li> <p>libpng/1.6.39-cpeAOCC-23.09 (EasyConfig: libpng-1.6.39-cpeAOCC-23.09.eb)</p> </li> <li> <p>libpng/1.6.39-cpeAOCC-23.12 (EasyConfig: libpng-1.6.39-cpeAOCC-23.12.eb)</p> </li> <li> <p>libpng/1.6.39-cpeCray-23.09 (EasyConfig: libpng-1.6.39-cpeCray-23.09.eb)</p> </li> <li> <p>libpng/1.6.39-cpeCray-23.12 (EasyConfig: libpng-1.6.39-cpeCray-23.12.eb)</p> </li> <li> <p>libpng/1.6.39-cpeGNU-23.09 (EasyConfig: libpng-1.6.39-cpeGNU-23.09.eb)</p> </li> <li> <p>libpng/1.6.39-cpeGNU-23.12 (EasyConfig: libpng-1.6.39-cpeGNU-23.12.eb)</p> </li> <li> <p>libpng/1.6.40-cpeAMD-24.03 (EasyConfig: libpng-1.6.40-cpeAMD-24.03.eb)</p> </li> <li> <p>libpng/1.6.40-cpeAOCC-24.03 (EasyConfig: libpng-1.6.40-cpeAOCC-24.03.eb)</p> </li> <li> <p>libpng/1.6.40-cpeCray-24.03 (EasyConfig: libpng-1.6.40-cpeCray-24.03.eb)</p> </li> <li> <p>libpng/1.6.40-cpeGNU-24.03 (EasyConfig: libpng-1.6.40-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libpng/#technical-documentation","title":"Technical documentation","text":"<ul> <li>libpng home page</li> </ul>","boost":10},{"location":"l/libpng/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libpng support in the EasyBuilders repository</p> </li> <li> <p>libpng support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libpng/#version-1637-from-cpe-2106-on","title":"Version 1.6.37 from CPE 21.06 on","text":"<ul> <li>The EasyConfig file is derived from the University of Antwerpen repository which     itself is derived from the EasyBuilders one.</li> </ul>","boost":10},{"location":"l/libpng/#version-1638-from-cpe-2212-on","title":"Version 1.6.38 from CPE 22.12 on","text":"<ul> <li>The EasyConfig is a trivial update of the 1.6.37 one with a modification taken     from the EasyBuilders one.</li> </ul>","boost":10},{"location":"l/libpng/#version-1639-from-cpe-2303-on","title":"Version 1.6.39 from CPE 23.03 on","text":"<ul> <li> <p>The EasyConfig is a trivial update of the 1.6.38 one.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libpng/#version-1640-from-2403-on","title":"Version 1.6.40 from 24.03 on","text":"<ul> <li>The EasyConfig is a trivial update of the 1.6.39 one for LUMI/23.12.</li> </ul>","boost":10},{"location":"l/libpng/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libpng-1.6.37-cpeAMD-21.06.eb, with module libpng/1.6.37-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeAOCC-21.12.eb, with module libpng/1.6.37-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeAOCC-22.06.eb, with module libpng/1.6.37-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeCray-21.06.eb, with module libpng/1.6.37-cpeCray-21.06</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeCray-21.08.eb, with module libpng/1.6.37-cpeCray-21.08</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeCray-21.12.eb, with module libpng/1.6.37-cpeCray-21.12</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeCray-22.06.eb, with module libpng/1.6.37-cpeCray-22.06</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeGNU-21.06.eb, with module libpng/1.6.37-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeGNU-21.08.eb, with module libpng/1.6.37-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeGNU-21.12.eb, with module libpng/1.6.37-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libpng-1.6.37-cpeGNU-22.06.eb, with module libpng/1.6.37-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libpsl/","title":"libpsl","text":"<p>[package list]</p>","boost":10},{"location":"l/libpsl/#libpsl","title":"libpsl","text":"","boost":10},{"location":"l/libpsl/#license-information","title":"License information","text":"<p>Libpsl is distrubuted under an MIT License, see the LICENSE file in the source repository.</p> <p>There is also a separate copyright statement in the COPYRIGHT file in the source repository.</p> <p>From LUMI/23.12 on, these files can also be found in the <code>$EBROOTLIBPSL/share/licenses/libpsl</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libpsl/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libpsl/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libpsl/0.21.1-cpeAMD-22.08 (EasyConfig: libpsl-0.21.1-cpeAMD-22.08.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeAMD-22.12 (EasyConfig: libpsl-0.21.1-cpeAMD-22.12.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeAMD-23.09 (EasyConfig: libpsl-0.21.1-cpeAMD-23.09.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeAMD-23.12 (EasyConfig: libpsl-0.21.1-cpeAMD-23.12.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeAOCC-22.08 (EasyConfig: libpsl-0.21.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeAOCC-22.12 (EasyConfig: libpsl-0.21.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeAOCC-23.09 (EasyConfig: libpsl-0.21.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeAOCC-23.12 (EasyConfig: libpsl-0.21.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeCray-22.08 (EasyConfig: libpsl-0.21.1-cpeCray-22.08.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeCray-22.12 (EasyConfig: libpsl-0.21.1-cpeCray-22.12.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeCray-23.03 (EasyConfig: libpsl-0.21.1-cpeCray-23.03.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeCray-23.09 (EasyConfig: libpsl-0.21.1-cpeCray-23.09.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeCray-23.12 (EasyConfig: libpsl-0.21.1-cpeCray-23.12.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeGNU-22.08 (EasyConfig: libpsl-0.21.1-cpeGNU-22.08.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeGNU-22.12 (EasyConfig: libpsl-0.21.1-cpeGNU-22.12.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeGNU-23.09 (EasyConfig: libpsl-0.21.1-cpeGNU-23.09.eb)</p> </li> <li> <p>libpsl/0.21.1-cpeGNU-23.12 (EasyConfig: libpsl-0.21.1-cpeGNU-23.12.eb)</p> </li> <li> <p>libpsl/0.21.5-cpeAMD-24.03 (EasyConfig: libpsl-0.21.5-cpeAMD-24.03.eb)</p> </li> <li> <p>libpsl/0.21.5-cpeAOCC-24.03 (EasyConfig: libpsl-0.21.5-cpeAOCC-24.03.eb)</p> </li> <li> <p>libpsl/0.21.5-cpeCray-24.03 (EasyConfig: libpsl-0.21.5-cpeCray-24.03.eb)</p> </li> <li> <p>libpsl/0.21.5-cpeGNU-24.03 (EasyConfig: libpsl-0.21.5-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libpsl/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libpsl home page (looks ill-maintained)</p> </li> <li> <p>libpsl on GitHub</p> <ul> <li>libpsl GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libpsl/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for libpsl in the EasyBuilders repository</p> </li> <li> <p>There is no support for libpsl in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libpsl/#version-0211-for-cpe-2206","title":"Version 0.21.1 for CPE 22.06","text":"<ul> <li> <p>The EasyConfig is a port of the standard EasyBuilders one.</p> </li> <li> <p>We did improve the sanity check however.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libpsl/#version-0215-from-lumi2403-on","title":"Version 0.21.5 from LUMI/24.03 on","text":"<ul> <li>Trivial port of the EasyConfig for version 0.21.1 for LUMI/23.12.</li> </ul>","boost":10},{"location":"l/libpsl/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libpsl-0.21.1-cpeAOCC-22.06.eb, with module libpsl/0.21.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libpsl-0.21.1-cpeCray-22.06.eb, with module libpsl/0.21.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig libpsl-0.21.1-cpeGNU-22.06.eb, with module libpsl/0.21.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libreadline/","title":"libreadline","text":"<p>[package list]</p>","boost":10},{"location":"l/libreadline/#libreadline","title":"libreadline","text":"","boost":10},{"location":"l/libreadline/#license-information","title":"License information","text":"<p>Readline is free software, distributed under the terms of the  GNU General Public License, version 3.</p> <p>From LUMI/23.12 on, the license information can also be found in the <code>COPYING</code> file  in the <code>$EBROOTLIBREADLINE/share/licenses/libreadline</code> subdirectory.</p>","boost":10},{"location":"l/libreadline/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libreadline/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libreadline/8.1.2-cpeAMD-22.08 (EasyConfig: libreadline-8.1.2-cpeAMD-22.08.eb)</p> </li> <li> <p>libreadline/8.1.2-cpeAOCC-22.08 (EasyConfig: libreadline-8.1.2-cpeAOCC-22.08.eb)</p> </li> <li> <p>libreadline/8.1.2-cpeCray-22.08 (EasyConfig: libreadline-8.1.2-cpeCray-22.08.eb)</p> </li> <li> <p>libreadline/8.1.2-cpeGNU-22.08 (EasyConfig: libreadline-8.1.2-cpeGNU-22.08.eb)</p> </li> <li> <p>libreadline/8.2-cpeAMD-22.12 (EasyConfig: libreadline-8.2-cpeAMD-22.12.eb)</p> </li> <li> <p>libreadline/8.2-cpeAMD-23.09 (EasyConfig: libreadline-8.2-cpeAMD-23.09.eb)</p> </li> <li> <p>libreadline/8.2-cpeAMD-23.12 (EasyConfig: libreadline-8.2-cpeAMD-23.12.eb)</p> </li> <li> <p>libreadline/8.2-cpeAMD-24.03 (EasyConfig: libreadline-8.2-cpeAMD-24.03.eb)</p> </li> <li> <p>libreadline/8.2-cpeAOCC-22.12 (EasyConfig: libreadline-8.2-cpeAOCC-22.12.eb)</p> </li> <li> <p>libreadline/8.2-cpeAOCC-23.09 (EasyConfig: libreadline-8.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>libreadline/8.2-cpeAOCC-23.12 (EasyConfig: libreadline-8.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>libreadline/8.2-cpeAOCC-24.03 (EasyConfig: libreadline-8.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>libreadline/8.2-cpeCray-22.12 (EasyConfig: libreadline-8.2-cpeCray-22.12.eb)</p> </li> <li> <p>libreadline/8.2-cpeCray-23.03 (EasyConfig: libreadline-8.2-cpeCray-23.03.eb)</p> </li> <li> <p>libreadline/8.2-cpeCray-23.09 (EasyConfig: libreadline-8.2-cpeCray-23.09.eb)</p> </li> <li> <p>libreadline/8.2-cpeCray-23.12 (EasyConfig: libreadline-8.2-cpeCray-23.12.eb)</p> </li> <li> <p>libreadline/8.2-cpeCray-24.03 (EasyConfig: libreadline-8.2-cpeCray-24.03.eb)</p> </li> <li> <p>libreadline/8.2-cpeGNU-22.12 (EasyConfig: libreadline-8.2-cpeGNU-22.12.eb)</p> </li> <li> <p>libreadline/8.2-cpeGNU-23.09 (EasyConfig: libreadline-8.2-cpeGNU-23.09.eb)</p> </li> <li> <p>libreadline/8.2-cpeGNU-23.12 (EasyConfig: libreadline-8.2-cpeGNU-23.12.eb)</p> </li> <li> <p>libreadline/8.2-cpeGNU-24.03 (EasyConfig: libreadline-8.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libreadline/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GNU Readline Library home page</p> </li> <li> <p>readline download from the GNU download site</p> </li> </ul>","boost":10},{"location":"l/libreadline/#easybuild","title":"EasyBuild","text":"<ul> <li>Regular EasyBuild support</li> <li>CSCS EasyConfigs</li> </ul>","boost":10},{"location":"l/libreadline/#81-from-2106-on","title":"8.1 from 21.06 on","text":"<ul> <li>The EasyConfig file is a mix of that of CSCS, an correction from the regular EasyBuilders     repository and additional module info from the UAntwerpen setup.</li> </ul>","boost":10},{"location":"l/libreadline/#812-from-cpe-2208-on","title":"8.1.2 from CPE 22.08 on","text":"<ul> <li>The EasyConfig is a trivial port of the 8.1 one.</li> </ul>","boost":10},{"location":"l/libreadline/#82-from-cpe-2212-on","title":"8.2 from CPE 22.12 on","text":"<ul> <li> <p>The EasyConfig is a trivial port of the 8.1.2 one.</p> </li> <li> <p>From LUMI/23.12 onwards, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libreadline/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libreadline-8.1-cpeAMD-21.06.eb, with module libreadline/8.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeAOCC-21.12.eb, with module libreadline/8.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeAOCC-22.06.eb, with module libreadline/8.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeCray-21.06.eb, with module libreadline/8.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeCray-21.08.eb, with module libreadline/8.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeCray-21.12.eb, with module libreadline/8.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeCray-22.06.eb, with module libreadline/8.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeGNU-21.06.eb, with module libreadline/8.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeGNU-21.08.eb, with module libreadline/8.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeGNU-21.12.eb, with module libreadline/8.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libreadline-8.1-cpeGNU-22.06.eb, with module libreadline/8.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig libreadline-8.1.2-cpeAOCC-22.06.eb, with module libreadline/8.1.2-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libreadline-8.1.2-cpeCray-22.06.eb, with module libreadline/8.1.2-cpeCray-22.06</p> </li> <li> <p>EasyConfig libreadline-8.1.2-cpeGNU-22.06.eb, with module libreadline/8.1.2-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libsndfile/","title":"libsndfile","text":"<p>[package list]</p>","boost":10},{"location":"l/libsndfile/#libsndfile","title":"libsndfile","text":"","boost":10},{"location":"l/libsndfile/#license-information","title":"License information","text":"<p>Libsndfile is released under the GNU Lesser General Public License.</p> <p>See also the COPYING file in the GitHub repository.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the <code>$EBROOTLIBSNDFILE/share/licenses/libsndfile</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libsndfile/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libsndfile/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libsndfile/1.1.0-cpeAMD-22.08 (EasyConfig: libsndfile-1.1.0-cpeAMD-22.08.eb)</p> </li> <li> <p>libsndfile/1.1.0-cpeAOCC-22.08 (EasyConfig: libsndfile-1.1.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>libsndfile/1.1.0-cpeCray-22.08 (EasyConfig: libsndfile-1.1.0-cpeCray-22.08.eb)</p> </li> <li> <p>libsndfile/1.1.0-cpeGNU-22.08 (EasyConfig: libsndfile-1.1.0-cpeGNU-22.08.eb)</p> </li> <li> <p>libsndfile/1.2.0-cpeAMD-22.12 (EasyConfig: libsndfile-1.2.0-cpeAMD-22.12.eb)</p> </li> <li> <p>libsndfile/1.2.0-cpeAOCC-22.12 (EasyConfig: libsndfile-1.2.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>libsndfile/1.2.0-cpeCray-22.12 (EasyConfig: libsndfile-1.2.0-cpeCray-22.12.eb)</p> </li> <li> <p>libsndfile/1.2.0-cpeCray-23.03 (EasyConfig: libsndfile-1.2.0-cpeCray-23.03.eb)</p> </li> <li> <p>libsndfile/1.2.0-cpeGNU-22.12 (EasyConfig: libsndfile-1.2.0-cpeGNU-22.12.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeAMD-23.09 (EasyConfig: libsndfile-1.2.2-cpeAMD-23.09.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeAMD-23.12 (EasyConfig: libsndfile-1.2.2-cpeAMD-23.12.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeAMD-24.03 (EasyConfig: libsndfile-1.2.2-cpeAMD-24.03.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeAOCC-23.09 (EasyConfig: libsndfile-1.2.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeAOCC-23.12 (EasyConfig: libsndfile-1.2.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeAOCC-24.03 (EasyConfig: libsndfile-1.2.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeCray-23.09 (EasyConfig: libsndfile-1.2.2-cpeCray-23.09.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeCray-23.12 (EasyConfig: libsndfile-1.2.2-cpeCray-23.12.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeCray-24.03 (EasyConfig: libsndfile-1.2.2-cpeCray-24.03.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeGNU-23.09 (EasyConfig: libsndfile-1.2.2-cpeGNU-23.09.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeGNU-23.12 (EasyConfig: libsndfile-1.2.2-cpeGNU-23.12.eb)</p> </li> <li> <p>libsndfile/1.2.2-cpeGNU-24.03 (EasyConfig: libsndfile-1.2.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libsndfile/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libsnd web site</p> </li> <li> <p>libsnd on GitHub</p> <ul> <li>Releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libsndfile/#general-information","title":"General information","text":"","boost":10},{"location":"l/libsndfile/#dependencies","title":"Dependencies","text":"<ul> <li> <p>libopus</p> </li> <li> <p>FLAC</p> </li> <li> <p>libogg and libvorbis</p> </li> <li> <p>speex is a potential dependency but has not been included since it is     marked as obsolete on its web site.</p> </li> <li> <p>ALSA support is also not included since     that is not useful on a cluster.</p> </li> <li> <p>SQLite3 is an optional dependency. We did not include it.</p> </li> </ul>","boost":10},{"location":"l/libsndfile/#building","title":"Building","text":"<ul> <li> <p>libsnd uses a configure - make - make install build process. There are     traces of CMake support in the code, but in version 1.0.28 this does     not work properly, or in fact tries to call the autoconf tools internally.</p> </li> <li> <p>One needs to run <code>autogen.sh</code> to generate the <code>configure</code> script.</p> </li> <li> <p>Notes about dependencies:</p> <ul> <li>We don't include ALSA as that is an interface to hardware which likely doesn't make     sense for applications on a supercomputer. According to the instructions it is only     used in the sound player (<code>snd-play</code> executable).</li> </ul> </li> </ul>","boost":10},{"location":"l/libsndfile/#easyconfig","title":"EasyConfig","text":"<ul> <li> <p>libsndfile support in the EasyBuilders repository</p> </li> <li> <p>There is no libsndfile support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libsndfile/#version-1031-from-cpe-2106-on","title":"Version 1.0.31 from CPE 21.06 on","text":"<ul> <li>The EasyConfig file is a mix of the EasyBuilders one and the University     of Antwerpen one which predates the former.</li> </ul>","boost":10},{"location":"l/libsndfile/#version-110-from-cpe-2206-on","title":"Version 1.1.0 from CPE 22.06 on","text":"<ul> <li> <p>Trivial bump of the EasyConfig.</p> </li> <li> <p>Checked to add MPEG support, but LAME is not enough and MPG123 is also needed     which may be a burden to install. We instead added the flag to disable MPEG support.</p> </li> <li> <p>The static library is no longer generated.</p> </li> </ul>","boost":10},{"location":"l/libsndfile/#version-120-from-cpe-2303","title":"Version 1.2.0 from CPE 23.03","text":"<ul> <li>Trivial bump of the EasyConfig for 1.1.0, we did not yet switch to the CMake build     process currently used in the EasyBuilders versions.</li> </ul>","boost":10},{"location":"l/libsndfile/#version-122-from-cpe-2309-on","title":"Version 1.2.2 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 1.2.0 EasyConfig, again not yet with the CMake build process.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libsndfile/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libsndfile-1.0.31-cpeAMD-21.06.eb, with module libsndfile/1.0.31-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libsndfile-1.0.31-cpeAOCC-21.12.eb, with module libsndfile/1.0.31-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libsndfile-1.0.31-cpeCray-21.06.eb, with module libsndfile/1.0.31-cpeCray-21.06</p> </li> <li> <p>EasyConfig libsndfile-1.0.31-cpeCray-21.08.eb, with module libsndfile/1.0.31-cpeCray-21.08</p> </li> <li> <p>EasyConfig libsndfile-1.0.31-cpeCray-21.12.eb, with module libsndfile/1.0.31-cpeCray-21.12</p> </li> <li> <p>EasyConfig libsndfile-1.0.31-cpeGNU-21.06.eb, with module libsndfile/1.0.31-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libsndfile-1.0.31-cpeGNU-21.08.eb, with module libsndfile/1.0.31-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libsndfile-1.0.31-cpeGNU-21.12.eb, with module libsndfile/1.0.31-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libsndfile-1.1.0-cpeAOCC-22.06.eb, with module libsndfile/1.1.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libsndfile-1.1.0-cpeCray-22.06.eb, with module libsndfile/1.1.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig libsndfile-1.1.0-cpeGNU-22.06.eb, with module libsndfile/1.1.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libsodium/","title":"libsodium","text":"<p>[package list]</p>","boost":10},{"location":"l/libsodium/#libsodium","title":"libsodium","text":"","boost":10},{"location":"l/libsodium/#license-information","title":"License information","text":"<p>Libsodium is licensed under the ISC license of the Internet Systems Consortium. See the LICENSE file in the GitHub repository for details.</p> <p>From LUMI/24.03 on, the license information can also be found in the <code>$EBROOT/share/licenses/libsodium</code> directory after installing and loading the module.</p>","boost":10},{"location":"l/libsodium/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libsodium/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig libsodium-1.0.19-cpeGNU-23.09.eb, will build libsodium/1.0.19-cpeGNU-23.09</p> </li> <li> <p>EasyConfig libsodium-1.0.19-cpeGNU-24.03.eb, will build libsodium/1.0.19-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"l/libsodium/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libsodium web site</p> </li> <li> <p>libsodium on Github</p> </li> </ul>","boost":10},{"location":"l/libsodium/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libsodium support in the EasyBuilders repository</p> </li> <li> <p>libsodium support in the CSCS repository</p> </li> <li> <p>libsodium support in the JSC repository</p> </li> </ul>","boost":10},{"location":"l/libsodium/#version-1018-for-cpe-2208-and-cpe-2212","title":"Version 1.0.18 for CPE 22.08 and CPE 22.12","text":"<ul> <li>Based on the EasyBuilders easyconfig</li> </ul>","boost":10},{"location":"l/libsodium/#version-1019-from-cpe-2309-on","title":"Version 1.0.19 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump.</p> </li> <li> <p>Added license information to the 24.03 one in May 2025.</p> </li> </ul>","boost":10},{"location":"l/libsodium/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig libsodium-1.0.18-cpeGNU-22.08.eb, with module libsodium/1.0.18-cpeGNU-22.08</p> </li> <li> <p>EasyConfig libsodium-1.0.18-cpeGNU-22.12.eb, with module libsodium/1.0.18-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libspatialindex/","title":"libspatialindex","text":"<p>[package list]</p>","boost":10},{"location":"l/libspatialindex/#libspatialindex","title":"libspatialindex","text":"","boost":10},{"location":"l/libspatialindex/#license-information","title":"License information","text":"<p>libspatialindex is licensed under the MIT license. See the COPYING file in the GitHub repository for details.</p>","boost":10},{"location":"l/libspatialindex/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libspatialindex/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig libspatialindex-1.9.3-cpeGNU-24.03.eb, will build libspatialindex/1.9.3-cpeGNU-24.03</li> </ul>","boost":10},{"location":"l/libspatialindex/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libspatialindex web site</p> </li> <li> <p>libspatialindex on Github</p> </li> </ul>","boost":10},{"location":"l/libspatialindex/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libspatialindex support in the EasyBuilders repository</p> </li> <li> <p>libspatialindex support in the CSCS repository</p> </li> <li> <p>libspatialindex support in the JSC repository</p> </li> </ul>","boost":10},{"location":"l/libspatialindex/#version-193-for-cpe-2403","title":"Version 1.9.3 for CPE 24.03","text":"<ul> <li>Based on the EasyBuilders easyconfig</li> </ul>","boost":10},{"location":"l/libtheora/","title":"libtheora","text":"<p>[package list]</p>","boost":10},{"location":"l/libtheora/#libtheora","title":"libtheora","text":"","boost":10},{"location":"l/libtheora/#license-information","title":"License information","text":"<p>The copyright license for libtheora can be found in the COPYING file in the GitHub repository while additional license information can be found in the LICENSE file in the same repository.</p>","boost":10},{"location":"l/libtheora/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libtheora/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libtheora/1.1.1-cpeAMD-22.08 (EasyConfig: libtheora-1.1.1-cpeAMD-22.08.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeAMD-22.12 (EasyConfig: libtheora-1.1.1-cpeAMD-22.12.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeAMD-23.09 (EasyConfig: libtheora-1.1.1-cpeAMD-23.09.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeAOCC-22.08 (EasyConfig: libtheora-1.1.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeAOCC-22.12 (EasyConfig: libtheora-1.1.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeAOCC-23.09 (EasyConfig: libtheora-1.1.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeCray-22.08 (EasyConfig: libtheora-1.1.1-cpeCray-22.08.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeCray-22.12 (EasyConfig: libtheora-1.1.1-cpeCray-22.12.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeCray-23.03 (EasyConfig: libtheora-1.1.1-cpeCray-23.03.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeCray-23.09 (EasyConfig: libtheora-1.1.1-cpeCray-23.09.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeGNU-22.08 (EasyConfig: libtheora-1.1.1-cpeGNU-22.08.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeGNU-22.12 (EasyConfig: libtheora-1.1.1-cpeGNU-22.12.eb)</p> </li> <li> <p>libtheora/1.1.1-cpeGNU-23.09 (EasyConfig: libtheora-1.1.1-cpeGNU-23.09.eb)</p> </li> </ul>","boost":10},{"location":"l/libtheora/#technical-documentation","title":"Technical documentation","text":"<ul> <li>libtheora web site<ul> <li>downloads via the web site</li> </ul> </li> <li>libtheora on GitHub<ul> <li>libtheora releases on GitHub</li> </ul> </li> </ul>","boost":10},{"location":"l/libtheora/#general-information","title":"General information","text":"<ul> <li>libtheora needs libogg.</li> <li>The optional sample encoder also needs libvorbis.</li> <li>LibSDL is an optional dependency used for the player     and not useful for the cluster.</li> <li>libtheora has a configure - make - make install build process.</li> </ul>","boost":10},{"location":"l/libtheora/#easyconfig","title":"EasyConfig","text":"<ul> <li>No support was found in EasyBuild at the moment of the first installation,     so we developed our own EasyConfig.</li> <li>The <code>autogen.sh</code> script does start <code>configure</code> at the end which is unfortunate     in the EasyBuild context. We remove the last line of <code>autogen.sh</code>.</li> <li>We do explicitly disable the search for LibSDL to avoid the associated warning     and to make it very clear in the EasyConfig that we did not overlook this     dependency. (Well, the option doesn't work in version 1.1.1...)</li> <li>Integrated into the baselibs module from the 2020a toolchains on.</li> </ul>","boost":10},{"location":"l/libtheora/#version-111-2020a-toolchains","title":"Version 1.1.1, 2020a toolchains","text":"<ul> <li>It turns out that libtheora has problems with our version of libpng, so we stopped   the effort to get it to install. The problem occurs while compiling one of the    example files, 'png2theora.c'. The bug has been submitted and corrected in February   2014 but has not yet made it into a released version.    Hence we decided to disable building the examples until a new version of libtheora   becomes available which should fix this problem as it is already corrected in the   source code of 'examples/png2theora.c'    (relevant GitHub commit).</li> </ul>","boost":10},{"location":"l/libtheora/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libtheora-1.1.1-cpeAMD-21.06.eb, with module libtheora/1.1.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeAOCC-21.12.eb, with module libtheora/1.1.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeAOCC-22.06.eb, with module libtheora/1.1.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeCray-21.06.eb, with module libtheora/1.1.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeCray-21.08.eb, with module libtheora/1.1.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeCray-21.12.eb, with module libtheora/1.1.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeCray-22.06.eb, with module libtheora/1.1.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeGNU-21.06.eb, with module libtheora/1.1.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeGNU-21.08.eb, with module libtheora/1.1.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeGNU-21.12.eb, with module libtheora/1.1.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libtheora-1.1.1-cpeGNU-22.06.eb, with module libtheora/1.1.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libtirpc/","title":"libtirpc","text":"<p>[package list]</p>","boost":10},{"location":"l/libtirpc/#libtirpc","title":"libtirpc","text":"","boost":10},{"location":"l/libtirpc/#license-information","title":"License information","text":"<p>The libtirpc copyright information can be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, a copy of the COPYING file can also be found in the <code>$EBROOTLIBTIRPC/share/licenses/libtirpc</code> directory after loading the module.</p>","boost":10},{"location":"l/libtirpc/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libtirpc/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libtirpc/1.3.2-cpeAMD-22.08 (EasyConfig: libtirpc-1.3.2-cpeAMD-22.08.eb)</p> </li> <li> <p>libtirpc/1.3.2-cpeAOCC-22.08 (EasyConfig: libtirpc-1.3.2-cpeAOCC-22.08.eb)</p> </li> <li> <p>libtirpc/1.3.2-cpeCray-22.08 (EasyConfig: libtirpc-1.3.2-cpeCray-22.08.eb)</p> </li> <li> <p>libtirpc/1.3.2-cpeGNU-22.08 (EasyConfig: libtirpc-1.3.2-cpeGNU-22.08.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeAMD-22.12 (EasyConfig: libtirpc-1.3.3-cpeAMD-22.12.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeAMD-23.09 (EasyConfig: libtirpc-1.3.3-cpeAMD-23.09.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeAMD-23.12 (EasyConfig: libtirpc-1.3.3-cpeAMD-23.12.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeAOCC-22.12 (EasyConfig: libtirpc-1.3.3-cpeAOCC-22.12.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeAOCC-23.09 (EasyConfig: libtirpc-1.3.3-cpeAOCC-23.09.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeAOCC-23.12 (EasyConfig: libtirpc-1.3.3-cpeAOCC-23.12.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeCray-22.12 (EasyConfig: libtirpc-1.3.3-cpeCray-22.12.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeCray-23.03 (EasyConfig: libtirpc-1.3.3-cpeCray-23.03.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeCray-23.09 (EasyConfig: libtirpc-1.3.3-cpeCray-23.09.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeCray-23.12 (EasyConfig: libtirpc-1.3.3-cpeCray-23.12.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeGNU-22.12 (EasyConfig: libtirpc-1.3.3-cpeGNU-22.12.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeGNU-23.09 (EasyConfig: libtirpc-1.3.3-cpeGNU-23.09.eb)</p> </li> <li> <p>libtirpc/1.3.3-cpeGNU-23.12 (EasyConfig: libtirpc-1.3.3-cpeGNU-23.12.eb)</p> </li> <li> <p>libtirpc/1.3.4-cpeAMD-24.03 (EasyConfig: libtirpc-1.3.4-cpeAMD-24.03.eb)</p> </li> <li> <p>libtirpc/1.3.4-cpeAOCC-24.03 (EasyConfig: libtirpc-1.3.4-cpeAOCC-24.03.eb)</p> </li> <li> <p>libtirpc/1.3.4-cpeCray-24.03 (EasyConfig: libtirpc-1.3.4-cpeCray-24.03.eb)</p> </li> <li> <p>libtirpc/1.3.4-cpeGNU-24.03 (EasyConfig: libtirpc-1.3.4-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libtirpc/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libtirpc on SourceForge</p> </li> <li> <p>Development on linux-nfs.org</p> </li> </ul>","boost":10},{"location":"l/libtirpc/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libtirpc support in the EasyBuilders repository</p> </li> <li> <p>There is no support for libtirpc in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libtirpc/#version-132-for-cpe-2108","title":"Version 1.3.2 for CPE 21.08","text":"<ul> <li>The EasyConfig is a straightforward adaptation of the EasyBuilders one.</li> </ul>","boost":10},{"location":"l/libtirpc/#version-133-from-cpe-2212-on","title":"Version 1.3.3 from CPE 22.12 on","text":"<ul> <li> <p>The EasyConfig is a straightforward port of the 1.3.2. one.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation and the     sanity checks were improved.</p> <p>For clang-based compilers we used <code>--disable-symvers</code> as using that causes a failure with CCE when linking.</p> </li> </ul>","boost":10},{"location":"l/libtirpc/#version-134-from-lumi2403-on","title":"Version 1.3.4 from LUMI/24.03 on","text":"<ul> <li>Trivial port of the EasyConfig for version 1.3.3 in LUMI/23.12.</li> </ul>","boost":10},{"location":"l/libtirpc/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libtirpc-1.3.2-cpeAOCC-21.12.eb, with module libtirpc/1.3.2-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libtirpc-1.3.2-cpeAOCC-22.06.eb, with module libtirpc/1.3.2-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libtirpc-1.3.2-cpeCray-21.08.eb, with module libtirpc/1.3.2-cpeCray-21.08</p> </li> <li> <p>EasyConfig libtirpc-1.3.2-cpeCray-21.12.eb, with module libtirpc/1.3.2-cpeCray-21.12</p> </li> <li> <p>EasyConfig libtirpc-1.3.2-cpeCray-22.06.eb, with module libtirpc/1.3.2-cpeCray-22.06</p> </li> <li> <p>EasyConfig libtirpc-1.3.2-cpeGNU-21.08.eb, with module libtirpc/1.3.2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libtirpc-1.3.2-cpeGNU-21.12.eb, with module libtirpc/1.3.2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libtirpc-1.3.2-cpeGNU-22.06.eb, with module libtirpc/1.3.2-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libunistring/","title":"libunistring","text":"<p>[package list]</p>","boost":10},{"location":"l/libunistring/#libunistring","title":"libunistring","text":"","boost":10},{"location":"l/libunistring/#license-information","title":"License information","text":"<p>The libunistring library and its header files are dual-licensed under \"the GNU LGPLv3+ or the GNU GPLv2+\". This means, you can use it under either -   the terms of the GNU Lesser General Public License (LGPL) version 3 or     (at your option) any later version, or -   the terms of the GNU General Public License (GPL) version 2 or     (at your option) any later version, or -   the same dual license \"the GNU LGPLv3+ or the GNU GPLv2+\".</p> <p>See the  README file in the source repository for general information, and the COPYING and COPYING.LIB files in the same repository for the specific license texts.</p> <p>From LUMI/23.12 on, these files can also be found in the <code>$EBROOTLIBUNISTRING/sghare/licenses/libunistring</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libunistring/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libunistring/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libunistring/1.0-cpeAMD-22.08 (EasyConfig: libunistring-1.0-cpeAMD-22.08.eb)</p> </li> <li> <p>libunistring/1.0-cpeAOCC-22.08 (EasyConfig: libunistring-1.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>libunistring/1.0-cpeCray-22.08 (EasyConfig: libunistring-1.0-cpeCray-22.08.eb)</p> </li> <li> <p>libunistring/1.0-cpeGNU-22.08 (EasyConfig: libunistring-1.0-cpeGNU-22.08.eb)</p> </li> <li> <p>libunistring/1.1-cpeAMD-22.12 (EasyConfig: libunistring-1.1-cpeAMD-22.12.eb)</p> </li> <li> <p>libunistring/1.1-cpeAMD-23.09 (EasyConfig: libunistring-1.1-cpeAMD-23.09.eb)</p> </li> <li> <p>libunistring/1.1-cpeAMD-23.12 (EasyConfig: libunistring-1.1-cpeAMD-23.12.eb)</p> </li> <li> <p>libunistring/1.1-cpeAMD-24.03 (EasyConfig: libunistring-1.1-cpeAMD-24.03.eb)</p> </li> <li> <p>libunistring/1.1-cpeAOCC-22.12 (EasyConfig: libunistring-1.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>libunistring/1.1-cpeAOCC-23.09 (EasyConfig: libunistring-1.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>libunistring/1.1-cpeAOCC-23.12 (EasyConfig: libunistring-1.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>libunistring/1.1-cpeAOCC-24.03 (EasyConfig: libunistring-1.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>libunistring/1.1-cpeCray-22.12 (EasyConfig: libunistring-1.1-cpeCray-22.12.eb)</p> </li> <li> <p>libunistring/1.1-cpeCray-23.03 (EasyConfig: libunistring-1.1-cpeCray-23.03.eb)</p> </li> <li> <p>libunistring/1.1-cpeCray-23.09 (EasyConfig: libunistring-1.1-cpeCray-23.09.eb)</p> </li> <li> <p>libunistring/1.1-cpeCray-23.12 (EasyConfig: libunistring-1.1-cpeCray-23.12.eb)</p> </li> <li> <p>libunistring/1.1-cpeCray-24.03 (EasyConfig: libunistring-1.1-cpeCray-24.03.eb)</p> </li> <li> <p>libunistring/1.1-cpeGNU-22.12 (EasyConfig: libunistring-1.1-cpeGNU-22.12.eb)</p> </li> <li> <p>libunistring/1.1-cpeGNU-23.09 (EasyConfig: libunistring-1.1-cpeGNU-23.09.eb)</p> </li> <li> <p>libunistring/1.1-cpeGNU-23.12 (EasyConfig: libunistring-1.1-cpeGNU-23.12.eb)</p> </li> <li> <p>libunistring/1.1-cpeGNU-24.03 (EasyConfig: libunistring-1.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libunistring/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Home page of GNU libunistring</p> </li> <li> <p>Download from the GNU download site</p> </li> </ul>","boost":10},{"location":"l/libunistring/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libunistring in the EasyBuilders repository</p> </li> <li> <p>libunistring in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libunistring/#0910-from-2106-on","title":"0.9.10 from 21.06 on","text":"<ul> <li>The EasyConfig file is a simple adaptation of the one in use at University of Antwerpen     which itself is a variant from the one in the EasyBuilders repository.</li> </ul>","boost":10},{"location":"l/libunistring/#10-from-2112-on","title":"1.0 from 21.12 on","text":"<ul> <li>Trivial update of the EasyConfig file.</li> </ul>","boost":10},{"location":"l/libunistring/#11-from-2212-on","title":"1.1 from 22.12 on","text":"<ul> <li> <p>Trivial update of the EasyConfig file for 1.0.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libunistring/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libunistring-0.9.10-cpeAMD-21.06.eb, with module libunistring/0.9.10-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libunistring-0.9.10-cpeCray-21.06.eb, with module libunistring/0.9.10-cpeCray-21.06</p> </li> <li> <p>EasyConfig libunistring-0.9.10-cpeCray-21.08.eb, with module libunistring/0.9.10-cpeCray-21.08</p> </li> <li> <p>EasyConfig libunistring-0.9.10-cpeGNU-21.06.eb, with module libunistring/0.9.10-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libunistring-0.9.10-cpeGNU-21.08.eb, with module libunistring/0.9.10-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libunistring-1.0-cpeAOCC-21.12.eb, with module libunistring/1.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libunistring-1.0-cpeAOCC-22.06.eb, with module libunistring/1.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libunistring-1.0-cpeCray-21.12.eb, with module libunistring/1.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig libunistring-1.0-cpeCray-22.06.eb, with module libunistring/1.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig libunistring-1.0-cpeGNU-21.12.eb, with module libunistring/1.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libunistring-1.0-cpeGNU-22.06.eb, with module libunistring/1.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libunwind/","title":"libunwind","text":"<p>[package list]</p>","boost":10},{"location":"l/libunwind/#libunwind","title":"libunwind","text":"","boost":10},{"location":"l/libunwind/#license-information","title":"License information","text":"<p>See the COPYING file in the source repository for more information.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> can also be found in the  <code>$EBROOTLIBUNWIND/share/licenses/libunwind</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libunwind/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libunwind/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libunwind/1.6.2-cpeAMD-22.08 (EasyConfig: libunwind-1.6.2-cpeAMD-22.08.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeAMD-22.12 (EasyConfig: libunwind-1.6.2-cpeAMD-22.12.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeAMD-23.09 (EasyConfig: libunwind-1.6.2-cpeAMD-23.09.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeAMD-23.12 (EasyConfig: libunwind-1.6.2-cpeAMD-23.12.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeAMD-24.03 (EasyConfig: libunwind-1.6.2-cpeAMD-24.03.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeAOCC-22.08 (EasyConfig: libunwind-1.6.2-cpeAOCC-22.08.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeAOCC-22.12 (EasyConfig: libunwind-1.6.2-cpeAOCC-22.12.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeAOCC-23.09 (EasyConfig: libunwind-1.6.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeAOCC-23.12 (EasyConfig: libunwind-1.6.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeAOCC-24.03 (EasyConfig: libunwind-1.6.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeCray-22.08 (EasyConfig: libunwind-1.6.2-cpeCray-22.08.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeCray-22.12 (EasyConfig: libunwind-1.6.2-cpeCray-22.12.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeCray-23.03 (EasyConfig: libunwind-1.6.2-cpeCray-23.03.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeCray-23.09 (EasyConfig: libunwind-1.6.2-cpeCray-23.09.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeCray-23.12 (EasyConfig: libunwind-1.6.2-cpeCray-23.12.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeCray-24.03 (EasyConfig: libunwind-1.6.2-cpeCray-24.03.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeGNU-22.08 (EasyConfig: libunwind-1.6.2-cpeGNU-22.08.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeGNU-22.12 (EasyConfig: libunwind-1.6.2-cpeGNU-22.12.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeGNU-23.09 (EasyConfig: libunwind-1.6.2-cpeGNU-23.09.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeGNU-23.12 (EasyConfig: libunwind-1.6.2-cpeGNU-23.12.eb)</p> </li> <li> <p>libunwind/1.6.2-cpeGNU-24.03 (EasyConfig: libunwind-1.6.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libunwind/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libunwind home page</p> </li> <li> <p>libunwind downloads</p> </li> </ul>","boost":10},{"location":"l/libunwind/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libunwind in the EasyBuilders repository</p> </li> <li> <p>libunwind in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libunwind/#version-150-for-cpe-2108-and-2112","title":"Version 1.5.0 for CPE 21.08 and 21.12","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one</li> </ul>","boost":10},{"location":"l/libunwind/#version-162-for-cpe-2206","title":"Version 1.6.2 for CPE 22.06","text":"<ul> <li> <p>Trivial version bump of the 1.5.0 EasyConfig, but edited a bit to make it more     uniform.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libunwind/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libunwind-1.5.0-cpeAOCC-21.12.eb, with module libunwind/1.5.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libunwind-1.5.0-cpeCray-21.08.eb, with module libunwind/1.5.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig libunwind-1.5.0-cpeCray-21.12.eb, with module libunwind/1.5.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig libunwind-1.5.0-cpeGNU-21.08.eb, with module libunwind/1.5.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libunwind-1.5.0-cpeGNU-21.12.eb, with module libunwind/1.5.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libunwind-1.6.2-cpeAOCC-22.06.eb, with module libunwind/1.6.2-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libunwind-1.6.2-cpeCray-22.06.eb, with module libunwind/1.6.2-cpeCray-22.06</p> </li> <li> <p>EasyConfig libunwind-1.6.2-cpeGNU-22.06.eb, with module libunwind/1.6.2-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libvdwxc/","title":"libvdwxc","text":"<p>[package list]</p>","boost":10},{"location":"l/libvdwxc/#libvdwxc","title":"libvdwxc","text":"","boost":10},{"location":"l/libvdwxc/#license-information","title":"License information","text":"<p>libvdwxc is licensed under the GNU General Public License v3. See the COPYING file for a detailed description.</p>","boost":10},{"location":"l/libvdwxc/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libvdwxc/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig libvdwxc-0.4.0-cpuGNU-24.03.eb, will build libvdwxc/0.4.0-cpuGNU-24.03</li> </ul>","boost":10},{"location":"l/libvdwxc/#technical-documentation","title":"Technical documentation","text":"<p>The libvdwxc package entered the software stack as a dependency for GPAW.</p> <ul> <li> <p>libvdwxc documentation</p> </li> <li> <p>  libvdwxc on Gitlab</p> </li> </ul>","boost":10},{"location":"l/libvdwxc/#easybuild","title":"EasyBuild","text":"<ul> <li>libvdwxc support in the EasyBuilders repository</li> </ul>","boost":10},{"location":"l/libvdwxc/#libvdwxc-040-for-cpugnu-2403","title":"libvdwxc 0.4.0 for cpuGNU 24.03","text":"<ul> <li>EasyConfig file from the EasyBuilders repository adapted for LUMI</li> </ul>","boost":10},{"location":"l/libvorbis/","title":"libvorbis","text":"<p>[package list]</p>","boost":10},{"location":"l/libvorbis/#libvorbis","title":"libvorbis","text":"","boost":10},{"location":"l/libvorbis/#license-information","title":"License information","text":"<p>Libvorbis is licensed under a 3-Clause BSD License. See the COPYING file in the source repository for more information.</p> <p>From LUMI/23.12 onwards, the <code>COPYING</code> file can also be found in the <code>$EBROOTLIBVORBIS/share/licenses/libvorbis</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libvorbis/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libvorbis/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libvorbis/1.3.7-cpeAMD-22.08 (EasyConfig: libvorbis-1.3.7-cpeAMD-22.08.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeAMD-22.12 (EasyConfig: libvorbis-1.3.7-cpeAMD-22.12.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeAMD-23.09 (EasyConfig: libvorbis-1.3.7-cpeAMD-23.09.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeAMD-23.12 (EasyConfig: libvorbis-1.3.7-cpeAMD-23.12.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeAMD-24.03 (EasyConfig: libvorbis-1.3.7-cpeAMD-24.03.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeAOCC-22.08 (EasyConfig: libvorbis-1.3.7-cpeAOCC-22.08.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeAOCC-22.12 (EasyConfig: libvorbis-1.3.7-cpeAOCC-22.12.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeAOCC-23.09 (EasyConfig: libvorbis-1.3.7-cpeAOCC-23.09.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeAOCC-23.12 (EasyConfig: libvorbis-1.3.7-cpeAOCC-23.12.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeAOCC-24.03 (EasyConfig: libvorbis-1.3.7-cpeAOCC-24.03.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeCray-22.08 (EasyConfig: libvorbis-1.3.7-cpeCray-22.08.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeCray-22.12 (EasyConfig: libvorbis-1.3.7-cpeCray-22.12.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeCray-23.03 (EasyConfig: libvorbis-1.3.7-cpeCray-23.03.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeCray-23.09 (EasyConfig: libvorbis-1.3.7-cpeCray-23.09.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeCray-23.12 (EasyConfig: libvorbis-1.3.7-cpeCray-23.12.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeCray-24.03 (EasyConfig: libvorbis-1.3.7-cpeCray-24.03.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeGNU-22.08 (EasyConfig: libvorbis-1.3.7-cpeGNU-22.08.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeGNU-22.12 (EasyConfig: libvorbis-1.3.7-cpeGNU-22.12.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeGNU-23.09 (EasyConfig: libvorbis-1.3.7-cpeGNU-23.09.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeGNU-23.12 (EasyConfig: libvorbis-1.3.7-cpeGNU-23.12.eb)</p> </li> <li> <p>libvorbis/1.3.7-cpeGNU-24.03 (EasyConfig: libvorbis-1.3.7-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libvorbis/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libvorbis web site</p> <ul> <li>downloads via the web site</li> </ul> </li> <li> <p>libvorbis on GitHub</p> <ul> <li>libvorbis releases on GitHub</li> </ul> </li> </ul>","boost":10},{"location":"l/libvorbis/#general-information","title":"General information","text":"<ul> <li> <p>libvorbis needs libogg.</p> </li> <li> <p>libvorbis has a configure - make - make install build process.</p> </li> </ul>","boost":10},{"location":"l/libvorbis/#easyconfig","title":"EasyConfig","text":"<ul> <li> <p>libvorbis support in the EasyBuilders repository</p> </li> <li> <p>There is no support for libvorbis in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libvorbis/#version-137-from-cpe-2106-on","title":"Version 1.3.7 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is a combination of the EasyBuilders one and the University     of Antwerpen one which predates the EasyBuilders one.</p> </li> <li> <p>From LUMI/23.12 onwards, license information was added to the installation and      the sanity checks were improved.</p> </li> </ul>","boost":10},{"location":"l/libvorbis/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libvorbis-1.3.7-cpeAMD-21.06.eb, with module libvorbis/1.3.7-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeAOCC-21.12.eb, with module libvorbis/1.3.7-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeAOCC-22.06.eb, with module libvorbis/1.3.7-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeCray-21.06.eb, with module libvorbis/1.3.7-cpeCray-21.06</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeCray-21.08.eb, with module libvorbis/1.3.7-cpeCray-21.08</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeCray-21.12.eb, with module libvorbis/1.3.7-cpeCray-21.12</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeCray-22.06.eb, with module libvorbis/1.3.7-cpeCray-22.06</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeGNU-21.06.eb, with module libvorbis/1.3.7-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeGNU-21.08.eb, with module libvorbis/1.3.7-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeGNU-21.12.eb, with module libvorbis/1.3.7-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libvorbis-1.3.7-cpeGNU-22.06.eb, with module libvorbis/1.3.7-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libvori/","title":"libvori","text":"<p>[package list]</p>","boost":10},{"location":"l/libvori/#libvori","title":"libvori","text":"","boost":10},{"location":"l/libvori/#license-information","title":"License information","text":"<p>According to the libvori web page, libvori is distruted under the  GNU Lesser General Public License version 3. There is a COPYING file in the source distribution but that file is not  readily available to link to.</p>","boost":10},{"location":"l/libvori/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libvori/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig libvori-220621-cpeGNU-23.09.eb, will build libvori/220621-cpeGNU-23.09</p> </li> <li> <p>EasyConfig libvori-220621-cpeGNU-24.03.eb, will build libvori/220621-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"l/libvori/#technical-documentation","title":"Technical documentation","text":"<ul> <li>libvori web site</li> </ul>","boost":10},{"location":"l/libvori/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libvbori support in the CSCS repository</p> </li> <li> <p>There is no support yet for libvori in the EasyBuilders repository.</p> </li> </ul>","boost":10},{"location":"l/libvori/#libvori-210412-for-cp2k-91","title":"libvori 210412 for CP2K 9.1","text":"<ul> <li>The EasyConfig is a direct port of the CSCS one.</li> </ul>","boost":10},{"location":"l/libvori/#libvori-220621-for-cp2k-20221-and-20231","title":"libvori 220621 for CP2K 2022.1 and 2023.1","text":"<ul> <li>Trivial port of the previous EasyConfig</li> </ul>","boost":10},{"location":"l/libvori/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig libvori-210412-cpeGNU-21.08.eb, with module libvori/210412-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libvori-210412-cpeGNU-21.12.eb, with module libvori/210412-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libvori-220621-cpeGNU-22.08.eb, with module libvori/220621-cpeGNU-22.08</p> </li> <li> <p>EasyConfig libvori-220621-cpeGNU-22.12.eb, with module libvori/220621-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libwebp/","title":"libwebp","text":"<p>[package list]</p>","boost":10},{"location":"l/libwebp/#libwebp","title":"libwebp","text":"","boost":10},{"location":"l/libwebp/#license-information","title":"License information","text":"<p>Libwebp is distributed under a BSD 3-Clause license,  a copy of which can be found in the COPYING file in the source distribution.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the <code>$EBROOTLIBWEBP/share/licenses/libwebp</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libwebp/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libwebp/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libwebp/1.2.2-cpeAMD-22.08 (EasyConfig: libwebp-1.2.2-cpeAMD-22.08.eb)</p> </li> <li> <p>libwebp/1.2.2-cpeAOCC-22.08 (EasyConfig: libwebp-1.2.2-cpeAOCC-22.08.eb)</p> </li> <li> <p>libwebp/1.2.2-cpeCray-22.08 (EasyConfig: libwebp-1.2.2-cpeCray-22.08.eb)</p> </li> <li> <p>libwebp/1.2.2-cpeGNU-22.08 (EasyConfig: libwebp-1.2.2-cpeGNU-22.08.eb)</p> </li> <li> <p>libwebp/1.2.4-cpeAMD-22.12 (EasyConfig: libwebp-1.2.4-cpeAMD-22.12.eb)</p> </li> <li> <p>libwebp/1.2.4-cpeAOCC-22.12 (EasyConfig: libwebp-1.2.4-cpeAOCC-22.12.eb)</p> </li> <li> <p>libwebp/1.2.4-cpeCray-22.12 (EasyConfig: libwebp-1.2.4-cpeCray-22.12.eb)</p> </li> <li> <p>libwebp/1.2.4-cpeCray-23.03 (EasyConfig: libwebp-1.2.4-cpeCray-23.03.eb)</p> </li> <li> <p>libwebp/1.2.4-cpeGNU-22.12 (EasyConfig: libwebp-1.2.4-cpeGNU-22.12.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeAMD-23.09 (EasyConfig: libwebp-1.3.2-cpeAMD-23.09.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeAMD-23.12 (EasyConfig: libwebp-1.3.2-cpeAMD-23.12.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeAMD-24.03 (EasyConfig: libwebp-1.3.2-cpeAMD-24.03.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeAOCC-23.09 (EasyConfig: libwebp-1.3.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeAOCC-23.12 (EasyConfig: libwebp-1.3.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeAOCC-24.03 (EasyConfig: libwebp-1.3.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeCray-23.09 (EasyConfig: libwebp-1.3.2-cpeCray-23.09.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeCray-23.12 (EasyConfig: libwebp-1.3.2-cpeCray-23.12.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeCray-24.03 (EasyConfig: libwebp-1.3.2-cpeCray-24.03.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeGNU-23.09 (EasyConfig: libwebp-1.3.2-cpeGNU-23.09.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeGNU-23.12 (EasyConfig: libwebp-1.3.2-cpeGNU-23.12.eb)</p> </li> <li> <p>libwebp/1.3.2-cpeGNU-24.03 (EasyConfig: libwebp-1.3.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libwebp/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libwebp home page</p> </li> <li> <p>libwebp on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libwebp/#easybuild","title":"Easybuild","text":"<ul> <li> <p>libwebp support in the EasyBuilders repository</p> </li> <li> <p>There is no libwebp support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libwebp/#general-issues","title":"General issues","text":"<ul> <li> <p>There is a potential circular dependency with LibTIFF as both can use each others     libraries, so a choice has to be made which tool will support which libraries.</p> <p>A possible solution is to compile both in a bundle where LibTIFF is compiled first, then libwebp and then LibTIFF is recompiled.</p> </li> </ul>","boost":10},{"location":"l/libwebp/#120-from-cpe-2106-on","title":"1.2.0 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is based on the one from the University of Antwerpen but     mostly follows the EasyBuilders one with some additional configuration     options.</li> </ul>","boost":10},{"location":"l/libwebp/#122-from-cpe-2206-on","title":"1.2.2 from CPE 22.06 on","text":"<ul> <li>Trivial version bump of the 1.2.0 EasyConfig.</li> </ul>","boost":10},{"location":"l/libwebp/#124-from-cpe-2212-on","title":"1.2.4 from CPE 22.12 on","text":"<ul> <li> <p>Trivial port of the EasyConfig of 1.2.2, but with some improvements to the     sanity check borrowed from the EasyBuilders version. </p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libwebp/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libwebp-1.2.0-cpeAMD-21.06.eb, with module libwebp/1.2.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libwebp-1.2.0-cpeAOCC-21.12.eb, with module libwebp/1.2.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libwebp-1.2.0-cpeCray-21.06.eb, with module libwebp/1.2.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig libwebp-1.2.0-cpeCray-21.08.eb, with module libwebp/1.2.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig libwebp-1.2.0-cpeCray-21.12.eb, with module libwebp/1.2.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig libwebp-1.2.0-cpeGNU-21.06.eb, with module libwebp/1.2.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libwebp-1.2.0-cpeGNU-21.08.eb, with module libwebp/1.2.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libwebp-1.2.0-cpeGNU-21.12.eb, with module libwebp/1.2.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libwebp-1.2.2-cpeAOCC-22.06.eb, with module libwebp/1.2.2-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libwebp-1.2.2-cpeCray-22.06.eb, with module libwebp/1.2.2-cpeCray-22.06</p> </li> <li> <p>EasyConfig libwebp-1.2.2-cpeGNU-22.06.eb, with module libwebp/1.2.2-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libxc/","title":"libxc","text":"<p>[package list]</p>","boost":10},{"location":"l/libxc/#libxc","title":"libxc","text":"","boost":10},{"location":"l/libxc/#license-information","title":"License information","text":"<p>Libxc is released under the  Mozilla Public License v2.0. The license file can be found as the COPYING file in the libxc GitLab repository.</p> <p>From LUMI/23.09 on, the license information is also available in <code>$EBROOTLIBXC/share/licences/libxc</code> (as is relevant citation information) after installation of the package and loading of the module.</p>","boost":10},{"location":"l/libxc/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libxc/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig libxc-6.1.0-cpeGNU-23.09-nofhc.eb, will build libxc/6.1.0-cpeGNU-23.09-nofhc</p> </li> <li> <p>EasyConfig libxc-6.2.2-cpeGNU-23.09.eb, will build libxc/6.2.2-cpeGNU-23.09</p> </li> <li> <p>EasyConfig libxc-6.2.2-cpeGNU-23.12.eb, will build libxc/6.2.2-cpeGNU-23.12</p> </li> <li> <p>EasyConfig libxc-6.2.2-cpeGNU-24.03.eb, will build libxc/6.2.2-cpeGNU-24.03</p> </li> <li> <p>EasyConfig libxc-7.0.0-cpeGNU-24.03-nofhc.eb, will build libxc/7.0.0-cpeGNU-24.03-nofhc</p> </li> <li> <p>EasyConfig libxc-7.0.0-cpeGNU-24.03.eb, will build libxc/7.0.0-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"l/libxc/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Libxc website</p> <ul> <li>Libxc downloads from the web site</li> </ul> </li> <li> <p>Libxc on GitLab</p> <ul> <li>GitLab releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libxc/#general-information","title":"General information","text":"<p>Libxc is a library of exchange-correlation and kinetic energy functionals for  density-functional theory. The original aim was to provide a portable, well  tested and reliable set of LDA, GGA, and meta-GGA  functionals.</p> <ul> <li> <p>Libxc documentation</p> </li> <li> <p>Available functionals</p> </li> </ul>","boost":10},{"location":"l/libxc/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libxc in the EasyBuilders repository</p> </li> <li> <p>libxc in the CSCS repository</p> </li> <li> <p>libxc in Spack</p> </li> </ul>","boost":10},{"location":"l/libxc/#version-522-for-cpegnu-2208","title":"Version 5.2.2 for cpeGNU 22.08","text":"<ul> <li>Derived from the EasyConfigs used at CSCS.</li> </ul>","boost":10},{"location":"l/libxc/#version-610-for-cpegnu-2208-and-2212","title":"Version 6.1.0 for cpeGNU 22.08 and 22.12","text":"<ul> <li>Derived from the 5.2.2 one, but currently only generating shared libraries.</li> </ul>","boost":10},{"location":"l/libxc/#version-622-for-cpegnu-2212-and-2309","title":"Version 6.2.2 for cpeGNU 22.12 and 23.09","text":"<ul> <li>Derived from the 6.1.0 EasyConfig.</li> </ul>","boost":10},{"location":"l/libxc/#version-700-for-cpegnu-2403","title":"Version 7.0.0 for cpeGNU 24.03","text":"<ul> <li> <p>Derived from the 6.2.2 EasyConfig.</p> </li> <li> <p>NOTE: Update on March 31, 2025: Disabled checksums as they seem unstable on      on the GitLab.</p> </li> </ul>","boost":10},{"location":"l/libxc/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li>EasyConfig libxc-5.1.6-cpeGNU-21.09.eb, with module libxc/5.1.6-cpeGNU-21.09</li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig libxc-5.1.7-cpeGNU-21.08.eb, with module libxc/5.1.7-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libxc-5.1.7-cpeGNU-21.12.eb, with module libxc/5.1.7-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libxc-5.2.2-cpeGNU-21.12.eb, with module libxc/5.2.2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libxc-5.2.2-cpeGNU-22.06.eb, with module libxc/5.2.2-cpeGNU-22.06</p> </li> <li> <p>EasyConfig libxc-5.2.2-cpeGNU-22.08.eb, with module libxc/5.2.2-cpeGNU-22.08</p> </li> <li> <p>EasyConfig libxc-6.1.0-cpeGNU-22.08.eb, with module libxc/6.1.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig libxc-6.1.0-cpeGNU-22.12-nofhc.eb, with module libxc/6.1.0-cpeGNU-22.12-nofhc</p> <p>Special version of libxc with enforcement of Fermi hole curvature disabled for VASP.</p> </li> <li> <p>EasyConfig libxc-6.1.0-cpeGNU-22.12.eb, with module libxc/6.1.0-cpeGNU-22.12</p> </li> <li> <p>EasyConfig libxc-6.2.2-cpeGNU-22.12.eb, with module libxc/6.2.2-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libxml2/","title":"libxml2","text":"<p>[package list]</p>","boost":10},{"location":"l/libxml2/#libxml2","title":"libxml2","text":"","boost":10},{"location":"l/libxml2/#license-information","title":"License information","text":"<p>Libxml2 is released under the  MIT License.</p> <p>A copy of the license can also be found in the Copyright file in the source repository.</p> <p>From LUMI/23.12 on, the <code>Copyright</code> file can also be found in the <code>$EBROOTLIBXML2/share/licenses/libxml2</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libxml2/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libxml2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libxml2/2.11.4-cpeAMD-23.09 (EasyConfig: libxml2-2.11.4-cpeAMD-23.09.eb)</p> </li> <li> <p>libxml2/2.11.4-cpeAMD-23.12 (EasyConfig: libxml2-2.11.4-cpeAMD-23.12.eb)</p> </li> <li> <p>libxml2/2.11.4-cpeAOCC-23.09 (EasyConfig: libxml2-2.11.4-cpeAOCC-23.09.eb)</p> </li> <li> <p>libxml2/2.11.4-cpeAOCC-23.12 (EasyConfig: libxml2-2.11.4-cpeAOCC-23.12.eb)</p> </li> <li> <p>libxml2/2.11.4-cpeCray-23.09 (EasyConfig: libxml2-2.11.4-cpeCray-23.09.eb)</p> </li> <li> <p>libxml2/2.11.4-cpeCray-23.12 (EasyConfig: libxml2-2.11.4-cpeCray-23.12.eb)</p> </li> <li> <p>libxml2/2.11.4-cpeGNU-23.09 (EasyConfig: libxml2-2.11.4-cpeGNU-23.09.eb)</p> </li> <li> <p>libxml2/2.11.4-cpeGNU-23.12 (EasyConfig: libxml2-2.11.4-cpeGNU-23.12.eb)</p> </li> <li> <p>libxml2/2.11.5-cpeAMD-24.03 (EasyConfig: libxml2-2.11.5-cpeAMD-24.03.eb)</p> </li> <li> <p>libxml2/2.11.5-cpeAOCC-24.03 (EasyConfig: libxml2-2.11.5-cpeAOCC-24.03.eb)</p> </li> <li> <p>libxml2/2.11.5-cpeCray-24.03 (EasyConfig: libxml2-2.11.5-cpeCray-24.03.eb)</p> </li> <li> <p>libxml2/2.11.5-cpeGNU-24.03 (EasyConfig: libxml2-2.11.5-cpeGNU-24.03.eb)</p> </li> <li> <p>libxml2/2.9.12-cpeAMD-22.08 (EasyConfig: libxml2-2.9.12-cpeAMD-22.08.eb)</p> </li> <li> <p>libxml2/2.9.12-cpeAOCC-22.08 (EasyConfig: libxml2-2.9.12-cpeAOCC-22.08.eb)</p> </li> <li> <p>libxml2/2.9.12-cpeCray-22.08 (EasyConfig: libxml2-2.9.12-cpeCray-22.08.eb)</p> </li> <li> <p>libxml2/2.9.12-cpeGNU-22.08 (EasyConfig: libxml2-2.9.12-cpeGNU-22.08.eb)</p> </li> <li> <p>libxml2/2.9.14-cpeAMD-22.12 (EasyConfig: libxml2-2.9.14-cpeAMD-22.12.eb)</p> </li> <li> <p>libxml2/2.9.14-cpeAOCC-22.12 (EasyConfig: libxml2-2.9.14-cpeAOCC-22.12.eb)</p> </li> <li> <p>libxml2/2.9.14-cpeCray-22.12 (EasyConfig: libxml2-2.9.14-cpeCray-22.12.eb)</p> </li> <li> <p>libxml2/2.9.14-cpeCray-23.03 (EasyConfig: libxml2-2.9.14-cpeCray-23.03.eb)</p> </li> <li> <p>libxml2/2.9.14-cpeGNU-22.12 (EasyConfig: libxml2-2.9.14-cpeGNU-22.12.eb)</p> </li> </ul>","boost":10},{"location":"l/libxml2/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libxlm2 home page</p> </li> <li> <p>Source downloads from gnome.org</p> </li> </ul>","boost":10},{"location":"l/libxml2/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libxml2 support in the EasyBuilders repository</p> </li> <li> <p>libxml2 support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libxml2/#version-2912-from-cpe-2106-on","title":"Version 2.9.12 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is derived from the University of Antwerpen one as that one does     a more complete build of libxml2 with additional dependencies that the configure     process searches for and may otherwise pick from the system. Additional sanity checks     were also added.</li> </ul>","boost":10},{"location":"l/libxml2/#version-2914-from-cpe-2212-on","title":"Version 2.9.14 from CPE 22.12 on","text":"<ul> <li>The EasyConfig is a port from the 2.9.12 one but with a new download location as      the old download location doesn't contain the latest versions anymore.</li> </ul>","boost":10},{"location":"l/libxml2/#version-2114-from-cpe-2309-on","title":"Version 2.11.4 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 2.9.14 EasyConfig.</p> </li> <li> <p>But needed to explicitly enable static libraries in this version.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/libxml2/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libxml2-2.9.12-cpeAMD-21.06.eb, with module libxml2/2.9.12-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeAOCC-21.12.eb, with module libxml2/2.9.12-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeAOCC-22.06.eb, with module libxml2/2.9.12-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeCray-21.06.eb, with module libxml2/2.9.12-cpeCray-21.06</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeCray-21.08.eb, with module libxml2/2.9.12-cpeCray-21.08</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeCray-21.12.eb, with module libxml2/2.9.12-cpeCray-21.12</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeCray-22.06.eb, with module libxml2/2.9.12-cpeCray-22.06</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeGNU-21.06.eb, with module libxml2/2.9.12-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeGNU-21.08.eb, with module libxml2/2.9.12-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeGNU-21.12.eb, with module libxml2/2.9.12-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libxml2-2.9.12-cpeGNU-22.06.eb, with module libxml2/2.9.12-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libxslt/","title":"libxslt","text":"<p>[package list]</p>","boost":10},{"location":"l/libxslt/#libxslt","title":"libxslt","text":"","boost":10},{"location":"l/libxslt/#license-information","title":"License information","text":"<p>Libxslt is released under the  MIT License.</p> <p>A copy of the license can also be found in the Copyright file in the source repository.</p> <p>From LUMI/23.12 on, a copy of the <code>Copyright</code> file can also be found in the <code>$EBROOTLIBXSLT/share/licenses/libxslt</code> subdirectory after loading the module.</p>","boost":10},{"location":"l/libxslt/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libxslt/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libxslt/1.1.34-cpeAMD-22.08 (EasyConfig: libxslt-1.1.34-cpeAMD-22.08.eb)</p> </li> <li> <p>libxslt/1.1.34-cpeAOCC-22.08 (EasyConfig: libxslt-1.1.34-cpeAOCC-22.08.eb)</p> </li> <li> <p>libxslt/1.1.34-cpeCray-22.08 (EasyConfig: libxslt-1.1.34-cpeCray-22.08.eb)</p> </li> <li> <p>libxslt/1.1.34-cpeGNU-22.08 (EasyConfig: libxslt-1.1.34-cpeGNU-22.08.eb)</p> </li> <li> <p>libxslt/1.1.37-cpeAMD-22.12 (EasyConfig: libxslt-1.1.37-cpeAMD-22.12.eb)</p> </li> <li> <p>libxslt/1.1.37-cpeAOCC-22.12 (EasyConfig: libxslt-1.1.37-cpeAOCC-22.12.eb)</p> </li> <li> <p>libxslt/1.1.37-cpeCray-22.12 (EasyConfig: libxslt-1.1.37-cpeCray-22.12.eb)</p> </li> <li> <p>libxslt/1.1.37-cpeCray-23.03 (EasyConfig: libxslt-1.1.37-cpeCray-23.03.eb)</p> </li> <li> <p>libxslt/1.1.37-cpeGNU-22.12 (EasyConfig: libxslt-1.1.37-cpeGNU-22.12.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeAMD-23.09 (EasyConfig: libxslt-1.1.38-cpeAMD-23.09.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeAMD-23.12 (EasyConfig: libxslt-1.1.38-cpeAMD-23.12.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeAMD-24.03 (EasyConfig: libxslt-1.1.38-cpeAMD-24.03.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeAOCC-23.09 (EasyConfig: libxslt-1.1.38-cpeAOCC-23.09.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeAOCC-23.12 (EasyConfig: libxslt-1.1.38-cpeAOCC-23.12.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeAOCC-24.03 (EasyConfig: libxslt-1.1.38-cpeAOCC-24.03.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeCray-23.09 (EasyConfig: libxslt-1.1.38-cpeCray-23.09.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeCray-23.12 (EasyConfig: libxslt-1.1.38-cpeCray-23.12.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeCray-24.03 (EasyConfig: libxslt-1.1.38-cpeCray-24.03.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeGNU-23.09 (EasyConfig: libxslt-1.1.38-cpeGNU-23.09.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeGNU-23.12 (EasyConfig: libxslt-1.1.38-cpeGNU-23.12.eb)</p> </li> <li> <p>libxslt/1.1.38-cpeGNU-24.03 (EasyConfig: libxslt-1.1.38-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/libxslt/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libxslt home page</p> <ul> <li>download link</li> </ul> </li> </ul>","boost":10},{"location":"l/libxslt/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libxslt support in the EasyBuilders repository</p> </li> <li> <p>There is no support for libxslt in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libxslt/#version-1134-from-cpe-2106-on","title":"Version 1.1.34 from CPE 21.06 on","text":"<ul> <li>The EasyConfig file is a mix of the EasyBuilders and University of     Antwerpen ones with extra sanity checks.</li> </ul>","boost":10},{"location":"l/libxslt/#version-1137-from-cpe-2212-on","title":"Version 1.1.37 from CPE 22.12 on","text":"<ul> <li> <p>Port of the 1.1.34 one, but with two changes made based on the version in the     EasyBuilders repository:</p> <ul> <li> <p>Different set of sources (similar as the change to libxml2)</p> </li> <li> <p>Added the configuration options <code>--with-crypto=no --with-python=no</code> to ensure     that the system Python and a potential sysstem libgcrypt would not be picked up.</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libxslt/#version-1138-from-cpe-2309-on","title":"Version 1.1.38 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 1.1.37 EasyConfig.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation, and we also      build both shared and static libraries.</p> </li> </ul>","boost":10},{"location":"l/libxslt/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libxslt-1.1.34-cpeAMD-21.06.eb, with module libxslt/1.1.34-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeAOCC-21.12.eb, with module libxslt/1.1.34-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeAOCC-22.06.eb, with module libxslt/1.1.34-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeCray-21.06.eb, with module libxslt/1.1.34-cpeCray-21.06</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeCray-21.08.eb, with module libxslt/1.1.34-cpeCray-21.08</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeCray-21.12.eb, with module libxslt/1.1.34-cpeCray-21.12</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeCray-22.06.eb, with module libxslt/1.1.34-cpeCray-22.06</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeGNU-21.06.eb, with module libxslt/1.1.34-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeGNU-21.08.eb, with module libxslt/1.1.34-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeGNU-21.12.eb, with module libxslt/1.1.34-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libxslt-1.1.34-cpeGNU-22.06.eb, with module libxslt/1.1.34-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libxsmm/","title":"libxsmm","text":"<p>[package list]</p>","boost":10},{"location":"l/libxsmm/#libxsmm","title":"libxsmm","text":"","boost":10},{"location":"l/libxsmm/#license-information","title":"License information","text":"<p>Libxsmm is licensed under the BSD 3-Clause License, see the \"BSD 3-Clause License\" page in the documentation or the LICENSE.md file in the GitHub repository.</p>","boost":10},{"location":"l/libxsmm/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider libxsmm/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig libxsmm-1.17-cpeGNU-23.09.eb, will build libxsmm/1.17-cpeGNU-23.09</p> </li> <li> <p>EasyConfig libxsmm-1.17-cpeGNU-24.03.eb, will build libxsmm/1.17-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"l/libxsmm/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libxsmm on ReadTheDocs</p> </li> <li> <p>libxsmm on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/libxsmm/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libxsmm in the CSCS repository</p> </li> <li> <p>libxsmm in the EasyBuilders repository</p> </li> </ul>","boost":10},{"location":"l/libxsmm/#libxsmm-117-for-cpegnu-2108-and-later","title":"libxsmm 1.17 for cpeGNU 21.08 and later","text":"<ul> <li>The EasyConfig is a direct port of the CSCS one.</li> </ul>","boost":10},{"location":"l/libxsmm/#libxsmm-29dec22-for-cpe-2208-and-later","title":"libxsmm 29Dec22 for CPE 22.08 and later","text":"<ul> <li>Created for PyFR as it requires a recent version of libxsmm but no release     exists. Use the date of the commit as the version.</li> </ul>","boost":10},{"location":"l/libxsmm/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig libxsmm-1.17-cpeGNU-21.08.eb, with module libxsmm/1.17-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libxsmm-1.17-cpeGNU-21.12.eb, with module libxsmm/1.17-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libxsmm-1.17-cpeGNU-22.08.eb, with module libxsmm/1.17-cpeGNU-22.08</p> </li> <li> <p>EasyConfig libxsmm-1.17-cpeGNU-22.12.eb, with module libxsmm/1.17-cpeGNU-22.12</p> </li> <li> <p>EasyConfig libxsmm-29Dec22-cpeCray-22.08.eb, with module libxsmm/29Dec22-cpeCray-22.08</p> </li> <li> <p>EasyConfig libxsmm-29Dec22-cpeGNU-22.08.eb, with module libxsmm/29Dec22-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/libyaml/","title":"libyaml","text":"<p>[package list]</p>","boost":10},{"location":"l/libyaml/#libyaml","title":"libyaml","text":"","boost":10},{"location":"l/libyaml/#license-information","title":"License information","text":"<p>Libyaml is released under the MIT License, a copy of which can be found in the Copying file in the source repository.</p>","boost":10},{"location":"l/libyaml/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider libyaml/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>libyaml/0.2.5-cpeAMD-22.08 (EasyConfig: libyaml-0.2.5-cpeAMD-22.08.eb)</p> </li> <li> <p>libyaml/0.2.5-cpeAOCC-22.08 (EasyConfig: libyaml-0.2.5-cpeAOCC-22.08.eb)</p> </li> <li> <p>libyaml/0.2.5-cpeCray-22.08 (EasyConfig: libyaml-0.2.5-cpeCray-22.08.eb)</p> </li> <li> <p>libyaml/0.2.5-cpeGNU-22.08 (EasyConfig: libyaml-0.2.5-cpeGNU-22.08.eb)</p> </li> </ul>","boost":10},{"location":"l/libyaml/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>libyaml on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> <li> <p>There is also info on PyYAML.org</p> </li> </ul>","boost":10},{"location":"l/libyaml/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>libyaml in the EasyBuilders repository</p> </li> <li> <p>libyaml in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/libyaml/#version-025-from-cpe-2106-on","title":"Version 0.2.5 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is derived from the University of Antwerpen one which itself     is a further development of the standard EasyBuilders one.</p> <ul> <li>Switched to GitHub as the download site.</li> </ul> </li> </ul>","boost":10},{"location":"l/libyaml/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig libyaml-0.2.5-cpeAMD-21.06.eb, with module libyaml/0.2.5-cpeAMD-21.06</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeAOCC-21.12.eb, with module libyaml/0.2.5-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeAOCC-22.06.eb, with module libyaml/0.2.5-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeCray-21.06.eb, with module libyaml/0.2.5-cpeCray-21.06</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeCray-21.08.eb, with module libyaml/0.2.5-cpeCray-21.08</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeCray-21.12.eb, with module libyaml/0.2.5-cpeCray-21.12</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeCray-22.06.eb, with module libyaml/0.2.5-cpeCray-22.06</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeGNU-21.06.eb, with module libyaml/0.2.5-cpeGNU-21.06</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeGNU-21.08.eb, with module libyaml/0.2.5-cpeGNU-21.08</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeGNU-21.12.eb, with module libyaml/0.2.5-cpeGNU-21.12</p> </li> <li> <p>EasyConfig libyaml-0.2.5-cpeGNU-22.06.eb, with module libyaml/0.2.5-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-CPEtools/","title":"lumi-CPEtools","text":"<p>[package list]</p>","boost":10},{"location":"l/lumi-CPEtools/#lumi-cpetools","title":"lumi-CPEtools","text":"","boost":10},{"location":"l/lumi-CPEtools/#license-information","title":"License information","text":"<p>The lumi-CPEtools packages are developed by the LUMI User Support Team and licensed under the GNU General Public License version 3.0, a copy of which can be found in the LICENSE file in the source repository.</p> <p>The <code>hpcat</code> tool included in the module is developed by HPE and licensed under an MIT-style license which can be found in the LICENSE file in the source repository.</p> <p>After loading the module, both license files are available in their respective subdirectories  in <code>$EBROOTLUMIMINCPETOOLS/share/licenses</code>.</p>","boost":10},{"location":"l/lumi-CPEtools/#user-documentation-central-installation","title":"User documentation (central installation)","text":"","boost":10},{"location":"l/lumi-CPEtools/#getting-help","title":"Getting help","text":"<p>The tools in <code>lumi-CPETtools</code> are documented through manual pages that can be viewed on LUMI after loading the module. Start with <code>man lumi-CPEtools</code>.</p> <p>Commands provided:</p> <ul> <li> <p><code>xldd</code>: An ldd-like program to show which versions of Cray PE libraries are used by an executable.</p> </li> <li> <p><code>serial_check</code>: Serial program can print core and host allocation and affinity information.</p> </li> <li> <p><code>omp_check</code>: OpenMP program can print core and host allocation and affinity information.</p> </li> <li> <p><code>mpi_check</code>: MPI program can print core and host allocation and affinity information.  It is also suitable to test heterogeneous jobs.</p> </li> <li> <p><code>hybrid_check</code>: Hybrid MPI/OpenMP program can print core and host allocation and affinity information.  It is also suitable to test     heterogeneous jobs.  It encompasses the full functionality of serial_check, omp_check and mpi_check.</p> </li> <li> <p><code>gpu_check</code> (from version 1.1 on): A  hybrid MPI/OpenMP program that prints information about thread and GPU binding/mapping on Cray EX Bardpeak nodes as in     LUMI-G, based on the ORNL hello_jobstep program.  (AMD GPU nodes only)</p> </li> <li> <p><code>hpcat</code> (from version 1.2 on): Another HPC Affinity Tracker program. This program      is developed by HPE and shows for      each MPI rank the core(s) that will be used (and per thread if <code>OMP_NUM_THREADS</code>     is set), which GPU(s) are accessible to the task and which network adapter will be     used, indicating the NUMA domain for each so that one can easily check if the resource     mapping is ideal.</p> </li> </ul> <p>The various <code>*_check</code> programs are designed to test CPU and GPU binding in Slurm and  are the LUST recommended way to experiment with those bindings.</p>","boost":10},{"location":"l/lumi-CPEtools/#some-interactive-examples","title":"Some interactive examples","text":"<p>The examples assume the appropriate software stack modules and <code>lumi-CPEtools</code> module are loaded. The examples show one version of modules, but can work with others too. You'll also need to add the appropriate <code>-A</code> flag to the <code>salloc</code> commands.</p>","boost":10},{"location":"l/lumi-CPEtools/#gpu_check","title":"<code>gpu_check</code>","text":"<pre><code>salloc -N2 -pstandard-g -G 16 -t 10:00\nmodule load LUMI/24.03 partition/G lumi-CPEtools/1.2-cpeGNU-24.03\nsrun -n16 -c7 bash -c 'ROCR_VISIBLE_DEVICES=$SLURM_LOCALID gpu_check -l'\nsrun -n16 -c7 \\\n    --cpu-bind=mask_cpu:0xfe000000000000,0xfe00000000000000,0xfe0000,0xfe000000,0xfe,0xfe00,0xfe00000000,0xfe0000000000 \\\n    bash -c 'ROCR_VISIBLE_DEVICES=$SLURM_LOCALID gpu_check -l'\n</code></pre> <p>Note that in the first <code>srun</code> command, the mapping of GPU binding is not optimal while  in the second <code>srunz</code> command it is.</p>","boost":10},{"location":"l/lumi-CPEtools/#hpcat-on-a-gpu-node","title":"<code>hpcat</code> on a GPU node","text":"<pre><code>salloc -N2 -pstandard-g -G 16 -t 10:00\nmodule load LUMI/24.03 partition/G lumi-CPEtools/1.2-cpeGNU-24.03\nsrun -n16 -c7 bash -c 'ROCR_VISIBLE_DEVICES=$SLURM_LOCALID OMP_NUM_THREADS=7 hpcat'\nsrun -n16 -c7 \\\n    --cpu-bind=mask_cpu:0xfe000000000000,0xfe00000000000000,0xfe0000,0xfe000000,0xfe,0xfe00,0xfe00000000,0xfe0000000000 \\\n    bash -c 'ROCR_VISIBLE_DEVICES=$SLURM_LOCALID OMP_NUM_THREADS=7 hpcat'\nsrun -n16 -c7 \\\n    --cpu-bind=mask_cpu:0xfe000000000000,0xfe00000000000000,0xfe0000,0xfe000000,0xfe,0xfe00,0xfe00000000,0xfe0000000000 \\\n    bash -c 'ROCR_VISIBLE_DEVICES=$SLURM_LOCALID OMP_NUM_THREADS=7 OMP_PLACES=cores hpcat'\n</code></pre> <p>Note that in the first <code>srun</code> command, the mapping of resources is not very good. GPUs  don't map to their closest chiplet, and the network adapters are also linked based  on the CPU NUMA domain. In the second case, the mapping is optimal, but except for the Cray compilers, the OpenMP threads can still move in the chiplet. In the last case, these  are also fixed with all compilers.</p>","boost":10},{"location":"l/lumi-CPEtools/#serial_check-omp_check-mpi_cehck-and-hybrid_check","title":"<code>serial_check</code>, <code>omp_check</code>, <code>mpi_cehck</code> and <code>hybrid_check</code>","text":"<pre><code>salloc -N1 -pstandard -t 10:00\nmodule load LUMI/24.03 partition/C lumi-CPEtools/1.2-cpeGNU-24.03\nsrun -n1 -c1 serial_check\nsrun -n1 -c4 omp_check\nsrun -n4 -c1 mpi_check\nsrun -n4 -c4 hybrid_check\n</code></pre> <p>One big difference between these tools and <code>hpcat</code> is that this tool shows on which  core a thread is running at the moment that this is measured, while <code>hpcat</code> actually  shows the affinity mask, i.e., all cores that can be used by that thread. <code>gpu_check</code> has the same limitation as <code>omp_check</code> etc.</p>","boost":10},{"location":"l/lumi-CPEtools/#acknowledgements","title":"Acknowledgements","text":"<p>The code for <code>hybrid_check</code> and its offsprings <code>serial_check</code>, <code>omp_check</code> and <code>mpi_check</code> is inspired by the <code>xthi</code> program used in the 4-day LUMI comprehensive courses. The <code>hybrid_check</code> program has been used succesfully on other clusters also, also non-Cray  or non-HPE clusters.</p> <p>The <code>gpu_check</code> program (lumi-CPEtools 1.1 and later) builds upon the <code>hello_jobstep</code> code from ORNL. The program is specifically for the HPE Cray EX Bard Peak nodes and will not work correctly without reworking on other AMD GPU systems or on NVIDIA GPU systems.</p> <p>The <code>lumi-CPEtools</code> code is developed by LUST in the  lumi-CPEtools repository on the LUMI supercomputer GitHub.</p> <p>The <code>hpcat</code> program (lumi-CPEtools 1.2 and later) is developed by HPE and provided unmodified.</p>","boost":10},{"location":"l/lumi-CPEtools/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider lumi-CPEtools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>lumi-CPEtools/1.0-cpeAMD-22.08 (EasyConfig: lumi-CPEtools-1.0-cpeAMD-22.08.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeAMD-22.12 (EasyConfig: lumi-CPEtools-1.0-cpeAMD-22.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeAMD-23.09 (EasyConfig: lumi-CPEtools-1.0-cpeAMD-23.09.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeAOCC-22.08 (EasyConfig: lumi-CPEtools-1.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeAOCC-22.12 (EasyConfig: lumi-CPEtools-1.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeAOCC-23.09 (EasyConfig: lumi-CPEtools-1.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeCray-22.08 (EasyConfig: lumi-CPEtools-1.0-cpeCray-22.08.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeCray-22.12 (EasyConfig: lumi-CPEtools-1.0-cpeCray-22.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeCray-23.03 (EasyConfig: lumi-CPEtools-1.0-cpeCray-23.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeCray-23.09 (EasyConfig: lumi-CPEtools-1.0-cpeCray-23.09.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeGNU-22.08 (EasyConfig: lumi-CPEtools-1.0-cpeGNU-22.08.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeGNU-22.12 (EasyConfig: lumi-CPEtools-1.0-cpeGNU-22.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.0-cpeGNU-23.09 (EasyConfig: lumi-CPEtools-1.0-cpeGNU-23.09.eb)</p> </li> <li> <p>lumi-CPEtools/1.0 (EasyConfig: lumi-CPEtools-1.0.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeAMD-22.12 (EasyConfig: lumi-CPEtools-1.1-cpeAMD-22.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeAMD-23.09 (EasyConfig: lumi-CPEtools-1.1-cpeAMD-23.09.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeAMD-23.12 (EasyConfig: lumi-CPEtools-1.1-cpeAMD-23.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeAMD-24.03 (EasyConfig: lumi-CPEtools-1.1-cpeAMD-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeAOCC-22.12 (EasyConfig: lumi-CPEtools-1.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeAOCC-23.09 (EasyConfig: lumi-CPEtools-1.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeAOCC-23.12 (EasyConfig: lumi-CPEtools-1.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeAOCC-24.03 (EasyConfig: lumi-CPEtools-1.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeCray-22.12 (EasyConfig: lumi-CPEtools-1.1-cpeCray-22.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeCray-23.03 (EasyConfig: lumi-CPEtools-1.1-cpeCray-23.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeCray-23.09 (EasyConfig: lumi-CPEtools-1.1-cpeCray-23.09.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeCray-23.12 (EasyConfig: lumi-CPEtools-1.1-cpeCray-23.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeCray-24.03 (EasyConfig: lumi-CPEtools-1.1-cpeCray-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeGNU-22.12 (EasyConfig: lumi-CPEtools-1.1-cpeGNU-22.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeGNU-23.09 (EasyConfig: lumi-CPEtools-1.1-cpeGNU-23.09.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeGNU-23.12 (EasyConfig: lumi-CPEtools-1.1-cpeGNU-23.12.eb)</p> </li> <li> <p>lumi-CPEtools/1.1-cpeGNU-24.03 (EasyConfig: lumi-CPEtools-1.1-cpeGNU-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.2-cpeAMD-24.03 (EasyConfig: lumi-CPEtools-1.2-cpeAMD-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.2-cpeAOCC-24.03 (EasyConfig: lumi-CPEtools-1.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.2-cpeCray-24.03 (EasyConfig: lumi-CPEtools-1.2-cpeCray-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.2-cpeGNU-24.03 (EasyConfig: lumi-CPEtools-1.2-cpeGNU-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.2a-cpeAMD-24.03 (EasyConfig: lumi-CPEtools-1.2a-cpeAMD-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.2a-cpeAOCC-24.03 (EasyConfig: lumi-CPEtools-1.2a-cpeAOCC-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.2a-cpeCray-24.03 (EasyConfig: lumi-CPEtools-1.2a-cpeCray-24.03.eb)</p> </li> <li> <p>lumi-CPEtools/1.2a-cpeGNU-24.03 (EasyConfig: lumi-CPEtools-1.2a-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/lumi-CPEtools/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider lumi-CPEtools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig lumi-CPEtools-1.1-cpeGNU-23.09-OpenMPI-4.1.6-noCrayWrappers.eb, will build lumi-CPEtools/1.1-cpeGNU-23.09-OpenMPI-4.1.6-noCrayWrappers</p> </li> <li> <p>EasyConfig lumi-CPEtools-1.1-cpeGNU-23.09-OpenMPI-4.1.6.eb, will build lumi-CPEtools/1.1-cpeGNU-23.09-OpenMPI-4.1.6</p> </li> </ul>","boost":10},{"location":"l/lumi-CPEtools/#technical-documentation-central-installation","title":"Technical documentation (central installation)","text":"<p>lumi-CPEtools is developed by the LUST team.</p> <ul> <li> <p>lumi-CPEtools on GitHub</p> </li> <li> <p>The hpcat utility from HPE on GitHub</p> </li> </ul>","boost":10},{"location":"l/lumi-CPEtools/#easybuild","title":"EasyBuild","text":"<p>The EasyConfig is our own development as this is also our own tool. We provide full versions for each Cray PE, and a restricted version using the S?YSTEM toolchain for the CrayEnv software stack.</p>","boost":10},{"location":"l/lumi-CPEtools/#version-10","title":"Version 1.0","text":"<ul> <li>The EasyConfig is our own design.</li> </ul>","boost":10},{"location":"l/lumi-CPEtools/#version-11","title":"Version 1.1","text":"<ul> <li> <p>The EasyConfig build upon the 1.0 one but with some important changes as there     is now a tool that should only be installed in partition/G. So there are now     makefile targets and additional variables for the Makefile.</p> </li> <li> <p>For the recompile of 23.09 with ROCm 6 we needed to make the same changes     as for 23.12, described below.</p> </li> <li> <p>The cpeAMD version required changes to compile in 23.12:</p> <ul> <li> <p>The <code>rocm</code> module now needs to be loaded explicitly to have acces to the     HIP runtime libraries and header files.</p> </li> <li> <p>Needed to unload the accellerator module as we do use OpenMP but do not want     to use OpenMP offload.</p> </li> <li> <p>There is a problem when linking with the AMD compilers of code that uses ROCm     libraries when <code>LIBRARY_PATH</code> is set.</p> </li> </ul> </li> <li> <p>It looks like the compiler wrappers have changed in 24.03 as unloading the accelerator     target module in the cpeAMD version was no longer needed.</p> </li> </ul>","boost":10},{"location":"l/lumi-CPEtools/#version-12","title":"Version 1.2","text":"<ul> <li> <p>Transformed the EasyConfig from version 1.1 to a Bundle to be able to add <code>hpcat</code>      using its own installation procedure.</p> </li> <li> <p>Building <code>hpcat</code>: </p> <ul> <li> <p>LUMI lacks the <code>hwloc-devel</code> package so we simply copied the header files from another system     and download them from LUMI-O.</p> </li> <li> <p>The Makefile was modified to integrate better with EasyBuild and to work around a problem with     finding the <code>hwloc</code> library on LUMI. </p> <p>Rather than writing a new Makefile or a patch, we actually used a number of <code>sed</code> commands to edit the Makefile:</p> <ul> <li><code>mpicc</code> was replaced with <code>$(CC)</code> so that the wrappers are used instead.</li> <li><code>-O3</code> was replaced with <code>$(CFLAGS)</code> to pick up the options from EasyBuild</li> <li>'-fopenmp' is managed by the Makefile though and not by EasyBuild. On one hand because the     ultimate goal is to integrate with another packages that sometimes needs and sometimes does not     need the OpenMP flags, on the other hand to use <code>$(CFLAGS)</code> also for <code>hipcc</code>.</li> <li><code>-lhwloc</code> is replaced with <code>-Wl,/usr/lib64/libhwloc.so.15</code>. We had to do this through <code>-Wl</code> as     the <code>hipcc</code> driver thought this was a source file.</li> <li>As '-L.' is not needed, it is omitted.</li> </ul> </li> <li> <p>As there is no <code>make install</code>, we simply use the <code>MakeCp</code> EasyBlock, doing the edits to the Makefile in     <code>prebuiltopts</code>.</p> <p>Not that we copy the <code>libhip.so</code> file to the <code>lib</code> directory as that is the conventional  place to store shared objects, but it is not found there by <code>hpcat</code>, so we also create a symbolic link to it in the <code>bin</code> subidrecitory.</p> </li> <li> <p>Note that the accelerator target module should not be loaded when using the wrappers as the OpenMP offload     options cause a problem in one of the header files used.</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-CPEtools/#version-12a","title":"Version 1.2a","text":"<ul> <li> <p>The version of lumi-CPEtools is the same, but there is a major upgrade to <code>hpcat</code> which now has several     changes (bumped from 0.4 to 0.8):</p> <ul> <li> <p>There is now a <code>configure</code> script that actually calls CMake. So we switched to a <code>ConfigureMake</code>     build process.</p> </li> <li> <p>The package now uses <code>hwloc</code> and <code>libfort</code> as submodules, but they do not appear      in the standard GitHub download. Hence we derived the versions from the commits, download those     two packages separately and install in the correct directory before configuring      and building <code>hpcat</code></p> </li> <li> <p>A symbolic link in the <code>bin</code> directory to <code>libhpcathip.so</code> is also no longer needed.</p> </li> <li> <p>No more edits are needed.</p> </li> <li> <p>The LICENSE file now needs to be copied via separate commands as we are no longer using <code>MakeCp</code>.</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-CPEtools/#technical-documentation-user-easybuild-installation","title":"Technical documentation (user EasyBuild installation)","text":"","boost":10},{"location":"l/lumi-CPEtools/#easybuild_1","title":"EasyBuild","text":"","boost":10},{"location":"l/lumi-CPEtools/#version-11-for-open-mpi","title":"Version 1.1 for Open MPI","text":"<ul> <li> <p>The EasyConfigs are similar to those for the Cray MPICH versions, but</p> <ul> <li> <p>Compilers need to be set manually in <code>buildopts</code> to use the Open MPI     compiler wrappers.</p> </li> <li> <p>Before building some modules need to be unloaded again (which ones     depends on the specific <code>OpenMPI</code> module).</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-CPEtools/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig lumi-CPEtools-1.0-cpeAOCC-21.12.eb, with module lumi-CPEtools/1.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig lumi-CPEtools-1.0-cpeAOCC-22.06.eb, with module lumi-CPEtools/1.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig lumi-CPEtools-1.0-cpeCray-21.08.eb, with module lumi-CPEtools/1.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig lumi-CPEtools-1.0-cpeCray-21.12.eb, with module lumi-CPEtools/1.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig lumi-CPEtools-1.0-cpeCray-22.06.eb, with module lumi-CPEtools/1.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig lumi-CPEtools-1.0-cpeGNU-21.08.eb, with module lumi-CPEtools/1.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig lumi-CPEtools-1.0-cpeGNU-21.12.eb, with module lumi-CPEtools/1.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig lumi-CPEtools-1.0-cpeGNU-22.06.eb, with module lumi-CPEtools/1.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-CrayPath/","title":"lumi-CrayPath","text":"<p>[package list]</p>","boost":10},{"location":"l/lumi-CrayPath/#lumi-craypath","title":"lumi-CrayPath","text":"","boost":10},{"location":"l/lumi-CrayPath/#license-information","title":"License information","text":"<p>The lumi-CrayPath module is completely implemented through the included EasyConfig file and hence covered by the  GNU General Public License version 3.0 under which the LUMI-EasyBuild-contrib repository is licensed. See the LICENSE file in that repository.</p>","boost":10},{"location":"l/lumi-CrayPath/#user-documentation","title":"User documentation","text":"<p>The lumi-CrayPath module adds <code>CRAY_LD_LIBRARY_PATH</code> to the front of <code>LD_LIBRARY_PATH</code> when the module is loaded and removes the added directories again when unloading the module (providing that the user did not manually change or clear the  environment variable <code>_CRAYPATH_STORED_CRAY_LD_LIBRARY_PATH</code> which is essential to the proper working of this module). </p> <p>After loading modules that have changed <code>CRAY_LD_LIBRARY_PATH</code> is is sufficient to load the <code>lumi-CrayPath</code> module again to correct <code>LD_LIBRARY_PATH</code> as Lmod  will automatically first unload <code>lumi-CrayPath</code> and then load it again, effectively first resetting the operations done on <code>LD_LIBRARY_PATH</code> the previous time the module was loaded and then applying the changes with the current <code>CRAY_LD_LIBRARY_PATH</code>, ensuring that all those directories are at the front of the <code>LD_LIBRARY_PATH</code> again.</p>","boost":10},{"location":"l/lumi-CrayPath/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider lumi-CrayPath/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>lumi-CrayPath/0.1 (EasyConfig: lumi-CrayPath-0.1.eb)</li> </ul>","boost":10},{"location":"l/lumi-CrayPath/#technical-documentation","title":"Technical documentation","text":"<p>The lumi-CrayPath EasyConfig doesn't install any software but it does install a hand-written module that adds <code>CRAY_LD_LIBRARY_PATH</code> to the front of <code>LD_LIBRARY_PATH</code> and removes the added directories again when unloading the module (providing that the user did not manually change or clear the  environment variable <code>_CRAYPATH_STORED_CRAY_LD_LIBRARY_PATH</code> which is essential to the proper working of this module). </p> <p>After loading modules that have changed <code>CRAY_LD_LIBRARY_PATH</code> is is sufficient to load the <code>lumi-CrayPath</code> module again to correct <code>LD_LIBRARY_PATH</code> as Lmod  will automatically first unload <code>lumi-CrayPath</code> and then load it again, effectively first resetting the operations done on <code>LD_LIBRARY_PATH</code> the previous time the module was loaded and then applying the changes with the current <code>CRAY_LD_LIBRARY_PATH</code>, ensuring that all those directories are at the front of the <code>LD_LIBRARY_PATH</code> again.</p> <p>This module can easily be installed in <code>partition/common</code> of each software stack which would trigger an automatic reload whenever a change to a different software stack is made, or in each regular partition. Note however that that automatic reload my not have the desired effect as Lmod may do this before reloading other modules that change <code>CRAY_LD_LIBRARY_PATH</code>, so it is always safer to do it by  hand.</p>","boost":10},{"location":"l/lumi-CrayPath/#easyconfigs","title":"EasyConfigs","text":"","boost":10},{"location":"l/lumi-CrayPath/#version-01","title":"Version 0.1","text":"<p>This is the first still somewhat experimental implementation. It does assume that the HPE Cray PE modules never add the same path to both <code>CRAY_LD_LIBRARY_PATH</code> and <code>LD_LIBRARY_PATH</code> which does seem to be the case in all versions of the HPE Cray PE that were inspected during the development of this module.</p>","boost":10},{"location":"l/lumi-allocations/","title":"lumi-allocations","text":"<p>[package list]</p>","boost":10},{"location":"l/lumi-allocations/#lumi-allocations","title":"lumi-allocations","text":"","boost":10},{"location":"l/lumi-allocations/#license-information","title":"License information","text":"<p>The lumi-allocation package is licensed under the European Union Public License 1.2  a copy of which can be found in the LICENSE file in the lumi-allocations GitHub repository.</p> <p>After installation and loading of the module the license file LICENSE can also be found in the directory $EBROOTLUMIMINALLOCATIONS.</p>","boost":10},{"location":"l/lumi-allocations/#user-documentation","title":"User documentation","text":"<p>This is a tool to check the use of your allocations on LUMI. It is currently far from bullet-proof, so if you make an error in the command line arguments you may see nasty error messages from Python. Use at your own risk, we know it is not made bullet-proof, so don't bombard us with tickets about Python error messages. The tool is currently provided as-is, without any warranty.</p> <p>The basic command to check all your allocations</p> <pre><code>$ lumi-allocations\n</code></pre> <p>should work, but other options shown by</p> <pre><code>$ lumi-allocations -h\n</code></pre> <p>may throw nasty Python error messages at you if the option is not meant for you or if you make a typo in, e.g., the project number or specify a project that is not yours.</p> <p>The data shown is not accurate up to the second as the information is gathered  periodically on the system and stored in a cache that lumi-allocations then  uses, as it is not possible to access all necessary data with regular user permissions on the system. There is a chance that the automatic updating routine fails and that the data shown is very inaccurate.</p> <p>When the tool becomes more robust, it will become part of the <code>lumi-tools</code> module in  the pre-installed software stack.</p> <p>To install, use</p> <pre><code>$ module load LUMI/22.08 partition/common\n$ module load EasyBuild-user\n$ eb lumi-allocations-20230103.eb\n</code></pre> <p>after which the module <code>lumi-allocations/20230103</code> will be available with the usual  caveat about Lmod caches that may not update automatically immediately.</p>","boost":10},{"location":"l/lumi-allocations/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider lumi-allocations/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig lumi-allocations-20230103.eb, will build lumi-allocations/20230103</li> </ul>","boost":10},{"location":"l/lumi-allocations/#technical-documentation","title":"Technical documentation","text":"<p>The lumi-allocations command is an in-house development of LUST.</p> <ul> <li>lumi-allocations GitHub repository</li> </ul>","boost":10},{"location":"l/lumi-allocations/#easybuild","title":"Easy/build","text":"","boost":10},{"location":"l/lumi-allocations/#version-20230103","title":"Version 20230103","text":"<ul> <li>This is simply a first try based on a beta commit and also used     to start the development of the lumi-tools module that will     ultimately replace lumi-allocations.</li> </ul>","boost":10},{"location":"l/lumi-container-wrapper/","title":"lumi-container-wrapper","text":"<p>[package list]</p>","boost":10},{"location":"l/lumi-container-wrapper/#lumi-container-wrapper","title":"lumi-container-wrapper","text":"","boost":10},{"location":"l/lumi-container-wrapper/#license-information","title":"License information","text":"<p>The lumi-container-wrapper module implements the Tykky package from CSC for LUMI. Tykky is licensed under the MIT License, a copy of which can be found in the LICENCE.txt file in the source repository.</p> <p>From LUMI/23.12 on, a copy of this file can also be found in <code>$EBROOTLUMIMINCONTAINERMINWRAPPER/share/licenses/lumi-container-wrapper</code> after loading  the module.</p> <p>See the user documentation in the next section for Anaconda license restrictions.</p>","boost":10},{"location":"l/lumi-container-wrapper/#user-documentation","title":"User documentation","text":"<p>The lumi-container-wrapper module provides a port of the CSC Tykky tool.</p> <p>Documentation:</p> <ul> <li> <p>The documentation in the LUMI documentation     is the first source of documentation as it is specifically for LUMI.</p> </li> <li> <p>The CSC Tykky documentation page     may also containe useful information, but not everything has been tested on LUMI.</p> </li> </ul> <p>Anaconda License Restrictions</p> <p>The lumi-container-wrapper commands themselves in version 0.4.2 and later use  <code>miniconda-forge</code> whitch is licensed under the BSD 3-Clause license.</p> <p>If however you use lumi-container-wrapper to install software from the regular  Anaconda repositories (not <code>conda-forge</code> which is OK), the Anaconda license applies, which consists of one or two documents, depending on the type of user your are. The \"Terms of Service\" apply to all users. Don't however assume that since 1.a.(2) makes an exception  that as an academic user you can use Anaconda on LUMI. Then the  \"Academic Policy\" applies also, and on LUMI, 4.1 does not apply as LUMI is not in an academic domain, so you must either do all downloads from a server in the academic domain (and hence cannot  use <code>lumi-container-wrapper</code>) or you need to follow 4.2 and your insitution needs to take an institution-wide license for Anaconda.</p> <p>Other specific packages, even packages on <code>conda-forge</code>, may also have a more restrictive  license than the <code>miniconda-forge</code> tools.</p> <p>Note that LUMI users themselves are responsible for verifying that they are  correctly licensed for all software they use on LUMI! Please don't install packages blindly assuming you have the right to use them!</p>","boost":10},{"location":"l/lumi-container-wrapper/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider lumi-container-wrapper/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>lumi-container-wrapper/0.2.6-cray-python-3.9.12.1 (EasyConfig: lumi-container-wrapper-0.2.6-cray-python-3.9.12.1.eb)</p> </li> <li> <p>lumi-container-wrapper/0.2.6-cray-python-default (EasyConfig: lumi-container-wrapper-0.2.6-cray-python-default.eb)</p> </li> <li> <p>lumi-container-wrapper/0.3.1-cray-python-3.10.10 (EasyConfig: lumi-container-wrapper-0.3.1-cray-python-3.10.10.eb)</p> </li> <li> <p>lumi-container-wrapper/0.3.1-cray-python-3.9.12.1 (EasyConfig: lumi-container-wrapper-0.3.1-cray-python-3.9.12.1.eb)</p> </li> <li> <p>lumi-container-wrapper/0.3.1-cray-python-3.9.13.1 (EasyConfig: lumi-container-wrapper-0.3.1-cray-python-3.9.13.1.eb)</p> </li> <li> <p>lumi-container-wrapper/0.3.1-cray-python-default (EasyConfig: lumi-container-wrapper-0.3.1-cray-python-default.eb)</p> </li> <li> <p>lumi-container-wrapper/0.3.3-cray-python-3.11.5 (EasyConfig: lumi-container-wrapper-0.3.3-cray-python-3.11.5.eb)</p> </li> <li> <p>lumi-container-wrapper/0.3.3-cray-python-3.11.7 (EasyConfig: lumi-container-wrapper-0.3.3-cray-python-3.11.7.eb)</p> </li> <li> <p>lumi-container-wrapper/0.3.3-cray-python-default (EasyConfig: lumi-container-wrapper-0.3.3-cray-python-default.eb)</p> </li> <li> <p>lumi-container-wrapper/0.4.2-cray-python-3.11.7 (EasyConfig: lumi-container-wrapper-0.4.2-cray-python-3.11.7.eb)</p> </li> <li> <p>lumi-container-wrapper/0.4.2-cray-python-default (EasyConfig: lumi-container-wrapper-0.4.2-cray-python-default.eb)</p> </li> </ul>","boost":10},{"location":"l/lumi-container-wrapper/#technical-documentation","title":"Technical documentation","text":"<p>The lumi-container-wrappar, aka tykky, tool is developed at CSC Finland by Henrik Nortamo. </p> <ul> <li> <p>tykky in the GitHub hpc-container-wrapper repository</p> <ul> <li>GitHub releases via tags</li> </ul> </li> <li> <p>tykky in the CSC documentation</p> </li> </ul>","boost":10},{"location":"l/lumi-container-wrapper/#easybuild","title":"EasyBuild","text":"<p>As this is an in-house developed tool, there is no support in the standard EasyBuild repositories used on LUMI.</p> <p>To ensure that users would be using the default cray-python version for every LUMI stack, it was decided to install the tool separately in CrayEnv and the common partition of every LUMI stack. For the versions in the LUMI stacks the version of cray-python is hard-coded in the EasyConfig and module file so that cray-python is force-reloaded in the right version. The version for CrayEnv simply loads the default version or works with whatever version of cray-python that is already loaded when the module is loaded.</p>","boost":10},{"location":"l/lumi-container-wrapper/#version-031","title":"Version 0.3.1","text":"<ul> <li> <p>New version for LUMI after the March 2023 update, now using a base image based     on SUSE 15 SP4.</p> </li> <li> <p>The EasyConfigs are a trivial port of the ones developed before.</p> </li> <li> <p>Note: The 0.3.2 distribution was meant for the Finnish national systems and lacks     the proper configuration file for LUMI so was skipped.</p> </li> </ul>","boost":10},{"location":"l/lumi-container-wrapper/#version-033","title":"Version 0.3.3","text":"<ul> <li>Version for SUSE 15 SP5. Trivial update otherwise with some refinements.</li> </ul>","boost":10},{"location":"l/lumi-container-wrapper/#version-042","title":"Version 0.4.2","text":"<ul> <li>Trivial update of the EasyConfig for 0.3.3.</li> </ul>","boost":10},{"location":"l/lumi-container-wrapper/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig lumi-container-wrapper-0.2.2-cray-python-3.8.5.1.eb, with module lumi-container-wrapper/0.2.2-cray-python-3.8.5.1</p> </li> <li> <p>EasyConfig lumi-container-wrapper-0.2.2-cray-python-3.9.12.1.eb, with module lumi-container-wrapper/0.2.2-cray-python-3.9.12.1</p> </li> <li> <p>EasyConfig lumi-container-wrapper-0.2.2-cray-python-3.9.4.2.eb, with module lumi-container-wrapper/0.2.2-cray-python-3.9.4.2</p> </li> <li> <p>EasyConfig lumi-container-wrapper-0.2.2-cray-python-default.eb, with module lumi-container-wrapper/0.2.2-cray-python-default</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-tools/","title":"lumi-tools","text":"<p>[package list]</p>","boost":10},{"location":"l/lumi-tools/#lumi-tools","title":"lumi-tools","text":"","boost":10},{"location":"l/lumi-tools/#license-information","title":"License information","text":"<ul> <li>The lumi-allocations` tool is licensed under the     European Union Public License 1.2 .      The license text is      available in the LICENSE file in the lumi-allocations GitHub</li> <li>The <code>lumi-quota</code> and <code>lumi-workspaces</code> commands are provided through the LUMI-SoftwareStack     repository and hence are covered by the      GNU General Public License version 3.0      a copy of which can be found in the     LICENSE file in the LUMI-SoftwareStack GitHub repository.</li> </ul> <p>When the <code>lumi-tools</code> module is loaded, a copy of the license for <code>lumi-allocations</code> can also be found in the file  <code>$EBROOTLUMIMINTOOLS/share/licenses/lumi-allocations/LICENSE</code>.</p>","boost":10},{"location":"l/lumi-tools/#user-documentation","title":"User documentation","text":"<p>The <code>lumi-tools</code> module (which is preloaded when you log in) provides a number  of commands for monitoring of your account and projects on LUMI:</p> <ul> <li> <p><code>lumi-workspaces</code> is the all-in command and the only one that a user really     needs.</p> </li> <li> <p><code>lumi-quota</code> and <code>lumi-allocations</code> restrict the output to just the file system     quota and billing unit information respectively.</p> </li> <li> <p><code>lumi-check-quota</code> implements the same tests that are performed when you log in     to print warnings about depletion of quota or billing units.</p> </li> <li> <p>The <code>lumi-ldap-userinfo</code> and <code>lumi-ldap-projectinfo</code> commands are mostly meant      for support people and advanced users with a technical understanding of Linux     user account and group management.</p> </li> </ul>","boost":10},{"location":"l/lumi-tools/#lumi-workspaces","title":"lumi-workspaces","text":"<p>The <code>lumi-workspaces</code> command combines the <code>lumi-quota</code> and <code>lumi-allocations</code> commands shown below, but is currently only capable to show the output for all your workspaces/projects (user workspace on <code>/user</code>and the various project-related workspaces on <code>/project</code>, <code>/scratch</code> and <code>/flash</code>).</p> <p>Note that currently no output is displayed about storage use on the object file  system as that information is not yet available in a format that a tool can  always access without temporary access keys.</p> <p>The check of the allocations in <code>lumi-workspaces</code> and <code>lumi-allocations</code>  is currently done based on pre-stored data. That data is refreshed periodically, but the data can be out-of-date, especially if the scripts that build up the cache fail. Currently the tool is not able to show when the data was collected, so the results may be wrong without warning.</p>","boost":10},{"location":"l/lumi-tools/#lumi-quota","title":"lumi-quota","text":"<p>The <code>lumi-quota</code> command can be used to check your file quota on the  system.</p> <p>The command comes in three different forms:   * <code>lumi-quota</code>         : Shows quota for all your workspaces (user and project)   * <code>lumi-quota -v</code>      : Detailed quota information   * <code>lumi-quota -p prj</code>  : Show quota of project prj</p> <p>This tool only produces output about the Lustre file systems, so directories in <code>/user</code>, <code>/project</code> (or the old name <code>/projappl</code>), <code>/scratch</code> and <code>/flash</code>.</p>","boost":10},{"location":"l/lumi-tools/#lumi-allocations","title":"lumi-allocations","text":"<p>The <code>lumi-allocations</code> command can be used to check the status of your allocations on LUMI.</p> <ul> <li>To check all your remaining allocations, simply run     <code>lumi-allocations</code>. </li> <li>Use <code>lumi-allocations --help</code>     for more informations. This command will be extended with more features in the     future that will be shown through this flag.</li> </ul>","boost":10},{"location":"l/lumi-tools/#lumi-check-quota-version-2302-and-higher","title":"lumi-check-quota (version 23.02 and higher)","text":"<p>The <code>lumi-check-quota</code> command is equivalent to the script run at login that prints a warning when you are running out of quota or out of billing units.</p> <p>Note that this is fully based on cached data gathered from time to time in the background. The command will in no way show 100% correct instantaneous numbers, so it is not useable during a quick clean-up to check if you are already again below your quota.</p>","boost":10},{"location":"l/lumi-tools/#lumi-ldap-projectinfo-version-2304-and-higher","title":"lumi-ldap-projectinfo (version 23.04 and higher)","text":"<p><code>lumi-ldap-projectinfo</code> shows information about projects as it is kept in the  LDAP system. The amount of information that is shown depends on your privileges on the system as not all information is available to regular users and as  regular users can only see data from their own projects. The information includes information about the allocation and quota. That is not live information but computed periodically. The tool also shows the members of the project.</p> <p>This tool shows more information than <code>lumi-allocations</code>, <code>lumi-quota</code> or <code>lumi-workspaces</code>. However, <code>lumi-quota</code> and <code>lumi-workspaces</code> show quota information almost in real time. It is complementary to the <code>lumi-ldap-userinfo</code> tool that shows user information from the LDAP.</p>","boost":10},{"location":"l/lumi-tools/#lumi-ldap-userinfo-version-2304-and-higher","title":"lumi-ldap-userinfo (version 23.04 and higher)","text":"<p><code>lumi-allocations</code> shows information about projects as it is kept in the  LDAP system. The amount of information that is shown depends on your privileges on the system as regular users can only see data from themselves.  The information includes information about the quota. That is not live information but computed periodically. The tool also shows a list of projects  found on the system (in the group database) for the given user(s).</p> <p>This tool shows more information than <code>lumi-quota</code> or <code>lumi-workspaces</code>. However, <code>lumi-quota</code> and <code>lumi-workspaces</code> show quota information almost in real time. It is complementary to the <code>lumi-ldap-projectinfo</code> tool that shows project information from the LDAP.</p>","boost":10},{"location":"l/lumi-tools/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider lumi-tools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>lumi-tools/23.03 (EasyConfig: lumi-tools-23.03.eb)</p> </li> <li> <p>lumi-tools/23.04 (EasyConfig: lumi-tools-23.04.eb)</p> </li> <li> <p>lumi-tools/23.11 (EasyConfig: lumi-tools-23.11.eb)</p> </li> <li> <p>lumi-tools/24.05 (EasyConfig: lumi-tools-24.05.eb)</p> </li> </ul>","boost":10},{"location":"l/lumi-tools/#technical-documentation","title":"Technical documentation","text":"<p>The lumi-tools module provides several in-house developed scripts, depending on the version:</p> <ul> <li><code>lumi-quota</code> to check your quota on the Lustre file systems</li> <li><code>lumi-allocations</code> to check your allocations</li> <li><code>lumi-workspaces</code> combines the output of both to show an overview for     all projects of the user calling the script.</li> <li><code>lumni-check-quota</code> is an equivalent of the checks run at user login to     print warnings when a user is running out of quota or billing units.</li> </ul> <p>Sources:</p> <ul> <li> <p>lumi-allocations GitHub repository</p> </li> <li> <p>lumi-tools GitHub repository</p> </li> </ul>","boost":10},{"location":"l/lumi-tools/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"l/lumi-tools/#version-2301","title":"Version 23.01","text":"<ul> <li> <p>In-house developed EasyConfig, type <code>Bundle</code></p> <ul> <li> <p><code>lumi-quota</code> and <code>lumi-workspaces</code> are currently contained in the EasyConfig itself and      copied to a file in the <code>postinstallcommands</code> of the EasyConfig.</p> </li> <li> <p><code>lumi-allocations</code> is installed from its GitHub repository using     the <code>Tarball</code> generic EasyBlock, as a component of the Bundle.</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-tools/#version-2302","title":"Version 23.02","text":"<ul> <li> <p><code>lumi-allocations</code> now fully supports its <code>-p</code> argument and the hidden LUST options.</p> </li> <li> <p>Added a version of the <code>lumi-check-quota</code> script.</p> </li> </ul>","boost":10},{"location":"l/lumi-tools/#version-2303","title":"Version 23.03","text":"<ul> <li> <p>Improved version of <code>lumi-quota</code> and hence <code>lumi-workspaces</code> now also showing for the     home directory and each project dir on which file system the directories are located.</p> </li> <li> <p>Manual pages added for all the tools.</p> </li> <li> <p>Completely revised EasyConfig: The shell scripts have been removed from the EasyConfig and     moved to their own repository which makes it a lot easier to test.</p> </li> </ul>","boost":10},{"location":"l/lumi-tools/#version-2304","title":"Version 23.04","text":"<ul> <li>EasyConfig based on the 23.03 one. This version adds the <code>lumi-ldap-projectinfo</code>      and <code>lumi-ldap-userinfo</code> tools.</li> </ul>","boost":10},{"location":"l/lumi-tools/#version-2311","title":"Version 23.11","text":"<ul> <li>No new commands to check so a trivial port of 23.04.</li> </ul>","boost":10},{"location":"l/lumi-tools/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig lumi-tools-23.01.eb, with module lumi-tools/23.01</p> </li> <li> <p>EasyConfig lumi-tools-23.02.eb, with module lumi-tools/23.02</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-training-tools/","title":"lumi-training-tools","text":"<p>[package list]</p>","boost":10},{"location":"l/lumi-training-tools/#lumi-training-tools","title":"lumi-training-tools","text":"","boost":10},{"location":"l/lumi-training-tools/#license-information","title":"License information","text":"<p>The <code>mkfile</code> tool is licensed under the 2-clause BSD license.</p>","boost":10},{"location":"l/lumi-training-tools/#user-documentation","title":"User documentation","text":"<p>The lumi-training-tools is a module-under-development that provides tools used during the trainings, mostly for exercises, but that don't make sense to include in modules that are useful outside trainings also such as lumi-CPEtools.</p> <p>Content of the newest versions:</p> <ul> <li><code>mkfile</code>: A simple tool to generate a file of given size.</li> </ul>","boost":10},{"location":"l/lumi-training-tools/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider lumi-training-tools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig lumi-training-tools-20240502.eb, will build lumi-training-tools/20240502</p> <p>Tools used in the training notes and exercises of the 2-day training given by LUST in Amsterdam on May 2-3, 2024. Only includes <code>mkfile</code>, compiled with the system compiler and usable without CPE.</p> </li> </ul>","boost":10},{"location":"l/lumi-training-tools/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>mkfile tool:   </p> <ul> <li> <p>It was originally a tool included with Solaris and can still be found in some     BSD distributions.</p> </li> <li> <p>A simple version with one option less is available on the     GitHub repository vogelchr/mkfile.     Its command line options are different though so we avoid using it for now.</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-training-tools/#easyconfigs","title":"EasyConfigs","text":"","boost":10},{"location":"l/lumi-training-tools/#version-20240502-amsterdam-2-day-lust-training-in-may-2024","title":"Version 20240502 - Amsterdam 2-day LUST training in May 2024","text":"<ul> <li> <p>Only includes the mkfile tool, but already uses a bundle for future     extensions.</p> </li> <li> <p>The Makefile that comes with <code>mkfile</code> is for the BSD make so we compiled     with explicit commands using <code>CmdCp</code> and also modified the manual page a     bit to fit better with our setup. </p> </li> </ul>","boost":10},{"location":"l/lumi-vnc/","title":"lumi-vnc","text":"<p>[package list]</p>","boost":10},{"location":"l/lumi-vnc/#lumi-vnc","title":"lumi-vnc","text":"","boost":10},{"location":"l/lumi-vnc/#license-information","title":"License information","text":"<p>The lumi-vnc module provides scripts developed by CSC for LUMI. </p> <p>Thse scripts are licensed under the MIT License, see the LICENSE file in the utily-tools repository for LUMI.</p>","boost":10},{"location":"l/lumi-vnc/#user-documentation","title":"User documentation","text":"<p>VNC stands for Virtual Network Computing. It is a server running on the supercomputer and emulating an X11 server, rendering the image on the supercomputer and making it available to a client either via a VNC client that needs to be installed on your local machine, or via a web browser (using a web server included in the module and working with the VNC server).</p> <p>The module is available in all environments on LUMI, including the default login environment.</p> <p>To know how to start the VNC server, check the help information included in the most recent version of the module with <code>module help</code> command. The versions can be found in the list further down this page. E.g., assuming the most recent version is 20230110:</p> <pre><code>module help lumi-vnc/20230110\n</code></pre> <p>For most users, running <code>start-vnc</code> is sufficient and it will print information about how to connect in the terminal. The VNC server should be cleaned up automatically if you leave the shell from which it was started.</p>","boost":10},{"location":"l/lumi-vnc/#known-issues","title":"Known issues","text":"","boost":10},{"location":"l/lumi-vnc/#missing-fonts","title":"Missing fonts","text":"<p>When testing with x11perf (included in the X11 modules on LUMI), certain tests fail due to missing fonts:</p> <p>font '8x13' font '9x15' font '-misc-fixed-medium-r-normal--14-130-75-75-c-140-jisx0208.1983-' font '-jis-fixed-medium-r-normal--24-230-75-75-c-240-jisx0208.1983-' font '-adobe-times-medium-r-normal--10-100-75-75-p-54-iso8859-1' font '-adobe-times-medium-r-normal--24-240-75-75-p-124-iso8859-1' font '-adobe-times-medium-r-normal--10-100-75-75-p-54-iso8859-1'</p>","boost":10},{"location":"l/lumi-vnc/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider lumi-vnc/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>lumi-vnc/20230110 (EasyConfig: lumi-vnc-20230110.eb)</li> </ul>","boost":10},{"location":"l/lumi-vnc/#technical-documentation","title":"Technical documentation","text":"<p>Installs a singularity container with the TurboVNC server and some scripts and shell functions to start and stop the server.</p> <ul> <li>See the repository Lumi-supercomputer/utility-tools     for the scripts and container definition.</li> </ul>","boost":10},{"location":"l/lumi-vnc/#instructions-for-system-staff","title":"Instructions for system staff","text":"<ul> <li> <p>It is not yet possible to build the container on LUMI. Hence it has to be build     offline. The EasyConfig file then expects to find the container in a tar file     in the root directory of that archive, with the tar file named     <code>turbovnc-container-&lt;version&gt;.tar</code> with <code>&lt;version&gt;</code> the version used for the module.     The container file itself is called <code>vnc.sif</code>. The tar file is used to be able     to store different versions of the container in the sources directory to be able     to reproduce older versions in case of problems.</p> <p>That tar-file should then be put in a location where EasyBuild can find it, e.g., in <code>/appl/lumi/sources/easybuild/l/lumi-vnc</code> on uan04.</p> </li> <li> <p>The EasyConfig file can then be used to install the TurboVNC container. Note though     that downloading the sources if they are not yet in a location where EasyBuild     can find them, e.g., in the directory mentioned above which is the master copy     for the software installation.</p> </li> </ul>","boost":10},{"location":"l/lumi-vnc/#known-issues-other-than-those-mentioned-in-usermd","title":"Known issues (other than those mentioned in USER.md)","text":"","boost":10},{"location":"l/lumi-vnc/#container-cannot-follow-symbolic-links-to-a-different-file-system","title":"Container cannot follow symbolic links to a different file system","text":"<p>It is not possible to test a user install of the VNC container if the software directory or any other directory is soft-linked to a different file system (e.g., to have a personal repository in your home directory but have the installation which requires a higher quota on a different file system). The startup file for VNC will not be found and as a result the start-vnc command will fail to start a window manager.</p>","boost":10},{"location":"l/lumi-vnc/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"l/lumi-vnc/#version-20220125","title":"Version 20220125","text":"<ul> <li>This version was developed for LUMI as it was at the beginning of 2022 and continued     to work after the February upgrade (which did upgrade the OS).</li> </ul>","boost":10},{"location":"l/lumi-vnc/#version-20220715","title":"Version 20220715","text":"<ul> <li> <p>This version was not properly tested when installed but was still installed as it     was kind of an emergency situation after the June-July 2022 upgrade.</p> <p>It included an OS update to SLES15SP3 and matching COS, but <code>lsof</code> which was used in the script that starts the container was no longer available.</p> <p>Due to the holiday schedule this version had to be installed without proper testing on the compute nodes and before the patch was merged in the main branch.</p> </li> </ul>","boost":10},{"location":"l/lumi-vnc/#version-20221010","title":"Version 20221010","text":"<ul> <li>This version makes some corrections in the <code>_start-vnc</code> script to work around a      race condition that could occur and then use port 0 instead of the right port      for the web access to the VNC server.</li> </ul>","boost":10},{"location":"l/lumi-vnc/#version-20230110","title":"Version 20230110","text":"<ul> <li>This version fixes a problem with non-routable hostnames that were used in the     instructions for ssh port forwarding.</li> </ul>","boost":10},{"location":"l/lumi-vnc/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig lumi-vnc-20220125.eb, with module lumi-vnc/20220125</p> </li> <li> <p>EasyConfig lumi-vnc-20220715.eb, with module lumi-vnc/20220715</p> </li> <li> <p>EasyConfig lumi-vnc-20221010.eb, with module lumi-vnc/20221010</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumi-workspaces/","title":"lumi-workspaces","text":"<p>[package list]</p>","boost":10},{"location":"l/lumi-workspaces/#lumi-workspaces","title":"lumi-workspaces","text":"","boost":10},{"location":"l/lumi-workspaces/#user-documentation","title":"User documentation","text":"<p>This module is now removed. The <code>lumi-workspaces</code> command is now provided by the lumi-tools module which is loaded by default.</p>","boost":10},{"location":"l/lumi-workspaces/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software<ul> <li>EasyConfig lumi-workspaces-0.1.eb, with module lumi-workspaces/0.1</li> </ul> </li> </ul>","boost":10},{"location":"l/lumio/","title":"lumio","text":"<p>[package list]</p>","boost":10},{"location":"l/lumio/#lumio","title":"lumio","text":"","boost":10},{"location":"l/lumio/#license-information","title":"License information","text":"<p>The <code>lumio-conf</code> tool is licensed under an MIT license a copy of which can be found in the LICENSE file in the LUMI-O-tools GitHub repository.</p> <p>After loading the module, the license file can also be found in the <code>$EBROOTLUMIO/share/licenses/lumio</code> directory.</p>","boost":10},{"location":"l/lumio/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider lumio/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>lumio/1.0.0 (EasyConfig: lumio-1.0.0.eb)</p> <p>This version creates the rclone endpoints lumi-o and lumi-pub which differ from those in the config files generated by the web-based credential management system or the tools in Open OnDemand.</p> </li> <li> <p>lumio/2.0.0 (EasyConfig: lumio-2.0.0.eb)</p> <p>This version is the first version that creates the same endpoints for rclone  as the tools in Open OnDemand or the web-based credential management service, i.e., lumi-46YXXXXXX-private and lumi-46YXXXXXX-public.</p> </li> </ul>","boost":10},{"location":"l/lumio/#technical-documentation","title":"Technical documentation","text":"<p>This module is part of the modules that provide support for the LUMI-O object storage system. This module contains the configuration script where currently we expect that changes may be needed more often, while the lumio-ext-tools module provides some basic commands that don't need frequent updates.</p> <ul> <li>GitHub repository</li> </ul>","boost":10},{"location":"l/lumio/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"l/lumio/#version-100","title":"Version 1.0.0","text":"<ul> <li>This EasyConfig is a development by CSC and LUST. All it needs to     do is download the repository and copy the files it needs.</li> </ul>","boost":10},{"location":"l/lumio/#version-200","title":"Version 2.0.0","text":"<ul> <li> <p>This is for the first release of the official GO version of lumio-conf which     was labeled version 1.0.0. We still combine with the same older versions of     rclone, s3cmd and restic as there is no time to test a lot.</p> </li> <li> <p>The EasyConfig needed a big rework. For this version, a precompiled executable     is distributed via GitHub, as are the sources. We currently download both     so that we also have the LICENSE file.</p> </li> <li> <p>Otherwise it is just a MakeCp EasyConfig file. During the unpacking, we      ensure that the executable is actually in the directory that also contains     the sources.</p> </li> </ul>","boost":10},{"location":"l/lumio-ext-tools/","title":"lumio-ext-tools","text":"<p>[package list]</p>","boost":10},{"location":"l/lumio-ext-tools/#lumio-ext-tools","title":"lumio-ext-tools","text":"","boost":10},{"location":"l/lumio-ext-tools/#license-information","title":"License information","text":"<p>rclone is distributed under an MIT license a copy of which can be found in the COPYING file in the rclone GitHub repository.</p> <p>restic is distributed under a BSD 2-Clause \"Simplified\" License a copy of which can be found in the  LICENSE file in the restic GitHub repository.</p> <p>s3cmd is licensed under the  GNU General Public License version 2.0 a copy of which can be found in the  LICENSE file in the s3cmd GitHub repository.</p> <p>As a dependency of s3cmd the python-magic package is also installed which is also licensed under an MIT license. A copy of the license and further copyright notices can be found in the  LICENSE file in the python-magic GitHub repository.</p>","boost":10},{"location":"l/lumio-ext-tools/#user-documentation","title":"User documentation","text":"<p>This module is of little use without the  lumio module which provides the authentication script that is needed to generate the keys to access LUMI-O.</p>","boost":10},{"location":"l/lumio-ext-tools/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider lumio-ext-tools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>lumio-ext-tools/1.0.0 (EasyConfig: lumio-ext-tools-1.0.0.eb)</li> </ul>","boost":10},{"location":"l/lumio-ext-tools/#technical-documentation","title":"Technical documentation","text":"<p>This is a bundle of tools:</p> <ul> <li> <p>rclone:</p> <ul> <li> <p>rclone home page</p> <ul> <li>Downloads on that site for version check</li> </ul> </li> <li> <p>rclone on GitHub</p> </li> </ul> </li> <li> <p>restic</p> <ul> <li> <p>restic home page</p> </li> <li> <p>restic on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li> <p>s3cmd:</p> <ul> <li> <p>s3cmd web site</p> </li> <li> <p>s3cmd on GitHub</p> </li> <li> <p>s3cmd on PyPI </p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumio-ext-tools/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>rclone</p> <ul> <li> <p>rclone support in the EasyBuilders repository     This easyconfig compiles <code>rclone</code> from sources but requires Go to do so.</p> </li> <li> <p>There is no support for rclone in the CSCS repository</p> </li> <li> <p>rclone support in Spack</p> </li> </ul> </li> <li> <p>restic</p> <ul> <li> <p>There is no support for restic in the EasyBuilders repository</p> </li> <li> <p>There is no support for restic in the CSCS repository</p> </li> <li> <p>restic support in Spack</p> </li> </ul> </li> <li> <p>s3cmd</p> <ul> <li> <p>There is no support for s3cmd in the EasyBuilders repository</p> </li> <li> <p>There is no support for s3cmd in the EasyBuilders repository</p> </li> <li> <p>py-s3cmd support in Spack</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lumio-ext-tools/#version-100","title":"Version 1.0.0","text":"<ul> <li> <p>The EasyConfig is a development of CSC and LUST.</p> </li> <li> <p>All binaries are installed from binary distributions.</p> </li> <li> <p>s3cmd:</p> <ul> <li> <p>Use the system Python</p> </li> <li> <p>Patched the s3cmd script so that the system Python is hard-code     and PYTHONPATH doesn't need to be set so that the tool can work     together with other tools on the system, also tools that would use     a different Python version.</p> </li> </ul> </li> </ul>","boost":10},{"location":"l/lustre-includes/","title":"lustre-includes","text":"<p>[package list]</p>","boost":10},{"location":"l/lustre-includes/#lustre-includes","title":"lustre-includes","text":"","boost":10},{"location":"l/lustre-includes/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider lustre-includes/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig lustre-includes-2.15.1.eb, will build lustre-includes/2.15.1</li> </ul>","boost":10},{"location":"l/lz4/","title":"lz4","text":"<p>[package list]</p>","boost":10},{"location":"l/lz4/#lz4","title":"lz4","text":"","boost":10},{"location":"l/lz4/#license-information","title":"License information","text":"<p>The lz4 package is licensed under different licenses, depending on the source file. See the LICENSE file in the source repository for more information.</p> <p>From LUMI/23.12 on, the LICENSE file can also be found in the directory <code>$EBROOTLZ4/share/licenses/lz4</code> after loading the module.</p>","boost":10},{"location":"l/lz4/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider lz4/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>lz4/1.9.3-cpeAMD-22.08 (EasyConfig: lz4-1.9.3-cpeAMD-22.08.eb)</p> </li> <li> <p>lz4/1.9.3-cpeAOCC-22.08 (EasyConfig: lz4-1.9.3-cpeAOCC-22.08.eb)</p> </li> <li> <p>lz4/1.9.3-cpeCray-22.08 (EasyConfig: lz4-1.9.3-cpeCray-22.08.eb)</p> </li> <li> <p>lz4/1.9.3-cpeGNU-22.08 (EasyConfig: lz4-1.9.3-cpeGNU-22.08.eb)</p> </li> <li> <p>lz4/1.9.4-cpeAMD-22.12 (EasyConfig: lz4-1.9.4-cpeAMD-22.12.eb)</p> </li> <li> <p>lz4/1.9.4-cpeAMD-23.09 (EasyConfig: lz4-1.9.4-cpeAMD-23.09.eb)</p> </li> <li> <p>lz4/1.9.4-cpeAMD-23.12 (EasyConfig: lz4-1.9.4-cpeAMD-23.12.eb)</p> </li> <li> <p>lz4/1.9.4-cpeAMD-24.03 (EasyConfig: lz4-1.9.4-cpeAMD-24.03.eb)</p> </li> <li> <p>lz4/1.9.4-cpeAOCC-22.12 (EasyConfig: lz4-1.9.4-cpeAOCC-22.12.eb)</p> </li> <li> <p>lz4/1.9.4-cpeAOCC-23.09 (EasyConfig: lz4-1.9.4-cpeAOCC-23.09.eb)</p> </li> <li> <p>lz4/1.9.4-cpeAOCC-23.12 (EasyConfig: lz4-1.9.4-cpeAOCC-23.12.eb)</p> </li> <li> <p>lz4/1.9.4-cpeAOCC-24.03 (EasyConfig: lz4-1.9.4-cpeAOCC-24.03.eb)</p> </li> <li> <p>lz4/1.9.4-cpeCray-22.12 (EasyConfig: lz4-1.9.4-cpeCray-22.12.eb)</p> </li> <li> <p>lz4/1.9.4-cpeCray-23.03 (EasyConfig: lz4-1.9.4-cpeCray-23.03.eb)</p> </li> <li> <p>lz4/1.9.4-cpeCray-23.09 (EasyConfig: lz4-1.9.4-cpeCray-23.09.eb)</p> </li> <li> <p>lz4/1.9.4-cpeCray-23.12 (EasyConfig: lz4-1.9.4-cpeCray-23.12.eb)</p> </li> <li> <p>lz4/1.9.4-cpeCray-24.03 (EasyConfig: lz4-1.9.4-cpeCray-24.03.eb)</p> </li> <li> <p>lz4/1.9.4-cpeGNU-22.12 (EasyConfig: lz4-1.9.4-cpeGNU-22.12.eb)</p> </li> <li> <p>lz4/1.9.4-cpeGNU-23.09 (EasyConfig: lz4-1.9.4-cpeGNU-23.09.eb)</p> </li> <li> <p>lz4/1.9.4-cpeGNU-23.12 (EasyConfig: lz4-1.9.4-cpeGNU-23.12.eb)</p> </li> <li> <p>lz4/1.9.4-cpeGNU-24.03 (EasyConfig: lz4-1.9.4-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"l/lz4/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>lz4 home page</p> </li> <li> <p>lz4 on GitHub</p> <ul> <li>lz4 GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"l/lz4/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>lz4 in the EasyBuilders repository</p> </li> <li> <p>lz4 in the CSCS repository</p> </li> </ul>","boost":10},{"location":"l/lz4/#version-193-from-cpe-2106-on","title":"Version 1.9.3 from CPE 21.06 on","text":"<ul> <li>The EasyConfig file is a direct derivative from the one from the EasyBuilders repository.</li> </ul>","boost":10},{"location":"l/lz4/#version-194-from-cpe-2212-on","title":"Version 1.9.4 from CPE 22.12 on","text":"<ul> <li> <p>The EasyConfig is a trivial version bump of the 1.9.3 one.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"l/lz4/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig lz4-1.9.3-cpeAMD-21.06.eb, with module lz4/1.9.3-cpeAMD-21.06</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeAOCC-21.12.eb, with module lz4/1.9.3-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeAOCC-22.06.eb, with module lz4/1.9.3-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeCray-21.06.eb, with module lz4/1.9.3-cpeCray-21.06</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeCray-21.08.eb, with module lz4/1.9.3-cpeCray-21.08</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeCray-21.12.eb, with module lz4/1.9.3-cpeCray-21.12</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeCray-22.06.eb, with module lz4/1.9.3-cpeCray-22.06</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeGNU-21.06.eb, with module lz4/1.9.3-cpeGNU-21.06</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeGNU-21.08.eb, with module lz4/1.9.3-cpeGNU-21.08</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeGNU-21.12.eb, with module lz4/1.9.3-cpeGNU-21.12</p> </li> <li> <p>EasyConfig lz4-1.9.3-cpeGNU-22.06.eb, with module lz4/1.9.3-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"m/MATIO/","title":"MATIO","text":"<p>[package list]</p>","boost":10},{"location":"m/MATIO/#matio","title":"MATIO","text":"","boost":10},{"location":"m/MATIO/#license-information","title":"License information","text":"<p>MATIO is distributed under a BSD 2-Clause \"Simplified\" License. The exact text including copyrights can be found in the COPYING file in the MATIO GitHub repository.</p>","boost":10},{"location":"m/MATIO/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider MATIO/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig MATIO-1.5.27-cpeGNU-24.03.eb, will build MATIO/1.5.27-cpeGNU-24.03</li> </ul>","boost":10},{"location":"m/MATIO/#technical-documentation","title":"Technical documentation","text":"<p>MATIO is used by Trilinos.</p> <ul> <li> <p>MATIO - MAT File I/O Libary on SourceForge</p> </li> <li> <p>MATIO on GitHub</p> </li> </ul>","boost":10},{"location":"m/MATIO/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>MATIO support in the EasyBuilders repository</p> </li> <li> <p>There is no support for MATIO in the CSCS repository</p> </li> </ul>","boost":10},{"location":"m/MATIO/#version-1523-for-cpegnu-2208-and-2212-archived","title":"Version 1.5.23 for cpeGNU 22.08 and 22.12 (archived)","text":"<ul> <li>The EasyConfig is adapted from the EasyBuilder ones.</li> </ul>","boost":10},{"location":"m/MATIO/#version-1527-for-cpegnu-2403","title":"Version 1.5.27 for cpeGNU 24.03","text":"<ul> <li>The EasyConfig is adapted from the previous one but with a     switch to use CMake as the build system. Enabled shared library and     HDF5. HDF5 parallel is used as MATIO is a Trilinos dependency and we     use the parallel version to build Trilinos.</li> </ul>","boost":10},{"location":"m/MATIO/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig MATIO-1.5.23-cpeGNU-22.08.eb, with module MATIO/1.5.23-cpeGNU-22.08</p> </li> <li> <p>EasyConfig MATIO-1.5.23-cpeGNU-22.12.eb, with module MATIO/1.5.23-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"m/METIS/","title":"METIS","text":"<p>[package list]</p>","boost":10},{"location":"m/METIS/#metis","title":"METIS","text":"","boost":10},{"location":"m/METIS/#license-information","title":"License information","text":"<p>The versions of METIS provided in the LUMI software stack are distributed under the Apache License Version 2.0. Information is available in the METIS FAQ.</p> <p>From LUMI/23.12 on, license information can also be found in the <code>$EBROOTMETIS/share/licenses/METIS</code> directory after loading the module.</p>","boost":10},{"location":"m/METIS/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider METIS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>METIS/5.1.0-cpeAMD-22.08 (EasyConfig: METIS-5.1.0-cpeAMD-22.08.eb)</p> </li> <li> <p>METIS/5.1.0-cpeAMD-22.12 (EasyConfig: METIS-5.1.0-cpeAMD-22.12.eb)</p> </li> <li> <p>METIS/5.1.0-cpeAMD-23.09 (EasyConfig: METIS-5.1.0-cpeAMD-23.09.eb)</p> </li> <li> <p>METIS/5.1.0-cpeAMD-23.12 (EasyConfig: METIS-5.1.0-cpeAMD-23.12.eb)</p> </li> <li> <p>METIS/5.1.0-cpeAMD-24.03 (EasyConfig: METIS-5.1.0-cpeAMD-24.03.eb)</p> </li> <li> <p>METIS/5.1.0-cpeAOCC-22.08 (EasyConfig: METIS-5.1.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>METIS/5.1.0-cpeAOCC-22.12 (EasyConfig: METIS-5.1.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>METIS/5.1.0-cpeAOCC-23.09 (EasyConfig: METIS-5.1.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>METIS/5.1.0-cpeAOCC-23.12 (EasyConfig: METIS-5.1.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>METIS/5.1.0-cpeAOCC-24.03 (EasyConfig: METIS-5.1.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>METIS/5.1.0-cpeCray-22.08 (EasyConfig: METIS-5.1.0-cpeCray-22.08.eb)</p> </li> <li> <p>METIS/5.1.0-cpeCray-22.12 (EasyConfig: METIS-5.1.0-cpeCray-22.12.eb)</p> </li> <li> <p>METIS/5.1.0-cpeCray-23.03 (EasyConfig: METIS-5.1.0-cpeCray-23.03.eb)</p> </li> <li> <p>METIS/5.1.0-cpeCray-23.09 (EasyConfig: METIS-5.1.0-cpeCray-23.09.eb)</p> </li> <li> <p>METIS/5.1.0-cpeCray-23.12 (EasyConfig: METIS-5.1.0-cpeCray-23.12.eb)</p> </li> <li> <p>METIS/5.1.0-cpeCray-24.03 (EasyConfig: METIS-5.1.0-cpeCray-24.03.eb)</p> </li> <li> <p>METIS/5.1.0-cpeGNU-22.08 (EasyConfig: METIS-5.1.0-cpeGNU-22.08.eb)</p> </li> <li> <p>METIS/5.1.0-cpeGNU-22.12 (EasyConfig: METIS-5.1.0-cpeGNU-22.12.eb)</p> </li> <li> <p>METIS/5.1.0-cpeGNU-23.09 (EasyConfig: METIS-5.1.0-cpeGNU-23.09.eb)</p> </li> <li> <p>METIS/5.1.0-cpeGNU-23.12 (EasyConfig: METIS-5.1.0-cpeGNU-23.12.eb)</p> </li> <li> <p>METIS/5.1.0-cpeGNU-24.03 (EasyConfig: METIS-5.1.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"m/METIS/#technical-documentation","title":"Technical documentation","text":"<ul> <li>METIS home page</li> </ul> <p>METIS is mature code, there doesn't really seem to be any development anymore. The 5.1.0 release is from 2013.</p>","boost":10},{"location":"m/METIS/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>METIS support in the EasyBuilders repository</p> <p>METIS has a software-specific EasyBlock.</p> </li> <li> <p>METIS support in the CSCS repository</p> </li> <li> <p>HPE-Cray METIS sample build script (TPSL)</p> <p>METIS was part of the Cray Third-Party Scientific Libraries (TPSL) but is no longer delivered in a ready-to-use form,</p> </li> </ul>","boost":10},{"location":"m/METIS/#version-510-from-cpe-2108-on","title":"Version 5.1.0 from CPE 21.08 on","text":"<ul> <li> <p>Our EasyConfig is derived from the CSCS one which itself is a direct     adaptation of the EasyBuilders one.</p> <p>It uses the default EasyBuild METIS EasyBlock.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"m/METIS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig METIS-5.1.0-cpeAOCC-21.12.eb, with module METIS/5.1.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig METIS-5.1.0-cpeAOCC-22.06.eb, with module METIS/5.1.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig METIS-5.1.0-cpeCray-21.08.eb, with module METIS/5.1.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig METIS-5.1.0-cpeCray-21.12.eb, with module METIS/5.1.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig METIS-5.1.0-cpeCray-22.06.eb, with module METIS/5.1.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig METIS-5.1.0-cpeGNU-21.08.eb, with module METIS/5.1.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig METIS-5.1.0-cpeGNU-21.12.eb, with module METIS/5.1.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig METIS-5.1.0-cpeGNU-22.06.eb, with module METIS/5.1.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"m/MPC/","title":"MPC","text":"<p>[package list]</p>","boost":10},{"location":"m/MPC/#mpc","title":"MPC","text":"","boost":10},{"location":"m/MPC/#license-information","title":"License information","text":"<p>MPC is distributed under the  GNU Lesser General Public License, either version 3 of the licence, or (at your option) any later version (LGPLv3+). A copy of the license can be found in the COPYING.LESSER file in the source repository.</p> <p>From LUMI/23.12 on, the <code>COPYING.LESSER</code> file can also be found in the <code>$EBROOTMPC/share/licenses/MPC</code> subdirectory after loading the module.</p>","boost":10},{"location":"m/MPC/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider MPC/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>MPC/1.2.1-cpeAMD-22.08 (EasyConfig: MPC-1.2.1-cpeAMD-22.08.eb)</p> </li> <li> <p>MPC/1.2.1-cpeAOCC-22.08 (EasyConfig: MPC-1.2.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>MPC/1.2.1-cpeCray-22.08 (EasyConfig: MPC-1.2.1-cpeCray-22.08.eb)</p> </li> <li> <p>MPC/1.2.1-cpeGNU-22.08 (EasyConfig: MPC-1.2.1-cpeGNU-22.08.eb)</p> </li> <li> <p>MPC/1.3.1-cpeAMD-24.03 (EasyConfig: MPC-1.3.1-cpeAMD-24.03.eb)</p> </li> <li> <p>MPC/1.3.1-cpeAOCC-22.12 (EasyConfig: MPC-1.3.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>MPC/1.3.1-cpeAOCC-23.09 (EasyConfig: MPC-1.3.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>MPC/1.3.1-cpeAOCC-23.12 (EasyConfig: MPC-1.3.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>MPC/1.3.1-cpeAOCC-24.03 (EasyConfig: MPC-1.3.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>MPC/1.3.1-cpeCray-22.12 (EasyConfig: MPC-1.3.1-cpeCray-22.12.eb)</p> </li> <li> <p>MPC/1.3.1-cpeCray-23.03 (EasyConfig: MPC-1.3.1-cpeCray-23.03.eb)</p> </li> <li> <p>MPC/1.3.1-cpeCray-23.09 (EasyConfig: MPC-1.3.1-cpeCray-23.09.eb)</p> </li> <li> <p>MPC/1.3.1-cpeCray-23.12 (EasyConfig: MPC-1.3.1-cpeCray-23.12.eb)</p> </li> <li> <p>MPC/1.3.1-cpeCray-24.03 (EasyConfig: MPC-1.3.1-cpeCray-24.03.eb)</p> </li> <li> <p>MPC/1.3.1-cpeGNU-22.12 (EasyConfig: MPC-1.3.1-cpeGNU-22.12.eb)</p> </li> <li> <p>MPC/1.3.1-cpeGNU-23.09 (EasyConfig: MPC-1.3.1-cpeGNU-23.09.eb)</p> </li> <li> <p>MPC/1.3.1-cpeGNU-23.12 (EasyConfig: MPC-1.3.1-cpeGNU-23.12.eb)</p> </li> <li> <p>MPC/1.3.1-cpeGNU-24.03 (EasyConfig: MPC-1.3.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"m/MPC/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>MPC home page</p> </li> <li> <p>Download from GNU</p> </li> <li> <p>MPC source development is hosted in the INRIA GitLab</p> </li> </ul>","boost":10},{"location":"m/MPC/#issues","title":"Issues","text":"<ul> <li>MPC does build a mpc.pc file for pkg-config (at least not in 1.2.1 or earlier)</li> </ul>","boost":10},{"location":"m/MPC/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>MPC in the EasyBuilders repository</p> </li> <li> <p>There is no support for MPC in the CSCS repository</p> </li> </ul>","boost":10},{"location":"m/MPC/#version-121-from-cpe-2106-on","title":"Version 1.2.1 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is a mix of the EasyBuilders and University of Antwerpen versions,     with improved URLs and help information.</p> </li> <li> <p>To find the test results in the log files, grep for \"Testsuite\".</p> <p>NOTE: When compiled with cpeCray or cpeAMD two of the tests are skipped, while in the cpeGNU versions all tests pass.</p> </li> </ul>","boost":10},{"location":"m/MPC/#version-131-from-cpe-2212-on","title":"Version 1.3.1 from CPE 22.12 on","text":"<ul> <li> <p>The EasyConfig is a straightforward port of the 1.2.1 one.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"m/MPC/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig MPC-1.2.1-cpeAMD-21.06.eb, with module MPC/1.2.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeAOCC-21.12.eb, with module MPC/1.2.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeAOCC-22.06.eb, with module MPC/1.2.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeCray-21.06.eb, with module MPC/1.2.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeCray-21.08.eb, with module MPC/1.2.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeCray-21.12.eb, with module MPC/1.2.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeCray-22.06.eb, with module MPC/1.2.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeGNU-21.06.eb, with module MPC/1.2.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeGNU-21.08.eb, with module MPC/1.2.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeGNU-21.12.eb, with module MPC/1.2.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig MPC-1.2.1-cpeGNU-22.06.eb, with module MPC/1.2.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"m/MPFR/","title":"MPFR","text":"<p>[package list]</p>","boost":10},{"location":"m/MPFR/#mpfr","title":"MPFR","text":"","boost":10},{"location":"m/MPFR/#license-information","title":"License information","text":"<p>The versions of MPFR provided in the LUMI software stack are licensed under the GNU Lesser General Public License version 3 or later. A copy can also be found in the COPYING.LESSER file in the source repository.</p> <p>From LUMI/23.12 onwards, a the <code>COPUING.LESSER</code> file can also be found in the subdirectory <code>$EBROOTMPFR/share/licenses/MPFR</code> after loading the module.</p>","boost":10},{"location":"m/MPFR/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider MPFR/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>MPFR/4.1.0-cpeAMD-22.08 (EasyConfig: MPFR-4.1.0-cpeAMD-22.08.eb)</p> </li> <li> <p>MPFR/4.1.0-cpeAOCC-22.08 (EasyConfig: MPFR-4.1.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>MPFR/4.1.0-cpeCray-22.08 (EasyConfig: MPFR-4.1.0-cpeCray-22.08.eb)</p> </li> <li> <p>MPFR/4.1.0-cpeGNU-22.08 (EasyConfig: MPFR-4.1.0-cpeGNU-22.08.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeAMD-24.03 (EasyConfig: MPFR-4.2.0-cpeAMD-24.03.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeAOCC-22.12 (EasyConfig: MPFR-4.2.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeAOCC-23.09 (EasyConfig: MPFR-4.2.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeAOCC-23.12 (EasyConfig: MPFR-4.2.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeAOCC-24.03 (EasyConfig: MPFR-4.2.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeCray-22.12 (EasyConfig: MPFR-4.2.0-cpeCray-22.12.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeCray-23.03 (EasyConfig: MPFR-4.2.0-cpeCray-23.03.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeCray-23.09 (EasyConfig: MPFR-4.2.0-cpeCray-23.09.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeCray-23.12 (EasyConfig: MPFR-4.2.0-cpeCray-23.12.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeCray-24.03 (EasyConfig: MPFR-4.2.0-cpeCray-24.03.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeGNU-22.12 (EasyConfig: MPFR-4.2.0-cpeGNU-22.12.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeGNU-23.09 (EasyConfig: MPFR-4.2.0-cpeGNU-23.09.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeGNU-23.12 (EasyConfig: MPFR-4.2.0-cpeGNU-23.12.eb)</p> </li> <li> <p>MPFR/4.2.0-cpeGNU-24.03 (EasyConfig: MPFR-4.2.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"m/MPFR/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>MPFR home page</p> </li> <li> <p>Download from GNU</p> </li> <li> <p>MPFR source development is hosted in the INRIA GitLab</p> </li> </ul>","boost":10},{"location":"m/MPFR/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>MPFR in the EasyBuilders repository</p> </li> <li> <p>MPFR in the CSCS repository</p> </li> </ul>","boost":10},{"location":"m/MPFR/#version-410-from-cpe-2106-on","title":"Version 4.1.0 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is a mix of the EasyBuilders and University of Antwerpen versions.</p> </li> <li> <p>To find the test results in the log files, grep for \"Testsuite\".</p> <p>NOTE: When compiled with cpeCray or cpeAMD two of the tests are skipped, while in the cpeGNU versions all tests pass.</p> </li> </ul>","boost":10},{"location":"m/MPFR/#version-420-from-cpe-2212-on","title":"Version 4.2.0 from CPE 22.12 on","text":"<ul> <li> <p>The easyConfig is a trivial port of the 4.1.0 one.</p> </li> <li> <p>From LUMI/23.12 onwards, license information was added to the installationb.</p> </li> <li> <p>Had to disable tests for cpeCray/23.12 as 3 tests failed (in addition to two tests     that are skipped with clang-based compilers).</p> </li> </ul>","boost":10},{"location":"m/MPFR/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig MPFR-4.1.0-cpeAMD-21.06.eb, with module MPFR/4.1.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeAOCC-21.12.eb, with module MPFR/4.1.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeAOCC-22.06.eb, with module MPFR/4.1.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeCray-21.06.eb, with module MPFR/4.1.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeCray-21.08.eb, with module MPFR/4.1.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeCray-21.12.eb, with module MPFR/4.1.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeCray-22.06.eb, with module MPFR/4.1.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeGNU-21.06.eb, with module MPFR/4.1.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeGNU-21.08.eb, with module MPFR/4.1.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeGNU-21.12.eb, with module MPFR/4.1.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig MPFR-4.1.0-cpeGNU-22.06.eb, with module MPFR/4.1.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"m/MUMPS/","title":"MUMPS","text":"<p>[package list]</p>","boost":10},{"location":"m/MUMPS/#mumps","title":"MUMPS","text":"","boost":10},{"location":"m/MUMPS/#license-information","title":"License information","text":"<p>The license information for MUMPS can be found on the  download page on the MUMPS web site,  in the \"Conditions of Use\" section.</p> <p>The main part of MUMS is covered by the CeCILL-C License but some parts (relying on code from other projects) are covered by the BSD 3-Clause License.</p> <p>Note that the conditions of use also ask to cite two particular papers about MUMPS and to try to notify the authors of the publication. </p>","boost":10},{"location":"m/MUMPS/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider MUMPS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig MUMPS-5.5.1-cpeCray-23.09.eb, will build MUMPS/5.5.1-cpeCray-23.09</p> </li> <li> <p>EasyConfig MUMPS-5.5.1-cpeGNU-23.09.eb, will build MUMPS/5.5.1-cpeGNU-23.09</p> </li> <li> <p>EasyConfig MUMPS-5.6.1-cpeGNU-24.03-noOpenMP.eb, will build MUMPS/5.6.1-cpeGNU-24.03-noOpenMP</p> <p>MUMPS compiled with the single-threaded LibSci libraries, as shared and static libraries.</p> </li> <li> <p>EasyConfig MUMPS-5.6.1-cpeGNU-24.03-OpenMP.eb, will build MUMPS/5.6.1-cpeGNU-24.03-OpenMP</p> <p>MUMPS compiled with the multi-threaded LibSci libraries, as shared and static libraries.</p> </li> </ul>","boost":10},{"location":"m/MUMPS/#technical-documentation","title":"Technical documentation","text":"<ul> <li>MUMPS web site</li> </ul>","boost":10},{"location":"m/MUMPS/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for MUMPS in the EasyBuilders repository</p> </li> <li> <p>There is no support for MUMPS in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"m/MUMPS/#version-551-for-cpegnu-2208-and-2212","title":"Version 5.5.1. for cpeGNU 22.08 and 22.12","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one with an additional patch     for the Cray PE.</li> </ul>","boost":10},{"location":"m/MUMPS/#version-561-for-cpegnu-2403","title":"Version 5.6.1. for cpeGNU 24.03","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one</li> </ul>","boost":10},{"location":"m/MUMPS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig MUMPS-5.5.1-cpeGNU-22.08.eb, with module MUMPS/5.5.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig MUMPS-5.5.1-cpeGNU-22.12.eb, with module MUMPS/5.5.1-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"m/Mako/","title":"Mako","text":"<p>[package list]</p>","boost":10},{"location":"m/Mako/#mako","title":"Mako","text":"","boost":10},{"location":"m/Mako/#license-information","title":"License information","text":"<p>Mako is covered by the MIT License.</p> <p>The precise license information with the proper copyrights for Mako can be found in  the LICENSE file and AUTHORS file, bvoth in the Mako GitHub reppository.</p>","boost":10},{"location":"m/Mako/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Mako/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>Mako/1.3.5-cpeGNU-24.03 (EasyConfig: Mako-1.3.5-cpeGNU-24.03.eb)</li> </ul>","boost":10},{"location":"m/Mako/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Mako/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig Mako-1.1.6.eb, will build Mako/1.1.6</li> </ul>","boost":10},{"location":"m/Mako/#technical-documentation-central-installation","title":"Technical documentation (central installation)","text":"<ul> <li> <p>Mako homepage</p> <ul> <li>Mako Documentation</li> </ul> </li> <li> <p>Mako on PyPi</p> </li> <li> <p>Mako on GitHub</p> </li> </ul>","boost":10},{"location":"m/Mako/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for Mako in the EasyBuilders repository</p> </li> <li> <p>Support for Mako in the CSCS repository</p> </li> </ul>","boost":10},{"location":"m/Mako/#version-135-for-cpe-2403","title":"Version 1.3.5 for CPE 24.03","text":"<ul> <li>Based on previous easyconfigs in the contrib repository that were created from      scratch as the LUMI Python setup is different from the     EasyBuilders and CSCS ones. </li> </ul>","boost":10},{"location":"m/Mako/#technical-documentation-user-easybuild-installation","title":"Technical documentation (user EasyBuild installation)","text":"<ul> <li> <p>Mako homepage</p> <ul> <li>Mako Documentation</li> </ul> </li> <li> <p>Mako on PyPi</p> </li> <li> <p>Mako on GitHub</p> </li> </ul>","boost":10},{"location":"m/Mako/#easybuild_1","title":"EasyBuild","text":"<ul> <li> <p>Support for Mako in the EasyBuilders repository</p> </li> <li> <p>Support for Mako in the CSCS repository</p> </li> </ul>","boost":10},{"location":"m/Mako/#version-116-for-the-system-toolchain","title":"Version 1.1.6 for the SYSTEM toolchain","text":"<ul> <li> <p>1.1.6 is the last version that is guaranteed to work with Python 3.6, the     current Python version on SUSE 15SP3.</p> </li> <li> <p>The EasyConfig is basically a new development</p> </li> </ul>","boost":10},{"location":"m/Mako/#version-120-for-cpe-2208","title":"Version 1.2.0 for CPE 22.08","text":"<ul> <li>Created from scratch for LUMI as the LUMI Python setup is different from the     EasyBuilders and CSCS ones. Created independently from the 1.1.6 one.</li> </ul>","boost":10},{"location":"m/Mako/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Mako-1.2.0-cpeAMD-22.08.eb, with module Mako/1.2.0-cpeAMD-22.08</p> </li> <li> <p>EasyConfig Mako-1.2.0-cpeCray-22.08.eb, with module Mako/1.2.0-cpeCray-22.08</p> </li> <li> <p>EasyConfig Mako-1.2.0-cpeGNU-22.08.eb, with module Mako/1.2.0-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"m/Mesa/","title":"Mesa","text":"<p>[package list]</p>","boost":10},{"location":"m/Mesa/#mesa","title":"Mesa","text":"","boost":10},{"location":"m/Mesa/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig Mesa-22.2.1-cpeGNU-22.08.eb, with module Mesa/22.2.1-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"m/Mesa-demos/","title":"Mesa-demos","text":"<p>[package list]</p>","boost":10},{"location":"m/Mesa-demos/#mesa-demos","title":"Mesa-demos","text":"","boost":10},{"location":"m/Mesa-demos/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig Mesa-demos-8.5.0-cpeGNU-22.08.eb, with module Mesa-demos/8.5.0-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"m/MicroHH/","title":"MicroHH","text":"<p>[package list]</p>","boost":10},{"location":"m/MicroHH/#microhh","title":"MicroHH","text":"","boost":10},{"location":"m/MicroHH/#license-information","title":"License information","text":"<p>MicroHH is released under the GNU General Public License (v3).</p> <p>Users are asked to cite the following publication: <pre><code>van Heerwaarden, C. C., van Stratum, B. J. H., Heus, T., Gibbs, J. A., Fedorovich, E., and Mellado, J. P.: MicroHH 1.0: a computational fluid dynamics code for direct numerical simulation and large-eddy simulation of atmospheric boundary layer flows, Geosci. Model Dev., 10, 3145\u20133165, https://doi.org/10.5194/gmd-10-3145-2017, 2017.\n</code></pre></p>","boost":10},{"location":"m/MicroHH/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider MicroHH/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig MicroHH-2.0.1-cpeGNU-24.03.eb, will build MicroHH/2.0.1-cpeGNU-24.03</p> <p>CPU version, compile for <code>partitioon/C</code> and run on LUMI-C.</p> </li> </ul>","boost":10},{"location":"m/MicroHH/#technical-documentation","title":"Technical documentation","text":"<p>MicroHH is a computational fluid dynamics code designed to simulate turbulent flows  in the atmosphere using Direct Numerical Simulation (DNS) and Large-Eddy Simulation (LES) techniques.  Its capabilities span a range from highly idealized flows to realistic atmospheric boundary layers,  incorporating all relevant processes, such as moist thermodynamics, radiation, land surface processes, and microphysics.  The code is written in C++/CUDA and runs on both CPUs and GPUs (but only NVIDIA at  the time of writing).</p> <ul> <li> <p>MicroHH website</p> </li> <li> <p>MicroHH User Guide</p> </li> </ul>","boost":10},{"location":"m/MicroHH/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"m/MicroHH/#version-201-for-cpegnu","title":"Version 2.0.1 for cpeGNU","text":"<ul> <li> <p>The EasyConfig was contributed by the EPICURE project.</p> </li> <li> <p>When having trouble after a system update, it may be a good idea to move Boost      to the regular depencencies as now many system libraries are used that may or     may not be present after a system update.</p> </li> </ul>","boost":10},{"location":"m/magma/","title":"magma","text":"<p>[package list]</p>","boost":10},{"location":"m/magma/#magma","title":"magma","text":"","boost":10},{"location":"m/magma/#license-information","title":"License information","text":"<p>Magma is The 3-Clause BSD License. The full text is available in the MAGMA bitbucket repository.</p>","boost":10},{"location":"m/magma/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider magma/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig magma-2.7.2-cpeAMD-23.09-rocm.eb, will build magma/2.7.2-cpeAMD-23.09-rocm</p> </li> <li> <p>EasyConfig magma-2.7.2-cpeCray-23.09-rocm.eb, will build magma/2.7.2-cpeCray-23.09-rocm</p> </li> <li> <p>EasyConfig magma-2.7.2-cpeGNU-23.09-rocm.eb, will build magma/2.7.2-cpeGNU-23.09-rocm</p> </li> <li> <p>EasyConfig magma-2.8.0-cpeAMD-24.03-rocm.eb, will build magma/2.8.0-cpeAMD-24.03-rocm</p> </li> <li> <p>EasyConfig magma-2.8.0-cpeCray-24.03-rocm.eb, will build magma/2.8.0-cpeCray-24.03-rocm</p> </li> <li> <p>EasyConfig magma-2.8.0-cpeGNU-24.03-rocm.eb, will build magma/2.8.0-cpeGNU-24.03-rocm</p> </li> <li> <p>EasyConfig magma-2.8.0-cpeGNU-24.03-rocm6.2.2.eb, will build magma/2.8.0-cpeGNU-24.03-rocm6.2.2</p> <p>Version specifically with ROCm 6.2.2 as that ROCm version solves some issues with FFT in GPAW.</p> </li> </ul>","boost":10},{"location":"m/magma/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Magma web page</li> </ul>","boost":10},{"location":"m/magma/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>Support in the EasyBuilders CSCS</p> </li> </ul>","boost":10},{"location":"m/magma/#version-272-for-cpe-2309","title":"Version 2.7.2 for CPE 23.09","text":"<ul> <li>Created for LUMI with a patch to separate HIP and C++ compilation to allow   linking to the OpenMP runtime corresponding to the PrgEnv used.</li> </ul> <p>The patch also uses the standard CMake way of setting the GPU architecture   rather than the non-standard way used in Magma (which even had an outdated   list of architectures).</p> <ul> <li> <p>For CPE GNU and AMD, static and shared libraries are built.</p> </li> <li> <p>For CPE Cray, only the shared library is available.</p> </li> </ul>","boost":10},{"location":"m/magma/#version-280-for-2403","title":"Version 2.8.0 for 24.03","text":"<ul> <li> <p>Derived from the EasyConfig for 2.7.2 but with a switch to a different ROCm compiler      driver.</p> </li> <li> <p>Specific version with ROCm 6.2.2 needed for CuPy with ROCm 6.2.2 which in turn     is needed for GPAW.</p> </li> </ul>","boost":10},{"location":"m/makedepf90/","title":"makedepf90","text":"<p>[package list]</p>","boost":10},{"location":"m/makedepf90/#makedepf90","title":"makedepf90","text":"","boost":10},{"location":"m/makedepf90/#license-information","title":"License information","text":"<p>The makedepf90 tool was developed long ago by Erik Edelmann from CSC but is no longer maintained, and the original repository is no longer available. Yet it is  still included in several Linux distributions as an optional packages.</p> <p>There is an unofficvial GitHub repository that still provides information about the  license. The tool is distirbuted under the  GNU General Public License version 2.0 and a copy of it is available in the copying file in the source repository.</p>","boost":10},{"location":"m/makedepf90/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider makedepf90/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig makedepf90-2.8.8.eb, will build makedepf90/2.8.8</li> </ul>","boost":10},{"location":"m/makedepf90/#technical-documentation","title":"Technical documentation","text":"<p>The makedepf90 tool was developed long ago by Erik Edelmann from CSC but is no longer maintained, and the original repository is no longer available. Yet it is  still included in several Linux distributions as an optional packages. Sources for the last official version, 2.8.8, can also still be found as tar files on archives.</p> <ul> <li>Unofficial GitHub with makedepf90 sources.     This is an unofficial copy of the sources, with the claim also that some improvements     have been made to the installation procedure.</li> </ul> <p>This software is no longer maintained so is offered without any warranty that it works properly or can continue to work on LUMI in the future. It is fully offered \"as-is\", without support from the LUMI User Support Team, unless someone would pick up development again.</p>","boost":10},{"location":"m/makedepf90/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository</p> </li> <li> <p>There is no support in Spack</p> </li> </ul> <p>It is best to compile this program in <code>partition/common</code> so that it is available to all partitions in a given LUMI stack.</p>","boost":10},{"location":"m/makedepf90/#version-288-for-the-system-toolchain","title":"Version 2.8.8 for the SYSTEM toolchain","text":"<ul> <li> <p>This is an adaptation of an old EasyBuilders recipe to compile with the     SYSTEM toolchain as it makes no sense at all to compile with the Cray     Programming Environment for such a little tool that is only used during     the build process.</p> </li> <li> <p>We did make a modification to put the man page in <code>share/man/man</code> rather     than into <code>man/man1</code>.</p> </li> <li> <p>Tried a build of the unoffical version 2.8.9 from the new GitHub repository,     but that build process was worse instead of better. Generating the not included     configure script creates warnings, and <code>make install</code> also tried to install in      the wrong directory due to a bug in the generated Makefile.</p> </li> </ul>","boost":10},{"location":"m/matplotlib/","title":"matplotlib","text":"<p>[package list]</p>","boost":10},{"location":"m/matplotlib/#matplotlib","title":"matplotlib","text":"","boost":10},{"location":"m/matplotlib/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider matplotlib/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig matplotlib-3.10.1-cpeGNU-24.03.eb, will build matplotlib/3.10.1-cpeGNU-24.03</li> </ul>","boost":10},{"location":"m/mpdecimal/","title":"mpdecimal","text":"<p>[package list]</p>","boost":10},{"location":"m/mpdecimal/#mpdecimal","title":"mpdecimal","text":"","boost":10},{"location":"m/mpdecimal/#license-information","title":"License information","text":"<p>The versions of mpdecimal on LUMI are licensed under the Simplified BSD License.</p> <p>The license is available in the LICENSE.txt or COPYRIGHT.txt file (depending on the version) in the source downloads.</p> <p>From LUMI/23.12 on, that file can also be found in the directory <code>$EBROOTMPDECIMAL/share/licenses/mpdecimal</code> after loading the module.</p>","boost":10},{"location":"m/mpdecimal/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider mpdecimal/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>mpdecimal/2.5.1-cpeAMD-22.08 (EasyConfig: mpdecimal-2.5.1-cpeAMD-22.08.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeAMD-22.12 (EasyConfig: mpdecimal-2.5.1-cpeAMD-22.12.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeAMD-23.09 (EasyConfig: mpdecimal-2.5.1-cpeAMD-23.09.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeAMD-23.12 (EasyConfig: mpdecimal-2.5.1-cpeAMD-23.12.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeAOCC-22.08 (EasyConfig: mpdecimal-2.5.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeAOCC-22.12 (EasyConfig: mpdecimal-2.5.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeAOCC-23.09 (EasyConfig: mpdecimal-2.5.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeAOCC-23.12 (EasyConfig: mpdecimal-2.5.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeCray-22.08 (EasyConfig: mpdecimal-2.5.1-cpeCray-22.08.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeCray-22.12 (EasyConfig: mpdecimal-2.5.1-cpeCray-22.12.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeCray-23.03 (EasyConfig: mpdecimal-2.5.1-cpeCray-23.03.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeCray-23.09 (EasyConfig: mpdecimal-2.5.1-cpeCray-23.09.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeCray-23.12 (EasyConfig: mpdecimal-2.5.1-cpeCray-23.12.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeGNU-22.08 (EasyConfig: mpdecimal-2.5.1-cpeGNU-22.08.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeGNU-22.12 (EasyConfig: mpdecimal-2.5.1-cpeGNU-22.12.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeGNU-23.09 (EasyConfig: mpdecimal-2.5.1-cpeGNU-23.09.eb)</p> </li> <li> <p>mpdecimal/2.5.1-cpeGNU-23.12 (EasyConfig: mpdecimal-2.5.1-cpeGNU-23.12.eb)</p> </li> <li> <p>mpdecimal/4.0.0-cpeAMD-24.03 (EasyConfig: mpdecimal-4.0.0-cpeAMD-24.03.eb)</p> </li> <li> <p>mpdecimal/4.0.0-cpeAOCC-24.03 (EasyConfig: mpdecimal-4.0.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>mpdecimal/4.0.0-cpeCray-24.03 (EasyConfig: mpdecimal-4.0.0-cpeCray-24.03.eb)</p> </li> <li> <p>mpdecimal/4.0.0-cpeGNU-24.03 (EasyConfig: mpdecimal-4.0.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"m/mpdecimal/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>mpdecimal home page</p> <ul> <li>Downloads</li> </ul> </li> </ul>","boost":10},{"location":"m/mpdecimal/#issues","title":"Issues","text":"<ul> <li>mpdecimal does build a mpc.pc file for pkg-config (at least not in 2.5.1 or earlier)</li> </ul>","boost":10},{"location":"m/mpdecimal/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for mpdecimal in the EasyBuilders repository</p> </li> <li> <p>There is no support for mpdecimal in the CSCS repository</p> </li> </ul>","boost":10},{"location":"m/mpdecimal/#version-251-from-cpe-2106-on","title":"Version 2.5.1 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is a direct port of the one of the University of Antwerpen.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"m/mpdecimal/#version-400-from-lumi2403-on","title":"Version 4.0.0 from LUMI/24.03 on","text":"<ul> <li> <p>Trivial port of the EasyConfig for 2.5.1 for LUMI/23.12.     The license file has changed though.</p> </li> <li> <p>Improved sanity checks as the installation now also prepares files     for <code>pkg-config</code>.</p> </li> </ul>","boost":10},{"location":"m/mpdecimal/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig mpdecimal-2.5.1-cpeAMD-21.06.eb, with module mpdecimal/2.5.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeAOCC-21.12.eb, with module mpdecimal/2.5.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeAOCC-22.06.eb, with module mpdecimal/2.5.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeCray-21.06.eb, with module mpdecimal/2.5.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeCray-21.08.eb, with module mpdecimal/2.5.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeCray-21.12.eb, with module mpdecimal/2.5.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeCray-22.06.eb, with module mpdecimal/2.5.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeGNU-21.06.eb, with module mpdecimal/2.5.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeGNU-21.08.eb, with module mpdecimal/2.5.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeGNU-21.12.eb, with module mpdecimal/2.5.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig mpdecimal-2.5.1-cpeGNU-22.06.eb, with module mpdecimal/2.5.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"m/mpi4py/","title":"mpi4py","text":"<p>[package list]</p>","boost":10},{"location":"m/mpi4py/#mpi4py","title":"mpi4py","text":"","boost":10},{"location":"m/mpi4py/#user-documentation","title":"User documentation","text":"<p>BETA VERSION, problems may occur and may not be solved quickly,  and the documentation needs further development.</p> <p>The mpi4py container is developed by AMD specifically for LUMI and contains the necessary parts to run mpi4py on LUMI, including a suitable version of ROCm for the version of mpi4py. The container also contains cupy and is also built to support GPU-aware MPI.</p>","boost":10},{"location":"m/mpi4py/#use-via-easybuild-generated-modules","title":"Use via EasyBuild-generated modules","text":"<p>The EasyBuild installation with the EasyConfigs mentioned below will do three things:</p> <ol> <li> <p>It will copy the container to your own file space. We realise containers can be     big, but it ensures that you have complete control over when a container is     removed again.</p> <p>We will remove a container from the system when it is not sufficiently functional anymore, but the container may still work for you, e.g., if some MPI features would break after an update but not all of them.</p> <p>If you prefer to use the centrally provided container, you can remove your copy  after loading of the module with <code>rm $SIF</code> followed by reloading the module. This is however at your own risk. </p> </li> <li> <p>It will create a module file.      When loading the module, a number of environment variables will     be set to help you use the module and to make it easy to swap the module with a     different version in your job scripts.</p> <ul> <li> <p><code>SIF</code> and <code>SIFMPI4PY</code> both contain the name and full path of the singularity     container file.</p> </li> <li> <p><code>SINGULARITY_BIND</code> will mount all necessary directories from the system,     including everything that is needed to access the project, scratch and flash     file systems.</p> </li> <li> <p><code>RUNSCRIPTS</code> and <code>RUNSCRIPTSMPI4PY</code> contain the full path of the directory     containing some sample run scripts that can be used to run software in the      container, or as inspiration for your own variants.</p> </li> </ul> </li> <li> <p>It creates currently 1 script in the $RUNSCRIPTS directory:</p> <ul> <li><code>conda-python-simple</code>: This initialises Conda in the container and then calls Python     with the arguments of <code>conda-python-simple</code>. It can be used, e.g., to run commands     through Python that utilise a single task but all GPUs.</li> </ul> <p>and it creates 1 script in the <code>bin</code> subdirectory of the module to be used outside the container:</p> <ul> <li><code>start-shell</code>: Creates a shell in the container, but nothing more. The Conda     environment is not yet initialised.</li> </ul> </li> </ol> <p>The container uses a miniconda environment in which Python and its packages are installed. That environment needs to be activated in the container when running, which can be done with the command that is available in the container as the environment variable <code>WITH_CONDA</code> (which for this container is <code>source /opt/miniconda3/bin/activate mpi4py</code>).</p> <p>The container also includes some of the OSU MPI benchmarks in <code>/opt/osu</code> to check if the MPI implementation functions.</p> <p>The container (when used with <code>SINGULARITY_BIND</code> of the module) provides the wrapper script <code>/runscripts/conda-python-simple</code> to start the Python command from the conda environment in the container. That script is also available outside the  container for inspection after loading the module as <code>$RUNSCRIPTS/conda-python-simple</code> and you can use that script as a source of inspiration to develop a script that more directly executes your commands or does additional initialisations.</p> <p>Example (in an interactive session):</p> <pre><code>module load LUMI mpi4py/3.1.6-rocm-6.2.0-python-3.12-singularity-20241007\nsalloc -N1 -pstandard-g -t 10:00\nsrun -N1 -n1 --gpus 8 singularity exec $SIF /runscripts/conda-python-simple \\\n    -c 'import mpi4py'\n</code></pre> <p>(which is a dumb example as it is using only one task, but enough to check if the package can at least be loaded correctly).</p> <p>After loading the module, the docker definition file used when building the container is available in the <code>$EBROOTMPI4PY/share/docker-defs</code> subdirectory. As it requires some licensed components from LUMI and some other files that are not included, it currently cannot be used to reconstruct the container and extend its definition.</p>","boost":10},{"location":"m/mpi4py/#installation","title":"Installation","text":"<p>To install the container with EasyBuild, follow the instructions in the EasyBuild section of the LUMI documentation, section \"Software\", and use the dummy partition <code>container</code>, e.g.:</p> <pre><code>module load LUMI partition/container EasyBuild-user\neb mpi4py-3.1.6-rocm-6.2.0-python-3.12-singularity-20241007.eb\n</code></pre> <p>To use the container after installation, the <code>EasyBuild-user</code> module is not needed nor is the <code>container</code> partition. The module will be available in all versions of the LUMI stack and in the <code>CrayEnv</code> stack (provided the environment variable <code>EBU_USER_PREFIX</code> points to the right location).</p>","boost":10},{"location":"m/mpi4py/#direct-access-use-without-the-container-module","title":"Direct access (use without the container module)","text":"<p>The mpi4py containers are available in the following subdirectories of <code>/appl/local/containers</code>:</p> <ul> <li> <p><code>/appl/local/containers/sif-images</code>: Symbolic link to the latest version of the container     for each ROCm version provided. Those links can change without notice!</p> </li> <li> <p><code>/appl/local/containers/tested-containers</code>: Tested containers provided as a Singulartiy <code>.sif</code> file     and a docker-generated tarball. Containers in this directory are removed quickly when a new version     becomes available.</p> </li> <li> <p><code>/appl/local/containers/easybuild-sif-images</code>: Singularity <code>.sif</code> images used with the EasyConfigs     that we provide. They tend to be available for a longer time than in the other two subdirectories.</p> </li> </ul> <p>If you depend on a particular version of a container, we recommend that you copy the container to your own file space (e.g., in <code>/project</code>) as there is no guarantee the specific version will remain available centrally on the system for as long as you want.</p> <p>When using the containers without the modules, you will have to take care of the bindings as some system files are needed for, e.g., MPI. The recommended minimal bindings are:</p> <pre><code>-B /var/spool/slurmd,/opt/cray/,/usr/lib64/libcxi.so.1\n</code></pre> <p>and the bindings you need to access the files you want to use from <code>/scratch</code>, <code>/flash</code> and/or <code>/project</code>. You can get access to your files on LUMI in the regular location by also using the bindings</p> <pre><code>-B /pfs,/scratch,/projappl,/project,/flash,/appl\n</code></pre> <p>Note that the list recommended bindings may change after a system update or between  different containers. We do try to keep the EasyBuild recipes for the modules  up-to-date though to reflect those changes.</p>","boost":10},{"location":"m/mpi4py/#further-links","title":"Further links","text":"<ul> <li>mpi4py documentation</li> </ul>","boost":10},{"location":"m/mpi4py/#singularity-containers-with-modules-for-binding-and-extras","title":"Singularity containers with modules for binding and extras","text":"<p>Install with the EasyBuild-user module in <code>partition/container</code>: <pre><code>module load LUMI partition/container EasyBuild-user\neb &lt;easyconfig&gt;\n</code></pre> The module will be available in all versions of the LUMI stack and in the CrayEnv stack.</p> <p>To access module help after installation use <code>module spider mpi4py/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig mpi4py-3.1.6-rocm-6.2.0-python-3.12-singularity-20241007.eb, will provide mpi4py/3.1.6-rocm-6.2.0-python-3.12-singularity-20241007</li> </ul>","boost":10},{"location":"m/mpi4py/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-containers - previously available singularity containerised software</p> <ul> <li> <p>EasyConfig mpi4py-3.1.4-rocm-5.4.5-python-3.10-singularity-20231110.eb, with module mpi4py/3.1.4-rocm-5.4.5-python-3.10-singularity-20231110  (with docker definition)</p> </li> <li> <p>EasyConfig mpi4py-3.1.4-rocm-5.4.5-python-3.10-singularity-20240207.eb, with module mpi4py/3.1.4-rocm-5.4.5-python-3.10-singularity-20240207</p> </li> </ul> </li> </ul>","boost":10},{"location":"m/mpiFileUtils/","title":"mpiFileUtils","text":"<p>[package list]</p>","boost":10},{"location":"m/mpiFileUtils/#mpifileutils","title":"mpiFileUtils","text":"","boost":10},{"location":"m/mpiFileUtils/#license-information","title":"License information","text":"<p>The mpiFileUtils is distributed under the BSD 3-Clause license. The license is available at the Github repository.</p>","boost":10},{"location":"m/mpiFileUtils/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider mpiFileUtils/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeAMD-23.09.eb, will build mpiFileUtils/0.11.1-cpeAMD-23.09</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeAMD-24.03.eb, will build mpiFileUtils/0.11.1-cpeAMD-24.03</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeAOCC-23.09.eb, will build mpiFileUtils/0.11.1-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeAOCC-24.03.eb, will build mpiFileUtils/0.11.1-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeCray-23.03.eb, will build mpiFileUtils/0.11.1-cpeCray-23.03</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeCray-23.09.eb, will build mpiFileUtils/0.11.1-cpeCray-23.09</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeCray-24.03.eb, will build mpiFileUtils/0.11.1-cpeCray-24.03</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeGNU-23.09.eb, will build mpiFileUtils/0.11.1-cpeGNU-23.09</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeGNU-24.03.eb, will build mpiFileUtils/0.11.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"m/mpiFileUtils/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>mpiFileUtils web site</p> <ul> <li>mpiFileUtils documentation</li> </ul> </li> <li> <p>mpiFileUtils Github</p> </li> </ul>","boost":10},{"location":"m/mpiFileUtils/#easybuild","title":"EasyBuild","text":"<ul> <li>mpiFileUtils support in the EasyBuilders repository</li> </ul>","boost":10},{"location":"m/mpiFileUtils/#version-0111","title":"Version 0.11.1","text":"<ul> <li>Custom easyconfig for LUMI</li> </ul>","boost":10},{"location":"m/mpiFileUtils/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeAMD-22.08.eb, with module mpiFileUtils/0.11.1-cpeAMD-22.08</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeAMD-22.12.eb, with module mpiFileUtils/0.11.1-cpeAMD-22.12</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeAOCC-22.08.eb, with module mpiFileUtils/0.11.1-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeAOCC-22.12.eb, with module mpiFileUtils/0.11.1-cpeAOCC-22.12</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeCray-22.08.eb, with module mpiFileUtils/0.11.1-cpeCray-22.08</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeCray-22.12.eb, with module mpiFileUtils/0.11.1-cpeCray-22.12</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeGNU-22.08.eb, with module mpiFileUtils/0.11.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig mpiFileUtils-0.11.1-cpeGNU-22.12.eb, with module mpiFileUtils/0.11.1-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"n/NAMD/","title":"NAMD","text":"<p>[package list]</p>","boost":10},{"location":"n/NAMD/#namd","title":"NAMD","text":"","boost":10},{"location":"n/NAMD/#license-information","title":"License information","text":"<p>NAMD can only be installed by users as the download requires accepting the license first. NAMD is covered by a non-exclusive, non-commercial license that can be found on the \"NAMD License\" page of the NAMD web site.</p> <p>Note that according to the LUMI Conditions of Use it is the User's responsibility to respect the software license terms. The EasyConfigs provided in the LUMI-EasyBuild-contrib repository  do not imply that you have the right to use the software on LUMI.</p> <p>The NAMD licensse aggreement also explictly requires that the use of NAMD is acknoledged in any publication or report using the citation:</p> <p>NAMD was developed by the Theoretical Biophysics Group in the Beckman   Institute for Advanced Science and Technology at the University of   Illinois at Urbana-Champaign.</p> <p>All published work should also include the following reference:</p> <p>James C. Phillips, David J. Hardy, Julio D. C. Maia, John E. Stone,   Joao V. Ribeiro, Rafael C. Bernardi, Ronak Buch, Giacomo Fiorin,   Jerome Henin, Wei Jiang, Ryan McGreevy, Marcelo C. R. Melo,   Brian K. Radak, Robert D. Skeel, Abhishek Singharoy, Yi Wang, Benoit Roux,   Aleksei Aksimentiev, Zaida Luthey-Schulten, Laxmikant V. Kale,   Klaus Schulten, Christophe Chipot, and Emad Tajkhorshid.   Scalable molecular dynamics on CPU and GPU architectures with NAMD.   Journal of Chemical Physics, 153:044130, 2020. doi:10.1063/5.0014475\"</p> <p>Electronic documents will include a direct link to the official NAMD page at http://www.ks.uiuc.edu/Research/namd/</p> <p>(The above text copied from the NAMD 2.14 license and may evolve over time!)</p>","boost":10},{"location":"n/NAMD/#user-documentation","title":"User documentation","text":"<p>NAMD requires signing up for a license before you can get access to the sources. Hence EasyBuild cannot download the sources itself and you will have to provide the source tarball to EasyBuild.</p> <p>To download and install NAMD:</p> <ol> <li> <p>Downloads can be found on the      \"Software Downloads\" page of the NAMD web site.</p> </li> <li> <p>Look for the version that corresponds with the EasyConfig version and     download via the \"Source Code\" link. This will ask you to log in and     offer you the opportunity to register if you haven't done so yet.</p> <p>You'll have to do that from your desktop.</p> </li> <li> <p>On LUMI, create a temporary directory somewhere (e.g., in your home directory)     and upload the NAMD sources to that directory.</p> <p>Alternatively you can put the sources in the <code>$EBU_USER_PREFIX/sources/n/NAMD</code> subdirectory (assuming you are using that  environment variable to point to your EasyBuild installation, otherwise this would be <code>$HOME/EasyBuild/sources/n/NAMD</code>).</p> </li> <li> <p>You're now ready to start the installation. Make sure that your EasyBuild     environment is set up properly and load the suitable <code>LUMI</code> and <code>partition</code>     modules and the <code>EasyBuild-user</code> module.</p> <p>From within the temporary directory in which you put the source tarball, run the <code>eb</code> command using the flag <code>-r .</code> which tells EasyBuild to also consider the current directory for EasyConfigs and source files. Eg.g, to install  NAMD with the <code>NAMD-2.14-cpeGNU-22.08-MPI.eb</code> recipe, execute:</p> <pre><code>eb NAMD-2.14-cpeGNU-23.09-MPI.eb -r .\n</code></pre> </li> </ol>","boost":10},{"location":"n/NAMD/#namd-with-amd-gpu-support","title":"NAMD with AMD GPU support","text":"<p>There are two specific NAMD recipes enabling support for AND GPUs. These easyconfigs allow installation of NAMD3 with different modes of GPU acceleration:</p> <ul> <li> <p>GPU offload: offloads most of the force calculations to GPU devices and runs the     other calculations on CPU; this version runs with MPI and multi-threading.</p> </li> <li> <p>GPU resident: calculates the entire dynamics calculations on GPU; this version     only works on a single GPU node with multi-threading.</p> </li> </ul> <p>For more details on GPU support please refer to the NAMD GPU Acceleration.</p>","boost":10},{"location":"n/NAMD/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider NAMD/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig NAMD-2.14-cpeGNU-23.09-MPI.eb, will build NAMD/2.14-cpeGNU-23.09-MPI</p> </li> <li> <p>EasyConfig NAMD-3.0-cpeGNU-24.03-mpi-crayshasta.eb, will build NAMD/3.0-cpeGNU-24.03-mpi-crayshasta</p> </li> <li> <p>EasyConfig NAMD-3.0-cpeGNU-24.03-ofi-crayshasta.eb, will build NAMD/3.0-cpeGNU-24.03-ofi-crayshasta</p> </li> <li> <p>EasyConfig NAMD-3.0-cpeGNU-24.03-rocm-gpu-resident.eb, will build NAMD/3.0-cpeGNU-24.03-rocm-gpu-resident</p> </li> <li> <p>EasyConfig NAMD-3.0.2-cpeGNU-24.03-rocm-gpu-offload.eb, will build NAMD/3.0.2-cpeGNU-24.03-rocm-gpu-offload</p> <p>Contains NAMD3 with GPU offload version, running with HIP using default ROCm version and GNU compilers. This version works with MPI via Charm++ smp library version with Slingshot network support.  Please refer to the NAMD documentation for specific NAMD runtime parameters and input file keywords. To enable <code>memopt</code> mode one needs to extend this recipe by adding extra line: <code>'--with-memopt',</code> to the <code>configopts</code> section below. This will imply binary compressed input.</p> </li> <li> <p>EasyConfig NAMD-3.0.2-cpeGNU-24.03-rocm-gpu-resident.eb, will build NAMD/3.0.2-cpeGNU-24.03-rocm-gpu-resident</p> <p>Contains NAMD3 with GPU resident mode enabled, running with HIP using default ROCm  version and GNU compilers. This version works multithreading only and is limited to run on a single node only. Please refer to the NAMD documentation for specific NAMD runtime parameters and input file keywords.</p> </li> <li> <p>EasyConfig NAMD-3.0b6-cpeAMD-23.09-rocm.eb, will build NAMD/3.0b6-cpeAMD-23.09-rocm</p> <p>Note that this is a beta version of NAMD 3 for GPU. As it is a beta version problems are to be expected and LUST may not be able to solve them.</p> </li> </ul>","boost":10},{"location":"n/NAMD/#technical-documentation","title":"Technical documentation","text":"<ul> <li>NAMD Website</li> </ul>","boost":10},{"location":"n/NAMD/#general-information","title":"General information","text":"<p>NAMD is a parallel molecular dynamics code designed for high-performance  simulation of large biomolecular systems. Based on Charm++ parallel objects,  NAMD scales to hundreds of cores for typical simulations and beyond 500,000  cores for the largest simulations. NAMD uses the popular molecular graphics  program VMD for simulation setup and trajectory analysis, but is also  file-compatible with AMBER, CHARMM, and X-PLOR.</p>","boost":10},{"location":"n/NAMD/#easybuild","title":"EasyBuild","text":"<ul> <li>NAMD in the EasyBuilders repository</li> <li>NAMD in the CSCS repository</li> </ul>","boost":10},{"location":"n/NAMD/#version-214-for-cpe-gnu-2108","title":"Version 2.14 for CPE GNU 21.08","text":"<ul> <li>The EasyConfig is derived from the CSCS one</li> </ul>","boost":10},{"location":"n/NAMD/#version-30b6-gpu-resident-for-cpe-amd-2309","title":"Version 3.0b6 GPU resident for CPE AMD 23.09","text":"<ul> <li>Works with a single node runs only - uses multicore Charm++ runtime (no MPI)</li> <li>Beta release of the code</li> <li>Uses ROCm 5.6.1 not fully supported with CPE 23.09 </li> </ul>","boost":10},{"location":"n/NAMD/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig NAMD-2.14-cpeGNU-21.08-MPI.eb, with module NAMD/2.14-cpeGNU-21.08-MPI</p> </li> <li> <p>EasyConfig NAMD-2.14-cpeGNU-21.12-MPI.eb, with module NAMD/2.14-cpeGNU-21.12-MPI</p> </li> <li> <p>EasyConfig NAMD-2.14-cpeGNU-22.08-MPI.eb, with module NAMD/2.14-cpeGNU-22.08-MPI</p> </li> </ul> </li> </ul>","boost":10},{"location":"n/NCO/","title":"NCO","text":"<p>[package list]</p>","boost":10},{"location":"n/NCO/#nco","title":"NCO","text":"","boost":10},{"location":"n/NCO/#license-information","title":"License information","text":"<p>NCO is distributed under a  BSD 3-Clause License, a copy of which can also be found in the COPYING file in the source repository. Further copyright information can be found in the COPYRIGHT file in that same repository.</p> <p>Suggested citations for users of NCO can be found in the CITATION file in the source repository.</p> <p>From version 5.1.5 on, these files can also be found after installation and loading of the module in the directory <code>$EBROOTNCO/share/licenses/NCO</code>.</p>","boost":10},{"location":"n/NCO/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider NCO/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig NCO-5.1.5-cpeCray-23.03.eb, will build NCO/5.1.5-cpeCray-23.03</p> </li> <li> <p>EasyConfig NCO-5.1.8-cpeCray-23.09.eb, will build NCO/5.1.8-cpeCray-23.09</p> </li> <li> <p>EasyConfig NCO-5.1.8-cpeGNU-23.09.eb, will build NCO/5.1.8-cpeGNU-23.09</p> </li> <li> <p>EasyConfig NCO-5.2.7-cpeCray-24.03.eb, will build NCO/5.2.7-cpeCray-24.03</p> </li> <li> <p>EasyConfig NCO-5.2.7-cpeGNU-24.03.eb, will build NCO/5.2.7-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"n/NCO/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>NCO on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"n/NCO/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>NCO support in the EasyBuilders repository</p> </li> <li> <p>NCO support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"n/NCO/#version-501-for-cpe-2108","title":"Version 5.01 for CPE 21.08","text":"<ul> <li> <p>The EasyConfig is a mix of the CSCS and EasyBuilder ones, the latter having     more dependencies and hence supporting more options.</p> </li> <li> <p>For now we disable udunits2 as configure is complaining that udunits2 misses     some XML data files.</p> </li> <li> <p>The EasyBuilders recipe claims ESMF is needed but it is nowhere linked into the     code so that dependency is omitted.</p> </li> </ul>","boost":10},{"location":"n/NCO/#506-for-cpe-2112","title":"5.0.6 for CPE 21.12","text":"<ul> <li> <p>Needed to compile with cray-libsci unloaded as that causes crashes.</p> </li> <li> <p>The cpeAOCC version had problems initially due to the faulty aocc/3.1.0 module,     requiring a further fix to cpeAOCC/21.12 to make the cray-hdf5 module available.</p> </li> <li> <p>Note that at inspection of the log file you will see that the configure command     complains that the XML data file is not found. This is because the test is wrong,     not because the installation is wrong, as the test only looks in some fixed locations     on the system that assume that UDUNITS-2 is installed in the system directories.</p> </li> </ul>","boost":10},{"location":"n/NCO/#version-510-for-cpe-2206-and-2208","title":"Version 5.1.0 for CPE 22.06 and 22.08","text":"<ul> <li>This is a trivial port of the 5.0.6 one.</li> </ul>","boost":10},{"location":"n/NCO/#version-515-for-cpe-2212-and-2303","title":"Version 5.1.5 for CPE 22.12 and 23.03","text":"<ul> <li> <p>This is a trivial port of the 5.1.5 one.</p> </li> <li> <p>Added license and citation information files to the installation.</p> </li> </ul>","boost":10},{"location":"n/NCO/#version-518-from-cpe-2309-on","title":"Version 5.1.8 from CPE 23.09 on","text":"<ul> <li>Trivial version bump of the EasyConfig for version 5.1.5</li> </ul>","boost":10},{"location":"n/NCO/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig NCO-5.0.1-cpeCray-21.08.eb, with module NCO/5.0.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig NCO-5.0.1-cpeGNU-21.08.eb, with module NCO/5.0.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig NCO-5.0.6-cpeAOCC-21.12.eb, with module NCO/5.0.6-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig NCO-5.0.6-cpeCray-21.12.eb, with module NCO/5.0.6-cpeCray-21.12</p> </li> <li> <p>EasyConfig NCO-5.0.6-cpeGNU-21.12.eb, with module NCO/5.0.6-cpeGNU-21.12</p> </li> <li> <p>EasyConfig NCO-5.1.0-cpeCray-22.06.eb, with module NCO/5.1.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig NCO-5.1.0-cpeCray-22.08.eb, with module NCO/5.1.0-cpeCray-22.08</p> </li> <li> <p>EasyConfig NCO-5.1.0-cpeGNU-22.06.eb, with module NCO/5.1.0-cpeGNU-22.06</p> </li> <li> <p>EasyConfig NCO-5.1.0-cpeGNU-22.08.eb, with module NCO/5.1.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig NCO-5.1.5-cpeCray-22.12.eb, with module NCO/5.1.5-cpeCray-22.12</p> </li> <li> <p>EasyConfig NCO-5.1.5-cpeGNU-22.12.eb, with module NCO/5.1.5-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"n/NWChem/","title":"NWChem","text":"<p>[package list]</p>","boost":10},{"location":"n/NWChem/#nwchem","title":"NWChem","text":"","boost":10},{"location":"n/NWChem/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig NWChem-7.0.2-cpeGNU-21.08.eb, with module NWChem/7.0.2-cpeGNU-21.08</li> </ul> </li> </ul>","boost":10},{"location":"n/Nek5000/","title":"Nek5000","text":"<p>[package list]</p>","boost":10},{"location":"n/Nek5000/#nek5000","title":"Nek5000","text":"","boost":10},{"location":"n/Nek5000/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig Nek5000-19.0-cpeGNU-21.12.eb, with module Nek5000/19.0-cpeGNU-21.12</li> </ul> </li> </ul>","boost":10},{"location":"n/Neko/","title":"Neko","text":"<p>[package list]</p>","boost":10},{"location":"n/Neko/#neko","title":"Neko","text":"","boost":10},{"location":"n/Neko/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Neko/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Neko-0.8.1-cpeCray-24.03-rocm.eb, will build Neko/0.8.1-cpeCray-24.03-rocm</p> </li> <li> <p>EasyConfig Neko-0.8.1-cpeGNU-24.03-rocm.eb, will build Neko/0.8.1-cpeGNU-24.03-rocm</p> </li> </ul>","boost":10},{"location":"n/Neko/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Neko Website</li> </ul>","boost":10},{"location":"n/Neko/#general-information","title":"General information","text":"<p>Neko is a portable framework for high-order spectral element flow simulations.  Written in modern Fortran, Neko adopts an object-oriented approach, allowing  multi-tier abstractions of the solver stack and facilitating various hardware  backends ranging from general-purpose processors, CUDA and HIP enabled accelerators.</p>","boost":10},{"location":"n/Neko/#version-081-for-cpe-gnu-and-cpe-cray-2403","title":"Version 0.8.1 for CPE GNU and CPE Cray 24.03","text":"<ul> <li> <p>Recipe for the GNU toolchain is only tested for single node runs; there is an issue      with device buffers on multiple nodes for this version</p> </li> <li> <p>Recipes are tested agains ROCm release 6.0.3</p> </li> </ul>","boost":10},{"location":"n/Nextflow/","title":"Nextflow","text":"<p>[package list]</p>","boost":10},{"location":"n/Nextflow/#nextflow","title":"Nextflow","text":"","boost":10},{"location":"n/Nextflow/#license-information","title":"License information","text":"<p>Nextflow is currently licensed under the  Apache License version 2.0, a copy of which can also be found in the COPYING file in the Nextflow GitHub repository.</p> <p>More copyright notices for software used by Nextflow can be found in the NOTICE file in the Nextflow GitHub repository.</p> <p>Note that Nextflow should be cited in your papers if you use Nextflow in your research, with more information available in the  \"Citations\" section of the README file in the Nextflow GitHub.</p>","boost":10},{"location":"n/Nextflow/#user-documentation","title":"User documentation","text":"<ul> <li> <p>Nextflow web site</p> </li> <li> <p>Nextflow documentation</p> </li> <li> <p>CSC Nextflow documentation (and pointer to a module in the local     software stack of CSC)</p> </li> </ul>","boost":10},{"location":"n/Nextflow/#general-information","title":"General Information","text":"<p>Nextflow is a workflow system for creating scalable, portable and reproducible workflows. It is based on the dataflow programming model, which greatly simplifies the writing of parallel and distributed pipelines, allowing you to focus on the flow of data and computation. Nextflow can deploy workflows on a variety of execution platforms, including your local machine, HPC schedulers, AWS Batch, Azure Batch, Google cloud Batch, and Kubernetes. It also supports many ways to manage your software dependencies, including Conda, Spack, Docker, Podman, Singularity, and more.</p>","boost":10},{"location":"n/Nextflow/#installing-nextflow","title":"Installing Nextflow","text":"<p>Nextflow needs Java, but Java is already installed in the system image on LUMI. Other versions of Java can be installed via the  LUMI Software Library, but keep in mind that some Java packages may still select the system one over the one installed as a module.</p> <p>Nextflow is not very well suited for traditional package managers as it tends to write in its own directories (trying to update itself) and also puts part of the installation in the <code>~/.nextflow</code> subdirectory of your home directory so any central installation is also incomplete. However, installation instructions that should work on LUMI are easily found in the  Nextflow documentation, \"Installation section\".</p> <p>Assuming an installation in the directory <code>/project/project-46YXXXXXX/software</code>, the following worked at the time of writing:</p> <ul> <li> <p>Install Nextflow</p> <p><pre><code>cd /project/project-46YXXXXXX/software\n\ncurl -s https://get.nextflow.io | bash\n</code></pre> This will create the <code>nextflow</code> executable in the current directory.</p> <p>It will however also download a lot of files that will be stored in the hidden directory <code>~/.nextflow</code> (in your home directory) so it will eat from  your quota and you may have to move that directory to a different filesystem and link to it if it becomes too large!</p> </li> <li> <p>Make Nextflow executable</p> <pre><code>chmod +x nextflow\n</code></pre> </li> <li> <p>Set the executable path for using Nextflow.</p> <p>Note: You will also need to set the path in the bash script that you use to submit the job</p> <pre><code>export PATH=/project/project-46YXXXXXX/software:$PATH\n</code></pre> </li> <li> <p>Confirm that Nextflow is installed correctly</p> <pre><code>nextflow info\n</code></pre> </li> </ul> <p>Note that if you use the CSC-provided module, the <code>nextflow</code> command will still trigger the download of a lot of files to the hidden directory <code>~/.nextflow</code> (in your home directory) so it will eat from  your quota and you may have to move that directory to a different filesystem and link to it if it becomes too large!</p>","boost":10},{"location":"n/Nextflow/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Nextflow web site</p> </li> <li> <p>Nextflow documentation</p> </li> <li> <p>Nextflow on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"n/Nextflow/#what-is-the-problem","title":"What is the problem?","text":"<p>The problem with Nextflow is that even though it claims to install Nextflow, it really only installs a small shell script while other components are downloaded and put  outside the installation directory, typically in <code>~/.nextflow</code>. Hence what claims to be a central installation really is not. It is also not clear how reproducible these downloads are: Are they version-specific or are some or all of those packages always the newest version?</p>","boost":10},{"location":"n/nano/","title":"nano","text":"<p>[package list]</p>","boost":10},{"location":"n/nano/#nano","title":"nano","text":"","boost":10},{"location":"n/nano/#license-information","title":"License information","text":"<p>Nano's code and documentation are covered by the  GNU General Public License version 3 or (at your option) any later version, except for two functions that were copied from busybox which are under a BSD license.</p> <p>More information is available in the README COPYING and COPYING.DOC files in the source repository.</p>","boost":10},{"location":"n/nano/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider nano/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>nano/6.4 (EasyConfig: nano-6.4.eb)</p> </li> <li> <p>nano/7.2 (EasyConfig: nano-7.2.eb)</p> </li> <li> <p>nano/8.0 (EasyConfig: nano-8.0.eb)</p> </li> </ul>","boost":10},{"location":"n/nano/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>nano web site</p> <ul> <li> <p>Latest version downloads</p> </li> <li> <p>Download archives</p> </li> </ul> </li> <li> <p>nano on Savannah git</p> </li> </ul>","boost":10},{"location":"n/nano/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for nano in the EasyBuilders repository is archived</p> </li> <li> <p>Sopport for nano in the CSCS repository</p> </li> </ul>","boost":10},{"location":"n/nano/#nano-59-for-lumi2108-and-later","title":"nano 5.9 for LUMI/21.08 and later","text":"<ul> <li> <p>Nano is a typical tool to compile using the SYSTEM toolchain. It does     however require the header files for ncurses which were missing in the     initial setup of LUMI.</p> </li> <li> <p>Hence we developed new EasyConfig files that uses a ncurses module</p> </li> </ul>","boost":10},{"location":"n/nano/#nano-62-for-lumi2112-and-later","title":"nano 6.2 for LUMI/21.12 and later","text":"<ul> <li>A trivial port of the 5.9 one. No new options were added to the EasyConfig.</li> </ul>","boost":10},{"location":"n/nano/#nano-63-for-lumi2206-and-later","title":"nano 6.3 for LUMI/22.06 and later","text":"<ul> <li>A trivial upgrade from 6.2. No new options were added to the EasyConfig.</li> </ul>","boost":10},{"location":"n/nano/#nano-64-for-lumi2208-and-later","title":"nano 6.4 for LUMI/22.08 and later","text":"<ul> <li>A trivial upgrade from 6.3. No new options were added to the EasyConfig.</li> </ul>","boost":10},{"location":"n/nano/#nano-72-for-221123032309","title":"nano 7.2 for 22.11/23.03/23.09","text":"<ul> <li>Trivial version bump from 6.4, but we did explicitly enable posix threading     even though that seems to be the default.</li> </ul>","boost":10},{"location":"n/nano/#nano-80-for-2312-and-2403","title":"nano 8.0 for 23.12 and 24.03","text":"<ul> <li>Trivial version bump from 7.2.</li> </ul>","boost":10},{"location":"n/nano/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig nano-5.9.eb, with module nano/5.9</p> </li> <li> <p>EasyConfig nano-6.2.eb, with module nano/6.2</p> </li> <li> <p>EasyConfig nano-6.3.eb, with module nano/6.3</p> </li> </ul> </li> </ul>","boost":10},{"location":"n/ncurses/","title":"ncurses","text":"<p>[package list]</p>","boost":10},{"location":"n/ncurses/#ncurses","title":"ncurses","text":"","boost":10},{"location":"n/ncurses/#license-information","title":"License information","text":"<p>The ncurses license has a complicated history of changes. For recent versions, the license notice can be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the COPYING file can also be found in the <code>$EBROOTNCURSES/share/licenses/ncurses</code> directory after loading the module.</p>","boost":10},{"location":"n/ncurses/#user-documentation","title":"User documentation","text":"<p>This module has known incompatibilities with some tools that come with SUSE Linux, but we fail to find a proper solution to build <code>ncurses</code> in a way that is fully compatible with SUSE Linux. The problem is that the SUSE <code>ncurses</code> library contains some versioned symbols for ancient or nonstandard versions of <code>ncurses</code> that is not  included when building more recent regular versions.</p> <p>One application that fails is the <code>gdb</code> command. A workaround for this command is to start it as</p> <pre><code>LD_PRELOAD=/lib64/libncursesw.so.6 gdb\n</code></pre>","boost":10},{"location":"n/ncurses/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider ncurses/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>ncurses/6.2-cpeAMD-22.08 (EasyConfig: ncurses-6.2-cpeAMD-22.08.eb)</p> </li> <li> <p>ncurses/6.2-cpeAOCC-22.08 (EasyConfig: ncurses-6.2-cpeAOCC-22.08.eb)</p> </li> <li> <p>ncurses/6.2-cpeCray-22.08 (EasyConfig: ncurses-6.2-cpeCray-22.08.eb)</p> </li> <li> <p>ncurses/6.2-cpeGNU-22.08 (EasyConfig: ncurses-6.2-cpeGNU-22.08.eb)</p> </li> <li> <p>ncurses/6.4-cpeAMD-22.12 (EasyConfig: ncurses-6.4-cpeAMD-22.12.eb)</p> </li> <li> <p>ncurses/6.4-cpeAMD-23.09 (EasyConfig: ncurses-6.4-cpeAMD-23.09.eb)</p> </li> <li> <p>ncurses/6.4-cpeAMD-23.12 (EasyConfig: ncurses-6.4-cpeAMD-23.12.eb)</p> </li> <li> <p>ncurses/6.4-cpeAMD-24.03 (EasyConfig: ncurses-6.4-cpeAMD-24.03.eb)</p> </li> <li> <p>ncurses/6.4-cpeAOCC-22.12 (EasyConfig: ncurses-6.4-cpeAOCC-22.12.eb)</p> </li> <li> <p>ncurses/6.4-cpeAOCC-23.09 (EasyConfig: ncurses-6.4-cpeAOCC-23.09.eb)</p> </li> <li> <p>ncurses/6.4-cpeAOCC-23.12 (EasyConfig: ncurses-6.4-cpeAOCC-23.12.eb)</p> </li> <li> <p>ncurses/6.4-cpeAOCC-24.03 (EasyConfig: ncurses-6.4-cpeAOCC-24.03.eb)</p> </li> <li> <p>ncurses/6.4-cpeCray-22.12 (EasyConfig: ncurses-6.4-cpeCray-22.12.eb)</p> </li> <li> <p>ncurses/6.4-cpeCray-23.03 (EasyConfig: ncurses-6.4-cpeCray-23.03.eb)</p> </li> <li> <p>ncurses/6.4-cpeCray-23.09 (EasyConfig: ncurses-6.4-cpeCray-23.09.eb)</p> </li> <li> <p>ncurses/6.4-cpeCray-23.12 (EasyConfig: ncurses-6.4-cpeCray-23.12.eb)</p> </li> <li> <p>ncurses/6.4-cpeCray-24.03 (EasyConfig: ncurses-6.4-cpeCray-24.03.eb)</p> </li> <li> <p>ncurses/6.4-cpeGNU-22.12 (EasyConfig: ncurses-6.4-cpeGNU-22.12.eb)</p> </li> <li> <p>ncurses/6.4-cpeGNU-23.09 (EasyConfig: ncurses-6.4-cpeGNU-23.09.eb)</p> </li> <li> <p>ncurses/6.4-cpeGNU-23.12 (EasyConfig: ncurses-6.4-cpeGNU-23.12.eb)</p> </li> <li> <p>ncurses/6.4-cpeGNU-24.03 (EasyConfig: ncurses-6.4-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"n/ncurses/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GNU ncurses library web page</p> </li> <li> <p>ncurses download from the GNU download site</p> </li> </ul>","boost":10},{"location":"n/ncurses/#easybuild","title":"EasyBuild","text":"<ul> <li>Regular EasyBuild support</li> <li>CSCS EasyConfigs</li> </ul>","boost":10},{"location":"n/ncurses/#62-from-2106-on","title":"6.2 from 21.06 on","text":"<ul> <li> <p>We started from the regular EasyBuild configuration that does a dual pass     build of ncurses to also build a version of the library with more/different     options. We made this choice to ensure maximal compatibility with EasyConfigs     from the main EasyBuild repository.</p> </li> <li> <p>We also generate files for pkg-config, something that the original EasyConfig     files didn't do.</p> </li> <li> <p>There is a more complete setup in comments in the EasyConfig file but that one     is probably even more dangerous as bash will pick it up, so there is a risk     that the shell may not work the way it should anymore if a new shell is loaded.</p> </li> </ul>","boost":10},{"location":"n/ncurses/#62-from-2206-on","title":"6.2 from 22.06 on","text":"<ul> <li> <p>We stuck to 6.2 as there is a bug in the generation of .pc files in 6.3. It is     impossible to put the files in the correct location: The comibnation of      <code>--enable-pc-files</code> and <code>--with-pkg-config-libdir</code> produces problems in     the configure step.</p> </li> <li> <p>Improvements:</p> <ul> <li> <p>Added a checksum</p> </li> <li> <p>Added some symbolic links that are used in the standard EasyBuilders EasyConfig.</p> </li> </ul> </li> </ul>","boost":10},{"location":"n/ncurses/#64-from-2212-on","title":"6.4 from 22.12 on","text":"<ul> <li> <p>Skipped 6.3 used in 2022b and went immediately for 6.4 as it fixes the bug      in the configure process of 6.3 when <code>--enable-pc-files</code> and <code>--with-pkg-config-libdir</code>     are used together.</p> </li> <li> <p>Tried a few new options in the EasyConfig.</p> </li> <li> <p>Did not succeed in solving the compatibility problem with the <code>gdb</code> from SUSE when      working on LUMI/22.12.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> <p>The behaviour of the linker has changed in the Cray compiler and it now produces an error if the version script defines versions for symbols with exact matches that are not present. So we needed to add <code>-Wl,--undefined-version</code> to the linker options to work around this issue.</p> <p>We also did further work on trying to figure out how to get the proper version symbols in the libraries. We are now using a different set of options and also dropped the application-specific EasyBlock as that only added stuff in the background which is misleading while experimenting. The problem appears to be that NCURSEST/NCURSESTW symbols are used in the SUSE libraries, which should stand for the threaded version, yet the libraries have the names of the unthreaded versions, so it looks like some renaming may have taken place.</p> <p>We have tried with <code>--enable-weak-symbols</code> which should not add the <code>t</code> to the file name but haven't gotten it to work yet. It may need some special flags for the compiler and/or linker to work as expected.</p> </li> </ul>","boost":10},{"location":"n/ncurses/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig ncurses-6.2-cpeAMD-21.06.eb, with module ncurses/6.2-cpeAMD-21.06</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeAOCC-21.12.eb, with module ncurses/6.2-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeAOCC-22.06.eb, with module ncurses/6.2-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeCray-21.06.eb, with module ncurses/6.2-cpeCray-21.06</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeCray-21.08.eb, with module ncurses/6.2-cpeCray-21.08</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeCray-21.12.eb, with module ncurses/6.2-cpeCray-21.12</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeCray-22.06.eb, with module ncurses/6.2-cpeCray-22.06</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeGNU-21.06.eb, with module ncurses/6.2-cpeGNU-21.06</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeGNU-21.08.eb, with module ncurses/6.2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeGNU-21.12.eb, with module ncurses/6.2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig ncurses-6.2-cpeGNU-22.06.eb, with module ncurses/6.2-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"n/ncview/","title":"ncview","text":"<p>[package list]</p>","boost":10},{"location":"n/ncview/#ncview","title":"ncview","text":"","boost":10},{"location":"n/ncview/#license-information","title":"License information","text":"<p>Ncview is currently licensed under the  GNU General Pulbic License version 3.</p>","boost":10},{"location":"n/ncview/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ncview/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig ncview-2.1.9-cpeAOCC-23.09.eb, will build ncview/2.1.9-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig ncview-2.1.9-cpeAOCC-24.03.eb, will build ncview/2.1.9-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig ncview-2.1.9-cpeCray-23.09.eb, will build ncview/2.1.9-cpeCray-23.09</p> </li> <li> <p>EasyConfig ncview-2.1.9-cpeCray-24.03.eb, will build ncview/2.1.9-cpeCray-24.03</p> </li> <li> <p>EasyConfig ncview-2.1.9-cpeGNU-23.09.eb, will build ncview/2.1.9-cpeGNU-23.09</p> </li> <li> <p>EasyConfig ncview-2.1.9-cpeGNU-24.03.eb, will build ncview/2.1.9-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"n/ncview/#technical-documentation","title":"Technical documentation","text":"<p>Ncview is a visual browser for netCDF format files. Typically you would use ncview to get a quick and easy, push-button look at your netCDF files. You can view simple movies of the data, view along various dimensions, take a look at the actual data values, change color maps, invert the data, etc.</p> <ul> <li> <p>ncview web site</p> </li> <li> <p>ncview download via ftp - may contain     versions that are newer than those discussed on the home page</p> </li> </ul> <p>The 2.1.8 release dates from 2017 and as of September 2021 there haven't been any further releases. Hence there is no guarantee that this package can be supported in the future as it may become incompatible with newer versions of libraries that it uses.</p>","boost":10},{"location":"n/ncview/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ncview in the EasyBuilders repository</p> </li> <li> <p>ncview in the CSCS repostory</p> </li> </ul>","boost":10},{"location":"n/ncview/#version-218-for-the-cpe-2108","title":"Version 2.1.8 for the CPE 21.08","text":"<ul> <li>The EasyConfig is a mix of the CSCS and default EasyBuilders one (as the latter     had a more complete list of dependencies), and with some additional documentation     added.</li> </ul>","boost":10},{"location":"n/ncview/#version-218-for-cpe-2112-2206-2208-2212","title":"Version 2.1.8 for CPE 21.12, 22.06, 22.08, 22.12","text":"<ul> <li>Switched the download location to fossies.org      to avoid having to use FTP.</li> <li>(2023-09-14): Switched back to FTP as the fossie URL is not longer valid </li> </ul>","boost":10},{"location":"n/ncview/#version-219-from-2309-on","title":"Version 2.1.9 from 23.09 on","text":"<ul> <li>Trivial port of the EasyConfig except that the download link has changed again.</li> </ul>","boost":10},{"location":"n/ncview/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig ncview-2.1.8-cpeAOCC-21.12.eb, with module ncview/2.1.8-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeAOCC-22.08.eb, with module ncview/2.1.8-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeAOCC-22.12.eb, with module ncview/2.1.8-cpeAOCC-22.12</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeCray-21.08.eb, with module ncview/2.1.8-cpeCray-21.08</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeCray-21.12.eb, with module ncview/2.1.8-cpeCray-21.12</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeCray-22.06.eb, with module ncview/2.1.8-cpeCray-22.06</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeCray-22.08.eb, with module ncview/2.1.8-cpeCray-22.08</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeCray-22.12.eb, with module ncview/2.1.8-cpeCray-22.12</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeGNU-21.08.eb, with module ncview/2.1.8-cpeGNU-21.08</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeGNU-21.12.eb, with module ncview/2.1.8-cpeGNU-21.12</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeGNU-22.06.eb, with module ncview/2.1.8-cpeGNU-22.06</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeGNU-22.08.eb, with module ncview/2.1.8-cpeGNU-22.08</p> </li> <li> <p>EasyConfig ncview-2.1.8-cpeGNU-22.12.eb, with module ncview/2.1.8-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"n/nlohmann-json/","title":"nlohmann-json","text":"<p>[package list]</p>","boost":10},{"location":"n/nlohmann-json/#nlohmann-json","title":"nlohmann-json","text":"","boost":10},{"location":"n/nlohmann-json/#license-information","title":"License information","text":"<p>The nlohmann-json class is licensed under the MIT License. The license can also be found on the  \"License\" page of the project web site which also contains additional information about liciensing of components used from elsewhere.</p> <p>See also the \"License\" section of the README in the GitHub repository, LICENSE.MIT file in that repository and the LICENSES subdirectory for other licenses.</p> <p>After loading the module, the <code>LICENSE.MIT</code> file can also be found in the directory <code>$EBROOTNLOHMANNMINJSON/share/licenses/nlohmann-json</code>. </p>","boost":10},{"location":"n/nlohmann-json/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider nlohmann-json/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>nlohmann-json/3.11.3-cpeAMD-23.12 (EasyConfig: nlohmann-json-3.11.3-cpeAMD-23.12.eb)</p> </li> <li> <p>nlohmann-json/3.11.3-cpeAMD-24.03 (EasyConfig: nlohmann-json-3.11.3-cpeAMD-24.03.eb)</p> </li> <li> <p>nlohmann-json/3.11.3-cpeAOCC-23.12 (EasyConfig: nlohmann-json-3.11.3-cpeAOCC-23.12.eb)</p> </li> <li> <p>nlohmann-json/3.11.3-cpeAOCC-24.03 (EasyConfig: nlohmann-json-3.11.3-cpeAOCC-24.03.eb)</p> </li> <li> <p>nlohmann-json/3.11.3-cpeCray-23.12 (EasyConfig: nlohmann-json-3.11.3-cpeCray-23.12.eb)</p> </li> <li> <p>nlohmann-json/3.11.3-cpeCray-24.03 (EasyConfig: nlohmann-json-3.11.3-cpeCray-24.03.eb)</p> </li> <li> <p>nlohmann-json/3.11.3-cpeGNU-23.12 (EasyConfig: nlohmann-json-3.11.3-cpeGNU-23.12.eb)</p> </li> <li> <p>nlohmann-json/3.11.3-cpeGNU-24.03 (EasyConfig: nlohmann-json-3.11.3-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"n/nlohmann-json/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider nlohmann-json/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig nlohmann-json-3.11.2-cpeGNU-23.09.eb, will build nlohmann-json/3.11.2-cpeGNU-23.09</li> </ul>","boost":10},{"location":"n/nlohmann-json/#technical-documentation-central-installation","title":"Technical documentation (central installation)","text":"<ul> <li> <p>nlohmann-json web site</p> </li> <li> <p>nlohmann-json on Github</p> </li> </ul>","boost":10},{"location":"n/nlohmann-json/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>No nlohmann-json support in the EasyBuilders repository</p> </li> <li> <p>No nlohmann-json support in the CSCS repository</p> </li> <li> <p>nlohmann-json support in the JSC repository</p> </li> </ul>","boost":10},{"location":"n/nlohmann-json/#version-3104-for-cpe-2208","title":"Version 3.10.4 for CPE 22.08","text":"<ul> <li>Based on the JSC easyconfig</li> </ul>","boost":10},{"location":"n/nlohmann-json/#version-3112-for-cpe-2212-and-2309","title":"Version 3.11.2 for CPE 22.12 and 23.09","text":"<ul> <li>Based on the JSC easyconfig</li> </ul>","boost":10},{"location":"n/nlohmann-json/#version-3113-from-cpe-2312-on","title":"Version 3.11.3 from CPE 23.12 on","text":"<ul> <li> <p>Moved to the LUMI-SoftwareStack repository from LUMI-EasyBuild-contributed as     it is needed to build another library that is in the main software stack.</p> </li> <li> <p>Had to move to 3.11.3 already in 23.12 rather than following the 2023a EasyBuild     release as 3.11.2 did not compile with the Cray compiler.</p> </li> </ul>","boost":10},{"location":"n/nlohmann-json/#technical-documentation-user-easybuild-installation","title":"Technical documentation (user EasyBuild installation)","text":"<ul> <li> <p>nlohmann-json web site</p> </li> <li> <p>nlohmann-json on Github</p> </li> </ul>","boost":10},{"location":"n/nlohmann-json/#easybuild_1","title":"EasyBuild","text":"<ul> <li> <p>No nlohmann-json support in the EasyBuilders repository</p> </li> <li> <p>No nlohmann-json support in the CSCS repository</p> </li> <li> <p>nlohmann-json support in the JSC repository</p> </li> </ul>","boost":10},{"location":"n/nlohmann-json/#version-3104-for-cpe-2208_1","title":"Version 3.10.4 for CPE 22.08","text":"<ul> <li>Based on the JSC easyconfig</li> </ul>","boost":10},{"location":"n/nlohmann-json/#version-3112-for-cpe-2212-and-2309_1","title":"Version 3.11.2 for CPE 22.12 and 23.09","text":"<ul> <li>Based on the JSC easyconfig</li> </ul>","boost":10},{"location":"n/nlohmann-json/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig nlohmann-json-3.10.4-cpeGNU-22.08.eb, with module nlohmann-json/3.10.4-cpeGNU-22.08</p> </li> <li> <p>EasyConfig nlohmann-json-3.11.2-cpeGNU-22.12.eb, with module nlohmann-json/3.11.2-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"n/nvtop/","title":"nvtop","text":"<p>[package list]</p>","boost":10},{"location":"n/nvtop/#nvtop","title":"nvtop","text":"","boost":10},{"location":"n/nvtop/#license-information","title":"License information","text":"<p>nvtop is licensed under the GPL version 3 license.</p>","boost":10},{"location":"n/nvtop/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider nvtop/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig nvtop-3.0.2.eb, will build nvtop/3.0.2</li> </ul>","boost":10},{"location":"n/nvtop/#technical-documentation","title":"Technical documentation","text":"<ul> <li>nvtop on Github</li> </ul>","boost":10},{"location":"n/nvtop/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>nvtop support in the EasyBuilders repository</p> </li> <li> <p>nvtop support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"n/nvtop/#version-302","title":"Version 3.0.2","text":"<ul> <li>Easyconfig created for LUMI</li> </ul>","boost":10},{"location":"o/OPARI2/","title":"OPARI2","text":"<p>[package list]</p>","boost":10},{"location":"o/OPARI2/#opari2","title":"OPARI2","text":"","boost":10},{"location":"o/OPARI2/#license-information","title":"License information","text":"<p>OPARI2 is available under the 3-clause BSD Open Source license.</p> <p>From version 2.0.9 on, the license information can also be found in <code>$EBROOTOPARI2/share/licenses/OPARI2</code> after installing and loading the module.</p>","boost":10},{"location":"o/OPARI2/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider OPARI2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig OPARI2-2.0.8-cpeAMD-23.09.eb, will build OPARI2/2.0.8-cpeAMD-23.09</p> </li> <li> <p>EasyConfig OPARI2-2.0.8-cpeAMD-24.03.eb, will build OPARI2/2.0.8-cpeAMD-24.03</p> </li> <li> <p>EasyConfig OPARI2-2.0.8-cpeAOCC-23.09.eb, will build OPARI2/2.0.8-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig OPARI2-2.0.8-cpeAOCC-24.03.eb, will build OPARI2/2.0.8-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig OPARI2-2.0.8-cpeCray-23.09.eb, will build OPARI2/2.0.8-cpeCray-23.09</p> </li> <li> <p>EasyConfig OPARI2-2.0.8-cpeCray-24.03.eb, will build OPARI2/2.0.8-cpeCray-24.03</p> </li> <li> <p>EasyConfig OPARI2-2.0.8-cpeGNU-23.09.eb, will build OPARI2/2.0.8-cpeGNU-23.09</p> </li> <li> <p>EasyConfig OPARI2-2.0.8-cpeGNU-24.03.eb, will build OPARI2/2.0.8-cpeGNU-24.03</p> </li> <li> <p>EasyConfig OPARI2-2.0.9-cpeAMD-24.03.eb, will build OPARI2/2.0.9-cpeAMD-24.03</p> </li> <li> <p>EasyConfig OPARI2-2.0.9-cpeAOCC-24.03.eb, will build OPARI2/2.0.9-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig OPARI2-2.0.9-cpeCray-24.03.eb, will build OPARI2/2.0.9-cpeCray-24.03</p> </li> <li> <p>EasyConfig OPARI2-2.0.9-cpeGNU-24.03.eb, will build OPARI2/2.0.9-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"o/OPARI2/#technical-documentation","title":"Technical documentation","text":"<ul> <li>OPARI2 web site</li> </ul> <p>OPARI2, the successor of Forschungszentrum J\u00fclich's OPARI, is a source-to-source  instrumentation tool for OpenMP and hybrid codes. It surrounds OpenMP directives  and runtime library calls with calls to the POMP2 measurement interface.  The POMP2 interface can be implemented by tool builders who want, for example,  to monitor the performance of OpenMP applications. Like its predecessor,  OPARI2 works with Fortran, C, and C++ programs. Additional features compared to  OPARI are a new initialization method that allows for multi-directory and parallel  builds as well as the usage of pre-instrumented libraries. Furthermore, an efficient  way of tracking parent-child thread-relationships was added. Additionally OPARI2 was  extended to support instrumentation of OpenMP 3.0 tied tasks. OPARI is used by many  performance analysis tools (e.g. TAU, ompP, KOJAK, Scalasca, VampirTrace) whereas  OPARI2 is currently used by Score-P and TAU.</p>","boost":10},{"location":"o/OPARI2/#easybuild-support","title":"EasyBuild support","text":"<ul> <li> <p>OPARI2 support in the EasyBuilders repository</p> </li> <li> <p>OPARI2 support in the CSCS repository</p> </li> <li> <p>OPARI2 support in the JSC repository</p> </li> </ul>","boost":10},{"location":"o/OPARI2/#version-208-for-cpe-2309","title":"Version 2.0.8 for CPE 23.09","text":"<ul> <li>The EasyConfig was prepared by Jan Andr\u00e9 Reuter of JSC based on EasyConfigs in use     at JSC.</li> </ul>","boost":10},{"location":"o/OSU-Micro-Benchmarks/","title":"OSU-Micro-Benchmarks","text":"<p>[package list]</p>","boost":10},{"location":"o/OSU-Micro-Benchmarks/#osu-micro-benchmarks","title":"OSU-Micro-Benchmarks","text":"","boost":10},{"location":"o/OSU-Micro-Benchmarks/#license-information","title":"License information","text":"<p>The OSU micro-benchmarks are made available under a BSD license.</p> <p>After loading the module, a copy of this license is also available in the COPYRIGHT file in <code>$EBROOTOSUMINMICROMINBENCHMARKS/share/licenses/OSU-Micro-Benchmarks</code>.</p>","boost":10},{"location":"o/OSU-Micro-Benchmarks/#user-documentation","title":"User documentation","text":"<p>These benchmarks are mostly provided for users who want to experiment with Open MPI, to test those Open MPI builds and to compare performance with Cray MPICH.</p> <p>Currently only the C MPI benchmarks are provided.</p> <p>Each module also contains a number of example scripts to run the benchmarks. After loading the module, those example scripts can be found in the subdirectory <code>$OSU_EXAMPLES</code>. Note that in some cases additional software needs to be  installed to run those scripts. Please check the module help of the respective <code>OSU-Micro-Benchmarks</code> module as that information is different for all modules. When all software is installed, you should be able to launch the example scripts just using <code>sbatch -A project_46YXXXXXX $OSU_EXAMPLES/&lt;scriptname&gt;</code> (at least on the CPU partition of LUMI), but of course you may want to copy and modify them.</p>","boost":10},{"location":"o/OSU-Micro-Benchmarks/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider OSU-Micro-Benchmarks/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig OSU-Micro-Benchmarks-7.3-cpeGNU-23.09-OpenMPI-4.1.6-noCrayWrappers.eb, will build OSU-Micro-Benchmarks/7.3-cpeGNU-23.09-OpenMPI-4.1.6-noCrayWrappers</p> </li> <li> <p>EasyConfig OSU-Micro-Benchmarks-7.3-cpeGNU-23.09-OpenMPI-4.1.6.eb, will build OSU-Micro-Benchmarks/7.3-cpeGNU-23.09-OpenMPI-4.1.6</p> </li> <li> <p>EasyConfig OSU-Micro-Benchmarks-7.3-cpeGNU-23.09.eb, will build OSU-Micro-Benchmarks/7.3-cpeGNU-23.09</p> </li> </ul>","boost":10},{"location":"o/OSU-Micro-Benchmarks/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Home page</li> </ul>","boost":10},{"location":"o/OSU-Micro-Benchmarks/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for the OSU micro-benchmarks in the EasyBuilders repository</p> </li> <li> <p>Support for the OSU micro-benchmarks in the CSCS repository</p> </li> <li> <p>Support for the OSU micro-benchmarks in Spack</p> </li> </ul>","boost":10},{"location":"o/OSU-Micro-Benchmarks/#version-73-for-cray-mpich","title":"Version 7.3 for Cray MPICH","text":"<ul> <li> <p>The starting point were the EasyBuilders EasyConfigs for the <code>gompi</code> toolchains.</p> </li> <li> <p>Some example scripts are included. They are build from templates also stored in      the LUMI-EasyBuild-contrib repository that are processed with <code>sed</code> in the      EasyConfig to load the appropriate modules in the right versions.</p> </li> <li> <p>There is also more documentation in the module. That documentation is partly      specific to each module as we also have some variants for Open MPI.</p> </li> </ul>","boost":10},{"location":"o/OSU-Micro-Benchmarks/#version-73-for-open-mpi","title":"Version 7.3 for Open MPI","text":"<ul> <li>These modules are part of a regular EasyBuild toolchain even though that     does not make much sense as we even need to unload some modules to avoid     conflicts. Setting up specific toolchains in EasyBuild using just a      pre-installed compiler or pre-installed compiler + Cray wrapper is a lot     of work though so this solution is preferred for now.</li> </ul>","boost":10},{"location":"o/OTF2/","title":"OTF2","text":"<p>[package list]</p>","boost":10},{"location":"o/OTF2/#otf2","title":"OTF2","text":"","boost":10},{"location":"o/OTF2/#license-information","title":"License information","text":"<p>OTF2 is available under the 3-clause BSD Open Source license.</p> <p>From version 3.1.1 on, this information is also available in <code>$EBROOTOTF2/share/licenses/OTF2</code> after installing and loading the module.</p>","boost":10},{"location":"o/OTF2/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider OTF2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig OTF2-3.0.3-cpeAMD-23.09.eb, will build OTF2/3.0.3-cpeAMD-23.09</p> </li> <li> <p>EasyConfig OTF2-3.0.3-cpeAMD-24.03.eb, will build OTF2/3.0.3-cpeAMD-24.03</p> </li> <li> <p>EasyConfig OTF2-3.0.3-cpeAOCC-23.09.eb, will build OTF2/3.0.3-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig OTF2-3.0.3-cpeAOCC-24.03.eb, will build OTF2/3.0.3-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig OTF2-3.0.3-cpeCray-23.09.eb, will build OTF2/3.0.3-cpeCray-23.09</p> </li> <li> <p>EasyConfig OTF2-3.0.3-cpeCray-24.03.eb, will build OTF2/3.0.3-cpeCray-24.03</p> </li> <li> <p>EasyConfig OTF2-3.0.3-cpeGNU-23.09.eb, will build OTF2/3.0.3-cpeGNU-23.09</p> </li> <li> <p>EasyConfig OTF2-3.0.3-cpeGNU-24.03.eb, will build OTF2/3.0.3-cpeGNU-24.03</p> </li> <li> <p>EasyConfig OTF2-3.1.1-cpeAMD-24.03.eb, will build OTF2/3.1.1-cpeAMD-24.03</p> </li> <li> <p>EasyConfig OTF2-3.1.1-cpeAOCC-24.03.eb, will build OTF2/3.1.1-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig OTF2-3.1.1-cpeCray-24.03.eb, will build OTF2/3.1.1-cpeCray-24.03</p> </li> <li> <p>EasyConfig OTF2-3.1.1-cpeGNU-24.03.eb, will build OTF2/3.1.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"o/OTF2/#technical-documentation","title":"Technical documentation","text":"<ul> <li>OTF2 web site</li> </ul> <p>The Open Trace Format Version 2 (OTF2) is a highly scalable, memory efficient  event trace data format plus support library. It is the standard trace format for  Scalasca, Vampir, and Tau and is open for other tools.</p> <p>OTF2 is the common successor format for the Open Trace Format (OTF) and the Epilog  trace format. It preserves the essential features as well as most record types of  both and introduces new features such as support for multiple read/write substrates,  in-place time stamp manipulation, and on-the-fly token translation. In particular,  it will avoid copying during unification of parallel event streams.</p>","boost":10},{"location":"o/OTF2/#easybuild-support","title":"EasyBuild support","text":"<ul> <li> <p>OTF2 support in the EasyBuilders repository</p> </li> <li> <p>OTF2 support in the CSCS repository</p> </li> <li> <p>OTF2 support in the JSC repository</p> </li> </ul>","boost":10},{"location":"o/OTF2/#version-303-for-cpe-2309","title":"Version 3.0.3 for CPE 23.09","text":"<ul> <li> <p>EasyConfig prepared by Jan Andr\u00e9 Reuter of JSC based on the EasyConfigs in use at JSC.</p> <p>Compilation is done via the custom EasyBlock for Score-P.</p> </li> </ul>","boost":10},{"location":"o/OTF2/#version-303-for-cpe-2403","title":"Version 3.0.3 for CPE 24.03","text":"<ul> <li> <p>Reuse of EasyConfigs of CPE 23.09 with the inclusion of Python to build the Python bindings.</p> </li> <li> <p>Included license information in the software installation also.</p> </li> </ul>","boost":10},{"location":"o/OpenBLAS/","title":"OpenBLAS","text":"<p>[package list]</p>","boost":10},{"location":"o/OpenBLAS/#openblas","title":"OpenBLAS","text":"","boost":10},{"location":"o/OpenBLAS/#license-information","title":"License information","text":"<p>OpenBLAS is distributed under a  BSD 3-Clause License, a copy of which can be found in the LICENSE file in the source repository.</p>","boost":10},{"location":"o/OpenBLAS/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider OpenBLAS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig OpenBLAS-0.3.24-cpeGNU-23.12.eb, will build OpenBLAS/0.3.24-cpeGNU-23.12</p> </li> <li> <p>EasyConfig OpenBLAS-0.3.24-cpeGNU-24.03.eb, will build OpenBLAS/0.3.24-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"o/OpenBLAS/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>OpenBLAS web site</p> </li> <li> <p>OpenBLAS documentation wiki</p> </li> <li> <p>OpenBLAS on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"o/OpenBLAS/#general-information","title":"General information","text":"<p>OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version.</p> <p>Note that OpenBLAS will conflict with the Cray LibSci library, so when using this module you have to unload the cray-libsci module as otherwise the Cray compiler wrappers will add LibSci to the libraries used by the compiler.</p> <p>Cray LibSci already contains BLAS, LAPACK and ScaLAPACK functionality and should be your first choice. But this module may be useful if you run into problems with the Cray LibSci library. Note however that software in the LUMI stack is by default build with the Cray LibSci library, so your code that relies on BLIS may not link correctly to any of the other modules in the LUMI software stacks.</p>","boost":10},{"location":"o/OpenBLAS/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>Support in the CSCS repository     which is really for the EasyBuild common toolchains and not for the Cray PE.</p> </li> </ul>","boost":10},{"location":"o/OpenBLAS/#version-0320-for-cpegnu2206-cpegnu2208-archived","title":"Version 0.3.20 for cpeGNU/22.06, cpeGNU/22.08 (archived)","text":"<ul> <li> <p>The EasyConfig is an adaptation of the standard EasyBuilders one.</p> <p>Note that it is best to unload cray-libsci to make sure that there is no interaction at all with that library. Otherwise, e.g., one might end up testing the Cray library rather than OpenBLAS.</p> </li> </ul>","boost":10},{"location":"o/OpenBLAS/#version-0323-for-cpegnu-2212-archived","title":"Version 0.3.23 for cpeGNU 22.12 (archived)","text":"<ul> <li>Version provided with 64-bit integer support on user demand.</li> </ul>","boost":10},{"location":"o/OpenBLAS/#issues-with-0323-and-gcc-1220-archived","title":"Issues with 0.3.23 and GCC 12.2.0 (archived)","text":"<ul> <li>Take caution on updating for GCC 12.2.0 https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107254</li> </ul>","boost":10},{"location":"o/OpenBLAS/#version-0324-for-cpegnu-2312-and-2403","title":"Version 0.3.24 for cpeGNU 23.12 and 24.03","text":"<ul> <li>The easyconfig is an adaptation of the standard EasyBuilders one.</li> </ul>","boost":10},{"location":"o/OpenBLAS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig OpenBLAS-0.3.20-cpeGNU-22.06.eb, with module OpenBLAS/0.3.20-cpeGNU-22.06</p> </li> <li> <p>EasyConfig OpenBLAS-0.3.20-cpeGNU-22.08.eb, with module OpenBLAS/0.3.20-cpeGNU-22.08</p> </li> <li> <p>EasyConfig OpenBLAS-0.3.23-cpeGNU-22.12-ILP64.eb, with module OpenBLAS/0.3.23-cpeGNU-22.12-ILP64</p> </li> </ul> </li> </ul>","boost":10},{"location":"o/OpenFOAM/","title":"OpenFOAM","text":"<p>[package list]</p>","boost":10},{"location":"o/OpenFOAM/#openfoam","title":"OpenFOAM","text":"","boost":10},{"location":"o/OpenFOAM/#license-information","title":"License information","text":"<p>The OpenFOAM.com versions are licensed under the GNU General Public License version 3.0. See also the  \"Open Source Licensing\" page on the OpenFOAM.com web site.</p> <p>The OpenFOAM.org versions are also licensed under the GNU General Public License version 3.0. See also the  \"Free Software Licence\" page on the OpenFOAM.org web site.</p>","boost":10},{"location":"o/OpenFOAM/#user-documentation","title":"User documentation","text":"<p>OpenFOAM is a toolbox to develop CFD codes with lots of examples included. It is not very well suited to an installation in a software stack as users may want to work in the code tree.</p> <p>We cannot support each and every version and each and every subsequent bug fix release for those versions. However, if you want a newer version or a bugfix version, the  EasyConfigs offered here may be a nice start, though it would be easy to just extract the proper build instructions from them and do a manual build if needed.</p> <p>Note that we also cannot keep supporting older versions of codes. Computers evolve, the software environment of those computers evolve, and older versions may simply not compile anymore. OpenFOAM is notorious for such problems, sometimes requiring rather old versions of libraries also that can conflict with newers ones on the system.</p> <p>Use OpenFOAM with care on LUMI. Some file access strategies of OpenFOAM (basically using  one or more files per MPI rank) do not scale to thousands of MPI ranks but can take down a supercomputer filesystem as these are optimised to work with large files and parallel I/O and not for simultaneously writing to thousands of files.</p>","boost":10},{"location":"o/OpenFOAM/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider OpenFOAM/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig OpenFOAM-10-cpeGNU-23.09-20230119.eb, will build OpenFOAM/10-cpeGNU-23.09-20230119</p> </li> <li> <p>EasyConfig OpenFOAM-12-cpeGNU-24.03-master.eb, will build OpenFOAM/12-cpeGNU-24.03-master</p> </li> <li> <p>EasyConfig OpenFOAM-13-cpeGNU-24.03-master.eb, will build OpenFOAM/13-cpeGNU-24.03-master</p> </li> <li> <p>EasyConfig OpenFOAM-v2312-cpeGNU-23.09.eb, will build OpenFOAM/v2312-cpeGNU-23.09</p> </li> </ul>","boost":10},{"location":"o/OpenFOAM/#technical-documentation","title":"Technical documentation","text":"<p>This easyconfig is based on the  public CSCS version using <code>Binary</code> easyblock.</p> <p>Rewritten to use recent configuration layers built-in the OpenFOAM.</p> <p>OpenFOAM in two flavours (branches) from: <code>openfoam.com</code> (YYMM release numbering) and <code>openfoam.org</code> (<code>N</code> release numbering). </p> <p>Links:</p> <ul> <li> <p>openfoam.com</p> <ul> <li> <p>News page with release announcements</p> </li> <li> <p>Developers Wiki which includes the     GitLab-style repository.</p> </li> </ul> </li> <li> <p>OpenFOAM Foundation (openfoam.org)</p> <ul> <li> <p>Download page for latest version</p> </li> <li> <p>Repositories on GitHub</p> <p>Development is done in the OpenFOAM-dev repository. As soon as a version is released, it gets a separate repository rather than a branch, and further bug fixes for specific versions are applied in those repositories. So it might be possible to find a newer variant of a particular OpenFOAM version including many bug fixes.</p> <p>It is however impossible for us to track all versions and update the EasyConfigs all the time.</p> </li> </ul> </li> <li> <p>EasyBuild support</p> <ul> <li> <p>EasyBuild is mentioned on the openfoam.com Wiki</p> </li> <li> <p>The standard EasyBuild EasyConfigs     use a custom EasyBlock      as OpenFOAM has its own build process that does not pick up compiler options from the environment.</p> <p>The EasyBlock changes configuration files of OpenFOAM to inject the options that are set via the <code>toolchainopts</code> options (and the defaults for those if nothing is specified).</p> </li> <li> <p>The CSCS EasyConfigs      which we use take a completely different approach and just use the configuration that is already used     in the configuration files that come with OpenFOAM.</p> </li> </ul> </li> </ul>","boost":10},{"location":"o/OpenFOAM/#configuring","title":"Configuring","text":"","boost":10},{"location":"o/OpenFOAM/#openfoamcom","title":"openfoam.com","text":"<p>Instructions in the OpenFOAM.com Wiki.</p>","boost":10},{"location":"o/OpenFOAM/#openfoamorg","title":"openfoam.org","text":"<p>Follows approach for \".com\" version.</p>","boost":10},{"location":"o/OpenFOAM/#build-issues","title":"Build Issues","text":"","boost":10},{"location":"o/OpenFOAM/#openfoamcom_1","title":"openfoam.com","text":"<p>Subsequent compilation with Allwmake will now run largely without any problems, except that the components linking against CGAL (foamyMesh and surfaceBooleanFeatures) will also try to link against a nonexistent mpfr library. As a workaround, the link-dependency can be removed in wmake/rules/General/CGAL :</p> <pre><code>CGAL_LIBS = \\\n    -L$(BOOST_ARCH_PATH)/lib \\\n    -L$(BOOST_ARCH_PATH)/lib$(WM_COMPILER_LIB_ARCH) \\\n    -L$(CGAL_ARCH_PATH)/lib \\\n    -L$(CGAL_ARCH_PATH)/lib$(WM_COMPILER_LIB_ARCH) \\\n    -lCGAL\n</code></pre> <p>Fixed overwriting <code>wmake/rules/General/cgal</code> with <code>wmake/rules/General/cgal-no-mpfr</code> </p>","boost":10},{"location":"o/OpenFOAM/#openfoamorg_1","title":"openfoam.org","text":"<p>Missing <code>linux64Cray</code> rules files are in the patch file consisting options from Esko J\u00e4rvinen (CSC). </p>","boost":10},{"location":"o/OpenFOAM/#issues-reported-in-the-easybuild-community","title":"Issues reported in the EasyBuild community","text":"<ul> <li> <p>easybuild-easyconfigs issue #20297     mentions that OpenFOAM with recent versions of the GNU compilers can sometimes produce wrong results     when compiling with <code>-O2 -ftree-vectorize</code> which are the default options for the EasyBuild GNU     toolchains.</p> <p>The issue has also been reported to openfoam.org as issue #004076 where it was reported that the OpenFOAM developers could not reproduce the error. This is because when trying to reproduce, I assume the standard compiler options were used, which is <code>-O3</code> instead of <code>-O2 -ftree-vectorize</code>.</p> <p>There is also an older easybuild-easyconfigs issue #15495 on the same topic.</p> <p>It got fixed in EasyBuild by using a <code>toolchainopts</code> to turn off <code>-ftree-vectorize</code> and just compile with <code>-O2</code>.</p> <p>The fix is irrelevant to the LUMI setup as we simply use the very reasonable options that the OpenFOAM build process choses by default and don't overwrite those with EasyBuild-generated flags.</p> </li> </ul>","boost":10},{"location":"o/OpenFOAM/#building-with-easybuild","title":"Building with EasyBuild","text":"<p>https://develop.openfoam.com/Development/openfoam/-/wikis/building#easybuild</p>","boost":10},{"location":"o/OpenFOAM/#notes-on-cpe","title":"Notes on CPE","text":"<ul> <li>This easyconfig produces <code>linux64Cray</code> platform binaries using <code>Cray</code> compiler option which is in fact CPE GNU.</li> </ul> <p>Note that the compiler flags set by EasyBuild are completely neglected during the build, so that we    effectively build with the GNU compiler options that the developers likely tested with.</p>","boost":10},{"location":"o/OpenFOAM/#issues-with-openfoam-v2106-and-gcc-11","title":"Issues with OpenFOAM v2106 and GCC 11","text":"<ul> <li> <p>Linking fails for OpenFOAM v2106 and GCC 11. We run into      issue 2147</p> <p>The fix proposed there is to compile with <code>-D_GLIBCXX_USE_CXX11_ABI=0</code>. However,  as OpenFOAM does not honour the pretty standard <code>CXXFLAGS</code> environment variable,  the only solution is to inject this option using <code>FOAM_EXTRA_CXXFLAGS</code> and this has to be done after calling the <code>etc/bashrc</code> script as that script unsets the variable to avoid accidentally using settings from a previous compile in the  same shell. </p> </li> </ul>","boost":10},{"location":"o/OpenFOAM/#openfoam-v2212","title":"OpenFoam v2212","text":"<ul> <li>Trivial port of the EasyConfig</li> </ul>","boost":10},{"location":"o/OpenFOAM/#openfoam-v2312","title":"OpenFOAM v2312","text":"<ul> <li>For now a trivial port of the 2212 EasyConfig</li> </ul>","boost":10},{"location":"o/OpenFOAM/#openfoamorg-10","title":"OpenFOAM.org 10","text":"<ul> <li>Needed some patching compared to the very old version 9 EasyConfigs.</li> </ul>","boost":10},{"location":"o/OpenFOAM/#openfoamorg-12","title":"OpenFOAM.org 12","text":"<ul> <li> <p>Patching needed as it did not work correctly with <code>gcc-13</code>. Some files were compiled     with the correct compiler while others were compiled with the SYSTEM compiler.</p> </li> <li> <p>Uses now also ParMETIS, which needed a shared library build of ParMETIS.</p> </li> </ul>","boost":10},{"location":"o/OpenFOAM/#openfoamorg-13","title":"OpenFOAM.org 13","text":"<ul> <li>Fairly trivial port of the EasyConfig for version 12, but improved the name of the     downloaded file.</li> </ul>","boost":10},{"location":"o/OpenFOAM/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig OpenFOAM-9-cpeGNU-21.08.eb, with module OpenFOAM/9-cpeGNU-21.08</p> </li> <li> <p>EasyConfig OpenFOAM-9-cpeGNU-21.12.eb, with module OpenFOAM/9-cpeGNU-21.12</p> </li> <li> <p>EasyConfig OpenFOAM-9-cpeGNU-22.06.eb, with module OpenFOAM/9-cpeGNU-22.06</p> </li> <li> <p>EasyConfig OpenFOAM-9-cpeGNU-22.08.eb, with module OpenFOAM/9-cpeGNU-22.08</p> </li> <li> <p>EasyConfig OpenFOAM-dev-cpeGNU-24.03-20250217.eb, with module OpenFOAM/dev-cpeGNU-24.03-20250217</p> <p>This is a development version of OpenFOAM and this easyconfig is not maintained by LUST as we cannot support fast changing development versions of software. However, the EasyConfig may serve as a source of inspiration and if you are lucky, you may only have to change the  local_version_tag variable. If you're unlucky, you may have to redo the patch or even more...</p> </li> <li> <p>EasyConfig OpenFOAM-v2106-cpeGNU-21.08.eb, with module OpenFOAM/v2106-cpeGNU-21.08</p> </li> <li> <p>EasyConfig OpenFOAM-v2106-cpeGNU-22.06.eb, with module OpenFOAM/v2106-cpeGNU-22.06</p> </li> <li> <p>EasyConfig OpenFOAM-v2106-cpeGNU-22.08.eb, with module OpenFOAM/v2106-cpeGNU-22.08</p> </li> <li> <p>EasyConfig OpenFOAM-v2106-cpeGNU-22.12.eb, with module OpenFOAM/v2106-cpeGNU-22.12</p> </li> <li> <p>EasyConfig OpenFOAM-v2212-cpeGNU-22.12.eb, with module OpenFOAM/v2212-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"o/OpenGL/","title":"OpenGL","text":"<p>[package list]</p>","boost":10},{"location":"o/OpenGL/#opengl","title":"OpenGL","text":"","boost":10},{"location":"o/OpenGL/#license-information","title":"License information","text":"<ul> <li> <p>Some license information for libglvnd can be found in the README.md file in the      libglvnd GitHub repository.</p> </li> <li> <p>The Mesa 3D license can be found on the Mesa website.</p> </li> <li> <p>The freeglut package is covered by a copyright as specified in the     COPYING file in the freeglut GitHub repository.</p> </li> <li> <p>The glew license can be found in the      LICENSE.txt file in the glew GitHub.</p> </li> <li> <p>The GLFW license can be found in the     LICENSE.md file in the GLFW GitHub repository     and is modeled on the zlib license. It is compatible with GPL.</p> </li> <li> <p>VirtualGL is covered by the      GNU Lesser General Public License Version 2.1     a copy of which can be found in the      LGPL.txt file in the VirtualGL GitHub repository.     The vxWindows Library License Version 3.1 as specified in the     LICENSE.txt file in the VirtualGL GitHub repository     also applies.</p> </li> </ul>","boost":10},{"location":"o/OpenGL/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider OpenGL/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>OpenGL/24.03-cpeGNU-24.03 (EasyConfig: OpenGL-24.03-cpeGNU-24.03.eb)</li> </ul>","boost":10},{"location":"o/OpenGL/#technical-documentation","title":"Technical documentation","text":"<p>Components in the bundle:</p> <ul> <li> <p>libglvnd - The GL Vendor-Neutral Dispatch Library</p> <ul> <li> <p>Official GitLab</p> </li> <li> <p>Alternative GitHub</p> </li> <li> <p>GitHub releases</p> </li> <li> <p>EasyBuilders EasyConfigs</p> </li> </ul> </li> <li> <p>Mesa</p> <ul> <li> <p>Mesa homepage</p> </li> <li> <p>Mesa downloads</p> </li> <li> <p>EasyBuilders EasyConfigs</p> </li> </ul> </li> <li> <p>libGLU - The OpenGL Utility Library</p> <ul> <li> <p>Homepage with Mesa</p> </li> <li> <p>libGLU downloads</p> </li> <li> <p>EasyBuilders EasyConfigs</p> </li> </ul> </li> <li> <p>freeglut</p> <ul> <li> <p>freeglut home page on SourceForge</p> </li> <li> <p>Current GitHub releases</p> </li> <li> <p>Mirror on SourceForge</p> </li> <li> <p>EasyBuilders EasyConfigs</p> </li> </ul> </li> <li> <p>glew - The OpenGL Extension Wrangler Library</p> <ul> <li> <p>glew on GitHub</p> </li> <li> <p>GitHub releases</p> </li> <li> <p>EasyBuilders EasyConfigs</p> </li> </ul> </li> <li> <p>GLFW</p> <ul> <li> <p>Homepage</p> </li> <li> <p>GitHub</p> </li> <li> <p>GitHub releases</p> </li> <li> <p>EasyBuilders EasyConfigs</p> </li> </ul> </li> <li> <p>VirtualGL</p> <ul> <li> <p>VirtualGL homepage</p> </li> <li> <p>GitHub</p> </li> <li> <p>GitHub releases</p> </li> <li> <p>EasyBuilders EasyConfigs</p> </li> </ul> </li> </ul>","boost":10},{"location":"o/OpenGL/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"o/OpenGL/#2403-bundle","title":"24.03 bundle","text":"<ul> <li>The EasyConfig is a LUST development inspired by the      OpenGL bundle in the J\u00fclich stack     and the EasyBuilders EasyConfigs.</li> </ul>","boost":10},{"location":"o/OpenMM/","title":"OpenMM","text":"<p>[package list]</p>","boost":10},{"location":"o/OpenMM/#openmm","title":"OpenMM","text":"","boost":10},{"location":"o/OpenMM/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig OpenMM-7.5.1-cpeCray-21.08.eb, with module OpenMM/7.5.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig OpenMM-7.5.1-cpeGNU-21.08.eb, with module OpenMM/7.5.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig OpenMM-7.7.0-cpeCray-21.12.eb, with module OpenMM/7.7.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig OpenMM-7.7.0-cpeGNU-21.12.eb, with module OpenMM/7.7.0-cpeGNU-21.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"o/OpenMPI/","title":"OpenMPI","text":"<p>[package list]</p>","boost":10},{"location":"o/OpenMPI/#openmpi","title":"OpenMPI","text":"","boost":10},{"location":"o/OpenMPI/#license-information","title":"License information","text":"<p>Open MPI is distributed under a 3-clause BSD license that can be found on the \"Open MPI License\" page on the Open MPI web site.</p> <p>From version 4.1.6 on, the license can also be found as the file LICENSE in <code>$EBROOTOPENMPI/share/licenses/OpenMPI</code> after loading the OpenMPI module. </p>","boost":10},{"location":"o/OpenMPI/#user-documentation","title":"User documentation","text":"<p>Open MPI is currently provided as-is, without any support promise. It is not entirely free of problems as Open MPI 4 was not really designed for the interconnect of LUMI while Open MPI 5 requires software that is not yet on the system for security reasons. Our only fully supported MPI implementaton on LUMI is HPE Cray MPICH as provided by the <code>cray-mpich</code> module. We also do not intend to rebuild other software with  Open MPI beyond what is needed for some testing.</p> <p>Open MPI has UCX as the preferred communication library, with OFI (libfabric) often treated as a second choice, certainly when it comes to GPU support. On LUMI the  use of the HPE Cray provided libfabric library is rather important, especially to link to the libfabric provider for the Slingshot 11 network of LUMI. Currently that libfabric+provider implementation is not entirely feature-complete so not all routines that are not needed for Cray MPICH are provided. Hence we cannot exclude  that there will be compatibility problems.</p>","boost":10},{"location":"o/OpenMPI/#two-builds-from-416-onwards","title":"Two builds from 4.1.6 onwards","text":"<p>Building Open MPI in the cpe* toolchains may seem to make no sense as the MPI module loaded by those toolchains cannot be used, and neither can the MPI routines in LibSci. However, as it is a lot of work to set up specific toolchains without Cray MPICH (or possibly even LibSci and other PE modules), we've  chosen to still use the cpe* toolchains and then unload certain modules.</p> <ul> <li> <p>The <code>-noCrayWrappers</code> modules provide MPI compiler wrappers that directly call     the underlying compiler.</p> </li> <li> <p>The regular modules provide MPI compiler wrappers that in turn call the      HPE Cray compiler wrappers so, e.g., adding target architecture options      should still work via the target modules.</p> </li> </ul> <p>Note that as a user of these modules you will have to unload some modules manually after loading the OpenMPI module. Failing to do so may result in wrong builds of software. However, due to LMOD limitations it was not possible to automate this.</p>","boost":10},{"location":"o/OpenMPI/#known-issues","title":"Known issues","text":"<ol> <li> <p>When starting a job on a single node, one gets a warning starting with</p> <pre><code>Open MPI failed an OFI Libfabric library call (fi_domain).  This is highly\nunusual; your job may behave unpredictably (and/or abort) after this.\n</code></pre> <p>Slurm on LUMI does not initialise a virtual network interface for a job step that uses only one node, as Cray MPICH will never use it. However, Open MPI  relies on libfabric also for intra-node communication and does check the network interface, leading to this message. It can be safely ignored, but you can also  get rid of it by using the <code>--network=single_node_vni</code> flag with <code>srun</code>. (The Cray documentation says that there are cases where  <code>--network=single_node_vni,job_vni,def_tles=0</code> is needed but we haven't seen such cases yet.)</p> </li> </ol> <p>It is not clear if or when these issues can be solved.</p>","boost":10},{"location":"o/OpenMPI/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider OpenMPI/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig OpenMPI-4.1.6-cpeGNU-23.09-noCrayWrappers.eb, will build OpenMPI/4.1.6-cpeGNU-23.09-noCrayWrappers</p> </li> <li> <p>EasyConfig OpenMPI-4.1.6-cpeGNU-23.09.eb, will build OpenMPI/4.1.6-cpeGNU-23.09</p> </li> </ul>","boost":10},{"location":"o/OpenMPI/#technical-documentation","title":"Technical documentation","text":"<p>Note that we cannot fully support Open MPI on LUMI. Users should get decent performance on LUMI-C, but despite including the rocm modules, this is not a GPU-aware version of MPI as currently UCX is required for that but not supported on the SlingShot 11 interconnect of LUMI.</p> <p>The primary MPI implementation on LUMI and the only one which we can fully support remains the implementation provided by the cray-mpich modules on top of libfabric as the communication library. The Cray MPICH implementation also contains some optimisations that are not available in the upstream MPICH installation but are essential for scalability in certain large runs on LUMI.</p> <ul> <li> <p>Open MPI web site</p> </li> <li> <p>Open MPI on GitHub</p> </li> </ul>","boost":10},{"location":"o/OpenMPI/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>Support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"o/OpenMPI/#version-412-for-cpegnu-2206","title":"Version 4.1.2 for cpeGNU 22.06","text":"<ul> <li> <p>A development specifically for LUMI.</p> <p>The main goal was to have mpirun available, but it can be used with containers with some care to ensure that the container indeed uses the libraries from this module, and turns out to give good enough performance on LUMI for most purposes. It is not GPU-aware  though so there is no direct GPU-to-GPU communication.</p> </li> </ul>","boost":10},{"location":"o/OpenMPI/#version-413-for-cpegnu-2208","title":"Version 4.1.3 for cpeGNU 22.08","text":"<ul> <li> <p>A simple port of the 4.1.2 recipe, with the same restrictions, but one     addition to automatically detect the libfabric version so that it can     still work after a system update that installs a new libfabric.</p> </li> <li> <p>Later on the ROCm dependency which should not even have been there      was removed.</p> </li> </ul>","boost":10},{"location":"o/OpenMPI/#version-415-for-cpegnu-2212","title":"Version 4.1.5 for cpeGNU 22.12","text":"<ul> <li>A straightforward port of the 4.1.3 EasyConfig.</li> </ul>","boost":10},{"location":"o/OpenMPI/#version-416-for-2309","title":"Version 4.1.6 for 23.09","text":"<ul> <li> <p>The EasyConfig is heavily reworked, now also building a module that provides     more help information.</p> <p>Two approaches were chosen:</p> <ul> <li> <p>The <code>-noCrayWrappers</code> modules provide MPI compiler wrappers that directly call     the underlying compiler.</p> </li> <li> <p>The regular modules provide MPI compiler wrappers that in turn call the      HPE Cray compiler wrappers so, e.g., adding target architecture options      should still work via the target modules.</p> </li> </ul> <p>It doesn't really make sense to use the cpe* toolchains, as cray-mpich and the MPI support in cray-libsci cannot be used. In fact, it is even better to unload cray-mpich (and required for the HPE Cray compile wrapper version) to  avoid that the wrong libraries are picked up.</p> </li> <li> <p>Also added the license information to the installation.</p> </li> <li> <p>We tried to extend the module to unload the Cray PE components that are      irrelevant or even damaging, but that didn't work as doing a load and unload of     the same module in the same call to the module command does not work. This happens     if the cpe* module is not yet loaded when loading the OpenMPI module.</p> </li> </ul>","boost":10},{"location":"o/OpenMPI/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig OpenMPI-4.1.2-cpeGNU-22.06.eb, with module OpenMPI/4.1.2-cpeGNU-22.06</p> </li> <li> <p>EasyConfig OpenMPI-4.1.3-cpeGNU-22.08.eb, with module OpenMPI/4.1.3-cpeGNU-22.08</p> </li> <li> <p>EasyConfig OpenMPI-4.1.5-cpeGNU-22.12.eb, with module OpenMPI/4.1.5-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"o/OpenPGM/","title":"OpenPGM","text":"<p>[package list]</p>","boost":10},{"location":"o/OpenPGM/#openpgm","title":"OpenPGM","text":"","boost":10},{"location":"o/OpenPGM/#license-information","title":"License information","text":"<p>OpenPGM is distributed under the GNU Lesser General Public License.</p> <p>The license information can also be found in the <code>COPYING</code> file in the <code>$EBROOTOPENPGM/share/licenses/OpenPGM</code> directory after installing and loading the  module.</p>","boost":10},{"location":"o/OpenPGM/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider OpenPGM/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig OpenPGM-5.2.122-cpeGNU-23.09.eb, will build OpenPGM/5.2.122-cpeGNU-23.09</p> </li> <li> <p>EasyConfig OpenPGM-5.2.122-cpeGNU-24.03.eb, will build OpenPGM/5.2.122-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"o/OpenPGM/#technical-documentation","title":"Technical documentation","text":"<ul> <li>OpenPGM on Google code</li> </ul>","boost":10},{"location":"o/OpenPGM/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>OpenPGM support in the EasyBuilders repository</p> </li> <li> <p>OpenPGM support in the CSCS repository</p> </li> <li> <p>OpenPGM support in the JSC repository</p> </li> </ul>","boost":10},{"location":"o/OpenPGM/#version-52122-for-cpe-2208-and-later","title":"Version 5.2.122 for CPE 22.08 and later","text":"<ul> <li> <p>Based on the EasyBuilders easyconfig</p> </li> <li> <p>Added license information to the 24.03 version in May 2025.</p> </li> </ul>","boost":10},{"location":"o/OpenPGM/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig OpenPGM-5.2.122-cpeGNU-22.08.eb, with module OpenPGM/5.2.122-cpeGNU-22.08</p> </li> <li> <p>EasyConfig OpenPGM-5.2.122-cpeGNU-22.12.eb, with module OpenPGM/5.2.122-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"o/OptiX/","title":"OptiX","text":"<p>[package list]</p>","boost":10},{"location":"o/OptiX/#optix","title":"OptiX","text":"","boost":10},{"location":"o/OptiX/#license-information","title":"License information","text":"<p>OptiX is released under the  NVIDIA Software Developer Kits, Samples and Tools License Agreement.</p> <p>After installing and loading the module, the license can also be found in <code>$EBROOTOPTIX/doc</code> or  <code>$EBROOTOPTIX/share/licenses/OptiX</code>.</p>","boost":10},{"location":"o/OptiX/#user-documentation","title":"User documentation","text":"<p>Downloading OptiX requires registration. As it is not clear to us if every user needs  to register, this software will not be installed centrally.</p> <p>You'll have to download an install script for the version mentioned in the name of  the EasyBuild recipe.</p> <p>Download locations are:</p> <ul> <li> <p>developer.nvidia.com/designworks/optix/download     for the latest version,</p> </li> <li> <p>developer.nvidia.com/designworks/optix/downloads/legacy     for older versions. This page can also be reached from the page with the most recent version.</p> </li> </ul> <p>Store the file that you downloaded (e.g., <code>NVIDIA-OptiX-SDK-8.0.0-linux64-x86_64.sh</code>)  in a place where EasyBuild can find it (integrate in the sources structure if you're  an EasyBuild expert) or, more easily, simply tell it where to find it by adding the option <code>--sourcepath &lt;directory&gt;</code> to the <code>eb</code> command line, of course replacing <code>&lt;directory&gt;</code> with the actual directory that contains the downloaded file.</p>","boost":10},{"location":"o/OptiX/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider OptiX/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig OptiX-8.0.0.eb, will build OptiX/8.0.0</li> </ul>","boost":10},{"location":"o/OptiX/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Home page</p> </li> <li> <p>Download the latest version     and download legacy versions.</p> </li> </ul>","boost":10},{"location":"o/OptiX/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>OptiX support in the EasyBuilders repository</p> </li> <li> <p>OptiX support in the CSCS repository</p> </li> <li> <p>OptiX support in the JSC repository</p> </li> <li> <p>optix-dev package in Spack</p> </li> </ul>","boost":10},{"location":"o/OptiX/#version-800","title":"Version 8.0.0","text":"<ul> <li>The EasyConfig is derived from the JSC one.</li> </ul>","boost":10},{"location":"o/oneTBB/","title":"oneTBB","text":"<p>[package list]</p>","boost":10},{"location":"o/oneTBB/#onetbb","title":"oneTBB","text":"","boost":10},{"location":"o/oneTBB/#license-information","title":"License information","text":"<p>The oneTBB package is distributed under the Apache License version 2.0, a copy which can also be found in the <code>LICENSE.txt</code> file in the oneTBB GitHub repository.</p> <p>After installing and loading the module, the license information can also be found  in <code>$EBROOTONETBB/share/licenses/oneTBB</code>.</p>","boost":10},{"location":"o/oneTBB/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider oneTBB/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>oneTBB/2021.13.0-cpeGNU-24.03 (EasyConfig: oneTBB-2021.13.0-cpeGNU-24.03.eb)</li> </ul>","boost":10},{"location":"o/oneTBB/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>oneTBB GitHub</p> <ul> <li>oneTBB GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"o/oneTBB/#easybuild","title":"EasyBuild","text":"<p>The oneTBB package is often also just known as TBB or tbb.</p> <ul> <li> <p>tbb package in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository.</p> </li> <li> <p>tbb package in the JSC repository</p> </li> <li> <p>intel-oneapi-tbb package in Spack</p> </li> </ul>","boost":10},{"location":"o/oneTBB/#versiuon-2021130-for-cpegnu2403","title":"Versiuon 2021.13.0 for cpeGNU/24.03","text":"<ul> <li>The EasyConfig is derived from the JSC one.</li> </ul>","boost":10},{"location":"p/PCRE/","title":"PCRE","text":"<p>[package list]</p>","boost":10},{"location":"p/PCRE/#pcre","title":"PCRE","text":"","boost":10},{"location":"p/PCRE/#license-information","title":"License information","text":"<p>PCRE and PCRE2 use a 3-Clause BSD License.</p> <p>PCRE is barely maintained and users are encouraged to switch to PCRE2. The precise license formulation for PCRE can be found in the LICENSE file in the source code. See, e.g, also the LICENCE file in this unofficial mirror of the PCRE library.</p>","boost":10},{"location":"p/PCRE/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider PCRE/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>PCRE/8.45-cpeAMD-22.08 (EasyConfig: PCRE-8.45-cpeAMD-22.08.eb)</p> </li> <li> <p>PCRE/8.45-cpeAOCC-22.08 (EasyConfig: PCRE-8.45-cpeAOCC-22.08.eb)</p> </li> <li> <p>PCRE/8.45-cpeCray-22.08 (EasyConfig: PCRE-8.45-cpeCray-22.08.eb)</p> </li> <li> <p>PCRE/8.45-cpeGNU-22.08 (EasyConfig: PCRE-8.45-cpeGNU-22.08.eb)</p> </li> </ul>","boost":10},{"location":"p/PCRE/#technical-documentation","title":"Technical documentation","text":"<p>Note that PCRE is old code that is no longer maintained. We're trying to move over to the newer PCRE2 libraries which are the successor of PCRE.</p> <ul> <li> <p>PCRE home page</p> </li> <li> <p>PCRE downloads</p> </li> <li> <p>Alternative PCRE download on SourceForge      (as the previous one seems to be dead as PCRE is no longer maintained)</p> </li> </ul>","boost":10},{"location":"p/PCRE/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>PCRE in the EasyBuilders repository</p> </li> <li> <p>PCRE in the CSCS repository</p> </li> </ul>","boost":10},{"location":"p/PCRE/#version-845-from-cpe-2106-on","title":"Version 8.45 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is derived from the University of Antwerpen one as that one builds     a more fully featured version of the library.</li> </ul>","boost":10},{"location":"p/PCRE/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig PCRE-8.45-cpeAMD-21.06.eb, with module PCRE/8.45-cpeAMD-21.06</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeAOCC-21.12.eb, with module PCRE/8.45-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeAOCC-22.06.eb, with module PCRE/8.45-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeCray-21.06.eb, with module PCRE/8.45-cpeCray-21.06</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeCray-21.08.eb, with module PCRE/8.45-cpeCray-21.08</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeCray-21.12.eb, with module PCRE/8.45-cpeCray-21.12</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeCray-22.06.eb, with module PCRE/8.45-cpeCray-22.06</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeGNU-21.06.eb, with module PCRE/8.45-cpeGNU-21.06</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeGNU-21.08.eb, with module PCRE/8.45-cpeGNU-21.08</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeGNU-21.12.eb, with module PCRE/8.45-cpeGNU-21.12</p> </li> <li> <p>EasyConfig PCRE-8.45-cpeGNU-22.06.eb, with module PCRE/8.45-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/PCRE2/","title":"PCRE2","text":"<p>[package list]</p>","boost":10},{"location":"p/PCRE2/#pcre2","title":"PCRE2","text":"","boost":10},{"location":"p/PCRE2/#license-information","title":"License information","text":"<p>PCRE and PCRE2 use a 3-Clause BSD License. The precise wording of the PCRE2 license can be found in the LICENCE file in the PCRE2 GitHub repository.</p> <p>From LUMI/23.12 on., the <code>LICENCE</code> file can also be found in the <code>$EBROOTPCRE2/share/licenses/PCRE2</code> subdirectory.</p>","boost":10},{"location":"p/PCRE2/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider PCRE2/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>PCRE2/10.40-cpeAMD-22.08 (EasyConfig: PCRE2-10.40-cpeAMD-22.08.eb)</p> </li> <li> <p>PCRE2/10.40-cpeAMD-22.12 (EasyConfig: PCRE2-10.40-cpeAMD-22.12.eb)</p> </li> <li> <p>PCRE2/10.40-cpeAOCC-22.08 (EasyConfig: PCRE2-10.40-cpeAOCC-22.08.eb)</p> </li> <li> <p>PCRE2/10.40-cpeAOCC-22.12 (EasyConfig: PCRE2-10.40-cpeAOCC-22.12.eb)</p> </li> <li> <p>PCRE2/10.40-cpeCray-22.08 (EasyConfig: PCRE2-10.40-cpeCray-22.08.eb)</p> </li> <li> <p>PCRE2/10.40-cpeCray-22.12 (EasyConfig: PCRE2-10.40-cpeCray-22.12.eb)</p> </li> <li> <p>PCRE2/10.40-cpeCray-23.03 (EasyConfig: PCRE2-10.40-cpeCray-23.03.eb)</p> </li> <li> <p>PCRE2/10.40-cpeGNU-22.08 (EasyConfig: PCRE2-10.40-cpeGNU-22.08.eb)</p> </li> <li> <p>PCRE2/10.40-cpeGNU-22.12 (EasyConfig: PCRE2-10.40-cpeGNU-22.12.eb)</p> </li> <li> <p>PCRE2/10.42-cpeAMD-23.09 (EasyConfig: PCRE2-10.42-cpeAMD-23.09.eb)</p> </li> <li> <p>PCRE2/10.42-cpeAMD-23.12 (EasyConfig: PCRE2-10.42-cpeAMD-23.12.eb)</p> </li> <li> <p>PCRE2/10.42-cpeAMD-24.03 (EasyConfig: PCRE2-10.42-cpeAMD-24.03.eb)</p> </li> <li> <p>PCRE2/10.42-cpeAOCC-23.09 (EasyConfig: PCRE2-10.42-cpeAOCC-23.09.eb)</p> </li> <li> <p>PCRE2/10.42-cpeAOCC-23.12 (EasyConfig: PCRE2-10.42-cpeAOCC-23.12.eb)</p> </li> <li> <p>PCRE2/10.42-cpeAOCC-24.03 (EasyConfig: PCRE2-10.42-cpeAOCC-24.03.eb)</p> </li> <li> <p>PCRE2/10.42-cpeCray-23.09 (EasyConfig: PCRE2-10.42-cpeCray-23.09.eb)</p> </li> <li> <p>PCRE2/10.42-cpeCray-23.12 (EasyConfig: PCRE2-10.42-cpeCray-23.12.eb)</p> </li> <li> <p>PCRE2/10.42-cpeCray-24.03 (EasyConfig: PCRE2-10.42-cpeCray-24.03.eb)</p> </li> <li> <p>PCRE2/10.42-cpeGNU-23.09 (EasyConfig: PCRE2-10.42-cpeGNU-23.09.eb)</p> </li> <li> <p>PCRE2/10.42-cpeGNU-23.12 (EasyConfig: PCRE2-10.42-cpeGNU-23.12.eb)</p> </li> <li> <p>PCRE2/10.42-cpeGNU-24.03 (EasyConfig: PCRE2-10.42-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"p/PCRE2/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>PCRE/PCRE2 home page</p> </li> <li> <p>PCRE2 GitHub</p> <ul> <li>PCRE2 releases on GitHub</li> </ul> </li> </ul>","boost":10},{"location":"p/PCRE2/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>PCRE2 in the EasyBuilders repository</p> </li> <li> <p>PCRE2 in the CSCS repository</p> </li> </ul>","boost":10},{"location":"p/PCRE2/#version-1037-from-cpe-2108-on","title":"Version 10.37 from CPE 21.08 on","text":"<ul> <li>The EasyConfig is derived from the University of Antwerpen one as that one builds     a more fully featured version of the library.</li> </ul>","boost":10},{"location":"p/PCRE2/#version-1040-from-cpe-2206-on","title":"Version 10.40 from CPE 22.06 on","text":"<ul> <li>Trivial port of 10.37, but with a switch to GitHub for sources.</li> </ul>","boost":10},{"location":"p/PCRE2/#version-1042-from-cpe-2309-on","title":"Version 10.42 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 10.40 one.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"p/PCRE2/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig PCRE2-10.37-cpeAMD-21.06.eb, with module PCRE2/10.37-cpeAMD-21.06</p> </li> <li> <p>EasyConfig PCRE2-10.37-cpeAOCC-21.12.eb, with module PCRE2/10.37-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig PCRE2-10.37-cpeCray-21.06.eb, with module PCRE2/10.37-cpeCray-21.06</p> </li> <li> <p>EasyConfig PCRE2-10.37-cpeCray-21.08.eb, with module PCRE2/10.37-cpeCray-21.08</p> </li> <li> <p>EasyConfig PCRE2-10.37-cpeCray-21.12.eb, with module PCRE2/10.37-cpeCray-21.12</p> </li> <li> <p>EasyConfig PCRE2-10.37-cpeGNU-21.06.eb, with module PCRE2/10.37-cpeGNU-21.06</p> </li> <li> <p>EasyConfig PCRE2-10.37-cpeGNU-21.08.eb, with module PCRE2/10.37-cpeGNU-21.08</p> </li> <li> <p>EasyConfig PCRE2-10.37-cpeGNU-21.12.eb, with module PCRE2/10.37-cpeGNU-21.12</p> </li> <li> <p>EasyConfig PCRE2-10.40-cpeAOCC-22.06.eb, with module PCRE2/10.40-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig PCRE2-10.40-cpeCray-22.06.eb, with module PCRE2/10.40-cpeCray-22.06</p> </li> <li> <p>EasyConfig PCRE2-10.40-cpeGNU-22.06.eb, with module PCRE2/10.40-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/PETSc/","title":"PETSc","text":"<p>[package list]</p>","boost":10},{"location":"p/PETSc/#petsc","title":"PETSc","text":"","boost":10},{"location":"p/PETSc/#license-information","title":"License information","text":"<p>PETSc itself is covered by a 2-clause BSD license.  Information is available on the  \"License\" page of the PETSc web site.</p> <p>Note that PETSc relies on many other libraries, some of which have much more restrictive licensing conditions so do not forget to check those in function of which components and options of PETSc you use.</p> <p>PETSc also asks users to cite relevant publications in function of the algorithms they are using. See the \"Citing PETSc\" section on the PETSc web site.</p>","boost":10},{"location":"p/PETSc/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider PETSc/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig PETSc-3.19.5-cpeGNU-23.09.eb, will build PETSc/3.19.5-cpeGNU-23.09</p> </li> <li> <p>EasyConfig PETSc-3.21.5-cpeGNU-24.03-OpenMP.eb, will build PETSc/3.21.5-cpeGNU-24.03-OpenMP</p> <p>PETSc for CPU, compiled with the multi-threaded LibSci libraries (and using OpenMP where possible). When using this version of PETSc, you'll have to ensure that <code>-fopenmp</code> is used when linking to avoid linking both the single- and multi-threaded LibSci libraries.</p> </li> <li> <p>EasyConfig PETSc-3.21.5-cpeGNU-24.03-rocm.eb, will build PETSc/3.21.5-cpeGNU-24.03-rocm</p> <p>PETSc for CPU, compiled with the multi-threaded LibSci libraries (and using OpenMP where possible), and also including ROCm GPU support. When using this version of PETSc, you'll have to ensure that <code>-fopenmp</code> is used when linking to avoid linking both the single- and multi-threaded LibSci libraries.</p> </li> </ul>","boost":10},{"location":"p/PETSc/#technical-documentation","title":"Technical documentation","text":"<ul> <li>PETSc web site</li> </ul>","boost":10},{"location":"p/PETSc/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Simple <code>ConfigureMake</code> easyconfig while default PETSc easyblock is not compatibile with LUMI toolchains</p> </li> <li> <p>HPE-Cray PETSc sample build script (TPSL)</p> <p>PETSc was part of the Cray Third-Party Scientific Libraries (TPSL) but is no longer delivered in a ready-to-use form</p> </li> </ul>","boost":10},{"location":"p/PETSc/#version-317-from-cpe-2108-on","title":"Version 3.17 from CPE 21.08 on","text":"<ul> <li>OpenMP enabled; Hypre, METIS, ParMETIS, SCOTCH, MUMPS, SuperLU_Dist, STRUMPACK; dependencies: python (Cray), HDF5 (Cray), Boost</li> <li><code>-minimal</code>: no OpenMP, dependencies: python (Cray), HDF5 (Cray), Boost, METIS, SCOTCH</li> </ul>","boost":10},{"location":"p/PETSc/#version-319-for-cpe-2309","title":"Version 3.19 for CPE 23.09","text":"<ul> <li>GPU enabled versions with Kokkos enabled and build against ROCm 5.6.1</li> <li>cpeGNU recipe follows old TPSL config with most external linear algebra libraries enabled</li> <li>cpeCray recipe excludes most of external linear algebra libraries because of linking problems</li> </ul>","boost":10},{"location":"p/PETSc/#version-3215-for-cpu-in-cpe-2403","title":"Version 3.21.5 for CPU in CPE 24.03","text":"<ul> <li>The EasyConfig has been restructured a bit but is otherwise a direct port of the one for     3.19 for 23.09.</li> </ul>","boost":10},{"location":"p/PETSc/#version-3215-for-gpu-in-cpe-2309","title":"Version 3.21.5 for GPU in CPE 23.09","text":"<ul> <li> <p>Currently using an external Kokkos library as that is easier if PETSc is used in combination      with other libraries or code that also uses Kokkos.</p> </li> <li> <p>Builds upon the CPU version, just adding even more configuration options to use Kokkos     and Kokkos-kernels.</p> </li> </ul>","boost":10},{"location":"p/PETSc/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig PETSc-3.17.4-cpeCray-22.08-GPU.eb, with module PETSc/3.17.4-cpeCray-22.08-GPU</p> </li> <li> <p>EasyConfig PETSc-3.17.4-cpeGNU-22.08-minimal.eb, with module PETSc/3.17.4-cpeGNU-22.08-minimal</p> </li> <li> <p>EasyConfig PETSc-3.17.4-cpeGNU-22.08.eb, with module PETSc/3.17.4-cpeGNU-22.08</p> </li> <li> <p>EasyConfig PETSc-3.19.5-cpeCray-23.09-rocm-5.6.1.eb, with module PETSc/3.19.5-cpeCray-23.09-rocm-5.6.1</p> <p>Due to linking problems for which we have no solution, fewer external libraries are included than in the cpeGNU version.</p> </li> <li> <p>EasyConfig PETSc-3.19.5-cpeGNU-22.12.eb, with module PETSc/3.19.5-cpeGNU-22.12</p> </li> <li> <p>EasyConfig PETSc-3.19.5-cpeGNU-23.09-rocm-5.6.1.eb, with module PETSc/3.19.5-cpeGNU-23.09-rocm-5.6.1</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/PLUMED/","title":"PLUMED","text":"<p>[package list]</p>","boost":10},{"location":"p/PLUMED/#plumed","title":"PLUMED","text":"","boost":10},{"location":"p/PLUMED/#license-information","title":"License information","text":"<p>PLUMED is distributed under the GNU Lesser General Public License version 3.0 a copy of which can be found in the COPYING.LESSER file in the source repository.</p> <p>Users are asked to acknowledge PLUMED in their work and cite the relevant publications, see the \"How to cite PLUMED\" page on the PLUMED web site.</p>","boost":10},{"location":"p/PLUMED/#user-documentation","title":"User documentation","text":"<p>Note: Recent versions of PLUMED need to be build on the compute nodes if you want to optimise for them (and hence use <code>partition/C</code> or <code>partition/G</code>).</p> <p>After the March-April 2023 system update the EasyConfigs of PLUMED were replaced with  two versions due to build problems on the updated system.</p> <ul> <li> <p><code>-cray-python-3.9.12.1</code> versions include Python support as before, with the     <code>cray-python</code> module now loaded explicitly as a dependency.</p> <p>These EasyConfigs in particular are currently workarounds as we are not sure about the root cause of the problem yet and suspect the configure process may still be  picking up unintended versions of packages.</p> </li> <li> <p><code>-noPython</code> versions have Python support disabled.</p> </li> </ul>","boost":10},{"location":"p/PLUMED/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider PLUMED/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig PLUMED-2.8.3-cpeGNU-23.09-noPython.eb, will build PLUMED/2.8.3-cpeGNU-23.09-noPython</p> </li> <li> <p>EasyConfig PLUMED-2.8.4-cpeAMD-24.03-noPython.eb, will build PLUMED/2.8.4-cpeAMD-24.03-noPython</p> </li> <li> <p>EasyConfig PLUMED-2.8.4-cpeGNU-24.03-noPython.eb, will build PLUMED/2.8.4-cpeGNU-24.03-noPython</p> </li> <li> <p>EasyConfig PLUMED-2.9.0-cpeGNU-23.09-noPython.eb, will build PLUMED/2.9.0-cpeGNU-23.09-noPython</p> </li> <li> <p>EasyConfig PLUMED-2.9.3-cpeAMD-24.03-noPython.eb, will build PLUMED/2.9.3-cpeAMD-24.03-noPython</p> <p>Bug fix release of the rather buggy 2.9.2 version.</p> </li> <li> <p>EasyConfig PLUMED-2.9.3-cpeCray-24.03-noPython.eb, will build PLUMED/2.9.3-cpeCray-24.03-noPython</p> <p>Bug fix release of the rather buggy 2.9.2 version.</p> </li> <li> <p>EasyConfig PLUMED-2.9.3-cpeGNU-24.03-cray-python-3.11.7.eb, will build PLUMED/2.9.3-cpeGNU-24.03-cray-python-3.11.7</p> <p>PLUMED with the Python plugin. Only in cpeGNU as Cray Python is compiled with the GNU compilers and not compatible with libraries compiled with other compilers that use or link to libraries with OpenMP support.</p> <p>Bug fix release of the rather buggy 2.9.2 version.</p> </li> <li> <p>EasyConfig PLUMED-2.9.3-cpeGNU-24.03-noPython.eb, will build PLUMED/2.9.3-cpeGNU-24.03-noPython</p> <p>Bug fix release of the rather buggy 2.9.2 version.</p> </li> </ul>","boost":10},{"location":"p/PLUMED/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>PLUMED web site</p> <ul> <li>PLUMED 2.7 installation manual</li> </ul> </li> <li> <p>PLUMED on GitHub</p> </li> </ul> <p>Note that the choice of PLUMED version depends a lot on the software that it will be used with. E.g., every GROMACS version requires a very specific version of PLUMED.</p> <p>The easiest way to find out which versions of other applications are supported by a  particular version of PLUMED, is to go into  the patches subdirectory and then look for the patches for a given version tag.</p>","boost":10},{"location":"p/PLUMED/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>PLUMED support in the EasyBuilders repository</p> </li> <li> <p>PLEMED support in the CSCS repository</p> </li> <li> <p>PLUMED support in Spack</p> </li> </ul>","boost":10},{"location":"p/PLUMED/#version-264-and-272-for-cpe-2108","title":"Version 2.6.4 and 2.7.2 for CPE 21.08","text":"<ul> <li> <p>We started from the CSCS recipe but added the Boost-support used in the EasyBuilders     recipe.</p> <ul> <li> <p>Enabled hugepages, though this may not be needed even when including in GROMACS.</p> </li> <li> <p>Added cray-fftw to the dependencies as the configure process does look for     a FFTW library. It was already used in the CSCS recipes for 2.7 but is     equally useful in 2.6.</p> </li> <li> <p>Added cray-python to the build dependencies as CSCS does for the 2.7 recipes,     though it may make sense to make it an actual dependency. We did not do this     for now as the Python support is really only meant for developers according     to the manual.</p> </li> <li> <p>Removed <code>--enable-rpath</code> used in the CSCS recipe as the configure process produces     a warning that the <code>-R</code>-option does not work.</p> </li> <li> <p>The <code>MPIEXEC=srun</code> has also been removed as the configure process can still not     find a way to start MPI processes; it assumes <code>mpirun</code> is the way to do it.</p> <p>The correct way to do this is actually through <code>PLUMED_MPIRUN</code> but as we may not be compiling in a job context or a job context suitable for the tests that PLUMED wants to do it is OK to not set this.</p> </li> <li> <p>Added <code>--enable-asmjit</code>, an option used in the EasyBuilders recipe (and off     by default).</p> </li> </ul> </li> <li> <p>IMPORATANT: Cray Blas currently does not work properly with PLUMED so it has     been disabled.</p> <ul> <li> <p>cpeGNU: Crashes. The crash happens in <code>src/crayblas_util.c</code> line 353 for     the 2.7.2 version in <code>_freeBlasMemPool</code>, called by <code>_crayblas_shutdown</code>.</p> </li> <li> <p>cpeCray: Blas isn't active according to <code>config has blas</code> even when compiling     with <code>--enable-external-blas</code>. So obviously something goes wrong in the configure     step that does not go wrong with cpeGNU.</p> </li> <li> <p>Did not yet try with cpeAMD.</p> </li> </ul> </li> <li> <p>We currently have XDR file support disabled (as is the default in an EasyBuild     installation). XDR file support is a tricky thing as it seems to be something that     comes with GROMACS but is not available separate from GROMACS.</p> </li> <li> <p>As for GROMACS, hugepages support does not work with the AMD compilers.</p> </li> </ul>","boost":10},{"location":"p/PLUMED/#274-and-280-for-cpe-2112","title":"2.7.4 and 2.8.0 for CPE 21.12","text":"<ul> <li> <p>Trivial adaptations of the EasyConfigs for 21.08.</p> </li> <li> <p>Did not go exclusively for 2.8.0 as this version is very new and hence may still      have problems.</p> </li> </ul>","boost":10},{"location":"p/PLUMED/#274-and-280-for-cpe-2206","title":"2.7.4 and 2.8.0 for CPE 22.06","text":"<ul> <li> <p>Had a look at the BLAS problem. It turns out that whatever version of GSL one uses,     when one does an <code>ldd</code> of the <code>plumed</code> executable, it is linked against two versions     of libsci, the sequential and the OpenMP one. </p> <p>TODO: Further investigation of the log files to check what is going on.</p> <p>It looks like:</p> <ul> <li> <p>GSL uses the sequential or OpenMP libsci as suggested by the module versionsuffix.</p> </li> <li> <p>libplumedKernel.so itself seems to link directly to the OpenMP version, so      likely OpenMP is activated during the compile.</p> </li> <li> <p>However, it looks like the <code>plumed</code> executable then adds the link against the     sequential version of the libsci library.</p> </li> </ul> <p>Though not all observations are in line with this, the problem might be in the  PLUMED kernel library itself.</p> </li> </ul> <p>In 22.06, Cray libsci produces a warning if the application is linked against multiple  versions of the libsci library. This turns out to be the case irrespective of the  version of GSL that is linked into PLUMED. It looks like a problem in the PLUMED build process itself causes it to link to multiple libsci libraries if <code>--enable-external-blas</code> and <code>--enable-external-lapack</code> are used.</p>","boost":10},{"location":"p/PLUMED/#274-and-280-for-cpe-2208-after-update-of-april-2023","title":"2.7.4 and 2.8.0 for CPE 22.08 (after update of April 2023)","text":"<ul> <li> <p>There was a problem with the EasyConfig of PLUMED as there was an interaction between     the PYTHONPATH set by EasyBuild and adjusted by cray-python, causing the build process     to fail in the installation process</p> <p>Two solutions have been implemented:</p> <ul> <li> <p><code>-cray-python-3.9.12.1</code>-versions: Load Python in a different way so that we      can first unset the PYTHONPATH.</p> <p>These EasyConfigs need further investigation and are a temporary workaround as we suspect they may still be picking up unintended Python binaries or packages.</p> </li> <li> <p><code>-noPython</code>: Simply disables Python; build PLUMED without Python support.</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/PLUMED/#283-for-cpe-2309","title":"2.8.3 for CPE 23.09","text":"<ul> <li> <p>Trivial version bump of 2.8.0.</p> </li> <li> <p>But at least initially no support for cpeCray/23.09 as Boost fails to build.</p> </li> </ul>","boost":10},{"location":"p/PLUMED/#290-for-cpe-2309","title":"2.9.0 for CPE 23.09","text":"<ul> <li> <p>Fails to build on the login nodes if you build for <code>partition/C</code>.</p> </li> <li> <p>Version bump from 2.8.3 but switched to the downloads that EasyBuild also uses     so that we can copy checksums from there.</p> </li> <li> <p>Initially no support for cpeCray as we cannot build Boost for cpeCray.</p> </li> </ul>","boost":10},{"location":"p/PLUMED/#292-for-cpe-2403","title":"2.9.2 for CPE 24.03","text":"<ul> <li> <p>Some improvements inspired by the current EasyBuilders versions.</p> </li> <li> <p>Re-enabled external BLAS/LAPACK. Doesn't seems to be a problem anymore.</p> </li> <li> <p>Small workaround applied to make sure linking against libsci is correct.</p> </li> <li> <p>Some improvements to the way environment variables are set.</p> </li> <li> <p>cpeGNU version also with the Python plugin and extra sanity checks to     test the Python integration.</p> </li> <li> <p>Include information in the comments on how to run the regression tests.</p> <p>According to the manual, it is normal that some tests fail due to numerical differences when using different compilers with more aggressive optimisations, so interpret with care.</p> </li> </ul>","boost":10},{"location":"p/PLUMED/#293-for-cpe-2403","title":"2.9.3 for cpe 24.03","text":"<ul> <li>Trivial port, and mostly done because there were reports that 2.9.2 is rather     buggy.</li> </ul>","boost":10},{"location":"p/PLUMED/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig PLUMED-2.6.4-cpeAMD-21.08.eb, with module PLUMED/2.6.4-cpeAMD-21.08</p> </li> <li> <p>EasyConfig PLUMED-2.6.4-cpeCray-21.08.eb, with module PLUMED/2.6.4-cpeCray-21.08</p> </li> <li> <p>EasyConfig PLUMED-2.6.4-cpeGNU-21.08.eb, with module PLUMED/2.6.4-cpeGNU-21.08</p> </li> <li> <p>EasyConfig PLUMED-2.7.2-cpeAMD-21.08.eb, with module PLUMED/2.7.2-cpeAMD-21.08</p> </li> <li> <p>EasyConfig PLUMED-2.7.2-cpeCray-21.08.eb, with module PLUMED/2.7.2-cpeCray-21.08</p> </li> <li> <p>EasyConfig PLUMED-2.7.2-cpeGNU-21.08.eb, with module PLUMED/2.7.2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig PLUMED-2.7.2-cpeGNU-21.12.eb, with module PLUMED/2.7.2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeAOCC-21.12.eb, with module PLUMED/2.7.4-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeCray-21.12.eb, with module PLUMED/2.7.4-cpeCray-21.12</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeCray-22.06.eb, with module PLUMED/2.7.4-cpeCray-22.06</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeCray-22.08-cray-python-3.9.12.1.eb, with module PLUMED/2.7.4-cpeCray-22.08-cray-python-3.9.12.1</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeCray-22.08-noPython.eb, with module PLUMED/2.7.4-cpeCray-22.08-noPython</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeCray-22.08.eb, with module PLUMED/2.7.4-cpeCray-22.08</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeGNU-21.12.eb, with module PLUMED/2.7.4-cpeGNU-21.12</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeGNU-22.06.eb, with module PLUMED/2.7.4-cpeGNU-22.06</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeGNU-22.08-cray-python-3.9.12.1.eb, with module PLUMED/2.7.4-cpeGNU-22.08-cray-python-3.9.12.1</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeGNU-22.08-noPython.eb, with module PLUMED/2.7.4-cpeGNU-22.08-noPython</p> </li> <li> <p>EasyConfig PLUMED-2.7.4-cpeGNU-22.08.eb, with module PLUMED/2.7.4-cpeGNU-22.08</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeAOCC-21.12.eb, with module PLUMED/2.8.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeCray-21.12.eb, with module PLUMED/2.8.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeCray-22.06.eb, with module PLUMED/2.8.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeCray-22.08-cray-python-3.9.12.1.eb, with module PLUMED/2.8.0-cpeCray-22.08-cray-python-3.9.12.1</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeCray-22.08-noPython.eb, with module PLUMED/2.8.0-cpeCray-22.08-noPython</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeCray-22.08.eb, with module PLUMED/2.8.0-cpeCray-22.08</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeGNU-21.12.eb, with module PLUMED/2.8.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeGNU-22.06.eb, with module PLUMED/2.8.0-cpeGNU-22.06</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeGNU-22.08-cray-python-3.9.12.1.eb, with module PLUMED/2.8.0-cpeGNU-22.08-cray-python-3.9.12.1</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeGNU-22.08-noPython.eb, with module PLUMED/2.8.0-cpeGNU-22.08-noPython</p> </li> <li> <p>EasyConfig PLUMED-2.8.0-cpeGNU-22.08.eb, with module PLUMED/2.8.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig PLUMED-2.8.3-cpeGNU-22.12-noPython.eb, with module PLUMED/2.8.3-cpeGNU-22.12-noPython</p> </li> <li> <p>EasyConfig PLUMED-2.9.2-cpeAMD-24.03-noPython.eb, with module PLUMED/2.9.2-cpeAMD-24.03-noPython</p> <p>This version turned out to be rather buggy so was replaced with version 2.9.2 in the software stack.</p> </li> <li> <p>EasyConfig PLUMED-2.9.2-cpeCray-24.03-noPython.eb, with module PLUMED/2.9.2-cpeCray-24.03-noPython</p> <p>This version turned out to be rather buggy so was replaced with version 2.9.2 in the software stack.</p> </li> <li> <p>EasyConfig PLUMED-2.9.2-cpeGNU-24.03-cray-python-3.11.7.eb, with module PLUMED/2.9.2-cpeGNU-24.03-cray-python-3.11.7</p> <p>PLUMED with the Python plugin. Only in cpeGNU as Cray Python is compiled with the GNU compilers and not compatible with libraries compiled with other compilers that use or link to libraries with OpenMP support.</p> <p>This version turned out to be rather buggy so was replaced with version 2.9.2 in the software stack.</p> </li> <li> <p>EasyConfig PLUMED-2.9.2-cpeGNU-24.03-noPython.eb, with module PLUMED/2.9.2-cpeGNU-24.03-noPython</p> <p>This version turned out to be rather buggy so was replaced with version 2.9.2 in the software stack.</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/PROJ/","title":"PROJ","text":"<p>[package list]</p>","boost":10},{"location":"p/PROJ/#proj","title":"PROJ","text":"","boost":10},{"location":"p/PROJ/#license-information","title":"License information","text":"<p>PROJ is released under the X/MIT open source license.</p> <p>From LUMI/23.12 on, the license information can also be found in the <code>COPYING</code> file  in <code>$EBROOTPROJ/share/licenses/PROJ</code> after loading the module.</p>","boost":10},{"location":"p/PROJ/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider PROJ/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>PROJ/9.0.0-cpeAMD-22.08 (EasyConfig: PROJ-9.0.0-cpeAMD-22.08.eb)</p> </li> <li> <p>PROJ/9.0.0-cpeAOCC-22.08 (EasyConfig: PROJ-9.0.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>PROJ/9.0.0-cpeCray-22.08 (EasyConfig: PROJ-9.0.0-cpeCray-22.08.eb)</p> </li> <li> <p>PROJ/9.0.0-cpeGNU-22.08 (EasyConfig: PROJ-9.0.0-cpeGNU-22.08.eb)</p> </li> <li> <p>PROJ/9.1.1-cpeAMD-22.12 (EasyConfig: PROJ-9.1.1-cpeAMD-22.12.eb)</p> </li> <li> <p>PROJ/9.1.1-cpeAOCC-22.12 (EasyConfig: PROJ-9.1.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>PROJ/9.1.1-cpeCray-22.12 (EasyConfig: PROJ-9.1.1-cpeCray-22.12.eb)</p> </li> <li> <p>PROJ/9.1.1-cpeCray-23.03 (EasyConfig: PROJ-9.1.1-cpeCray-23.03.eb)</p> </li> <li> <p>PROJ/9.1.1-cpeGNU-22.12 (EasyConfig: PROJ-9.1.1-cpeGNU-22.12.eb)</p> </li> <li> <p>PROJ/9.2.0-cpeAMD-23.09 (EasyConfig: PROJ-9.2.0-cpeAMD-23.09.eb)</p> </li> <li> <p>PROJ/9.2.0-cpeAMD-23.12 (EasyConfig: PROJ-9.2.0-cpeAMD-23.12.eb)</p> </li> <li> <p>PROJ/9.2.0-cpeAOCC-23.09 (EasyConfig: PROJ-9.2.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>PROJ/9.2.0-cpeAOCC-23.12 (EasyConfig: PROJ-9.2.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>PROJ/9.2.0-cpeCray-23.09 (EasyConfig: PROJ-9.2.0-cpeCray-23.09.eb)</p> </li> <li> <p>PROJ/9.2.0-cpeCray-23.12 (EasyConfig: PROJ-9.2.0-cpeCray-23.12.eb)</p> </li> <li> <p>PROJ/9.2.0-cpeGNU-23.09 (EasyConfig: PROJ-9.2.0-cpeGNU-23.09.eb)</p> </li> <li> <p>PROJ/9.2.0-cpeGNU-23.12 (EasyConfig: PROJ-9.2.0-cpeGNU-23.12.eb)</p> </li> <li> <p>PROJ/9.3.1-cpeAMD-24.03 (EasyConfig: PROJ-9.3.1-cpeAMD-24.03.eb)</p> </li> <li> <p>PROJ/9.3.1-cpeAOCC-24.03 (EasyConfig: PROJ-9.3.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>PROJ/9.3.1-cpeCray-24.03 (EasyConfig: PROJ-9.3.1-cpeCray-24.03.eb)</p> </li> <li> <p>PROJ/9.3.1-cpeGNU-24.03 (EasyConfig: PROJ-9.3.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"p/PROJ/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>PROJ web site</p> <ul> <li>Download from the PROJ web site</li> </ul> </li> <li> <p>PROJ on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"p/PROJ/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>PROJ support in the EasyBuilders repository</p> </li> <li> <p>PROJ support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"p/PROJ/#version-811-from-2108-on","title":"Version 8.1.1 from 21.08 on","text":"<ul> <li> <p>The EasyConfig file is a mix of the EasyBuilders and CSCS one. Specifically,     an additional dependency (cURL) was taken from the EasyBuilders one.</p> </li> <li> <p>The documentation was enhanced.</p> </li> <li> <p>No version for cpeAMD as the indirect Tcl dependency does not compile with that     compiler.</p> </li> <li> <p>PROJ does contain a number of commands also but no easy way to test them like     producing help or a version without producing an error code.</p> </li> </ul>","boost":10},{"location":"p/PROJ/#version-900-from-cpe-2206-on","title":"Version 9.0.0 from CPE 22.06 on","text":"<ul> <li> <p>Started from a version bump of the 8.1.1 EasyConfig but had to switch to a     <code>CMakeMake</code> build process.</p> </li> <li> <p>The new EasyBuilders EasyConfig also includes <code>nlohmann_json</code> as a dependency     which we do not yet have.</p> </li> </ul>","boost":10},{"location":"p/PROJ/#version-911-from-2212-on","title":"Version 9.1.1 from 22.12 on","text":"<ul> <li>Version bump of the 9.0.0 EasyConfig</li> </ul>","boost":10},{"location":"p/PROJ/#version-920-from-2309-on","title":"Version 9.2.0 from 23.09 on","text":"<ul> <li> <p>Version bump of the 9.2.0 EasyConfig</p> </li> <li> <p>Needed to add an option to avoid generating errors on unused arguments as somehow      some ROCm libraries get added that are not needed.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation, and the      installation of the libraries is done in <code>lib</code> rather than <code>lib64</code>. Moreover,     <code>nlohmann-json</code> was added as a dependency to enable using an external one,     and <code>googletest</code> was added to the build dependencies as it turned out it was     auto-downloaded otherwise during the build.</p> <p>Note that contrary to what is done in the EasyBuilders repository, we made <code>nlohmann-json</code> a build dependency as it is only some header files and no library or other stuff that is needed when running.</p> </li> </ul>","boost":10},{"location":"p/PROJ/#version-931-from-lumi2403-on","title":"Version 9.3.1 from LUMI/24.03 on","text":"<ul> <li>Version bump of the 9.2.0 EasyConfig for LUMI/23.12.</li> </ul>","boost":10},{"location":"p/PROJ/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig PROJ-8.1.1-cpeAOCC-21.12.eb, with module PROJ/8.1.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig PROJ-8.1.1-cpeCray-21.08.eb, with module PROJ/8.1.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig PROJ-8.1.1-cpeCray-21.12.eb, with module PROJ/8.1.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig PROJ-8.1.1-cpeGNU-21.08.eb, with module PROJ/8.1.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig PROJ-8.1.1-cpeGNU-21.12.eb, with module PROJ/8.1.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig PROJ-9.0.0-cpeAOCC-22.06.eb, with module PROJ/9.0.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig PROJ-9.0.0-cpeCray-22.06.eb, with module PROJ/9.0.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig PROJ-9.0.0-cpeGNU-22.06.eb, with module PROJ/9.0.0-cpeGNU-22.06</p> </li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li>EasyConfig PROJ-9.1.1-cpeGNU-22.08.eb, with module PROJ/9.1.1-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"p/PRoot/","title":"PRoot","text":"<p>[package list]</p>","boost":10},{"location":"p/PRoot/#proot","title":"PRoot","text":"","boost":10},{"location":"p/PRoot/#license-information","title":"License information","text":"<p>PRoot is licensed under the GNU General Public License version 2.0.</p> <p>The license information is also available in the COPYING file in  the directory <code>$EBROOTPROOT/share/licenses/PRoot</code> after loading the module, or in the COPYING file in the PRoot GitHub repository.</p>","boost":10},{"location":"p/PRoot/#user-documentation","title":"User documentation","text":"<p>The <code>PRoot</code> module provides the <code>proot</code> command to <code>partition/container</code> in the LUMI stacks. This enables the so-called \"Unprivileged <code>proot</code> builds\" in recent versions of Singularity Community Edition, one of the few ways available on LUMI to extend containers as user namespaces or fakeroot are not available.</p> <p>The main use case is to be able to develop EasyConfigs that modify an existing container and install the container with matching module file in <code>partition/container</code>.</p> <p>The <code>proot</code> command is also provided by the <code>systools</code> module, but that module cannot be used as a build dependency in EasyBuild when building for <code>partition/common</code> and cannot easily be made available in that partition without breaking the whole idea of the LUMI software stack and of that partition.</p>","boost":10},{"location":"p/PRoot/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider PRoot/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>PRoot/5.4.0 (EasyConfig: PRoot-5.4.0.eb)</p> <p>This easyconfig is meant to be installed in the central software stack in <code>partition/container</code> to make it possible to do a container build from EasyBuild while still storing the container in <code>partition/container</code>. It has minimal build dependencies, using only the system gcc and system make, as that is all what is available in <code>partition/container</code>.</p> </li> </ul>","boost":10},{"location":"p/PRoot/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>PRoot home page</p> </li> <li> <p>PRoot on GitHub</p> <ul> <li>PRoot GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"p/PRoot/#easybuild","title":"EasyBuild","text":"<p>There is no support for PRoot in EasyBuild or Spack.</p>","boost":10},{"location":"p/PRoot/#540-for-partitioncontainer","title":"5.4.0 for <code>partition/container</code>","text":"<ul> <li> <p>This EasyConfig is a LUST development, combining the installation of talloc and PRoot,     also installed in <code>syslibs</code> and <code>systools</code> respectively, but to be used in      <code>partition/container</code> where we don't have those modules available.</p> <p>The idea is to obtain a single executable that only depends on system libraries, using a build process that EasyBuild can also do in <code>partition/container</code>, so with minimal tooling, using only the system gcc and make utility.</p> </li> <li> <p>Done as a Bundle:</p> <ul> <li> <p>First a static version of talloc is compiled. This is already tricky as it only     installs shared libraries, so these are removed and replaced with a static one     generated from the object files.</p> </li> <li> <p>Next we build PRoot, using the just built talloc library. Some trickery is      required to create the correct environment for the build process so that it uses     the right compilers and compiler flags and can find the talloc package.</p> </li> <li> <p>In <code>postinstallcmds</code> we then remove all remaining pieces of talloc, to end with     just a <code>proot</code> binary and information about its license.</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/Pango/","title":"Pango","text":"<p>[package list]</p>","boost":10},{"location":"p/Pango/#pango","title":"Pango","text":"","boost":10},{"location":"p/Pango/#license-information","title":"License information","text":"<p>Pango is licensed under the GNU Library General Public License version 2  or later, a copy of which can also be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the directory <code>$EBROOTPANGO/share/licenses/Pango</code> after loading the module.</p>","boost":10},{"location":"p/Pango/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Pango/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Pango/1.50.12-cpeAMD-22.12 (EasyConfig: Pango-1.50.12-cpeAMD-22.12.eb)</p> </li> <li> <p>Pango/1.50.12-cpeAOCC-22.12 (EasyConfig: Pango-1.50.12-cpeAOCC-22.12.eb)</p> </li> <li> <p>Pango/1.50.12-cpeCray-22.12 (EasyConfig: Pango-1.50.12-cpeCray-22.12.eb)</p> </li> <li> <p>Pango/1.50.12-cpeCray-23.03 (EasyConfig: Pango-1.50.12-cpeCray-23.03.eb)</p> </li> <li> <p>Pango/1.50.12-cpeGNU-22.12 (EasyConfig: Pango-1.50.12-cpeGNU-22.12.eb)</p> </li> <li> <p>Pango/1.50.14-cpeAMD-23.12 (EasyConfig: Pango-1.50.14-cpeAMD-23.12.eb)</p> </li> <li> <p>Pango/1.50.14-cpeAOCC-23.09 (EasyConfig: Pango-1.50.14-cpeAOCC-23.09.eb)</p> </li> <li> <p>Pango/1.50.14-cpeAOCC-23.12 (EasyConfig: Pango-1.50.14-cpeAOCC-23.12.eb)</p> </li> <li> <p>Pango/1.50.14-cpeCray-23.12 (EasyConfig: Pango-1.50.14-cpeCray-23.12.eb)</p> </li> <li> <p>Pango/1.50.14-cpeGNU-23.09 (EasyConfig: Pango-1.50.14-cpeGNU-23.09.eb)</p> </li> <li> <p>Pango/1.50.14-cpeGNU-23.12 (EasyConfig: Pango-1.50.14-cpeGNU-23.12.eb)</p> </li> <li> <p>Pango/1.50.7-cpeAMD-22.08 (EasyConfig: Pango-1.50.7-cpeAMD-22.08.eb)</p> </li> <li> <p>Pango/1.50.7-cpeAOCC-22.08 (EasyConfig: Pango-1.50.7-cpeAOCC-22.08.eb)</p> </li> <li> <p>Pango/1.50.7-cpeCray-22.08 (EasyConfig: Pango-1.50.7-cpeCray-22.08.eb)</p> </li> <li> <p>Pango/1.50.7-cpeGNU-22.08 (EasyConfig: Pango-1.50.7-cpeGNU-22.08.eb)</p> </li> <li> <p>Pango/1.51.0-cpeAMD-24.03 (EasyConfig: Pango-1.51.0-cpeAMD-24.03.eb)</p> </li> <li> <p>Pango/1.51.0-cpeAOCC-24.03 (EasyConfig: Pango-1.51.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>Pango/1.51.0-cpeCray-24.03 (EasyConfig: Pango-1.51.0-cpeCray-24.03.eb)</p> </li> <li> <p>Pango/1.51.0-cpeGNU-24.03 (EasyConfig: Pango-1.51.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"p/Pango/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Pango web site</p> </li> <li> <p>Pango on the Gnome GitLab</p> <ul> <li>Pango releases</li> </ul> </li> </ul>","boost":10},{"location":"p/Pango/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Pango support in the EasyBuilders repository</p> </li> <li> <p>There is no support for Pango in the CSCS repository</p> </li> </ul>","boost":10},{"location":"p/Pango/#version-14810-for-cpe-2108","title":"Version 1.48.10 for cpe 21.08","text":"<ul> <li>Started from the UAntwerpen EasyConfig file which is mostly equivalent to     the EasyBuilders one.</li> </ul>","boost":10},{"location":"p/Pango/#version-1507-from-cpe-2206-on","title":"Version 1.50.7 from CPE 22.06 on","text":"<ul> <li>Trivial version bump of the 1.48.10 EasyConfig.</li> </ul>","boost":10},{"location":"p/Pango/#version-15012-from-cpe-2212-on","title":"Version 1.50.12 from CPE 22.12 on","text":"<ul> <li>Trivial version bump of the 1.50.7 EasyConfig.</li> </ul>","boost":10},{"location":"p/Pango/#version-15014-from-cpe-2309-on","title":"Version 1.50.14 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 1.50.12 EasyConfig.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"p/Pango/#version-1510-for-lumi2403","title":"Version 1.51.0 for LUMI/24.03","text":"<ul> <li>Trivial port of the EasyConfig for version 1.50.14 in LUMI/24.03.</li> </ul>","boost":10},{"location":"p/Pango/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Pango-1.48.10-cpeAOCC-21.12.eb, with module Pango/1.48.10-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig Pango-1.48.10-cpeCray-21.08.eb, with module Pango/1.48.10-cpeCray-21.08</p> </li> <li> <p>EasyConfig Pango-1.48.10-cpeCray-21.12.eb, with module Pango/1.48.10-cpeCray-21.12</p> </li> <li> <p>EasyConfig Pango-1.48.10-cpeGNU-21.08.eb, with module Pango/1.48.10-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Pango-1.48.10-cpeGNU-21.12.eb, with module Pango/1.48.10-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Pango-1.50.7-cpeAOCC-22.06.eb, with module Pango/1.50.7-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig Pango-1.50.7-cpeCray-22.06.eb, with module Pango/1.50.7-cpeCray-22.06</p> </li> <li> <p>EasyConfig Pango-1.50.7-cpeGNU-22.06.eb, with module Pango/1.50.7-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/ParMETIS/","title":"ParMETIS","text":"<p>[package list]</p>","boost":10},{"location":"p/ParMETIS/#parmetis","title":"ParMETIS","text":"","boost":10},{"location":"p/ParMETIS/#license-information","title":"License information","text":"<p>ParMETIS is copyrighted by the Regents of the University of Minnesota. It can  be freely used for educational and research purposes by non-profit institutions  and US government agencies only. Other organizations are allowed to use  ParMETIS only for evaluation purposes, and any further uses will require prior  approval. The software may not be sold or redistributed without prior approval.  One may make copies of the software for their use provided that the copies, are  not sold or distributed, are used under the same terms and conditions.</p> <p>As unestablished research software, this code is provided on an \"as is'' basis  without warranty of any kind, either expressed or implied. The downloading, or  executing any part of this software constitutes an implicit agreement to these  terms. These terms and conditions are subject to change at any time without  prior notice.</p> <p>Source: the ParMETIS download page</p> <p>Note that according to the LUMI Conditions of Use it is the User's responsibility to respect the software license terms. When loading the ParMETIS modules on LUMI, a warning about the licensing conditions is shown to inform User's of the license.</p> <p>From LUMI/23.12 on, license information can also be found in the directory <code>$EBROOTPARMETIS/share/licenses/ParMETIS</code> after loading the module.</p>","boost":10},{"location":"p/ParMETIS/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider ParMETIS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>ParMETIS/4.0.3-cpeAMD-22.08 (EasyConfig: ParMETIS-4.0.3-cpeAMD-22.08.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeAMD-22.12 (EasyConfig: ParMETIS-4.0.3-cpeAMD-22.12.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeAMD-23.09 (EasyConfig: ParMETIS-4.0.3-cpeAMD-23.09.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeAMD-23.12 (EasyConfig: ParMETIS-4.0.3-cpeAMD-23.12.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeAMD-24.03 (EasyConfig: ParMETIS-4.0.3-cpeAMD-24.03.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeAOCC-22.08 (EasyConfig: ParMETIS-4.0.3-cpeAOCC-22.08.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeAOCC-22.12 (EasyConfig: ParMETIS-4.0.3-cpeAOCC-22.12.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeAOCC-23.09 (EasyConfig: ParMETIS-4.0.3-cpeAOCC-23.09.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeAOCC-23.12 (EasyConfig: ParMETIS-4.0.3-cpeAOCC-23.12.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeAOCC-24.03 (EasyConfig: ParMETIS-4.0.3-cpeAOCC-24.03.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeCray-22.08 (EasyConfig: ParMETIS-4.0.3-cpeCray-22.08.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeCray-22.12 (EasyConfig: ParMETIS-4.0.3-cpeCray-22.12.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeCray-23.03 (EasyConfig: ParMETIS-4.0.3-cpeCray-23.03.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeCray-23.09 (EasyConfig: ParMETIS-4.0.3-cpeCray-23.09.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeCray-23.12 (EasyConfig: ParMETIS-4.0.3-cpeCray-23.12.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeCray-24.03 (EasyConfig: ParMETIS-4.0.3-cpeCray-24.03.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeGNU-22.08 (EasyConfig: ParMETIS-4.0.3-cpeGNU-22.08.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeGNU-22.12 (EasyConfig: ParMETIS-4.0.3-cpeGNU-22.12.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeGNU-23.09 (EasyConfig: ParMETIS-4.0.3-cpeGNU-23.09.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeGNU-23.12 (EasyConfig: ParMETIS-4.0.3-cpeGNU-23.12.eb)</p> </li> <li> <p>ParMETIS/4.0.3-cpeGNU-24.03 (EasyConfig: ParMETIS-4.0.3-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"p/ParMETIS/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ParMETIS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig ParMETIS-4.0.3-cpeGNU-24.03-shared.eb, will build ParMETIS/4.0.3-cpeGNU-24.03-shared</li> </ul>","boost":10},{"location":"p/ParMETIS/#technical-documentation-central-installation","title":"Technical documentation (central installation)","text":"<ul> <li>ParMETIS home page</li> </ul> <p>METIS is mature code, there doesn't really seem to be any development anymore. The 4.0.3 release is from 2013.</p>","boost":10},{"location":"p/ParMETIS/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ParMETIS support in the EasyBuilders repository</p> <p>ParMETIS has a software-specific EasyBlock.</p> </li> <li> <p>ParMETIS support in the CSCS repository</p> </li> <li> <p>HPE-Cray ParMETIS sample build script (TPSL)</p> <p>ParMETIS was part of the Cray Third-Party Scientific Libraries (TPSL) but is no longer delivered in a ready-to-use form,</p> </li> </ul>","boost":10},{"location":"p/ParMETIS/#version-403-from-cpe-2108-on","title":"Version 4.0.3 from CPE 21.08 on","text":"<ul> <li> <p>Our EasyConfig is derived from the EasyBuilders one.</p> <p>It uses the default EasyBuild ParMETIS EasyBlock.</p> </li> <li> <p>Note that the way the EasyBlock builds ParMETIS seems to differ somewhat     from the way the Cray TPSL script does the job. The latter does seen to use     METIS during the build.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"p/ParMETIS/#technical-documentation-user-easybuild-installation","title":"Technical documentation (user EasyBuild installation)","text":"","boost":10},{"location":"p/ParMETIS/#easybuild_1","title":"EasyBUild","text":"","boost":10},{"location":"p/ParMETIS/#403-cpegnu-2403-shared","title":"4.0.3-cpeGNU-24.03-shared","text":"<ul> <li>Shared library version of ParMETIS, needing just a simple change to the     <code>configopts</code>.</li> </ul>","boost":10},{"location":"p/ParMETIS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig ParMETIS-4.0.3-cpeAOCC-21.12.eb, with module ParMETIS/4.0.3-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig ParMETIS-4.0.3-cpeAOCC-22.06.eb, with module ParMETIS/4.0.3-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig ParMETIS-4.0.3-cpeCray-21.08.eb, with module ParMETIS/4.0.3-cpeCray-21.08</p> </li> <li> <p>EasyConfig ParMETIS-4.0.3-cpeCray-21.12.eb, with module ParMETIS/4.0.3-cpeCray-21.12</p> </li> <li> <p>EasyConfig ParMETIS-4.0.3-cpeCray-22.06.eb, with module ParMETIS/4.0.3-cpeCray-22.06</p> </li> <li> <p>EasyConfig ParMETIS-4.0.3-cpeGNU-21.08.eb, with module ParMETIS/4.0.3-cpeGNU-21.08</p> </li> <li> <p>EasyConfig ParMETIS-4.0.3-cpeGNU-21.12.eb, with module ParMETIS/4.0.3-cpeGNU-21.12</p> </li> <li> <p>EasyConfig ParMETIS-4.0.3-cpeGNU-22.06.eb, with module ParMETIS/4.0.3-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/ParaView/","title":"ParaView","text":"<p>[package list]</p>","boost":10},{"location":"p/ParaView/#paraview","title":"ParaView","text":"","boost":10},{"location":"p/ParaView/#license-information","title":"License information","text":"<p>ParaView is distributed under the 3-Clause BSD License. Some packages leveraged by ParaView have different licenses. The exact licensr formulation for Paraview and those packages can be found on the  \"ParaView License\" page of the ParaView web site.</p> <p>From 5.13.3 on, the license information can also be found in <code>$EBROOTPARAVIEW/share/licenses/ParaView</code> after installing and loading the module.</p>","boost":10},{"location":"p/ParaView/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"p/ParaView/#running-paraview-with-opengl-acceleration","title":"Running ParaView with OpenGL acceleration","text":"<p>To run ParaView with OpenGL accelleration, it should be started via <code>vglrun -d egl0</code>.</p> <p>This version of ParaView is mostly offered for power users for whom the configuration  in the LUMI web interface is not sufficient. The EasyBuild recipe can be a starting point for further customisations.</p> <p>The compilation time for ParaView is very long. It can easily take two hours on busy login nodes...</p>","boost":10},{"location":"p/ParaView/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ParaView/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig ParaView-5.13.3-cpeGNU-24.03.eb, will build ParaView/5.13.3-cpeGNU-24.03</li> </ul>","boost":10},{"location":"p/ParaView/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>ParaView web site</p> <ul> <li>ParaView Documentation</li> </ul> </li> <li> <p>ParaView Git repository</p> </li> </ul>","boost":10},{"location":"p/ParaView/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ParaView support in the EasyBuilders repository</p> </li> <li> <p>ParaView support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"p/ParaView/#version-5101-for-cpe-2208","title":"Version 5.10.1 for CPE 22.08","text":"<p>Created from scratch for LUMI. Some remarks about the build configuration:</p> <ul> <li>Need <code>CMAKE_SHARED_LINKER_FLAGS=-lpthread</code> to prevent build failure of protobuf</li> <li>Built with FFmpeg support as it's available in the central software stack.     However, the build fails due to API changes in version 5.x of FFmpeg. Created     a patch based of this VTK pull request.</li> </ul>","boost":10},{"location":"p/ParaView/#version-5133-for-cpegnu2403","title":"Version 5.13.3 for cpeGNU/24.03","text":"<ul> <li>This is an entirely new development in the LUMI-D software stack.</li> </ul>","boost":10},{"location":"p/ParaView/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig ParaView-5.10.1-cpeGNU-22.08.eb, with module ParaView/5.10.1-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"p/Perl/","title":"Perl","text":"<p>[package list]</p>","boost":10},{"location":"p/Perl/#perl","title":"Perl","text":"","boost":10},{"location":"p/Perl/#license-information","title":"License information","text":"<p>Perl licensing is a mess due to the large number of packages in a typical  Perl installation that may each have their own license.</p> <p>Perl itself is Open Source software, licensed under its  Artistic License, or the  GNU General Public License (GPL). See also the \"Perl Licensing\" page on the Perl web site.</p> <p>Perl packages included in the modules of the central software stack on LUMI are all taken from CPAN. However, each package may have its own license and it is impossible to name them all, so in principle you have to check before using a Perl package.</p> <p>From LUMI/23.12 on, some license information for the main Perl package can also be  found in <code>$EBROOT/share/licenses/Perl</code> after loading the module.</p>","boost":10},{"location":"p/Perl/#user-documentation","title":"User documentation","text":"<p>Note that from <code>LUMI/24.03</code> onwards, the way we offer Perl has changed. The Perl module now only provides a very limited selection of packages. Packages will only be added to it if they are needed to install the central software stack. Other Perl packages that we provided in the Perl module in earlier versions, are now provided by the <code>Perl-packages-CPAN</code> module.</p> <p>This is done to speed up the development and installation of a new central software stack after a system update, as Perl is in the critical path and having to  build a full configuration slows down the development and deployment tremenduously.</p> <p>Note also that many Perl packages are badly maintained and sometimes fail to build with more recent library versions. As many of those packages are hardly used or not used at all, we do no effort to update those as long as there is no clear demand for them.</p>","boost":10},{"location":"p/Perl/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Perl/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Perl/5.36.0-cpeAMD-22.08 (EasyConfig: Perl-5.36.0-cpeAMD-22.08.eb)</p> </li> <li> <p>Perl/5.36.0-cpeAMD-22.12 (EasyConfig: Perl-5.36.0-cpeAMD-22.12.eb)</p> </li> <li> <p>Perl/5.36.0-cpeAOCC-22.08 (EasyConfig: Perl-5.36.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>Perl/5.36.0-cpeAOCC-22.12 (EasyConfig: Perl-5.36.0-cpeAOCC-22.12.eb)</p> </li> <li> <p>Perl/5.36.0-cpeCray-22.08 (EasyConfig: Perl-5.36.0-cpeCray-22.08.eb)</p> </li> <li> <p>Perl/5.36.0-cpeCray-22.12 (EasyConfig: Perl-5.36.0-cpeCray-22.12.eb)</p> </li> <li> <p>Perl/5.36.0-cpeCray-23.03 (EasyConfig: Perl-5.36.0-cpeCray-23.03.eb)</p> </li> <li> <p>Perl/5.36.0-cpeGNU-22.08 (EasyConfig: Perl-5.36.0-cpeGNU-22.08.eb)</p> </li> <li> <p>Perl/5.36.0-cpeGNU-22.12 (EasyConfig: Perl-5.36.0-cpeGNU-22.12.eb)</p> </li> <li> <p>Perl/5.36.1-cpeAMD-23.09 (EasyConfig: Perl-5.36.1-cpeAMD-23.09.eb)</p> </li> <li> <p>Perl/5.36.1-cpeAMD-23.12 (EasyConfig: Perl-5.36.1-cpeAMD-23.12.eb)</p> </li> <li> <p>Perl/5.36.1-cpeAOCC-23.09 (EasyConfig: Perl-5.36.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>Perl/5.36.1-cpeAOCC-23.12 (EasyConfig: Perl-5.36.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>Perl/5.36.1-cpeCray-23.09 (EasyConfig: Perl-5.36.1-cpeCray-23.09.eb)</p> </li> <li> <p>Perl/5.36.1-cpeCray-23.12 (EasyConfig: Perl-5.36.1-cpeCray-23.12.eb)</p> </li> <li> <p>Perl/5.36.1-cpeGNU-23.09 (EasyConfig: Perl-5.36.1-cpeGNU-23.09.eb)</p> </li> <li> <p>Perl/5.36.1-cpeGNU-23.12 (EasyConfig: Perl-5.36.1-cpeGNU-23.12.eb)</p> </li> <li> <p>Perl/5.38.0-cpeAMD-24.03 (EasyConfig: Perl-5.38.0-cpeAMD-24.03.eb)</p> </li> <li> <p>Perl/5.38.0-cpeAOCC-24.03 (EasyConfig: Perl-5.38.0-cpeAOCC-24.03.eb)</p> </li> <li> <p>Perl/5.38.0-cpeCray-24.03 (EasyConfig: Perl-5.38.0-cpeCray-24.03.eb)</p> </li> <li> <p>Perl/5.38.0-cpeGNU-24.03 (EasyConfig: Perl-5.38.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"p/Perl/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Perl home page</p> <ul> <li>Perl latest versions</li> </ul> </li> </ul>","boost":10},{"location":"p/Perl/#possible-issues","title":"Possible issues","text":"<ul> <li> <p>Packages that need C++ may fail with certain versions of the Cray compiler. One     issue already observed is that C++ include files cannot be found because the compiler     is called as <code>clang++</code> rather than with the <code>CC</code> wrapper script.</p> <p>The issue is with the code in Perl that builds a Makefile. It uses MakeMaker which and ExtUtils::CppGuess, and the latter fails to recognize the Cray wrappers and instead detect the compiler used to build Perl as clang and hence uses clang++ as the compatible C++-compiler.</p> </li> </ul>","boost":10},{"location":"p/Perl/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Perl support in the EasyBuilders repository</p> </li> <li> <p>Perl support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"p/Perl/#version-534-for-cpe-2108","title":"Version 5.34 for CPE 21.08","text":"<ul> <li> <p>The EasyConfig is a straight port of the EasyBuilders one for 2021b, except that     we made OpenSSL a OS dependency since we want to use the OS version of security     libraries as much as possible to ensure that they get patched.</p> </li> <li> <p>Issue with cpeCray/21.08 for the <code>Set::IntervalTree</code> package: The makefile that     is generated during the configure step uses <code>clang++</code> rather then <code>CC</code> and as     a consequence not all include files are found.</p> <p>Workaround: Edit the Makefile in <code>prebuildopts</code> with <code>sed</code>: <code>'prebuildopts': 'sed -i -e \"s|CC = .*|CC = CC|\" Makefile &amp;&amp; '</code>.</p> </li> </ul>","boost":10},{"location":"p/Perl/#version-536-for-cpe-2206","title":"Version 5.36 for CPE 22.06","text":"<ul> <li> <p>We used the list of extensions from the EasyConfig for GCCcore/11.3.0, part of 2022a.</p> </li> <li> <p>Issue with cpeCray/21.08 for the <code>Set::IntervalTree</code> package: The makefile that     is generated during the configure step uses <code>clang++</code> rather then <code>CC</code> and as     a consequence not all include files are found.</p> <p>Workaround: Edit the Makefile in <code>prebuildopts</code> with <code>sed</code>: <code>'prebuildopts': 'sed -i -e \"s|CC = .*|CC = CC|\" Makefile &amp;&amp; '</code>. This is safe for all CPE toolchains.</p> </li> <li> <p>Do not forget to remove the <code>preconfigopts</code> or <code>Net::SSLeay</code>.</p> </li> <li> <p>Other issues:</p> <ul> <li> <p>AOCC: </p> <ul> <li><code>DBD::SQLite</code> extension does not compile</li> </ul> </li> </ul> </li> <li> <p>Updated package list in the versions for CPE 22.12 and 23.03 to those from the      EasyConfig for GCCcore/12.2.0, part of 2022b.</p> <ul> <li>Did not update all user requeste packages as it looks like the version of     Alien::Libxml2 did not build on top of the version of Alien::Base that was     up-to-date at the time of development. This may be caused by some new extensions     that require other missing dependencies, but we did not want to slow down the     development of a central stack on which too many users depend too much for      the wishes of just one or a few users.</li> </ul> </li> </ul>","boost":10},{"location":"p/Perl/#updates-to-5360-for-cpe-22122303","title":"Updates to 5.36.0 for CPE 22.12/23.03","text":"<ul> <li>Clang 15 is stricter on conversions from integers to pointers and does not accept     converting a negative integer (or signed integer type in general) to a pointer.     This breaks the \"XML::Bare\" extension. The solution is to add a compiler flag to turn     of that feature. The way to get that into the makefile was actually:     <pre><code>'buildopts': 'OPTIMIZE=\"-O2 -Wno-int-conversion\" ',\n</code></pre></li> </ul>","boost":10},{"location":"p/Perl/#version-5361-for-cpe-2309","title":"Version 5.36.1 for CPE 23.09","text":"<ul> <li> <p>Updated the version of Perl to align with 2023a, but did not update the package     list due to the amount of work this takes. EasyBuild has changed its policy with     respect to additional packages which would change the way our users need to use the     Perl module.</p> </li> <li> <p>Clang 16 based compilers are more picky and also no longer accept C90 by default,      so we needed to set special options for several packages.</p> </li> <li> <p>Needed to add additional flags to some packages with <code>cpeAMD</code> when that toolchain     is configured with ROCm 6.0.3 (for recompilation after the system update of the     summer of 2024).</p> </li> <li> <p>For LUMI/23.12, the license information for the main Perl package was added to the installation.</p> </li> </ul>","boost":10},{"location":"p/Perl/#version-5380-for-lumi2403","title":"Version 5.38.0 for LUMI/24.03","text":"<ul> <li> <p>The EasyConfig is an update of the one for 5.36.1 for LUMI/23.12.</p> </li> <li> <p>Some clean-up of dependencies for the -bare configurations.</p> </li> </ul>","boost":10},{"location":"p/Perl/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Perl-5.34.0-cpeAMD-21.06.eb, with module Perl/5.34.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig Perl-5.34.0-cpeAOCC-21.12.eb, with module Perl/5.34.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig Perl-5.34.0-cpeCray-21.06.eb, with module Perl/5.34.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig Perl-5.34.0-cpeCray-21.08.eb, with module Perl/5.34.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig Perl-5.34.0-cpeCray-21.12.eb, with module Perl/5.34.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig Perl-5.34.0-cpeGNU-21.06.eb, with module Perl/5.34.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig Perl-5.34.0-cpeGNU-21.08.eb, with module Perl/5.34.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Perl-5.34.0-cpeGNU-21.12.eb, with module Perl/5.34.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Perl-5.36.0-cpeAOCC-22.06.eb, with module Perl/5.36.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig Perl-5.36.0-cpeCray-22.06.eb, with module Perl/5.36.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig Perl-5.36.0-cpeGNU-22.06.eb, with module Perl/5.36.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/Perl-packages-CPAN/","title":"Perl-packages-CPAN","text":"<p>[package list]</p>","boost":10},{"location":"p/Perl-packages-CPAN/#perl-packages-cpan","title":"Perl-packages-CPAN","text":"","boost":10},{"location":"p/Perl-packages-CPAN/#license-information","title":"License information","text":"<p>This is a bundle of hundreds of packages, too much to search for and list all individual packages.</p>","boost":10},{"location":"p/Perl-packages-CPAN/#user-documentation","title":"User documentation","text":"<p>From <code>LUMI/24.03</code> onwards, this module is the new home for many Perl packages that we used to provide in the Perl module.</p> <p>This is done to speed up the development and installation of a new central software stack after a system update, as Perl is in the critical path and having to  build a full configuration slows down the development and deployment tremenduously.</p>","boost":10},{"location":"p/Perl-packages-CPAN/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Perl-packages-CPAN/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Perl-packages-CPAN/5.38.0-cpeCray-24.03 (EasyConfig: Perl-packages-CPAN-5.38.0-cpeCray-24.03.eb)</p> </li> <li> <p>Perl-packages-CPAN/5.38.0-cpeGNU-24.03 (EasyConfig: Perl-packages-CPAN-5.38.0-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"p/Perl-packages-CPAN/#technical-documentation","title":"Technical documentation","text":"<p>This is a bundle of packages taken from CPAN and largely based on the EasyBuild PErl-bundle-CPAN module.</p> <p>Even with the GNU compilers, we experience problems that may be unique to SUSE or COS (Cray Operating System, a restricted SUSE). This situation only becomes worse when  using other compilers, as many of those packages are not well maintained or tested  on only a very limited range of OS variants and compilers.  Moreover, Perl packages tend to be very small but with lots of dependencies, and CPAN is organised in a way that it is hard to do reproducible installations which is needed for a central software stack. The packages were split off from the regular Perl module as they slow down the development of the software stack too much.</p> <p>Given that a Perl installation typically consists of hundreds of packages with small  files, it is one of those things that should better be done into a container, especially when Perl is called inside a parallel process.</p> <p>Getting this module into a new software stack does not have a high priority for LUST and it may be removed entirely in the future.</p>","boost":10},{"location":"p/PyFR/","title":"PyFR","text":"<p>[package list]</p>","boost":10},{"location":"p/PyFR/#pyfr","title":"PyFR","text":"","boost":10},{"location":"p/PyFR/#license-information","title":"License information","text":"<p>The PyFR license can be found in the  LICENSE file in the PyFR GitHub repository.</p>","boost":10},{"location":"p/PyFR/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider PyFR/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig PyFR-2.0.3-cpeGNU-24.03-rocm.eb, will build PyFR/2.0.3-cpeGNU-24.03-rocm</li> </ul>","boost":10},{"location":"p/PyFR/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>PyFR web site</p> <ul> <li>PyFR Documentation</li> </ul> </li> <li> <p>PyFR on GitHub</p> </li> </ul>","boost":10},{"location":"p/PyFR/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>PyFR support in the EasyBuilders repository</p> </li> <li> <p>PyFR support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"p/PyFR/#version-1150-for-cpe-gnu-2208","title":"Version 1.15.0 for CPE GNU 22.08","text":"<ul> <li>Created from scratch for LUMI</li> </ul>","boost":10},{"location":"p/PyFR/#version-203-for-cpe-gnu-2403","title":"Version 2.0.3 for CPE GNU 24.03","text":"<ul> <li>Based on previous easyconfigs with addition of an extra dependency,      libspatialindex required by the Rtree python package</li> </ul>","boost":10},{"location":"p/PyFR/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig PyFR-1.15.0-cpeAMD-22.08-GPU.eb, with module PyFR/1.15.0-cpeAMD-22.08-GPU</p> </li> <li> <p>EasyConfig PyFR-1.15.0-cpeCray-22.08-CPU.eb, with module PyFR/1.15.0-cpeCray-22.08-CPU</p> </li> <li> <p>EasyConfig PyFR-1.15.0-cpeCray-22.08-GPU.eb, with module PyFR/1.15.0-cpeCray-22.08-GPU</p> </li> <li> <p>EasyConfig PyFR-1.15.0-cpeGNU-22.08-CPU.eb, with module PyFR/1.15.0-cpeGNU-22.08-CPU</p> </li> <li> <p>EasyConfig PyFR-1.15.0-cpeGNU-22.08-GPU.eb, with module PyFR/1.15.0-cpeGNU-22.08-GPU</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/PyTorch/","title":"PyTorch","text":"<p>[package list]</p>","boost":10},{"location":"p/PyTorch/#pytorch","title":"PyTorch","text":"","boost":10},{"location":"p/PyTorch/#license-information","title":"License information","text":"<p>The PyTorch license can be found in the LICENSE file in the PyTorch GitHub.</p> <p>Note however that in order to use PyTorch you will also be using several other packages that have different licenses.</p>","boost":10},{"location":"p/PyTorch/#user-documentation-user-installation","title":"User documentation (user installation)","text":"<p>We used to provide an EasyBuild recipe to install PyTorch on top of  Cray Python. However, as Python packages tend to put a heavy strain on the file system, installing Python packages in a container is the preferred way. It also takes away the strain of trying to get PyTorch talk to a proper version of the  AWS OFI RCCL plugin which is needed for proper communication on the Slingshot 11 interconnect of LUMI.</p> <p>We now provide prebuilt singularity containers with EasyBuild-generated module around them that eases work with those containers. The use is documented in the next section,  \"User documentation (singularity container)\" while the user-installable EasyBuild recipes for each container can be found in the  \"Singularity containers with modules for binding and extras\" section.</p>","boost":10},{"location":"p/PyTorch/#user-documentation-singularity-container","title":"User documentation (singularity container)","text":"<p>The containers that are provided by the LUMI User Support Team can be used in two possible ways:</p> <ul> <li> <p>Through modules and wrapper scripts generated via EasyBuild</p> </li> <li> <p>Directly, with you taking care of all bindings and all necessary environment     variables.</p> <p>These instructions will likely also work for the  containers built on top of the ROCm containers with cotainr.</p> </li> </ul> <p>Containers with PyTorch provided in local software stacks (e.g., the CSC software stack) may be build differently with different wrapper scripts so instructions on this page may not apply to those.</p> <p>For more information on AI on LUMI, you can also check the LUMI AI Guide.</p>","boost":10},{"location":"p/PyTorch/#module-and-wrapper-scripts","title":"Module and wrapper scripts","text":"<p>The PyTorch container is developed by AMD specifically for LUMI and contains the necessary parts to run PyTorch on LUMI, including the plugin needed for RCCL when doing distributed AI, and a suitable version of ROCm for the version of PyTorch. The apex, torchvision, torchdata, torchtext and torchaudio packages are also included.</p> <p>The EasyBuild installation with the EasyConfigs mentioned below will do three or four things:</p> <ol> <li> <p>It will copy the container to your own EasyBuild software installation space.      We realise containers can be big, but it ensures that you have complete control      over when a container is removed.</p> <p>We will remove a container from the system when it is not sufficiently functional anymore, but the container may still work for you. E.g., after an upgrade of the  network drivers on LUMI, the RCCL plugin for the LUMI Slingshot interconnect may be broken, but if you run on only one node PyTorch may still work for you.</p> <p>If you prefer to use the centrally provided container, you can remove your copy  after loading of the module with <code>rm $SIF</code> followed by reloading the module. This is at your own risk however. </p> </li> <li> <p>It will create a module file.      When loading the module, a number of environment variables will     be set to help you use the module and to make it easy to swap the module with a     different version in your job scripts.</p> <ul> <li> <p><code>SIF</code> and <code>SIFPYTORCH</code> both contain the name and full path of the singularity     container file.</p> </li> <li> <p><code>SINGULARITY_BIND</code> will mount all necessary directories from the system,     including everything that is needed to access the project, scratch and flash     file systems.</p> </li> <li> <p><code>RUNSCRIPTS</code> and <code>RUNSCRIPTSPYTORCH</code> contain the full path of the directory     containing some sample run scripts that can be used to run software in the      container, or as inspiration for your own variants.</p> </li> </ul> <p>Container modules installed after March 9, 2024 also define  <code>SINGULARITYENV_PREPEND_PATH</code> in a way that ensures that the <code>/runscripts</code>  subdirectory in the container will be in the search path in the container.</p> <p>The containers with support for a virtual environment (from 20240315 on) define a few other <code>SINGULARITYENV_*</code> environment variables that inject environment variables in the container that are equivalent to those created by the activate scripts for the Conda environment and the Python virtual environment.</p> </li> <li> <p>It creates 3 scripts in the $RUNSCRIPTS directory:</p> <ul> <li> <p><code>conda-python-simple</code>: This initialises Python in the container and then calls Python     with the arguments of <code>conda-python-simple</code>. It can be used, e.g., to run commands     through Python that utilise a single task but all GPUs.</p> </li> <li> <p><code>conda-python-distributed</code>: Model script that initialises Python in the container     and also creates the environment to run a distributed PyTorch session.      At the end, it will call Python with the arguments of the <code>conda-python-distributed</code>     command.</p> </li> <li> <p><code>get-master</code>: A helper command for <code>conda-python-distributed</code>.</p> </li> </ul> <p>These scripts are available in the container in the <code>/runscripts</code> subdirectory but can also be reached with their full path name, and can be inspected outside the container in the <code>$RUNSCRIPTS</code> subdirectory.</p> <p>Those scripts don't cover all use cases for PyTorch on LUMI, but can be used as a source of inspiration for your own scripts.</p> </li> <li> <p>For the containers with support for virtual environments (from 20240315 on),     it also creates a number of commands intended to be used outside the container:</p> <ul> <li> <p><code>start-shell</code>: To start a bash shell in the container. Arguments can be used     to, e.g., tell it to start a command. Without arguments, the conda and Python      virtual environments will be initialised, but this is not the case as soon as     arguments are used. It takes the command line arguments that bash can also take.</p> </li> <li> <p><code>make-squashfs</code>: Make the user-software.squashfs file that would then be mounted     in the container after reloading the module. This will enhance performance if     the extra installation in user-software contains a lot of files.</p> </li> <li> <p><code>unmake-squashfs</code>: Unpack the user-software.squashfs file into the user-software     subdirectory of $CONTAINERROOT to enable installing additional packages.</p> </li> </ul> </li> <li> <p>From the PyTorch 2.6.0 modules onwards, it also creates wrapper scripts for the     <code>python</code>and <code>pip</code> commands (including the commands with major and major.minor Python     version in their name), and a number of other commands including <code>accelerate</code>,      <code>huggingface-cli</code>, <code>ray</code> and <code>torchrun</code>. These wrappers should work in the same      way as those in the CSC local software stacks as documented in the CSC PyTorch documentation     and the CSC machine learning guide.     These wrappers still support the other features of this module, and in particular the way     extra packages in a virtual environment can be managed to reduce the load on the      file system. The <code>list-packages</code> script is also supported (since late July 2025).</p> <p>Note though that there is one important difference with the way the CSC scripts  work: Our module works with a predefined virtual environment which is in a different place in the file system in the container and outside the container, but can also  be squashed into a SquashFS file to avoid killing the file system when running a  big virtual environment. Moreover, that environment is also automatically activated when loading the module. So creating another virtual environment may conflict. If this would be a real issue, contace LUMI support and we may look for a custom solution (e.g., by telling you how to install separate modules for each virtual environment).</p> </li> </ol> <p>The container uses a miniconda environment in which Python and its packages are installed. That environment needs to be activated in the container when running. </p> <ol> <li> <p>For the PyTorch 2.6 containers, the activation is done by singularity startup     procedure and users don't need to do anything.</p> </li> <li> <p>For older containers from the 20240315 versions onwards, the EasyBuild module basically     does all the important work for the Conda initialisation by injecting the necessary PATH     changes and environment variables in the container. However, when using the containers     without the EasyBuild module, one has to initialise the conda environment explicitly     by executing the commands in the environment variable WITH_CONDA.</p> </li> <li> <p>In even older containers, users have to explicitly activate the conda environment     by executing the commands in the environment variable WITH_CONDA.</p> </li> </ol> <p>From the 20240315 version onwards, EasyBuild will also activate the Python virtual environment <code>pytorch</code>. Inside the container, the virtual environment is available in <code>/user-software/venv</code> while outside the container the files can be found in  <code>$CONTAINERROOT/user-software/venv</code> (if this directory has not been removed after creating a SquashFS file from it for better file system performance). You can also use the  <code>/user-software</code> subdirectory in the container to install other software through other methods. In these containers it is also very easy to check which Python packages are installed  with</p> <pre><code>singularity exec $SIF pip list\n</code></pre> <p>or if the <code>start-shell</code> script is available (which is the case for most of these containers),</p> <pre><code>start-shell -c 'pip list'\n</code></pre> <p>Note that when using the PyTorch containers through the modules provided by the EasyConfigs on this page, one should not use the <code>singularity-AI-bindings</code> module, as the functionality of that module is already included in the <code>PyTorch</code> container  modules discussed on this page (and may even be more fine-tuned to the specific container).</p>","boost":10},{"location":"p/PyTorch/#examples-with-the-wrapper-scripts","title":"Examples with the wrapper scripts","text":"<p>Note: In the examples below you may need to replace the <code>standard-g</code> queue with a different slurm partition allocatable per node if your user category has no access to <code>standard-g</code>. </p>","boost":10},{"location":"p/PyTorch/#list-the-python-packages-in-the-container","title":"List the Python packages in the container","text":"","boost":10},{"location":"p/PyTorch/#containers-from-pytorch-26-on","title":"Containers from PyTorch 2.6 on","text":"<p>It is not needed to start a singularity shell  or explicitly call <code>singularity exec</code>, as</p> <pre><code>module load PyTorch/2.7.0-rocm-6.2.4-python-3.12-singularity-20250527\npip list\n</code></pre> <p>can be executed directly from a system bash shell as long as the PyTorch module is loaded thanks to a wrapper script that takes care of starting <code>pip</code> in the container. However, the approach below still works.</p>","boost":10},{"location":"p/PyTorch/#other-containers-from-20240315-on","title":"Other containers from 20240315 on","text":"<p>For the containers from version 20240315 on, the <code>$WITH_CONDA</code> is not needed. In an interactive session, you still need to load the module and go into the container:</p> <pre><code>module load LUMI PyTorch/2.3.1-rocm-6.0.3-python-3.12-singularity-20240923\nstart-shell\n</code></pre> <p>(where we use the wrapper script <code>start-shell</code>, equivalent to <code>singularity shell $SIF</code>) but once in the container, at the <code>Singularity&gt;</code> prompt, all that is needed is</p> <pre><code>pip list\n</code></pre> <p>Without an interactive session in the container, all that is now needed is</p> <pre><code>module load LUMI PyTorch/2.3.1-rocm-6.0.3-python-3.12-singularity-20240923\nsingularity exec $SIF pip list\n</code></pre> <p>as the <code>pip</code> command is in the search path set up by the container and the  container module.</p>","boost":10},{"location":"p/PyTorch/#containers-up-to-and-including-the-20240209-ones","title":"Containers up to and including the 20240209 ones","text":"<p>For the containers up to the 20240209 ones, this example also illustrates how the <code>WITH_CONDA</code> environment variable should be used. The example can be run in an interactive session and works even on the login nodes.</p> <p>In these containers, the Python packages can be listed using the following steps: First execute, e.g., </p> <pre><code>module load LUMI PyTorch/2.2.0-rocm-5.6.1-python-3.10-singularity-20240209\nsingularity shell $SIF\n</code></pre> <p>which takes you in the container, and then in the container, at the <code>Singularity&gt;</code>  prompt:</p> <pre><code>$WITH_CONDA\npip list\n</code></pre> <p>The same can be done without opening an interactive session in the container with</p> <pre><code>module load LUMI PyTorch/2.2.0-rocm-5.6.1-python-3.10-singularity-20240209\nsingularity exec $SIF bash -c '$WITH_CONDA ; pip list'\n</code></pre> <p>Notice the use of single quotes as with double quotes, <code>$WITH_CONDA</code> would be expanded by the shell before executing the singularity command, and at that time <code>WITH_CONDA</code> is not yet defined. To use the container it also doesn't matter which version of the  LUMI module is loaded, and in fact, loading CrayEnv would work as well.</p>","boost":10},{"location":"p/PyTorch/#executing-python-code-in-the-container-single-task","title":"Executing Python code in the container (single task)","text":"<p>As an example, we'll import the <code>torch</code> package and request the number of GPUs  it sees.</p>","boost":10},{"location":"p/PyTorch/#containers-for-pytorch-260-and-later","title":"Containers for PyTorch 2.6.0 and later","text":"<p>For these containers, one can still use the <code>conda-python-simple</code> wrapper script presented  below for the older containers, but another option is to use the <code>python</code> wrapper script provided by the container module so it is not needed to call <code>singularity exec</code> explicitly:</p> <pre><code>salloc -N1 -pstandard-g -t 10:00\nmodule load LUMI PyTorch/2.7.0-rocm-6.2.4-python-3.12-singularity-20250527\nsrun -N1 -n1 --gpus 8 python \\\n    -c 'import torch; print(\"I have this many devices:\", torch.cuda.device_count())'\nexit\n</code></pre> <p>This command will start Python and run PyTorch on a single CPU core with access to all 8 GPUs.</p>","boost":10},{"location":"p/PyTorch/#containers-from-20240315-on","title":"Containers from 20240315 on","text":"<p>As the Conda environment and Python virtual environment are properly initialised by the module, the <code>/runscripts/conda-python-simple</code> script provided in older modules can be used (it is kept for now for compatibility reasons) but it is easier to directly execute the <code>python</code> command in the container.</p> <p>The following commands will work just as well:</p> <pre><code>salloc -N1 -pstandard-g -t 10:00\nmodule load LUMI PyTorch/2.3.1-rocm-6.0.3-python-3.12-singularity-20240923\nsrun -N1 -n1 --gpus 8 singularity exec $SIF python \\\n    -c 'import torch; print(\"I have this many devices:\", torch.cuda.device_count())'\nexit\n</code></pre>","boost":10},{"location":"p/PyTorch/#containers-up-to-and-including-the-20240209-ones_1","title":"Containers up to and including the 20240209 ones","text":"<p>The wrapper script <code>conda-python-single</code> which can be found in the <code>/runscripts</code> directory in the container, takes care of initialising the Conda environment and then passes its arguments to the <code>python</code> command. </p> <pre><code>salloc -N1 -pstandard-g -t 10:00\nmodule load LUMI PyTorch/2.2.0-rocm-5.6.1-python-3.10-singularity-20240209\nsrun -N1 -n1 --gpus 8 singularity exec $SIF conda-python-simple \\\n    -c 'import torch; print(\"I have this many devices:\", torch.cuda.device_count())'\nexit\n</code></pre> Container modules installed before March 9, 2024 <p>In these versions of the container module, <code>conda-python-simple</code> is not yet in the search path for executables, and you need to modify the job script to use <code>/runscripts/conda-python-simple</code> instead.</p>","boost":10},{"location":"p/PyTorch/#distributed-learning-example","title":"Distributed learning example","text":"<p>The communication between LUMI's GPUs during training with PyTorch is done via  RCCL, which is a library of  collective  communication routines for AMD GPUs. RCCL works out of the box on LUMI, however,  a special plugin is required so it can take advantage of the Slingshot 11 interconnect.  That's the <code>aws-ofi-rccl</code> plugin,  which is a library that can be used as a back-end for RCCL to interact with the interconnect  via libfabric. The plugin is already built in the containers that we provide here.</p> <p>A proper distributed learning run does require setting some environment variables. You can find out more by checking the scripts in <code>$EBROOTPYTORCH/runscripts</code> (after installing and loading the module), and in particular the  <code>conda-python-distributed</code> script and the <code>get-master</code> script used by the former. Together these scripts make job scripts a lot easier.</p> <p>An example job script using the mnist example (itself based on an example by Google) is:</p> <ol> <li> <p>The mnist example needs some data files. We can get them in the job script     but also simply install them now, avoiding repeated downloads when using the script multiple times     (in the example with wrappers it was in the job script to have a one file example).     First create a directory for your work on this example and go into that directory.     In that directory we'll create a subdirectory <code>mnist</code> with some files. The first run of      the jobscript will download even more files.     Assuming you are working on the login nodes where the <code>wget</code> program is already available,</p> <pre><code>mkdir mnist ; pushd mnist\nwget https://raw.githubusercontent.com/Lumi-supercomputer/lumi-reframe-tests/98327968ff300ed0181d5d14b5dd49cdf1d7b743/checks/containers/ML_containers/src/pytorch/mnist/mnist_DDP.py\nsed -i -e 's|download=True|download=False|' mnist_DDP.py\nmkdir -p model ; cd model\nwget https://github.com/Lumi-supercomputer/lumi-reframe-tests/raw/98327968ff300ed0181d5d14b5dd49cdf1d7b743/checks/containers/ML_containers/src/pytorch/mnist/model/model_gpu.dat\ncd ..\n\nmkdir -p data/MNIST/raw\npushd data/MNIST/raw\nwget https://github.com/golbin/TensorFlow-MNIST/raw/refs/heads/master/mnist/data/train-images-idx3-ubyte.gz\nwget https://github.com/golbin/TensorFlow-MNIST/raw/refs/heads/master/mnist/data/train-labels-idx1-ubyte.gz\nwget https://github.com/golbin/TensorFlow-MNIST/raw/refs/heads/master/mnist/data/t10k-images-idx3-ubyte.gz\nwget https://github.com/golbin/TensorFlow-MNIST/raw/refs/heads/master/mnist/data/t10k-labels-idx1-ubyte.gz    \ngunzip -k *.gz\npopd\n\nfor number in $(seq 0 31); do ln -s data data$number ; done\n\npopd\n</code></pre> <p>will fetch the two files we need to start.</p> </li> <li> <p>We can now create the jobscript <code>mnist.slurm</code>:</p> <pre><code>#!/bin/bash -e\n#SBATCH --nodes=4\n#SBATCH --gpus-per-node=8\n#SBATCH --tasks-per-node=8\n#SBATCH --cpus-per-task=7\n#SBATCH --output=\"output_%x_%j.txt\"\n#SBATCH --partition=standard-g\n#SBATCH --mem=480G\n#SBATCH --time=00:10:00\n#SBATCH --account=project_&lt;your_project_id&gt;\n\nmodule load LUMI  # Which version doesn't matter, it is only to get the container.\nmodule load PyTorch/2.7.0-rocm-6.2.4-python-3.12-singularity-20250527\n\n# Optional: Inject the environment variables for NCCL debugging into the container.   \n# This will produce a lot of debug output!     \nexport NCCL_DEBUG=INFO\nexport NCCL_DEBUG_SUBSYS=INIT,COLL\n\nc=fe\nMYMASKS=\"0x${c}000000000000,0x${c}00000000000000,0x${c}0000,0x${c}000000,0x${c},0x${c}00,0x${c}00000000,0x${c}0000000000\"\n\ncd mnist\nsrun --cpu-bind=mask_cpu:$MYMASKS \\\n  singularity exec $SIFPYTORCH \\\n    conda-python-distributed -u mnist_DDP.py --gpu --modelpath model\n</code></pre> Container modules installed before March 9, 2024 <p>In these versions of the container module, <code>conda-python-distributed</code> is not yet in the search path for executables, and you need to modify the job script to use <code>/runscripts/conda-python-distributed</code> instead.</p> <p>We use a CPU mask to ensure a proper mapping of CPU chiplets onto GPU chiplets. The GPUs are used in the regular ordering, so we reorder the CPU cores for each task so that the first task on a node gets the cores most closely to GPU 0, etc. </p> <p>The jobscript also shows how environment variables to enable debugging of the RCCL communication can be set outside the container. This is really as if they are set in the container.</p> <p>If those variables would in some way already be defined in the container (which is not the case), you could still overwrite the value set in the container by prepending the name of the variable with <code>SINGULARITYENV_</code>. </p> </li> </ol> Inside the <code>conda-python-distributed</code> script (if you need to modify things) <pre><code>#!/bin/bash -e\n\n# Make sure GPUs are up\nif [ $SLURM_LOCALID -eq 0 ] ; then\n    rocm-smi\nfi\nsleep 2\n\n# MIOPEN needs some initialisation for the cache as the default location\n# does not work on LUMI as Lustre does not provide the necessary features.\nexport MIOPEN_USER_DB_PATH=\"/tmp/$(whoami)-miopen-cache-$SLURM_NODEID\"\nexport MIOPEN_CUSTOM_CACHE_DIR=$MIOPEN_USER_DB_PATH\n\nif [ $SLURM_LOCALID -eq 0 ] ; then\n    rm -rf $MIOPEN_USER_DB_PATH\n    mkdir -p $MIOPEN_USER_DB_PATH\nfi\nsleep 2\n\n# Set interfaces to be used by RCCL.\n# This is needed as otherwise RCCL tries to use a network interface it has\n# no access to on LUMI.\nexport NCCL_SOCKET_IFNAME=hsn0,hsn1,hsn2,hsn3\nexport NCCL_NET_GDR_LEVEL=3\n\n# Set ROCR_VISIBLE_DEVICES so that each task uses the proper GPU\nexport ROCR_VISIBLE_DEVICES=$SLURM_LOCALID\n\n# Report affinity to check\necho \"Rank $SLURM_PROCID --&gt; $(taskset -p $$); GPU $ROCR_VISIBLE_DEVICES\"\n\n# The usual PyTorch initialisations (also needed on NVIDIA)\n# Note that since we fix the port ID it is not possible to run, e.g., two\n# instances via this script using half a node each.\nexport MASTER_ADDR=$(/runscripts/get-master \"$SLURM_NODELIST\")\nexport MASTER_PORT=29500\nexport WORLD_SIZE=$SLURM_NPROCS\nexport RANK=$SLURM_PROCID\n\n# Run application\npython \"$@\"\n</code></pre> <p>The script sets a number of environment variables. Some are fairly standard when using PyTorch on an HPC cluster while others are specific for the LUMI interconnect and architecture or the  AMD ROCm environment.</p> <p>The <code>MIOPEN_</code> environment variables are needed to make  MIOpen create its caches on <code>/tmp</code> as doing this on Lustre fails because of file locking issues:</p> <pre><code>export MIOPEN_USER_DB_PATH=\"/tmp/$(whoami)-miopen-cache-$SLURM_NODEID\"\nexport MIOPEN_CUSTOM_CACHE_DIR=$MIOPEN_USER_DB_PATH\n\nif [ $SLURM_LOCALID -eq 0 ] ; then\n    rm -rf $MIOPEN_USER_DB_PATH\n    mkdir -p $MIOPEN_USER_DB_PATH\nfi\n</code></pre> <p>It is also essential to tell RCCL, the communication library, which network adapters to use.  These environment variables start with <code>NCCL_</code> because ROCm tries to keep things as similar as possible to NCCL in the NVIDIA ecosystem:</p> <pre><code>export NCCL_SOCKET_IFNAME=hsn0,hsn1,hsn2,hsn3\nexport NCCL_NET_GDR_LEVEL=3\n</code></pre> <p>Without this RCCL may try to use a network adapter meant for system management rather than inter-node communications!</p> <p>We also set <code>ROCR_VISIBLE_DEVICES</code> to ensure that each task uses the proper GPU.</p> <p>Furthermore some environment variables are needed by PyTorch itself that are also needed on NVIDIA systems.</p> <p>PyTorch needs to find the master for communication which is done through</p> <pre><code>export MASTER_ADDR=$(/runscripts/get-master \"$SLURM_NODELIST\")\nexport MASTER_PORT=29500\n</code></pre> <p>The <code>get-master</code> script that is used here is a Python script to determine the master node  for communication and also already provided in the <code>/runscripts</code> subdirectory in the  container (or <code>$RUNSCRIPTS</code> outside the container).</p> <p>As we fix the port number here, the <code>conda-python-distributed</code> script that we provide,  has to run on exclusive nodes. Running, e.g., 2 4-GPU jobs on the same node with this command will not work as there will be a conflict for the TCP port for communication on the master as <code>MASTER_PORT</code> is hard-coded in  this version of the script.</p>","boost":10},{"location":"p/PyTorch/#installation-with-easybuild","title":"Installation with EasyBuild","text":"<p>To install the container with EasyBuild, follow the instructions in the EasyBuild section of the LUMI documentation, section \"Software\", and use the dummy partition <code>container</code>, e.g.:</p> <pre><code>module load LUMI partition/container EasyBuild-user\neb PyTorch-2.6.0-rocm-6.2.4-python-3.12-singularity-20250404.eb\n</code></pre> <p>To use the container after installation, the <code>EasyBuild-user</code> module is not needed nor is the <code>container</code> partition. The module will be available in all versions of the LUMI stack and in the <code>CrayEnv</code> stack (provided the environment variable <code>EBU_USER_PREFIX</code> points to the right location).</p> <p>After loading the module, the docker definition file used when building the container is available in the <code>$EBROOTPYTORCH/share/docker-defs</code> subdirectory (but not for all versions). As it requires some licensed components from LUMI and some other files that are not included, it currently cannot be used to reconstruct the container and extend its definition.</p>","boost":10},{"location":"p/PyTorch/#extending-the-containers-with-virtual-environment-support","title":"Extending the containers with virtual environment support","text":"<p>This text is for containers from 20240315 on. Other containers can be extended with virtual environments also but you'll have to do a lot more work by hand that is now done by the module, or adapt the EasyConfig for those based on what is in the more recent EasyConfigs.</p>","boost":10},{"location":"p/PyTorch/#manual-procedure","title":"Manual procedure","text":"<p>Let's demonstrate how the module can be extended by using <code>pip</code> to install packages in the virtual environment. We'll demonstrate using the <code>PyTorch/2.7.0-rocm-6.2.4-python-3.12-singularity-20250527</code> module where we assume that you have already installed this module:</p> <pre><code>module load CrayEnv\nmodule load PyTorch/2.7.0-rocm-6.2.4-python-3.12-singularity-20250527\n</code></pre> <p>Let's check a directory outside the container:</p> <pre><code>ls -l $CONTAINERROOT/user-software/venv/pytorch\n</code></pre> <p>which produces something along the lines of</p> <pre><code>drwxrwsr-x 2 username project_46XYYYYYY 4096 Mar 25 17:15 bin\ndrwxrwsr-x 2 username project_46XYYYYYY 4096 Mar 25 17:14 include\ndrwxrwsr-x 3 username project_46XYYYYYY 4096 Mar 25 17:14 lib\nlrwxrwxrwx 1 username project_46XYYYYYY    3 Mar 25 17:14 lib64 -&gt; lib\n-rw-rw-r-- 1 username project_46XYYYYYY   94 Mar 25 17:15 pyvenv.cfg\n</code></pre> <p>The output is typical for a freshly initialised Python virtual environment.</p> <p>We can now enter the container:</p> <pre><code>singularity shell $SIF\n</code></pre> <p>At the singularity prompt, try</p> <pre><code>ls -l /user-software/venv/pytorch\n</code></pre> <p>and notice that we have the same output as with the previous <code>ls</code> command that we executed outside the container. So the <code>$CONTAINERROOT/user-software</code> subdirectory is available in the container as <code>/user-software</code>.</p> <p>Executing</p> <pre><code>which python\nwhich python3\n</code></pre> <p>which return the lines</p> <pre><code>/user-software/venv/pytorch/bin/python\n/user-software/venv/pytorch/bin/python3\n</code></pre> <p>also shows that the virtual environment is already activated and that we get the <code>python</code> wrapper script from the virtual environment and not the system <code>python3</code> (there is a <code>python3</code> executable in <code>/usr/bin</code>) or the Conda <code>python</code> in <code>/opt/miniconda3/envs/pytorch/bin</code>.</p> <p>Let us install the <code>torch-hd</code> package using <code>pip</code>. For PyTorch versions prior to 2.6.0, you have to do this in a singularity shell as started above, but from PyTorch 2.6.0 on, additional wrapper scripts are provided so that you can also install additional packages with <code>pip</code> from a shell on the system.</p> <pre><code>pip install torch-hd\n</code></pre> <p>To check if the package is present and can be loaded, try</p> <pre><code>python -c 'import torchhd ; print( torchhd.__version__ )'\n</code></pre> <p>and notice that it does print the version number of <code>torch-hd</code>, so the package was successfully loaded.</p> <p>If you are in the container, you can now execute </p> <pre><code>ls /user-software/venv/pytorch/lib/python3.12/site-packages/\n</code></pre> <p>and you'll get output similar to</p> <pre><code>pip                   torchhd\npip-24.3.1.dist-info  torch_hd-5.8.4.dist-info\n</code></pre> <p>which confirms that the <code>torch-hd</code> package is indeed installed in the virtual environment.</p> <p>In a shell outside the container, one can check:</p> <pre><code>ls $CONTAINERROOT/user-software/venv/pytorch/lib/python3.12/site-packages/\n</code></pre> <p>and we get the same output as with the previous <code>ls</code> command. I.e., the installation file of the package is indeed saved outside the container.</p> <p>Now there is one remaining problem. Try (outside the container)</p> <pre><code>lfs find $CONTAINERROOT/user-software | wc -l\n</code></pre> <p>where <code>lfs find</code> is a version of the <code>find</code> command with some restrictions, but one that is a lot more friendly to the Lustre metadata servers. The output suggests that there are over 1300 files and directories in the <code>user-software</code> subdirectory. The Lustre filesystem doesn't like working with lots of small files and Python can sometimes open a lot of those files in a short amount of time. </p> <p>The module also provides a solution for this: The content of <code>$CONTAINERROOT/user-software</code> can be packed in a single SquashFS file <code>$CONTAINERROOT/user-software.squashfs</code> and after reloading the <code>PyTorch</code> module that is being used, that file will be mounted in the container and provide <code>/user-software</code>. This may improve performance of Python in the container and is certainly appreciated by your fellow LUMI users. To this end, the module provides the <code>make-squashfs</code> script. Try</p> <pre><code>make-squashfs\nls $CONTAINERROOT\n</code></pre> <p>The second command outputs something along the lines of</p> <pre><code>bin\neasybuild\nlumi-pytorch-rocm-6.2.4-python-3.12-pytorch-v2.6.0-dockerhash-36e16fb5b67b.sif\nrunscripts\nuser-software\nuser-software.squashfs\n</code></pre> <p>so we see that there is now indeed a file <code>user-software.squashfs</code> in that subdirectory. We do not automatically delete the <code>user-software</code> subdirectory, but you can delete it safely using</p> <pre><code>rm -rf $CONTAINERROOT/user-software\n</code></pre> <p>as it can be reconstructed (except for the file dates) from the SquashFS file using the script <code>unmake-squashfs</code> which is also provided by the module.</p> <p>Reload the module to let the changes take effect and go again in the container:</p> <pre><code>module load PyTorch/2.7.0-rocm-6.2.4-python-3.12-singularity-20250527\nsingularity shell $SIF\n</code></pre> <p>Now try</p> <pre><code>echo \"Test\" &gt; /user-software/test.txt\n</code></pre> <p>and notice that we can no longer write in <code>/user-software</code>.</p> <p>Installing further packages with <code>pip</code> would not fail, but they would not be installed where you expect and instead would be installed in your home directory. The <code>pip</code> command would warn with</p> <pre><code>Defaulting to user installation because normal site-packages is not writeable\n</code></pre> <p>Try, e.g.,</p> <pre><code>pip install torch-pme==0.3.0\n</code></pre> <p>and notice that the package (likely) landed in <code>~/.local/lib/python3.12/site-packages</code>:</p> <pre><code>ls ~/.local/lib/python3.12/site-packages\n</code></pre> <p>will among other subdirectories contain the subdirectory <code>lightning</code> and this is  not entirely what we want.</p> <p>Yet it is still possible to install additional packages by first unsquashing the <code>user-software.squashfs</code> file with </p> <pre><code>unmake-squashfs\n</code></pre> <p>(assuming that you had removed the <code>$CONTAINERROOT/user-software</code> subdirectory before), then deleting the SquashFS file:</p> <pre><code>rm $CONTAINERROOT/user-software.squashfs\n</code></pre> <p>and reload the module. Make sure though that you first remove the packages that were accidentally installed in <code>~/.local</code>.</p> <p>One big warning is needed here though: If you do a complete re-install of the module with EasyBuild, everything in the installation directory is erased, including your own installation. So just to make sure, you may want to keep a copy of the <code>user-software.squashfs</code> file elsewhere.</p>","boost":10},{"location":"p/PyTorch/#automation-of-the-procedure","title":"Automation of the procedure","text":"<p>Try this procedure preferably from a directory that doesn't contain too many files or subdirectories as that may slow down EasyBuild considerably.</p> <p>In some cases it is possible to adapt the EasyConfig file to also install the additional Python packages that are not yet included in the container. This is demonstrated in the  <code>PyTorch-2.3.1-rocm-6.0.3-python-3.12-singularity-exampleVenv-20240923.eb</code> example EasyConfig file which is available on LUMI. First load EasyBuild to install containers, e.g.,</p> <pre><code>module load LUMI partition/container EasyBuild-user\n</code></pre> <p>and then we can use EasyBuild to copy the recipe to our current directory:</p> <pre><code>eb --copy-ec PyTorch-2.3.1-rocm-6.0.3-python-3.12-singularity-exampleVenv-20240923.eb .\n</code></pre> <p>You can now inspect the <code>.eb</code> file with your favourite editor. This file basically defines a lot of Python variables that EasyBuild uses, but is also a small program so we can even define and use extra variables that EasyBuild does not know. The magic happens in two blocks.</p> <p>First,</p> <pre><code>local_pip_requirements = \"\"\"\ntorchmetrics\npytorch-lightning\n\n\"\"\"\n</code></pre> <p>(with an empty line at the end) defines the content that we will put in a <code>requirements.txt</code> file to  tell <code>pip</code> which packages we want to install.</p> <p>The second part of the magic happens in some lines in the <code>postinstallcmds</code> block, a list of commands that EasyBuild will execute after the default installation procedure (which only copies the container <code>.sif</code> file to its location). Four lines in particular perform the magic:</p> <pre><code>    f'cat &gt;%(installdir)s/user-software/venv/requirements.txt &lt;&lt;EOF {local_pip_requirements}EOF',\n    f'singularity exec --bind {local_singularity_bind} --bind %(installdir)s/user-software:/user-software %(installdir)s/{local_sif} bash -c \\'source /runscripts/init-conda-venv ; cd /user-software/venv ; pip install -r requirements.txt\\'',\n    '%(installdir)s/bin/make-squashfs',\n    '/bin/rm -rf %(installdir)s/user-software',\n</code></pre> <p>The first line creates the <code>requirements.txt</code> file from the <code>local_pip_requirements</code> variable that we have created. The way to do this is a bit awkward by creating a shell command from it, but it works in most cases. The second line then calls <code>pip install</code> in the singularity container. At this point there is no module yet so we need to do all bindings by hand and use variables that are known to EasyBuild.  The third line then creates the <code>user-software.squashfs</code> file and the last line deletes the <code>user-software</code> subdirectory. These four lines are generic as the package list is defined via the  <code>local_pip_requirements</code> environment variable.</p>","boost":10},{"location":"p/PyTorch/#installing-packages-that-need-to-be-compiled","title":"Installing packages that need to be compiled","text":"<p>Some packages need to be compiled on the system, even when installing via <code>pip</code>. </p> <p>The problem one may run into is that it may seem that there is no <code>gcc</code> or <code>g++</code> in the container, while the default behaviour of packages installed with <code>pip</code> that need compilation, may be to  go looking for either <code>gcc</code>, etc., or some Conda-installed compiler such as  <code>x86_64-conda-linux-gnu-gcc</code>, etc. </p> <p>Now in SUSE Linux, as used by the containers for optimal compatibility with Linux, <code>gcc</code> would be a very old compiler, basically version 7.5, as enterprise Linux distributions tend to stay with the version they were released with until the next major upgrade. Yet SUSE does support  newer versions of the compilers also, but they then include the major version in their name, e.g., <code>gcc-12</code>, <code>g++-12</code>, etc. And one of these versions may be installed in the container, as some of the software in most of the AI containers is compiled during the build phase of the compiler to better adapt them to LUMI. </p> <p>The Conda-installed compilers, are available in most, if not all containers.</p> <p>Usually it is possible to tell the <code>pip install</code> process to tell which compiler to use by setting environment variables, e.g., <code>CC</code> for the C compiler and <code>CXX</code> for the C++ compiler.</p> <p>E.g., let's try to install the <code>torch-scatter</code> in the <code>PyTorch/2.7.0-rocm-6.2.4-python-3.12-singularity-20250527</code> module (assuming that one is installed already and loaded). With this module, it is not needed to first start a shell in the container to do the installation, but it is still possible to first do a <code>start-shell</code> (and this is needed with prior versions). The <code>torch-scatter</code> package needs the C++ compiler, so the trick to install this package, is to use</p> <pre><code>CXX=g++-12 pip install torch-scatter\n</code></pre> <p>To check if the package is indeed installed (though this is not always enough to guarantee a  correct installation), run</p> <pre><code>python -c 'import torch_scatter ; print( torch_scatter.__version__ )'\n</code></pre>","boost":10},{"location":"p/PyTorch/#alternative-direct-access-without-the-easybuild-generated-pytorch-module","title":"Alternative: Direct access (without the EasyBuild-generated PyTorch module)","text":"","boost":10},{"location":"p/PyTorch/#getting-the-container-image","title":"Getting the container image","text":"<p>The PyTorch containers are available in the following subdirectories of <code>/appl/local/containers</code>:</p> <ul> <li> <p><code>/appl/local/containers/sif-images</code>: Symbolic link to the latest version of the container     with the given mix of components/packages mentioned in the filename.     Other packages in the container may vary over time and change without notice.</p> </li> <li> <p><code>/appl/local/containers/tested-containers</code>: Tested containers provided as a Singulartiy <code>.sif</code> file     and a docker-generated tarball. Containers in this directory are removed quickly when a new version     becomes available.</p> </li> <li> <p><code>/appl/local/containers/easybuild-sif-images</code>: Singularity <code>.sif</code> images used with the EasyConfigs     that we provide. They tend to be available for a longer time than in the other two subdirectories.</p> </li> </ul> <p>If you depend on a particular version of a container, we recommend that you copy the container to your own file space (e.g., in <code>/project</code>,) as there is no guarantee the specific version will remain available centrally on the system for as long as you want.</p> <p>When using the containers without the modules, you will have to take care of the bindings as some system files are needed for, e.g., RCCL. The recommended mininmal bindings are:</p> <pre><code>-B /var/spool/slurmd,/opt/cray/,/usr/lib64/libcxi.so.1\n</code></pre> <p>and the bindings you need to access the files you want to use from <code>/scratch</code>, <code>/flash</code> and/or <code>/project</code>: </p> <pre><code>-B /pfs,/scratch,/projappl,/project,/flash,/appl\n</code></pre> <p>Note that the list recommended bindings may change after a system update or between containers. E.g., the containers provided since early 2025 already contain their own <code>libcxi.so.1</code> but the container is configured in such a way that binding the one from the system will do no harm. Some containers in the past also required binding <code>/usr/lib64/libjansson.so.4</code> but there is now a version in the newer containers, and overwriting that version may in fact create incompatibilities with other  software in the container.</p> <p>If you want to quickly check what Python packages are available in the containers in those directories, you don't need all the bind points and a quick</p> <pre><code>singularity exec &lt;path-to-sif-file&gt; bash -c '$WITH_CONDA ; pip list'\n</code></pre> <p>will do. Note the single quotes though as we don't want the <code>$WITH_CONDA</code> to be expanded outside  the container (and of course replace <code>&lt;path-to-sif-file&gt;</code> with the actual path to and name of  the SIF file you want to check.)</p> <p>Alternatively, you can also build your own container image on top of the ROCm containers that we provide with cotainr.</p> <p>If you use PyTorch containers from other sources, take into account that</p> <ul> <li> <p>They need to explicitly use ROCm-enabled versions of the packages. NVIDIA packages     will not work.</p> </li> <li> <p>The RCCL implementation provided in the container will likely not work well with the     communication network and the      AWS RCCL plugin for OFI plugin will still need to be      installed in a way that the libfabric library on LUMI is used.</p> </li> <li> <p>Similarly the <code>mpi4py</code> package (if included) may not be compatible with the interconnect     on LUMI, also resulting in poor performance or failure. For AI packages, things will     often still be OK as MPI is often only used during the initialisation after which      communication is done through RCCL.      You may want to make sure that an     MPI implementation that is ABI-compatible with Cray MPICH is used so that you can then try     to overwrite it with Cray MPICH.</p> </li> </ul> <p>The LUMI User Support Team tries to support the containers that it provides as good as possible, but we are not the PyTorch support team and have limited resources. In no way is it the task of the LUST to support any possible container from any possible source. See also our page \"Software Install Policy in the main LUMI documentation.</p>","boost":10},{"location":"p/PyTorch/#example-distributed-learning-without-the-wrappers","title":"Example: Distributed learning without the wrappers","text":"<p>For easy comparison, we use the same mnist example already used in the \"Distributed learning example\" with the wrapper scripts. The text is written in such a way though that it can be read without first reading that section.</p> <ol> <li> <p>First one needs to create the script <code>get-master.py</code> that will be used to determine the     master node for communication:</p> <pre><code>import argparse\ndef get_parser():\n    parser = argparse.ArgumentParser(description=\"Extract master node name from Slurm node list\",\n            formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument(\"nodelist\", help=\"Slurm nodelist\")\n    return parser\n\n\nif __name__ == '__main__':\n    parser = get_parser()\n    args = parser.parse_args()\n\n    first_nodelist = args.nodelist.split(',')[0]\n\n    if '[' in first_nodelist:\n        a = first_nodelist.split('[')\n        first_node = a[0] + a[1].split('-')[0]\n\n    else:\n        first_node = first_nodelist\n\n    print(first_node)\n</code></pre> </li> <li> <p>Next we need another script that will run in the container to set up a number of     environment variables that are needed to run PyTorch successfully on LUMI and at     the end, call Python to run our example. Let's store the following script as     <code>run-pytorch.sh</code>.</p> <pre><code>#!/bin/bash -e\n\n# Make sure GPUs are up\nif [ $SLURM_LOCALID -eq 0 ] ; then\n    rocm-smi\nfi\nsleep 2\n\n# !Remove this if using an image extended with cotainr or a container from elsewhere.!\n# Start conda environment inside the container\n$WITH_CONDA\n\n# MIOPEN needs some initialisation for the cache as the default location\n# does not work on LUMI as Lustre does not provide the necessary features.\nexport MIOPEN_USER_DB_PATH=\"/tmp/$(whoami)-miopen-cache-$SLURM_NODEID\"\nexport MIOPEN_CUSTOM_CACHE_DIR=$MIOPEN_USER_DB_PATH\n\nif [ $SLURM_LOCALID -eq 0 ] ; then\n    rm -rf $MIOPEN_USER_DB_PATH\n    mkdir -p $MIOPEN_USER_DB_PATH\nfi\nsleep 2\n\n# Optional! Set NCCL debug output to check correct use of aws-ofi-rccl (these are very verbose)\nexport NCCL_DEBUG=INFO\nexport NCCL_DEBUG_SUBSYS=INIT,COLL\n\n# Set interfaces to be used by RCCL.\n# This is needed as otherwise RCCL tries to use a network interface it has\n# no access to on LUMI.\nexport NCCL_SOCKET_IFNAME=hsn0,hsn1,hsn2,hsn3\nexport NCCL_NET_GDR_LEVEL=3\n\n# Set ROCR_VISIBLE_DEVICES so that each task uses the proper GPU\nexport ROCR_VISIBLE_DEVICES=$SLURM_LOCALID\n\n# Report affinity to check\necho \"Rank $SLURM_PROCID --&gt; $(taskset -p $$); GPU $ROCR_VISIBLE_DEVICES\"\n\n# The usual PyTorch initialisations (also needed on NVIDIA)\n# Note that since we fix the port ID it is not possible to run, e.g., two\n# instances via this script using half a node each.\nexport MASTER_ADDR=$(python /workdir/get-master.py \"$SLURM_NODELIST\")\nexport MASTER_PORT=29500\nexport WORLD_SIZE=$SLURM_NPROCS\nexport RANK=$SLURM_PROCID\nexport ROCR_VISIBLE_DEVICES=$SLURM_LOCALID\n\n# Run app\ncd /workdir/mnist\npython -u mnist_DDP.py --gpu --modelpath model\n</code></pre> What's going on in this script? (click to expand) <p>The script sets a number of environment variables. Some are fairly standard when using PyTorch on an HPC cluster while others are specific for the LUMI interconnect and architecture or the  AMD ROCm environment.</p> <p>At the start we just print some information about the GPU. We do this only ones on each node on the process which is why we test on <code>$SLURM_LOCALID</code>, which is a numbering starting from 0 on each node of the job:</p> <pre><code>if [ $SLURM_LOCALID -eq 0 ] ; then\n    rocm-smi\nfi\nsleep 2\n</code></pre> <p>The container uses a Conda environment internally. So to make the right version of Python and its packages availabe, we need to activate the environment. The precise command to activate the environment is stored in <code>$WITH_CONDA</code> and we can just call it by specifying the variable as a bash command.</p> <p>The <code>MIOPEN_</code> environment variables are needed to make  MIOpen create its caches on <code>/tmp</code> as doing this on Lustre fails because of file locking issues:</p> <pre><code>export MIOPEN_USER_DB_PATH=\"/tmp/$(whoami)-miopen-cache-$SLURM_NODEID\"\nexport MIOPEN_CUSTOM_CACHE_DIR=$MIOPEN_USER_DB_PATH\n\nif [ $SLURM_LOCALID -eq 0 ] ; then\n    rm -rf $MIOPEN_USER_DB_PATH\n    mkdir -p $MIOPEN_USER_DB_PATH\nfi\n</code></pre> <p>It is also essential to tell RCCL, the communication library, which network adapters to use.  These environment variables start with <code>NCCL_</code> because ROCm tries to keep things as similar as possible to NCCL in the NVIDIA ecosystem:</p> <pre><code>export NCCL_SOCKET_IFNAME=hsn0,hsn1,hsn2,hsn3\nexport NCCL_NET_GDR_LEVEL=3\n</code></pre> <p>Without this RCCL may try to use a network adapter meant for system management rather than inter-node communications!</p> <p>We also set <code>ROCR_VISIBLE_DEVICES</code> to ensure that each task uses the proper GPU. This is again based on the local task ID of each Slurm task.</p> <p>Furthermore some environment variables are needed by PyTorch itself that are also needed on NVIDIA systems.</p> <p>PyTorch needs to find the master for communication which is done through the <code>get-master.py</code> script that we created before:</p> <pre><code>export MASTER_ADDR=$(python get-master.py \"$SLURM_NODELIST\")\nexport MASTER_PORT=29500\n</code></pre> <p>As we fix the port number here, the <code>conda-python-distributed</code> script that we provide,  has to run on exclusive nodes. Running, e.g., 2 4-GPU jobs on the same node with this command will not work as there will be a conflict for the TCP port for communication on the master as <code>MASTER_PORT</code> is hard-coded in  this version of the script.</p> <p>Make sure the <code>run-pytorch.sh</code> script is executable:</p> <pre><code>chmod ug+x run-pytorch.sh\n</code></pre> </li> <li> <p>The mnist example also needs some data files. We can get them in the job script (as we did before)     but also simply install them now, avoiding repeated downloads when using the script multiple times     (in the example with wrappers it was in the job script to have a one file example).     Assuming you do this on the login nodes where the <code>wget</code> program is already available,</p> <pre><code>mkdir mnist ; pushd mnist\nwget https://raw.githubusercontent.com/Lumi-supercomputer/lumi-reframe-tests/98327968ff300ed0181d5d14b5dd49cdf1d7b743/checks/containers/ML_containers/src/pytorch/mnist/mnist_DDP.py\nsed -i -e 's|download=True|download=False|' mnist_DDP.py\nmkdir -p model ; cd model\nwget https://github.com/Lumi-supercomputer/lumi-reframe-tests/raw/98327968ff300ed0181d5d14b5dd49cdf1d7b743/checks/containers/ML_containers/src/pytorch/mnist/model/model_gpu.dat\ncd ..\n\nmkdir -p data/MNIST/raw\npushd data/MNIST/raw\nwget https://github.com/golbin/TensorFlow-MNIST/raw/refs/heads/master/mnist/data/train-images-idx3-ubyte.gz\nwget https://github.com/golbin/TensorFlow-MNIST/raw/refs/heads/master/mnist/data/train-labels-idx1-ubyte.gz\nwget https://github.com/golbin/TensorFlow-MNIST/raw/refs/heads/master/mnist/data/t10k-images-idx3-ubyte.gz\nwget https://github.com/golbin/TensorFlow-MNIST/raw/refs/heads/master/mnist/data/t10k-labels-idx1-ubyte.gz    \ngunzip -k *.gz\npopd\n\nfor number in $(seq 0 31); do ln -s data data$number ; done\n\npopd\n</code></pre> </li> <li> <p>Finaly we can create our jobscript, e.g. <code>mnist.slurm</code>, which we will launch from the directory     that also contains the <code>mnist</code> subdirectory and <code>get-master.py</code> and <code>run-pythorch.sh</code> scripts and the     container image.</p> <pre><code>#!/bin/bash -e\n#SBATCH --nodes=4\n#SBATCH --gpus-per-node=8\n#SBATCH --tasks-per-node=8\n#SBATCH --cpus-per-task=7\n#SBATCH --output=\"output_%x_%j.txt\"\n#SBATCH --partition=standard-g\n#SBATCH --mem=480G\n#SBATCH --time=00:10:00\n#SBATCH --account=project_&lt;your_project_id&gt;\n\nCONTAINER=/appl/local/containers/easybuild-sif-images/lumi-pytorch-rocm-6.0.3-python-3.12-pytorch-v2.3.1-dockerhash-2c1c14cafd28.sif\n\nc=fe\nMYMASKS=\"0x${c}000000000000,0x${c}00000000000000,0x${c}0000,0x${c}000000,0x${c},0x${c}00,0x${c}00000000,0x${c}0000000000\"\n\nsrun --cpu-bind=mask_cpu:$MYMASKS \\\nsingularity exec \\\n    -B /var/spool/slurmd \\\n    -B /opt/cray \\\n    -B /usr/lib64/libcxi.so.1 \\\n    -B $PWD:/workdir \\\n    $CONTAINER /workdir/run-pytorch.sh\n</code></pre> <p>(if you get mpi4py-related error messages in some of the older containers you may have to add <code>-B /usr/lib64/libjansson.so.4</code> also.)</p> </li> </ol>","boost":10},{"location":"p/PyTorch/#links","title":"Links","text":"<ul> <li> <p>Latest edition of the \"Moving your AI training jobs to LUMI\" workshop</p> </li> <li> <p>LUMI AI Guide</p> </li> </ul>","boost":10},{"location":"p/PyTorch/#singularity-containers-with-modules-for-binding-and-extras","title":"Singularity containers with modules for binding and extras","text":"<p>Install with the EasyBuild-user module in <code>partition/container</code>: <pre><code>module load LUMI partition/container EasyBuild-user\neb &lt;easyconfig&gt;\n</code></pre> The module will be available in all versions of the LUMI stack and in the CrayEnv stack.</p> <p>To access module help after installation use <code>module spider PyTorch/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig PyTorch-2.1.0-rocm-5.6.1-python-3.10-singularity-20231123.eb, will provide PyTorch/2.1.0-rocm-5.6.1-python-3.10-singularity-20231123</p> <p>Contains PyTorch 2.1.0 with torchaudio 2.1.0+420d9ac, torchdata 0.6.1+e1feeb2, torchtext 0.15.2a0+4571036, torchvision 0.16.0+a90e584 GPU version, on Python 3.10 and ROCm 5.6.1.</p> </li> <li> <p>EasyConfig PyTorch-2.1.0-rocm-5.6.1-python-3.10-singularity-20240207.eb, will provide PyTorch/2.1.0-rocm-5.6.1-python-3.10-singularity-20240207</p> <p>Contains PyTorch 2.1.0 with torchaudio 2.1.0+420d9ac, torchdata 0.6.1+e1feeb2, torchtext 0.15.2a0+4571036, torchvision 0.16.0+a90e584 GPU version and DeepSpeed 0.12.3, on Python 3.10 and ROCm 5.6.1.</p> </li> <li> <p>EasyConfig PyTorch-2.2.0-rocm-5.6.1-python-3.10-singularity-20240208.eb, will provide PyTorch/2.2.0-rocm-5.6.1-python-3.10-singularity-20240208</p> <p>Contains PyTorch 2.2.0 with torchaudio 2.2.0, torchdata 0.7.1+cpu, torchtext 0.17.0+cpu, torchvision 0.17.0 GPU version and DeepSpeed 0.12.3,  on Python 3.10 and ROCm 5.6.1.</p> </li> <li> <p>EasyConfig PyTorch-2.2.0-rocm-5.6.1-python-3.10-singularity-20240209.eb, will provide PyTorch/2.2.0-rocm-5.6.1-python-3.10-singularity-20240209</p> <p>Contains PyTorch 2.2.0 with torchaudio 2.2.0, torchdata 0.7.1+cpu, torchtext 0.17.0+cpu, torchvision 0.17.0 GPU version and, DeepSpeed 0.12.3, flash-attention 2.0.4 and xformers 0.0.25+8dd471d.d20240209, on Python 3.10 and ROCm 5.6.1.</p> </li> <li> <p>EasyConfig PyTorch-2.2.0-rocm-5.6.1-python-3.10-singularity-20240315.eb, will provide PyTorch/2.2.0-rocm-5.6.1-python-3.10-singularity-20240315</p> <p>Contains PyTorch 2.2.0 with torchaudio 2.2.0, torchdata 0.7.1+cpu, torchtext 0.17.0+cpu, torchvision 0.17.0 GPU version, DeepSpeed 0.12.3,  flash-attention 2.0.4 and xformers 0.0.25+8dd471d.d20240209, on Python 3.10 and ROCm 5.6.1. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.2.0-rocm-5.6.1-python-3.10-singularity-exampleVenv-20240315.eb, will provide PyTorch/2.2.0-rocm-5.6.1-python-3.10-singularity-exampleVenv-20240315</p> <p>Contains PyTorch 2.2.0 with torchaudio 2.2.0, torchdata 0.7.1+cpu, torchtext 0.17.0+cpu, torchvision 0.17.0 GPU version, DeepSpeed 0.12.3,  flash-attention 2.0.4 and xformers 0.0.25+8dd471d.d20240209, on Python 3.10 and ROCm 5.6.1. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>As an example of how installation in the virtual environment can be automated through EasyBuild, torchmetrics and pytorch-lightning are installed in the virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> <p>This environment is experimental and only meant as an example of what can be done, but may not be fully functional for everybody. Most users should use the non-exampleVenv versions.</p> </li> <li> <p>EasyConfig PyTorch-2.2.2-rocm-5.6.1-python-3.10-singularity-20240404.eb, will provide PyTorch/2.2.2-rocm-5.6.1-python-3.10-singularity-20240404</p> <p>Contains PyTorch 2.2.2 with torchaudio 2.2.2, torchdata 0.7.1+cpu, torchtext 0.17.2+cpu, torchvision 0.17.2 GPU version, DeepSpeed 0.14.0,  flash-attention 2.0.4 and xformers 0.0.26+82368ac.d20240403, on Python 3.10 and ROCm 5.6.1. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda env, Python venv or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.2.2-rocm-5.6.1-python-3.10-singularity-20240617.eb, will provide PyTorch/2.2.2-rocm-5.6.1-python-3.10-singularity-20240617</p> <p>Contains PyTorch 2.2.2 with torchaudio 2.2.2, torchdata 0.7.1, torchtext 0.17.2+cpu, torchvision 0.17.2 GPU version, DeepSpeed 0.14.0,  flash-attention 2.0.4 and xformers 0.0.26+82368ac.d20240403, on Python 3.10 and ROCm 5.6.1. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda env, Python venv or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.2.2-rocm-5.6.1-python-3.10-vllm-0.4.0.post1-singularity-20240404.eb, will provide PyTorch/2.2.2-rocm-5.6.1-python-3.10-vllm-0.4.0.post1-singularity-20240404</p> <p>Contains PyTorch 2.2.2 with torchaudio 2.2.2, torchdata 0.7.1+cpu, torchtext 0.17.2+cpu, torchvision 0.17.2 GPU version, torchmetrics 1.3.2, DeepSpeed 0.12.3,  flash-attention 2.0.4, transformers 4.39.3, xformers 0.0.25+8dd471d.d20240209, and vllm 0.4.0.post1, on Python 3.10 and ROCm 5.6.1. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda env, Python venv or both environments respectively.</p> <p>If you experience problems with this container, it may be better to move to a more recent one (see the date encoded as yyyymmdd at the end of the filename).</p> </li> <li> <p>EasyConfig PyTorch-2.2.2-rocm-5.6.1-python-3.10-vllm-0.4.0.post1-singularity-20240617.eb, will provide PyTorch/2.2.2-rocm-5.6.1-python-3.10-vllm-0.4.0.post1-singularity-20240617</p> <p>Contains PyTorch 2.2.2 with torchaudio 2.2.2, torchdata 0.7.1, torchtext 0.17.2+cpu, torchvision 0.17.2 GPU version, DeepSpeed 0.12.3,  flash-attention 2.0.4,  xformers 0.0.26+82368ac.d20240403, and vllm 0.4.0.post1, on Python 3.10 and ROCm 5.6.1. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda env, Python venv or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.2.2-rocm-5.7.3-python-3.12-singularity-20240923.eb, will provide PyTorch/2.2.2-rocm-5.7.3-python-3.12-singularity-20240923</p> <p>Contains PyTorch 2.2.2 with torchaudio 2.2.2, torchdata 0.7.1, torchtext 0.17.2+cpu, torchvision 0.17.2 GPU version, DeepSpeed 0.14.0,  flash-attention 2.6.3 and transformers 4.41.2, on Python 3.12 and ROCm 5.7.3. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.3.0-rocm-6.2.0-python-3.10-singularity-20241007.eb, will provide PyTorch/2.3.0-rocm-6.2.0-python-3.10-singularity-20241007</p> <p>Contains PyTorch 2.3.0 with torchdata 0.7.1+cpu, torchtext 0.18.0+cpu, torchvision 0.18.0 GPU version, DeepSpeed 0.14.0,  flash-attention 2.6.3 and transformers 4.41.2,  on Python 3.10 and ROCm 6.2.0. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.3.1-rocm-6.0.3-python-3.12-singularity-20240923.eb, will provide PyTorch/2.3.1-rocm-6.0.3-python-3.12-singularity-20240923</p> <p>Contains PyTorch 2.3.1 with torchaudio 2.3.1, torchdata 0.7.1, torchtext 0.18.0+cpu, torchvision 0.18.1 GPU version, DeepSpeed 0.14.0,  flash-attention 2.6.3 and transformers 4.41.2, on Python 3.12 and ROCm 6.0.3. mpi4py 3.1.6 interfacing to Cray MPICH is also included. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.3.1-rocm-6.0.3-python-3.12-singularity-exampleVenv-20240923.eb, will provide PyTorch/2.3.1-rocm-6.0.3-python-3.12-singularity-exampleVenv-20240923</p> <p>Contains PyTorch 2.3.1 with torchaudio 2.3.1, torchdata 0.7.1, torchtext 0.18.0+cpu, torchvision 0.18.1 GPU version, DeepSpeed 0.14.0,  flash-attention 2.6.3 and transformers 4.41.2, on Python 3.12 and ROCm 6.0.3. mpi4py 3.1.6 interfacing to Cray MPICH is also included. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.4.1-rocm-6.1.3-python-3.12-singularity-20241007.eb, will provide PyTorch/2.4.1-rocm-6.1.3-python-3.12-singularity-20241007</p> <p>Contains PyTorch 2.4.1 with torchaudio 2.4.1, torchdata 0.8.0+cpu, torchtext 0.18.0+cpu, torchvision 0.19.1 GPU version, DeepSpeed 0.15.1,  flash-attention 2.6.3, transformers 4.45.1 and xformers 0.0.28+f37fb3d7.d20241001, on Python 3.12 and ROCm 6.1.3. mpi4py 3.1.6 interfacing to Cray MPICH is also included. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.4.1-rocm-6.1.3-python-3.12-singularity-20241125.eb, will provide PyTorch/2.4.1-rocm-6.1.3-python-3.12-singularity-20241125</p> <p>Contains PyTorch 2.4.1 with torchaudio 2.4.1, torchdata 0.8.0+cpu, torchtext 0.18.0+cpu, torchvision 0.19.1 GPU version, DeepSpeed 0.15.1,  flash-attention 2.6.3, transformers 4.46.3 and xformers 0.0.28+f37fb3d7.d20241001, on Python 3.12 and ROCm 6.1.3. mpi4py 3.1.6 interfacing to Cray MPICH is also included. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.5.1-rocm-6.2.3-python-3.12-singularity-20241125.eb, will provide PyTorch/2.5.1-rocm-6.2.3-python-3.12-singularity-20241125</p> <p>Contains PyTorch 2.5.1 with torchaudio 2.5.1, torchdata 0.9.0+cpu, torchtext 0.18.0+cpu, torchvision 0.20.1 GPU version, DeepSpeed 0.15.1,  flash-attention 2.6.3, transformers 4.46.3, xformers 0.0.28+06b548c0.d20241106 and vllm 0.6.3.post2+rocm624, on Python 3.12 and ROCm 6.2.3. mpi4py 3.1.6 interfacing to Cray MPICH is also included. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-2.6.0-rocm-6.2.4-python-3.12-singularity-20250326.eb, will provide PyTorch/2.6.0-rocm-6.2.4-python-3.12-singularity-20250326</p> <p>Contains PyTorch 2.6.0 with torchaudio 2.6.0, torchdata 0.9.0+cpu, torchtext 0.18.0+cpu, torchvision 0.21.0 GPU version, DeepSpeed 0.15.1,  flash-attention 2.7.3, transformers 4.50.1, xformers 0.0.30+a0a401e4.d20250322 and vllm 0.7.2.post2+rocm624, on Python 3.12 and ROCm 6.2.4. mpi4py 3.1.6 interfacing to Cray MPICH is also included. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version also includes a pre-set virtual environment, but the module together with the  container to all the initialisations, so $WITH_CONDA, $WITH_VENV, etc., are not needed.</p> </li> <li> <p>EasyConfig PyTorch-2.6.0-rocm-6.2.4-python-3.12-singularity-20250404.eb, will provide PyTorch/2.6.0-rocm-6.2.4-python-3.12-singularity-20250404</p> <p>Contains PyTorch 2.6.0 with torchaudio 2.6.0, torchdata 0.9.0+cpu, torchtext 0.18.0+cpu, torchvision 0.21.0 GPU version, DeepSpeed 0.15.1,  flash-attention 2.7.3, transformers 4.50.1, xformers 0.0.30+a0a401e4.d20250322 and vllm 0.7.2.post2+rocm624, on Python 3.12 and ROCm 6.2.4. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version also includes a pre-set virtual environment, but the module together with the  container to all the initialisations, so $WITH_CONDA, $WITH_VENV, etc., are not needed.</p> </li> <li> <p>EasyConfig PyTorch-2.6.0-rocm-6.2.4-python-3.12-singularity-20250410.eb, will provide PyTorch/2.6.0-rocm-6.2.4-python-3.12-singularity-20250410</p> <p>Contains PyTorch 2.6.0 with torchaudio 2.6.0, torchdata 0.9.0+cpu, torchtext 0.18.0+cpu, torchvision 0.21.0 GPU version, DeepSpeed 0.15.1,  flash-attention 2.7.3, transformers 4.51.1, xformers 0.0.30+ffe48087.d20250410 and vllm 0.7.2+rocm624, on Python 3.12 and ROCm 6.2.4. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version also includes a pre-set virtual environment, but the module together with the  container to all the initialisations, so $WITH_CONDA, $WITH_VENV, etc., are not needed.</p> </li> <li> <p>EasyConfig PyTorch-2.7.0-rocm-6.2.4-python-3.12-singularity-20250527.eb, will provide PyTorch/2.7.0-rocm-6.2.4-python-3.12-singularity-20250527</p> <p>Contains PyTorch 2.7.0 with torchaudio 2.7.0, torchdata 0.10.0, torchtext 0.18.0+cpu, torchvision 0.22.0 GPU version, DeepSpeed 0.16.8,  flash-attention 2.7.3, transformers 4.52.3, xformers 0.0.31+39addc86.d20250526 and vllm 0.8.5+rocm624, on Python 3.12 and ROCm 6.2.4. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version also includes a pre-set virtual environment, but the module together with the  container to all the initialisations, so $WITH_CONDA, $WITH_VENV, etc., are not needed.</p> </li> <li> <p>EasyConfig PyTorch-2.7.1-rocm-6.2.4-python-3.12-singularity-20250827.eb, will provide PyTorch/2.7.1-rocm-6.2.4-python-3.12-singularity-20250827</p> <p>Contains PyTorch 2.7.1 with torchaudio 2.7.1, torchdata 0.10.0, torchtext 0.18.0+cpu, torchvision 0.22.0 GPU version, DeepSpeed 0.16.8,  flash-attention 2.7.3, transformers 4.52.3, xformers 0.0.32+09d42ac5.d20250822 and vllm 0.10.1+rocm624, on Python 3.12 and ROCm 6.2.4. It also contains a fix for an issue with AITER (AI Tensor Engine for ROCm) present in some earlier containers. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version also includes a pre-set virtual environment, but the module together with the  container to all the initialisations, so $WITH_CONDA, $WITH_VENV, etc., are not needed.</p> <p>Please check the help information of the module for additional essential information.</p> </li> <li> <p>EasyConfig PyTorch-20240801-rocm-6.2.0-python-3.12-vllm-c7a3a47-singularity-20241007.eb, will provide PyTorch/20240801-rocm-6.2.0-python-3.12-vllm-c7a3a47-singularity-20241007</p> <p>Contains PyTorch 2.5.0a0+gitf0da167 with torchvision 0.20.0a0+61bd547, vllm 0.4.3+rocm624, flash-attention 2.5.9.post1 and transformers 4.44.2, on Python 3.12 and ROCm 6.2.0. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> <li> <p>EasyConfig PyTorch-20240918-rocm-6.2.1-python-3.12-vllm-4075b35-singularity-20241007.eb, will provide PyTorch/20240918-rocm-6.2.1-python-3.12-vllm-4075b35-singularity-20241007</p> <p>Contains 2.6.0.dev20240918+rocm6.2 with torchvision 0.20.0.dev20240918+rocm6.2, vllm 0.6.3.dev3+g4075b35b.d20241004.rocm624, flash-attention 2.6.3 and transformers 4.44.2, on Python 3.12 and ROCm 6.2.0. The container also fully assists the procedure to add extra packages in a Python virtual environment.</p> <p>This version works with $WITH_CONDA, $WITH_VENV and $WITH_CONDA_VENV for initialisation of the  conda / Python venv / or both environments respectively.</p> </li> </ul>","boost":10},{"location":"p/PyTorch/#technical-documentation-user-easybuild-installation","title":"Technical documentation (user EasyBuild installation)","text":"<ul> <li> <p>PyTorch web site</p> </li> <li> <p>torch - PyTorch on PyPi</p> </li> <li> <p>PyTorch on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"p/PyTorch/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>PyTorch in the EasyBuilders repository</p> </li> <li> <p>PyTorch in the CSCS repository</p> </li> </ul>","boost":10},{"location":"p/PyTorch/#version-1121-archived","title":"Version 1.12.1 (archived)","text":"<ul> <li> <p>The EasyConfig is a LUST development and based on wheels rather than compiling     ourselves due to the difficulties of compiling PyTorch correctly. We do however     use a version of the RCCL library installed through EasyBuild, with the      aws-ofi-rccl plugin which is needed to get good performance on LUMI.</p> </li> <li> <p>A different version of NumPy was needed as in the Cray Python module that is      used. It is also installed from a wheel hence is not using the Cray Scientific     Libraries for BLAS support.</p> </li> </ul>","boost":10},{"location":"p/PyTorch/#technical-documentation-singularity-container","title":"Technical documentation (singularity container)","text":"","boost":10},{"location":"p/PyTorch/#how-to-check-whats-in-the-container","title":"How to check what's in the container?","text":"<ul> <li> <p>The Python, PyTorch and ROCm versions are included in the version of the module.</p> </li> <li> <p>To find the version of Python packages,</p> <pre><code>singularity exec $SIF bash -c '$WITH_CONDA ; pip list'\n</code></pre> <p>after loading the module. This can even be done on the login nodes. It will return information about all Python packages.</p> </li> <li> <p>Deepspeed: </p> <ul> <li> <p>Leaves a script 'deepspeed' in <code>/opt/miniconda3/envs/pytorch/bin</code></p> </li> <li> <p>Leaves packages in <code>/opt/miniconda3/envs/pytorch/lib/python3.10/site-packages/deepspeed</code></p> </li> <li> <p>Finding the version:</p> <pre><code>singularity exec $SIF bash -c '$WITH_CONDA ; pip list | grep deepspeed'\n</code></pre> <p>or the clumsy way without <code>pip</code>: </p> <pre><code>singularity exec $SIF bash -c \\\n  'grep \"version=\" /opt/miniconda3/envs/pytorch/lib/python3.10/site-packages/deepspeed/git_version_info_installed.py'\n</code></pre> <p>(Test can be done after loading the module on a login node.)</p> </li> </ul> </li> <li> <p>flash-attention     and its fork, the ROCm port</p> <ul> <li> <p>Leaves a <code>flash_attn</code> and corresponding <code>flash_attn-&lt;version&gt;.dit-info</code> subdirectory      in <code>/opt/miniconda3/envs/pytorch/lib/python3.10/site-packages</code>.</p> </li> <li> <p>To find the version:</p> <pre><code>singularity exec $SIF bash -c '$WITH_CONDA ; pip list | grep flash-attn'\n</code></pre> <p>or the clumsy way without `pip:</p> <pre><code>singularity exec $SIF bash -c \\\n  'grep \"__version__\" /opt/miniconda3/envs/pytorch/lib/python3.10/site-packages/flash_attn/__init__.py'\n</code></pre> <p>(Test can be done after loading the module on a login node.)</p> </li> </ul> <p>To run a benchmark:</p> <pre><code>srun -N 1 -n 1 \\\n  --cpu-bind=mask_cpu:0xfe000000000000,0xfe00000000000000,0xfe0000,0xfe000000,0xfe,0xfe00,0xfe00000000,0xfe0000000000 \\\n  --gpus 8 \\\n  singularity exec $SIF /runscripts/conda-python-simple \\\n  -u /opt/wheels/flash_attn-benchmarks/benchmark_flash_attention.py\n</code></pre> </li> <li> <p>xformers:</p> <ul> <li> <p>Leaves a <code>xformers</code> and corresponding <code>xformers-&lt;version&gt;.disti-info</code> subdirectory       in <code>/opt/miniconda3/envs/pytorch/lib/python3.10/site-packages</code>.</p> </li> <li> <p>To find the version:</p> <pre><code>singularity exec $SIF bash -c '$WITH_CONDA ; pip list | grep xformers'\n</code></pre> <p>or the clumsy way without <code>pip</code>:</p> <pre><code>singularity exec $SIF bash -c \\\n  'grep \"__version__\" /opt/miniconda3/envs/pytorch/lib/python3.10/site-packages/xformers/version.py'\n</code></pre> <p>(Test can be done after loading the module on a login node.)</p> </li> <li> <p>Checking the features of <code>xformers</code>: </p> <pre><code>singularity exec $SIF bash -c '$WITH_CONDA ; python -m xformers.info'\n</code></pre> </li> </ul> </li> </ul>","boost":10},{"location":"p/PyTorch/#easybuild_1","title":"EasyBuild","text":"<p>Incomplete!</p>","boost":10},{"location":"p/PyTorch/#changes-made-for-the-20250404-and-later-pytorch-containers","title":"Changes made for the 20250404 and later PyTorch containers","text":"<p>Some of those changes were likely overdue!</p> <ul> <li> <p>All variables to initilise the conda environment correctly are already set in the      container, so the module does no longer do so.</p> </li> <li> <p>There is a libjansson.so in the container, so the module does no longer bind      <code>/usr/lib64/libjansson.so.4</code>. This may turn out to be an issue though as the      libjansson.so in the container is an older version than the one on LUMI, so we     may need to overwrite it with a bind mount.</p> <p>NOTE: This probably doesn't matter as the library that links to it is recompiled and in the container?</p> </li> <li> <p>In late July 2025 the <code>list-packages</code> script used by CSC was also added to the     container, even though it is basically just a <code>pip list</code> and could even be implemented     using the <code>pip</code> wrapper script.</p> </li> <li> <p>At the same time we also added python and pip wrapper scripts and wrapper scripts      to some commands in the container similar to those in the corresponding CSC modules.</p> <p>There is a difference however when virtual environments are used. With the CSC modules, the <code>python</code> wrapper script can also be used to create a virtual environment. This  will not work with the wrapper scripts in these modules, as the virtual environment is already built into the module so that it can be squashed into a SquashFS file  that is friendlier to the Lustre file system than a regular virtual environment.</p> </li> <li> <p>Binding libfabric and the cxi provider is no longer needed as the containers contain     their own libfabric and cxi provide that should offer better stability with RCCL     than the version on the system.</p> </li> </ul>","boost":10},{"location":"p/PyTorch/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li>EasyConfig PyTorch-1.12.1-cpeGNU-22.08.eb, with module PyTorch/1.12.1-cpeGNU-22.08</li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-containers - previously available singularity containerised software</p> <ul> <li> <p>EasyConfig PyTorch-2.0.1-rocm-5.5.1-python-3.10-debugsymbols-singularity-20231110.eb, with module PyTorch/2.0.1-rocm-5.5.1-python-3.10-debugsymbols-singularity-20231110  (with docker definition)</p> <p>Contains PyTorch 2.0.1 with torchaudio 2.0.2+31de77d, torchdata 0.6.1+e1feeb2, torchtext 0.15.2a0+4571036 and torchvision 0.15.2a0+fa99a53 GPU version, on Python 3.10 and ROCm 5.5.1.</p> </li> <li> <p>EasyConfig PyTorch-2.0.1-rocm-5.5.1-python-3.10-debugsymbols-singularity-20240207.eb, with module PyTorch/2.0.1-rocm-5.5.1-python-3.10-debugsymbols-singularity-20240207</p> <p>Contains PyTorch 2.0.1 with torchaudio 2.0.2+31de77d, torchdata 0.6.1+e1feeb2, torchtext 0.15.2a0+4571036 and torchvision 0.15.2a0+fa99a53 GPU version, on Python 3.10 and ROCm 5.5.1.</p> </li> <li> <p>EasyConfig PyTorch-2.0.1-rocm-5.5.1-python-3.10-singularity-20231110.eb, with module PyTorch/2.0.1-rocm-5.5.1-python-3.10-singularity-20231110  (with docker definition)</p> <p>Contains PyTorch 2.0.1 with torchaudio 2.0.2+31de77d, torchdata 0.6.1+e1feeb2, torchtext 0.15.2a0+4571036 and torchvision 0.15.2a0+fa99a53 GPU version, on Python 3.10 and ROCm 5.5.1.</p> </li> <li> <p>EasyConfig PyTorch-2.0.1-rocm-5.5.1-python-3.10-singularity-20240207.eb, with module PyTorch/2.0.1-rocm-5.5.1-python-3.10-singularity-20240207</p> <p>Contains PyTorch 2.0.1 with torchaudio 2.0.2+31de77d, torchdata 0.6.1+e1feeb2, torchtext 0.15.2a0+4571036 and torchvision 0.16.0+a90e584 GPU version, on Python 3.10 and ROCm 5.5.1.</p> </li> </ul> </li> </ul>","boost":10},{"location":"p/parallel/","title":"parallel","text":"<p>[package list]</p>","boost":10},{"location":"p/parallel/#parallel","title":"parallel","text":"","boost":10},{"location":"p/parallel/#license-information","title":"License information","text":"<p>GNU parallel is free software; you can redistribute it and/or modify it  under the terms of the  GNU General Public License  as published by the Free Software Foundation; either version 3 of the License,  or (at your option) any later version.</p> <p>Further licenses apply to the documentation and can be found in the LICENSES directory of the GNU parallel git repository or, after loading the module, in  <code>$EBROOTPARALLEL/share/licenses/parallel</code>.</p> <p>GNU parallel is indirectly funded through citations. The authors ask that GNU arallel is cited in work that uses it. The correct list of citations can be found by running <code>parallel --citation</code> after loading the module. See also the  GNU Parallel Citation FAQ.</p>","boost":10},{"location":"p/parallel/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider parallel/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>parallel/20230222 (EasyConfig: parallel-20230222.eb)</p> </li> <li> <p>parallel/20230322 (EasyConfig: parallel-20230322.eb)</p> </li> <li> <p>parallel/20231022 (EasyConfig: parallel-20231022.eb)</p> </li> <li> <p>parallel/20240422 (EasyConfig: parallel-20240422.eb)</p> </li> <li> <p>parallel/20240522 (EasyConfig: parallel-20240522.eb)</p> </li> </ul>","boost":10},{"location":"p/parallel/#technical-documentation","title":"Technical documentation","text":"<ul> <li>GNU parallel web site<ul> <li>Check version</li> </ul> </li> <li>GNU parallel on gnu.org</li> <li>git repository on GNU git</li> <li>GNU parallel tutorial</li> </ul>","boost":10},{"location":"p/parallel/#general-information","title":"General information","text":"<ul> <li>GNU parallel is just a bunch of Perl scripts. There are no compiled binaries.</li> </ul>","boost":10},{"location":"p/parallel/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for parallel in the EasyBuilders repository.</p> <p>The EasyBuilders recipes rely on a Perl build in the toolchain.</p> </li> <li> <p>Support for parallel in the CSCS repository</p> </li> <li> <p>Support for parallel in Spack</p> </li> </ul>","boost":10},{"location":"p/parallel/#version-20230222-using-the-system-perl","title":"Version 20230222 using the system perl.","text":"<ul> <li> <p>For LUMI we followed the EasyConfig in use at UAntwerpen that uses the      OS-provided Perl as this seems sufficient to run GNU parallel.</p> </li> <li> <p>All shebangs where checked to have <code>/usr/bin/perl</code> hard-coded rather     then <code>/usr/bin/env perl</code> to avoid using another PErl binary that may     be loaded via a module.</p> </li> <li> <p>Extensive documentation is also taken from the UAntwerpen module.</p> </li> </ul>","boost":10},{"location":"p/parallel/#version-20231022-using-the-system-perl","title":"Version 20231022 using the system perl.","text":"<ul> <li>Trivial version bump of the EasyConfig for 20230222.</li> </ul>","boost":10},{"location":"p/parallel/#version-20240422-using-the-system-perl","title":"Version 20240422 using the system perl.","text":"<ul> <li>Trivial version bump of the EasyConfig for 20231022.</li> </ul>","boost":10},{"location":"p/parallel/#version-20240522-using-the-system-perl","title":"Version 20240522 using the system perl.","text":"<ul> <li>Trivial version bump of the EasyConfig for 20240422.</li> </ul>","boost":10},{"location":"p/pixman/","title":"pixman","text":"<p>[package list]</p>","boost":10},{"location":"p/pixman/#pixman","title":"pixman","text":"","boost":10},{"location":"p/pixman/#license-information","title":"License information","text":"<p>Pixman is distributed under the MIT license. The precise formulation can be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the <code>$EBROOTPIXMAN/share/licenses/pixman</code> subdirectory after loading the module.</p>","boost":10},{"location":"p/pixman/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider pixman/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>pixman/0.40.0-cpeAMD-22.08 (EasyConfig: pixman-0.40.0-cpeAMD-22.08.eb)</p> </li> <li> <p>pixman/0.40.0-cpeAOCC-22.08 (EasyConfig: pixman-0.40.0-cpeAOCC-22.08.eb)</p> </li> <li> <p>pixman/0.40.0-cpeCray-22.08 (EasyConfig: pixman-0.40.0-cpeCray-22.08.eb)</p> </li> <li> <p>pixman/0.40.0-cpeGNU-22.08 (EasyConfig: pixman-0.40.0-cpeGNU-22.08.eb)</p> </li> <li> <p>pixman/0.42.2-cpeAMD-22.12 (EasyConfig: pixman-0.42.2-cpeAMD-22.12.eb)</p> </li> <li> <p>pixman/0.42.2-cpeAMD-23.09 (EasyConfig: pixman-0.42.2-cpeAMD-23.09.eb)</p> </li> <li> <p>pixman/0.42.2-cpeAMD-23.12 (EasyConfig: pixman-0.42.2-cpeAMD-23.12.eb)</p> </li> <li> <p>pixman/0.42.2-cpeAMD-24.03 (EasyConfig: pixman-0.42.2-cpeAMD-24.03.eb)</p> </li> <li> <p>pixman/0.42.2-cpeAOCC-22.12 (EasyConfig: pixman-0.42.2-cpeAOCC-22.12.eb)</p> </li> <li> <p>pixman/0.42.2-cpeAOCC-23.09 (EasyConfig: pixman-0.42.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>pixman/0.42.2-cpeAOCC-23.12 (EasyConfig: pixman-0.42.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>pixman/0.42.2-cpeAOCC-24.03 (EasyConfig: pixman-0.42.2-cpeAOCC-24.03.eb)</p> </li> <li> <p>pixman/0.42.2-cpeCray-22.12 (EasyConfig: pixman-0.42.2-cpeCray-22.12.eb)</p> </li> <li> <p>pixman/0.42.2-cpeCray-23.03 (EasyConfig: pixman-0.42.2-cpeCray-23.03.eb)</p> </li> <li> <p>pixman/0.42.2-cpeCray-23.09 (EasyConfig: pixman-0.42.2-cpeCray-23.09.eb)</p> </li> <li> <p>pixman/0.42.2-cpeCray-23.12 (EasyConfig: pixman-0.42.2-cpeCray-23.12.eb)</p> </li> <li> <p>pixman/0.42.2-cpeCray-24.03 (EasyConfig: pixman-0.42.2-cpeCray-24.03.eb)</p> </li> <li> <p>pixman/0.42.2-cpeGNU-22.12 (EasyConfig: pixman-0.42.2-cpeGNU-22.12.eb)</p> </li> <li> <p>pixman/0.42.2-cpeGNU-23.09 (EasyConfig: pixman-0.42.2-cpeGNU-23.09.eb)</p> </li> <li> <p>pixman/0.42.2-cpeGNU-23.12 (EasyConfig: pixman-0.42.2-cpeGNU-23.12.eb)</p> </li> <li> <p>pixman/0.42.2-cpeGNU-24.03 (EasyConfig: pixman-0.42.2-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"p/pixman/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>pixman home page</p> <ul> <li>pixman downloads</li> </ul> </li> </ul>","boost":10},{"location":"p/pixman/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>pixman in the EasyBuilders repository</p> </li> <li> <p>pixman in the CSCS repository</p> </li> </ul>","boost":10},{"location":"p/pixman/#0400-from-cpe-2106-on","title":"0.40.0 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is derived from the University of Antwerpen one which itself     is a variant of the default EasyBuilders one.</p> </li> <li> <p>From LUMI/23.12 on, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"p/pixman/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig pixman-0.40.0-cpeAMD-21.06.eb, with module pixman/0.40.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeAOCC-21.12.eb, with module pixman/0.40.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeAOCC-22.06.eb, with module pixman/0.40.0-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeCray-21.06.eb, with module pixman/0.40.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeCray-21.08.eb, with module pixman/0.40.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeCray-21.12.eb, with module pixman/0.40.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeCray-22.06.eb, with module pixman/0.40.0-cpeCray-22.06</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeGNU-21.06.eb, with module pixman/0.40.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeGNU-21.08.eb, with module pixman/0.40.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeGNU-21.12.eb, with module pixman/0.40.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig pixman-0.40.0-cpeGNU-22.06.eb, with module pixman/0.40.0-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"q/QUDA/","title":"QUDA","text":"<p>[package list]</p>","boost":10},{"location":"q/QUDA/#quda","title":"QUDA","text":"","boost":10},{"location":"q/QUDA/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig QUDA-0a31b22-cpeAMD-22.09-GPU.eb, with module QUDA/0a31b22-cpeAMD-22.09-GPU</li> </ul> </li> </ul>","boost":10},{"location":"q/Qt5/","title":"Qt5","text":"<p>[package list]</p>","boost":10},{"location":"q/Qt5/#qt5","title":"Qt5","text":"","boost":10},{"location":"q/Qt5/#license-information","title":"License information","text":"<p>Information on the Qt5 license can be found on the \"Qt Licensing\" page on the Qt website.</p> <p>We do not have a commercial license for LUMI.</p>","boost":10},{"location":"q/Qt5/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Qt5/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>Qt5/5.15.15-cpeGNU-24.03 (EasyConfig: Qt5-5.15.15-cpeGNU-24.03.eb)</li> </ul>","boost":10},{"location":"q/Qt5/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Qt home page</p> </li> <li> <p>Qt downloads</p> </li> </ul>","boost":10},{"location":"q/Qt5/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for Qt5 in the EasyBuilders repository</p> </li> <li> <p>Support for Qt in the CSCS repository</p> </li> <li> <p>qt in Spack </p> </li> </ul>","boost":10},{"location":"q/Qt5/#51515-for-cpegnu2403","title":"5.15.15 for cpeGNU/24.03","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders but brought in the LUMI style     and adapted for what works on LUMI.</li> </ul>","boost":10},{"location":"q/QuEST/","title":"QuEST","text":"<p>[package list]</p>","boost":10},{"location":"q/QuEST/#quest","title":"QuEST","text":"","boost":10},{"location":"q/QuEST/#license-information","title":"License information","text":"<p>QuEST is distributed under the MIT License, a copy of which can be found in the LICENCE.txt file in the source repository.</p>","boost":10},{"location":"q/QuEST/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider QuEST/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig QuEST-3.7.0-cpeGNU-23.09-hybrid-prec2.eb, will build QuEST/3.7.0-cpeGNU-23.09-hybrid-prec2</p> </li> <li> <p>EasyConfig QuEST-3.7.0-cpeGNU-23.09-prec2-rocm.eb, will build QuEST/3.7.0-cpeGNU-23.09-prec2-rocm</p> </li> <li> <p>EasyConfig QuEST-3.7.0-cpeGNU-24.03-hybrid-prec2.eb, will build QuEST/3.7.0-cpeGNU-24.03-hybrid-prec2</p> </li> <li> <p>EasyConfig QuEST-3.7.0-cpeGNU-24.03-prec2-rocm.eb, will build QuEST/3.7.0-cpeGNU-24.03-prec2-rocm</p> </li> </ul>","boost":10},{"location":"q/QuEST/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>QuEST web site</p> </li> <li> <p>QuEST development on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"q/QuEST/#general-information","title":"General information","text":"<p>QuEST has a CMake-based installation process. It is in fact not meant for central installation. Instead, users should just download QuEST, put their application in the examples subdirectory and then use cmake with the right options to initiate the build process.</p> <p>The CMake configuration file for the main library is very buggy (at least in version 3.3.0, the one that we checked). It hard-codes compiler options that overwrite any option a user may specify which is rarely a good idea. As QuEST was never meant to be installed separately, the CMake configuration file also doesn't contain the necessary logic to do a proper install of the software.</p> <p>The EasyConfig setup in this directory provides its own <code>CMakeLists.txt</code> file that is meant to overwrite the one in <code>QuEST/CMakeLists.txt</code>. It installs the library part and also copies some example programs etc to the install directory only as a reference.</p> <p>Note that QuEST can be build in many different configurations. Users should adapt their configuration using <code>configopts</code> before installing the package! The configuration parameters combined can specify 24 different configurations of which 14 are valid and produce a library (in version 3.3.0).</p> <p>QuEST GPU acceleration is based on CUDA and hence is not suited for the LUMI GPU partition.</p>","boost":10},{"location":"q/QuEST/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for QuEST in the easybuilders repository (as of     September 2021)</p> </li> <li> <p>There is no support for Quest in the CSCS repository (as of September 2021).</p> </li> </ul>","boost":10},{"location":"q/QuEST/#version-330-tested-with-cpegnu-2108","title":"Version 3.3.0 tested with cpeGNU 21.08","text":"<ul> <li> <p>Rather than using a patch, we inject the new CMakeLists.txt file for the     <code>QuEST</code> subdirectory via the sources. This makes it much easier to edit     the <code>CMakeLists.txt</code> file and to further refine it.</p> </li> <li> <p>We only build the code in the <code>QuEST</code> subdirectory using the     <code>CMAKE - make - make install</code> buildprocess. Other files are copied     manually using <code>postinstallcmds</code>.</p> </li> <li> <p>As a centrally installed library has to be used in a different way then the     manual explains, we provide some information in the module file.</p> </li> </ul>","boost":10},{"location":"q/QuEST/#version-330-for-cpegnu-2206-2208","title":"Version 3.3.0 for cpeGNU 22.06, 22.08","text":"<ul> <li>Not updated yet as it is not clear if this is being used and as the previous     fixes need to be modified as the CMake build process has changed.</li> </ul>","boost":10},{"location":"q/QuEST/#version-370-for-cpegnu-2309","title":"Version 3.7.0 for cpeGNU 23.09","text":"<ul> <li> <p>Patch step for the <code>CMakeLists.txt</code> is now done as a preconfig step.</p> </li> <li> <p>The CPU variant <code>hybrid-prec2</code> is a simple version bump from 3.3.0 to 3.7.0</p> </li> <li> <p>QuEST now supports HIP therefore a new GPU variant is provided (<code>prec2-rocm</code>)</p> </li> </ul>","boost":10},{"location":"q/QuEST/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig QuEST-3.3.0-cpeGNU-21.08-hybrid-prec2.eb, with module QuEST/3.3.0-cpeGNU-21.08-hybrid-prec2</p> </li> <li> <p>EasyConfig QuEST-3.3.0-cpeGNU-22.06-hybrid-prec2.eb, with module QuEST/3.3.0-cpeGNU-22.06-hybrid-prec2</p> </li> <li> <p>EasyConfig QuEST-3.3.0-cpeGNU-22.08-hybrid-prec2.eb, with module QuEST/3.3.0-cpeGNU-22.08-hybrid-prec2</p> </li> </ul> </li> </ul>","boost":10},{"location":"q/QuantumESPRESSO/","title":"QuantumESPRESSO","text":"<p>[package list]</p>","boost":10},{"location":"q/QuantumESPRESSO/#quantumespresso","title":"QuantumESPRESSO","text":"","boost":10},{"location":"q/QuantumESPRESSO/#license-information","title":"License information","text":"<p>Quantum ESPRESSO requires users to register before they can get access to the source code.</p> <p>Quantum ESPRESSO is coverd by the GNU General Public License.  Some information can be found int the \"Terms of use\" in the user guide and in the  \"License\" file in the Quantum ESPRESSO GitLab repository.</p> <p>From LUMI/23.09 on, the information is also available in <code>$EBROOTQUANTUMESPRESSO/share/licenses/QuantumESPRESSO</code> after installation of the package and loading of the module.</p>","boost":10},{"location":"q/QuantumESPRESSO/#user-documentation","title":"User documentation","text":"<p>Quantum ESPRESSO (QE) is \"an integrated suite of Open-Source computer codes for electronic-structure calculations and materials modeling at the nanoscale. It is based on density-functional theory, plane waves, and pseudopotentials.\". In general, it runs well on LUMI-C.</p> <p>There is currently (May 2025 last update) no AMD release of QE that we can support from the LUMI User Support Team. Some recent releases have support for AMD GPUs via OpenMP offload. However, version 7.4.1omp requires  the Cray compiler CCE 15 or older as there are issues with CCE 16 to 18. CCE 15 requires using a ROCm version (5.2, though 5.4 worked also) that is not supported by the current driver on LUMI, and in fact, is even known to fail. The Cray PE 25.03, expected to be installed on LUMI in late summer of 2025, may solve the issues with QE on the LUMI-G GPUs. Note that even though we do have CPE 25.03 with CCE 19 in a container, this  container cannot be used on LUMI-G to run software as it is based on ROCm 6.3 which also  has issues on the current AMD GPU driver.</p>","boost":10},{"location":"q/QuantumESPRESSO/#installing-quantum-espresso","title":"Installing Quantum ESPRESSO","text":"<p>We provide automatic installation scripts for several versions of QE. In general, the installation procedure is described on the EasyBuild page. The step by step procedure to install QE 7.1 is:</p> <ol> <li>Load the LUMI software environment: <code>module load LUMI/24.03</code>.</li> <li>Select the LUMI-C partition: <code>module load partition/C</code>.</li> <li>Load the EasyBuild module: <code>module load EasyBuild-user</code>.</li> </ol> <p>Then, you can run the install command</p> <pre><code>$ eb -r QuantumESPRESSO-7.3.1-cpeGNU-24.03.eb\n</code></pre> <p>The installation takes about 3 minutes. Afterwards, you will have a module called \"QuantumESPRESSO/7.3.1-cpeGNU-24.03\" installed in your home directory. Load the module to use it</p> <pre><code>$ module load QuantumESPRESSO/7.3.1-cpeGNU-24.03.0\n</code></pre> <p>The usual QE binaries, <code>pw.x</code>, <code>ph.x</code> etc. will now be in your <code>PATH</code>. Launch QE via the Slurm scheduler, e.g. <code>srun pw.x</code>. Please note that you must do <code>module load LUMI/24.03 partition/C</code> to see your Quantum Espresso module in the module system. The same applies to the Slurm batch scripts which you send to the compute nodes.</p> <p>You can see other versions of QE that can be automatically installed by running the EasyBuild command</p> <pre><code>$ eb -S QuantumESPRESSO\n</code></pre> <p>or checking the list further down on this page or checking the LUMI-EasyBuild-contrib repository on GitHub directly. It is generally recommended to use the latest version of Quantum Espresso compiled with the most current Cray programming environment. Older version often work, but may not run optimally as the system configuration (software, libraries, drivers, underlying hardware etc.) may have changed since they were originally built.</p>","boost":10},{"location":"q/QuantumESPRESSO/#example-batch-scripts","title":"Example batch scripts","text":"<p>A typical batch job using 2 compute nodes and MPI only:</p> <pre><code>#!/bin/bash\n#SBATCH -J GaAs128 \n#SBATCH -N 2\n#SBATCH --partition=small\n#SBATCH -t 00:30:00\n#SBATCH --mem=200G\n#SBATCH --exclusive --no-requeue\n#SBATCH -A project_XYZ\n#SBATCH --ntasks-per-node=128\n#SBATCH -c 1\n\nexport OMP_NUM_THREADS=1\n\nmodule load LUMI/24.03 \nmodule load partition/C \nmodule load QuantumESPRESSO/7.3.1-cpeGNU-24.03\n\nsrun pw.x -nk 4 -i gab128.in &gt; gab128.out\n</code></pre> <p>A typical batch job with MPI and 4 OpenMP threads per rank:</p> <pre><code>#!/bin/bash\n#SBATCH -J GaAs128 \n#SBATCH -N 2\n#SBATCH --partition=small\n#SBATCH -t 00:30:00\n#SBATCH --mem=200G\n#SBATCH --exclusive --no-requeue\n#SBATCH -A project_XYZ\n#SBATCH --ntasks-per-node=32\n#SBATCH -c 4\n\nexport OMP_NUM_THREADS=4\nexport OMP_PLACES=cores\nexport OMP_PROC_BIND=close\n\nmodule load LUMI/24.03 \nmodule load partition/C \nmodule load QuantumESPRESSO/7.3.1-cpeGNU-24.03\n\nsrun pw.x -nk 4 -i gab128.in &gt; gab128.out\n</code></pre>","boost":10},{"location":"q/QuantumESPRESSO/#tuning-recommendations","title":"Tuning recommendations","text":"<p>Making use of k-point parallelization (the flag <code>-nk</code>) is very important in Quantum Espresso. In the following test case, a GaAs supercell with 128-atoms, an SCF cycle completes in a about 1 hour on a LUMI-C compute node using the default settings without k-point parallelization. By supplying <code>-nk 2</code>, the runtime is cut to 38 minutes (1.3x faster). K-point parallelization is so important that it can be advantageous to reduce to the number of cores used on the compute nodes, and/or increase the number of k-points just to get even multiples which maximizes the value of <code>-nk</code>. Consider the case with 14 k-points: 128 cores are not evenly divisible by 14, which prevents the full use of k-point parallelization. But what about 14*8 = 112 cores? The graph below shows that you can actually gain speed by reducing the number of active cores and carefully placing the MPI ranks on the right processor cores.</p> Intra-node scaling of GaAs 128 supercell in Quantum Espresso <p>The key to achieving the best performance is to explicitly bind the MPI ranks so that 7 cores are used on each core complex die (CCD). This means that the 8th core needs to be skipped on each CCD in the EPYC CPUs in LUMI-C. There is no easy way to do this in Slurm, other than hard-coding it like this:</p> <pre><code>$ srun --cpu-bind=map_cpu:0,1,2,3,4,5,6,8,9,10,11,12,13,14,16,17,18,19,20,21,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,40,41,42,43,44,45,46,48,49,50,51,52,53,54,56,57,58,59,60,61,62,64,65,66,67,68,69,70,72,73,74,75,76,77,78,80,81,82,83,84,85,86,88,89,90,91,92,93,94,96,97,98,99,100,101,102,104,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,126 pw.x ....\n</code></pre> <p>It is especially important to do this if you run with e.g. half the number of cores on compute node to free up memory.</p> <p>OpenMP parallelization can be used primarily to save memory. It is automatically used when <code>OMP_NUM_THREADS</code> is set to something else than 1 in the job script. OpenMP seems to work with decent efficiency on LUMI-C. Try testing lower numbers of <code>OMP_NUM_THREADS</code> first, about 2-4. Typically you will get about the same speed as with MPI only for regular DFT calculations, maybe somewhat faster (5-10%). The main benefit, however, is considerably less memory usage, about 20% less for DFT. We have not tested the effect on exact exchange or other higher order methods yet.</p> <p>FFT task parallelization and pencil decomposition are both necessary when running a large number of cores per pool of k-points. The <code>-ntg</code> flag alone seems to not work in recent versions of Quantum Espresso. You need to use it together with pencil decomposition (<code>-pd true</code>), which is an undocumented feature. Typically, small values of <code>-ntg</code> are sufficient to see a speed-up, for example <code>-ntg 2 -pd true</code>, but you need to increase <code>-ntg</code> as the number of cores increases.</p> <p>For sub-space diagonalization with SCALAPACK (the flag <code>-nd</code>), keeping the default (maximum) value is typically best. Reducing it will typically just increase the runtime.</p> <p>The RMM-DIIS diagonalization algorithm is significantly faster than the Davidson algorithm on LUMI. This is the option <code>diagonalization=rmm-davidson</code> in the input file. For regular DFT, it can be 50% faster per SCF step, so it is worth trying out. As usual, the electronic convergence may not be as a stable as with the Davidson algorithm, so it depends on the use case whether there is a net gain.</p>","boost":10},{"location":"q/QuantumESPRESSO/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider QuantumESPRESSO/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig QuantumESPRESSO-7.2-cpeGNU-23.09.eb, will build QuantumESPRESSO/7.2-cpeGNU-23.09</p> <p>Contains the regular tools, EPW extension and the postprocessing tools. Built with MPI and OpenMP support, and ScaLAPACK.</p> </li> <li> <p>EasyConfig QuantumESPRESSO-7.3-cpeGNU-23.09.eb, will build QuantumESPRESSO/7.3-cpeGNU-23.09</p> <p>Contains the regular tools, EPW extension and the postprocessing tools. Built with MPI and OpenMP support, and ScaLAPACK.</p> </li> <li> <p>EasyConfig QuantumESPRESSO-7.3.1-cpeGNU-24.03.eb, will build QuantumESPRESSO/7.3.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"q/QuantumESPRESSO/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Quantum ESPRESSO website</p> </li> <li> <p>Quantum ESPRESSO GitLab     with direct downloads that don't require registration.</p> </li> </ul>","boost":10},{"location":"q/QuantumESPRESSO/#general-information","title":"General information","text":"<p>Quantum ESPRESSO is an integrated suite of computer codes for  electronic-structure calculations and materials modeling at the nanoscale. It is based on density-functional theory, plane waves, and pseudopotentials (both  norm-conserving and ultrasoft).</p>","boost":10},{"location":"q/QuantumESPRESSO/#easybuild","title":"EasyBuild","text":"<ul> <li>QuantumESPRESSO in the CSCS repository</li> <li>QuantumESPRESSO in the EasyBuilders repository</li> </ul>","boost":10},{"location":"q/QuantumESPRESSO/#version-680-for-cpegnu-2108","title":"Version 6.8.0 for cpeGNU 21.08","text":"<ul> <li>The EasyConfig is derived from the CSCS one</li> </ul>","boost":10},{"location":"q/QuantumESPRESSO/#version-70-for-cpegnu-2112","title":"Version 7.0 for cpeGNU 21.12","text":"<ul> <li>The EasyConfig is a port of the 6.8.0 one.</li> </ul>","boost":10},{"location":"q/QuantumESPRESSO/#version-71-for-cpegnu-2206-2208","title":"Version 7.1 for cpeGNU 22.06, 22.08","text":"<ul> <li>The EasyConfig is a port of the 7.0 one. </li> </ul>","boost":10},{"location":"q/QuantumESPRESSO/#version-72-for-cpegnu-2212-and-2309","title":"Version 7.2 for cpeGNU 22.12 and 23.09","text":"<ul> <li> <p>The EasyConfig is a port of the 7.1 one. </p> </li> <li> <p>Added copying of the license information in 23.09</p> </li> </ul>","boost":10},{"location":"q/QuantumESPRESSO/#version-73-for-cpegnu-2309","title":"Version 7.3 for cpeGNU 23.09","text":"<ul> <li>Trivial port of the 7.3 EasyConfig file.</li> </ul>","boost":10},{"location":"q/QuantumESPRESSO/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig QuantumESPRESSO-6.8.0-cpeGNU-21.08.eb, with module QuantumESPRESSO/6.8.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig QuantumESPRESSO-7.0-cpeGNU-21.12.eb, with module QuantumESPRESSO/7.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig QuantumESPRESSO-7.1-cpeGNU-22.06.eb, with module QuantumESPRESSO/7.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig QuantumESPRESSO-7.1-cpeGNU-22.08.eb, with module QuantumESPRESSO/7.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig QuantumESPRESSO-7.2-cpeGNU-22.12.eb, with module QuantumESPRESSO/7.2-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"q/Qwt/","title":"Qwt","text":"<p>[package list]</p>","boost":10},{"location":"q/Qwt/#qwt","title":"Qwt","text":"","boost":10},{"location":"q/Qwt/#license-information","title":"License information","text":"<p>The Qwt license is derived from the GNU Lesser General Public Licence (LGPL) but with some modifications and can be found in the COPYING file in the sources on SourceForge.</p>","boost":10},{"location":"q/Qwt/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Qwt/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>Qwt/6.3.0-cpeGNU-24.03 (EasyConfig: Qwt-6.3.0-cpeGNU-24.03.eb)</li> </ul>","boost":10},{"location":"q/Qwt/#technical-documentation","title":"Technical documentation","text":"<p>Qwt - Qt Widgets for Technical Applications</p> <ul> <li> <p>Qwt homepage</p> </li> <li> <p>Qwt Git repository on SourceForge</p> </li> <li> <p>Qwt downloads on Sourceforge</p> </li> </ul>","boost":10},{"location":"q/Qwt/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Qwt support in the EasyBuilders repository</p> </li> <li> <p>There is no support for Qwt in the CSCS repository</p> </li> <li> <p>qwt package in Spack</p> </li> </ul>","boost":10},{"location":"q/Qwt/#51515-for-cpegnu2403","title":"5.15.15 for cpeGNU/24.03","text":"<ul> <li>The EasyConfig is an adaptation of an EasyBuilders one for the GCCcore/12.3.0 toolchain,     brought in line with the LUST conventions.</li> </ul>","boost":10},{"location":"r/R/","title":"R","text":"<p>[package list]</p>","boost":10},{"location":"r/R/#r","title":"R","text":"","boost":10},{"location":"r/R/#license-information","title":"License information","text":"<p>R itself is available as free software under the GNU General Public License, see the \"COPYING\" page on the R web site.</p> <p>Several of the EasyConfigs provide additional packages from CRAN and other  sources that may be licensed differently though. It is the User's responsibility to ensure that all packages can be legally used by them as some may have liceses that restrict use.</p>","boost":10},{"location":"r/R/#user-documentation","title":"User documentation","text":"<p>We do provide some EasyBuild recipes for a plain R installation with only the standard packages and Rmpi (the -raw versions, Rmpi provided as it needs special options to install on LUMI), and a regular version with a lot of packages for parallel computing already included.</p>","boost":10},{"location":"r/R/#known-restrictions","title":"Known restrictions","text":"<p>It should be said that R was never developed for parallel computing. Parallel computing  is only added through a mess of packages and not an intrinsic part of the language.  Moreover the packages for parallel computing often evolved from multicore computing on a workstation, or some disctributed computing on a network of workstations not managed by a scheduler. As a result some packages are not fully functional on LUMI.</p> <p>Some known restrictions:</p> <ul> <li> <p>Rmpi: <code>mpi.spawn.Rslaves</code> is not suppoted as Cray MPI does not support <code>MPI_Comm_spawn</code>.</p> </li> <li> <p>parallel: <code>detectCores</code> detects the total number of (virtual) cores, not the number of cores     available to the application. This happens with both Cray R and R built with EasyBuild.</p> <p>A solution is to use the <code>availableCores()</code> function from the  parallelly package. That package can, e.g., recognize the CPU set a program will be running in when started  through <code>srun</code>.</p> <p>As a result of packages not being sophisticated enough to recognise they are not  running on the full node, it can be expected that some packages using shared memory multiprocessing  will launch one thread per virtual core rather one thread per available core, which can lead to heavy oversubscription of the cores in your job and very bad parallel performance.</p> </li> <li> <p>We have seen issues with some linear algebra operations when running in multithreaded     mode. Two workarounds seem to help:</p> <ul> <li> <p>Setting <code>OMP_STACKSIZE=256M</code> (and exporting this variable) which we have implemented in      the module for the 24.03 versions, and</p> </li> <li> <p>using <code>ulimit -s 300000</code> </p> </li> </ul> <p>The problem has been reported to HPE Cray. It might be fixed in the 25.03 release of the programming environment.</p> <p>Note that the issue also occurs with the <code>cray-R</code> module, but there you'll have  to also set <code>OMP_STACKSIZE</code> by hand as we cannot change those modules.</p> </li> </ul>","boost":10},{"location":"r/R/#some-noteworthy-packages-included-in-the-regular-easyconfig","title":"Some noteworthy packages included in the regular EasyConfig","text":"<ul> <li> <p>Shared memory parallel computing</p> <ul> <li>parallelly,     with improvements over the system parallel  package that are more aware of      the typical environment on an HPC cluster.</li> </ul> </li> <li> <p>Distributed memory computing:</p> <ul> <li> <p>Rmpi,      build to interface properly with Cray MPICH.</p> </li> <li> <p>snow,      Simple Network Of Workstations.</p> </li> <li> <p>snowfall</p> </li> </ul> </li> <li> <p>Unified shared and distributed memory computing:</p> <ul> <li> <p>foreach     with several adapters:</p> <ul> <li> <p>doParallel     for multicore computing.</p> </li> <li> <p>doMPI     interfacing with Rmpi for distributed memory parallel computing.</p> </li> <li> <p>doSNOW     for interfacing with the SNOW  package for distributed memory parallel computing.</p> </li> </ul> </li> <li> <p>future, see also      the documentation web site.</p> </li> <li> <p>future.apply</p> </li> </ul> </li> <li> <p>Interfacing with Slurm</p> <ul> <li> <p>batchtools</p> </li> <li> <p>future.batchtools</p> </li> </ul> </li> </ul>","boost":10},{"location":"r/R/#some-examples","title":"Some examples","text":"<p>These examples are inspired by the examples in the  LRZ documentation, section \"Parallelization Using R\"</p>","boost":10},{"location":"r/R/#a-shared-memory-multicore-computing-example-with-the-parallel-and-parallelly-packages","title":"A shared memory (multicore) computing example with the parallel and parallelly packages","text":"<p>Example R script that you can store in <code>script_parallel.R</code>: </p> <pre><code>library(parallel)\nlibrary(parallelly)\n\nac &lt;- detectCores()\nsprintf( \"Number of cores according to parallel::detectCores: %d\", ac )\nnc &lt;- availableCores()\nsprintf( \"Number of cores according to parallelly::availableCores: %d\", nc )\n\nprint( \"lapply:\" )\nsystem.time(\n    lapply(1:20, function(x) sum(sort(runif(1e7))))\n)\n\nprint( \"mclapply with mc.cores = 1:\" )\nsystem.time(\n    mclapply(1:20, function(x) sum(sort(runif(1e7))), mc.cores = 1)\n)\n\nsprintf( \"mclapply with mc.cores = %d:\", nc )\nsystem.time(\n    mclapply(1:20, function(x) sum(sort(runif(1e7))), mc.cores = nc)\n)\n\nprint( \"mclapply without mc.cores argument:\" )\nsystem.time(\n    mclapply(1:20, function(x) sum(sort(runif(1e7))))\n)\nprint( \"Not sure what is happening here as user time goes down but elapsed goes up.\" )\n</code></pre> <p>Example submit script to store in <code>submit.slurm</code>:</p> <pre><code>#!/bin/bash\n#SBATCH --job-name=R_parallel_test\n#SBATCH --partition=small\n#SBATCH --time=2:00\n#SBATCH --ntasks=1\n#SBATCH --cpus-per-task=8\n#SBATCH --output=%x_%j.txt\n#SBATCH --account=project_46YXXXXXX\n\nmodule load LUMI/23.09 partition/C R/4.3.2-cpeGNU-23.09\n\necho -e \"Running Rscript from $(which Rscript).'\\n\"\n\nsrun Rscript script_parallel.R\n</code></pre> <p>The <code>srun</code> command doesn't seem to make a difference here but it usually ensures that all Slurm flags, including hints for multithreading, are correctly applied to the executable that is starting.</p> <p>Note the difference between the <code>detectCores</code> routine from <code>parallel</code> and the <code>availableCores</code> routine from <code>parallelly</code>. The former fails to correctly detect the resources available for R while the latter does detect that there are only 8 CPUs  available.</p> <p>This script was written by someone who is not an expert to to whom it is completely unclear what is happening in the last call to <code>mclapply</code> as the user time goes doen while elapsed goes up.</p>","boost":10},{"location":"r/R/#a-distributed-memory-computing-example-with-the-snow-package","title":"A distributed memory computing example with the snow  package","text":"<p>Example R script <code>script_snow.R</code>: </p> <pre><code>library(snow)\n\ncl &lt;- makeCluster()\n\nsystem.time(\n    parLapply(cl, 1:167, function(x){\n        sum(sort(runif(1e7)))\n        }\n    )\n)\n\nstopCluster(cl)\n\nq(save=\"no\")\n</code></pre> <p>Example submit script <code>submit.slurm</code>:</p> <pre><code>#!/usr/bin/bash\n#SBATCH --job-name=snow_test\n#SBATCH --partition=small\n#SBATCH --time=5:00\n#SBATCH --ntasks=4\n#SBATCH --cpus-per-task=1\n#SBATCH --hint=nomultithread\n#SBATCH --output=%x_%j.txt\n#SBATCH --account=project_46YXXXXXX\n\nmodule load LUMI/23.09 partition/C\nmodule load R/4.3.2-cpeGNU-23.09\n\necho -e \"\\\\n# Running on 2 task\\n\\n\"\nsrun -W 10 -n 2 $EBROOTR/lib/R/library/snow/RMPISNOW &lt;script_snow.R\n\necho -e \"\\\\n# Running on 3 task\\n\\n\"\nsrun -W 10 -n 3 $EBROOTR/lib/R/library/snow/RMPISNOW &lt;script_snow.R\n\necho -e \"\\\\n# Running on 4 tasks\\n\\n\"\nsrun -W 10 -n 4 $EBROOTR/lib/R/library/snow/RMPISNOW &lt;script_snow.R\n\necho -e \"\\\\n# Running on $((SLURM_NTASKS + 1)) tasks\\n\\n\"\nsrun -W 10 -n $((SLURM_NTASKS + 1)) -O $EBROOTR/lib/R/library/snow/RMPISNOW &lt;script_snow.R\n</code></pre> <p>The <code>-W</code> option ensures that the <code>srun</code> command will end 10 seconds after the first process ends as an additional precaution.</p> <p>Note that we use the <code>EBROOTR</code> environment variable for the path to the <code>RMPISNOW</code>  script which is needed to run this example. This variable is defined by all EasyBuild-installed R modules so one does not need to adapt the line when switching to a newer version of R. The <code>RMPISNOW</code> command takes care of some initialisations in particular when the job spans multiple nodes.</p> <p>There is another important thing to note in this example. If you analyse the timings  in the results carefully you will see that the 3-task case runs in half the time of the 2-task case and the 4-task case in little over one third of the time of the 2-task case. This is because one of the MPI tasks is used internally as the master process and is in fact not doing much while the remaining tasks are used  to build the cluster and do the computations in the <code>parLapply</code> call. This is solved with the last <code>srun</code> call: we start one more task than requested in the <code>#SBATCH</code> lines which we can do by adding the <code>-O</code> or <code>--overcommit</code> flag to the <code>srun</code> command. We now get a speedup of about 4 compared to the timing we got with 2 tasks which  effectively was running the sequentially as there was a master and one slave.</p>","boost":10},{"location":"r/R/#examples-with-foreach","title":"Examples with foreach","text":"","boost":10},{"location":"r/R/#foreach-for-shared-memory-multi-core-computation","title":"foreach for shared memory (multi-core) computation","text":"<p>For this example, we combine the foreach  package with the doParallel  adapter  package and with parallelly to determine the number of available cores.</p> <p>The R script <code>script_foreach_MC.R</code> is:</p> <pre><code>library(foreach)\nlibrary(doParallel)\nlibrary(parallelly)\n\nsprintf( \"Running on %d core(s).\", availableCores())\nregisterDoParallel(cores = availableCores())\n\nsystem.time(\n    foreach(i = 1:100) %dopar% sum(sort(runif(1e7)))  # parallel execution\n)\n</code></pre> <p>The corresponding job script <code>submit.slurm</code> is</p> <pre><code>#!/bin/bash\n#SBATCH --job-name=R_foreach_doParallel_test\n#SBATCH --partition=standard\n#SBATCH --time=2:00\n#SBATCH --ntasks=1\n#SBATCH --cpus-per-task=8\n#SBATCH --hint=nomultithread\n#SBATCH --output=%x_%j.txt\n#SBATCH --account=project_46YXXXXXX\n\nmodule load LUMI/23.09 partition/C R/4.3.2-cpeGNU-23.09\n\necho -e \"Running Rscript from $(which Rscript).'\\n\"\n\necho -e \"\\n\\nStarting on 1 core.\\n\\n\"\nsrun -n 1 -c 1 Rscript script_foreach_MC.R\n\necho -e \"\\n\\nStarting on 4 cores.\\n\\n\"\nsrun -n 1 -c 4 Rscript script_foreach_MC.R\n</code></pre> <p>The first <code>srun</code> command starts the example on a single core, so it effectively runs in a serial way, while the second <code>srun</code> command uses 4 cores. When you inspect the results you'll notice that the <code>user</code> and <code>system</code> time in the second case are a bit higher which is normal as parallel computing alsways  comes with some overhead, but from the <code>elapsed</code> time we get a speedup of 3.4.</p>","boost":10},{"location":"r/R/#foreach-with-the-dosnow-adapter-for-distributed-memory-computing","title":"foreach  with the doSNOW  adapter for distributed memory computing","text":"<p>The R script <code>script_foreach_SNOW.R</code> is now</p> <pre><code>library(foreach)\nlibrary(doSNOW)\n\ncl &lt;- makeCluster()\nregisterDoSNOW(cl)\n\nsystem.time(\n    foreach(i = 1:100) %dopar% sum(sort(runif(1e7)))  # parallel execution\n)\n\nstopCluster(cl)\n</code></pre> <p>The <code>foreach</code> line is the same as before, but the setup is different. This implies that the core of the code actually remains the same as before. </p> <p>The script is started with the jobscript <code>submit.slurm</code>: </p> <pre><code>#!/usr/bin/bash\n#SBATCH --job-name=R_foreach_SNOW_test\n#SBATCH --partition=small\n#SBATCH --time=5:00\n#SBATCH --ntasks=4\n#SBATCH --cpus-per-task=1\n#SBATCH --hint=nomultithread\n#SBATCH --output=%x_%j.txt\n#SBATCH --account=project_46YXXXXXX\n\nmodule load LUMI/23.09 partition/C\nmodule load R/4.3.2-cpeGNU-23.09\n\necho -e \"\\\\n# Running on 2 task\\n\\n\"\nsrun -W 10 -n 2 $EBROOTR/lib/R/library/snow/RMPISNOW &lt;script_foreach_SNOW.R\n\necho -e \"\\\\n# Running on 3 task\\n\\n\"\nsrun -W 10 -n 3 $EBROOTR/lib/R/library/snow/RMPISNOW &lt;script_foreach_SNOW.R\n\necho -e \"\\\\n# Running on 4 tasks\\n\\n\"\nsrun -W 10 -n 4 $EBROOTR/lib/R/library/snow/RMPISNOW &lt;script_foreach_SNOW.R\n\necho -e \"\\\\n# Running on $((SLURM_NTASKS + 1)) tasks\\n\\n\"\nsrun -W 10 -n $((SLURM_NTASKS + 1)) -O $EBROOTR/lib/R/library/snow/RMPISNOW &lt;script_foreach_SNOW.R\n</code></pre> <p>The <code>user</code> and <code>system</code> time is rather irrelevant now as that is for the master process. That it is still rather high is likely due to a busy waiting strategy. The <code>elapsed</code> time shows again the behaviour we've seen before already, with the time for 2 tasks the time for serial execution of the <code>foreach</code>  function.</p>","boost":10},{"location":"r/R/#foreach-with-the-dompi-adapter-for-distributed-memory-computing","title":"foreach  with the doMPI  adapter for distributed memory computing","text":"<p>The R script <code>script_foreach_MPI.R</code> is now</p> <pre><code>library(foreach)\nlibrary(doMPI)\n\ncl &lt;- startMPIcluster()  # use verbose = TRUE for detailed worker message output\nregisterDoMPI(cl)\n\nsystem.time(\n    foreach(i = 1:100) %dopar% sum(sort(runif(1e7)))  # parallel execution\n)\n\ncloseCluster(cl)\nmpi.quit()\n</code></pre> <p>The <code>foreach</code> line is again the same as before, but the setup is different. </p> <p>The script is started with the jobscript <code>submit.slurm</code>: </p> <pre><code>#!/usr/bin/bash\n#SBATCH --job-name=R_foreach_SNOW_test\n#SBATCH --partition=small\n#SBATCH --time=5:00\n#SBATCH --ntasks=4\n#SBATCH --cpus-per-task=1\n#SBATCH --hint=nomultithread\n#SBATCH --output=%x_%j.txt\n#SBATCH --account=project_46YXXXXXX\n\nmodule load LUMI/23.09 partition/C\nmodule load R/4.3.2-cpeGNU-23.09\n\necho -e \"\\\\n# Running on 2 task\\n\\n\"\nsrun -n 2 Rscript script_foreach_MPI.R\n\necho -e \"\\\\n# Running on 3 task\\n\\n\"\nsrun -n 3 Rscript script_foreach_MPI.R\n\necho -e \"\\\\n# Running on 4 task\\n\\n\"\nsrun -n 4 Rscript script_foreach_MPI.R\n\necho -e \"\\\\n# Running on $((SLURM_NTASKS + 1)) tasks\\n\\n\"\nsrun -n $((SLURM_NTASKS + 1)) -O Rscript script_foreach_MPI.R\n</code></pre> <p>It appears that here also one process is used as the master in the background while the other processes execute the <code>foreach</code> commands. With this adapter we can actually start the script in the way we are used to start parallel programs, but we still need to oversubscribe (because of the master process) to get the best speedup from using 4 tasks (and hence 4 cores).</p>","boost":10},{"location":"r/R/#information-on-the-web","title":"Information on the web","text":"<ul> <li> <p>LRZ documentation: \"Parallelization Using R\"</p> <p>The job scripts need to be adapted to LUMI but the general principles are valid.</p> </li> <li> <p>Cornell virtual workshop on R, section \"Parallel R\"</p> </li> <li> <p>CRAN Task View: High-Performance and Parallel Computing with R</p> </li> </ul>","boost":10},{"location":"r/R/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider R/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig R-4.3.2-cpeGNU-23.09-raw.eb, will build R/4.3.2-cpeGNU-23.09-raw</p> </li> <li> <p>EasyConfig R-4.3.2-cpeGNU-23.09.eb, will build R/4.3.2-cpeGNU-23.09</p> </li> <li> <p>EasyConfig R-4.4.1-cpeGNU-24.03-OpenMP-raw.eb, will build R/4.4.1-cpeGNU-24.03-OpenMP-raw</p> <p>This EasyConfig offers R with only the base R packages and - because it is hard to install properly with Rcmd - Rmpi already pre-installed.</p> </li> <li> <p>EasyConfig R-4.4.1-cpeGNU-24.03-OpenMP.eb, will build R/4.4.1-cpeGNU-24.03-OpenMP</p> <p>This EasyConfig provides R compiled with the multithreaded LibSci libraries (hence the -OpenMP suffix) and with packages for parallel computing and other packages offered by Cray-R already installed. It also contains some packages for benchmarking.</p> </li> </ul>","boost":10},{"location":"r/R/#technical-documentation","title":"Technical documentation","text":"<p>This module may be a replacement for some users for the HPE-provided version in cray-R.</p> <p>The <code>-raw</code>-version of the EasyConfigs is for R without any additional packages, while the other EasyConfigs offer examples of how to add packages.</p> <ul> <li>R web site</li> </ul>","boost":10},{"location":"r/R/#some-notes","title":"Some notes","text":"<ul> <li><code>bin/R</code> is really only a script that starts R. The relevant executable     is in <code>lib64/R/bin/exec</code>.</li> </ul>","boost":10},{"location":"r/R/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> <p>R uses an application-specific EasyBlock</p> </li> <li> <p>Support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"r/R/#r-packages-considered-for-inclusion","title":"R packages considered for inclusion","text":"<ul> <li>Packages for parallel computing and their dependencies<ul> <li>Rmpi</li> <li>Rcpp</li> <li>codetools</li> <li>Runit</li> <li>tinytest</li> <li>backports</li> <li>rlang</li> <li>parallelly</li> <li>iterators</li> <li>foreach</li> <li>doParallel</li> <li>doMPI</li> <li>snow</li> <li>snowfall</li> <li>doSNOW</li> <li>base64url</li> <li>brew</li> <li>checkmate</li> <li>data.table</li> <li>fs</li> <li>cli</li> <li>glue</li> <li>lifecycle</li> <li>pkgconfig</li> <li>vctrs</li> <li>hms</li> <li>prettyunits</li> <li>R6</li> <li>crayon</li> <li>progress</li> <li>rappdirs</li> <li>stringi</li> <li>withr</li> <li>digest</li> <li>batchtools</li> <li>globals</li> <li>listenv</li> <li>future</li> <li>future.apply</li> <li>future.batchtools</li> </ul> </li> <li>Additional packages included in Cray-R<ul> <li>lattice</li> <li>Matrix</li> <li>MASS</li> <li>class</li> <li>foreign</li> <li>KernSmooth</li> <li>nlme</li> <li>mgcv</li> <li>nnet</li> <li>rpart</li> <li>spatial</li> <li>survival</li> </ul> </li> <li>Additional packages on top of the previous two groups for benchmarking      and their dependencies<ul> <li>fansi</li> <li>utf8</li> <li>pillar</li> <li>profmem</li> <li>magrittr</li> <li>tibble</li> <li>bench</li> <li>microbenchmark</li> <li>SuppDists.     Used by the popular R-benchmark-25.R script,      originally developed by Philippe Grosjean, UMons.     See also the \"R benchmarks\" page on the R for macOS site.</li> <li>generics</li> <li>tidyselect</li> <li>dplyr</li> <li>curl</li> <li>jsonlite</li> <li>mime</li> <li>sys</li> <li>askpass</li> <li>openssl</li> <li>httr</li> <li>stringi</li> <li>benchmarkmeData</li> <li>benchmarkme.     For the \"Crowd sourced benchmarks\" page at CRAN.</li> </ul> </li> </ul>","boost":10},{"location":"r/R/#version-421-for-cpegnu-2206-2208","title":"Version 4.2.1 for cpeGNU 22.06, 22.08","text":"<ul> <li> <p>Worked from the EasyBuilders EasyConfig but removed all OpenGL-related stuff     and also removed all extensions to create the <code>-raw</code> version which has no     external packages at all.</p> </li> <li> <p>PROBLEM: Suffers from the multiple Cray LibSci libraries linked in problem, and     it is not clear how they come in.</p> <ul> <li> <p>The R <code>infoSession()</code> command shows that the non-MPI multithreaded library     is used.</p> </li> <li> <p>The configure script does discover the right option to compile with OpenMP.</p> </li> <li> <p>Enforcing the OpenMP compiler flag through <code>toolchainopts</code> though fails. It      is not used at link time, resulting in undefined OpenMP symbols when linking.</p> </li> </ul> <p>SOLUTION: Enforce OpenMP through <code>toolchainopts</code> and manually add <code>-fopenmp</code> to <code>LDFLAGS</code> in <code>preconfigopts</code>.</p> </li> <li> <p>Extensions: List based on the foss-2022a version of R in EasyBuild.</p> <ul> <li> <p>Rmpi:</p> <ul> <li> <p>Typically uses an EasyBlock, but that EasyBlock does not support the Cray     environment so we avoid using it and instead manually build the right     <code>--configure-args</code> flag for the R installation command.</p> </li> <li> <p>There is still a problem as when loading <code>Rmpi.so</code>, the load fails because     <code>mpi_universe_size</code> cannot be found. Now this is a routine defined in Rmpi      itself but only compiles in certain cases. However, it looks like routines      that reference to this function are not correctly disabled when this routine     is not included in the compilation.</p> <p>Now in fact, the configure script does correctly determine that it should  add <code>-DMPI2</code> to the command line. However, it does so after a faulty <code>-I</code> flag that does not contain a directory. Hence the compiler interprets the <code>-DMPI2</code> flag as the argument of <code>-I</code> instead.</p> <p>The solution to this last problem is a bit complicated.</p> <ul> <li> <p>The empty <code>-I</code> argument is a bug in the configure script that occurs      when <code>--with-Rmpi-include</code> is not used.</p> </li> <li> <p>Adding just any directory with that argument does not work; the configure     script checks if it contains <code>mpi.h</code>. We used an environment variable to     find the directory that Cray MPI uses.</p> </li> <li> <p>But adding <code>--with-Rmpi-include</code> also requires adding <code>--with-Rmpi-libpath</code>     for which we used the same environment variable.</p> </li> <li> <p>So hopefully these options do not conflict with anything the Cray compiler     wrappers add. <code>--with-Rmpi-include</code> and <code>--with-Rmpi-libpath</code> really should     not be needed when using the Cray wrappers.</p> </li> </ul> </li> </ul> </li> </ul> </li> </ul>","boost":10},{"location":"r/R/#version-431-for-2212","title":"Version 4.3.1 for 22.12","text":"<ul> <li> <p>Based on the 4.2.1 work but now focused on adding packages for parallel     computing (and developed the USER.md page explaining options for parallel     computing).</p> </li> <li> <p>One way to figure out how to do this is to install the <code>-raw</code> version and     then add the desired packages by hand and see what other packages R pulls in     and when it does so.</p> </li> </ul>","boost":10},{"location":"r/R/#version-432-for-2309","title":"Version 4.3.2 for 23.09","text":"<ul> <li>Quick port with minor version updates of the 22.12 one.</li> </ul>","boost":10},{"location":"r/R/#version-441-for-2403","title":"VErsion 4.4.1 for 24.03","text":"<ul> <li> <p>Quick port with version updates of the 23.09 EasyConfigs.</p> </li> <li> <p>Changed the naming to stress that we link with the multithreaded BLAS libraries.</p> </li> </ul>","boost":10},{"location":"r/R/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig R-4.2.1-cpeGNU-22.06-raw.eb, with module R/4.2.1-cpeGNU-22.06-raw</p> </li> <li> <p>EasyConfig R-4.2.1-cpeGNU-22.06.eb, with module R/4.2.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig R-4.2.1-cpeGNU-22.08-raw.eb, with module R/4.2.1-cpeGNU-22.08-raw</p> </li> <li> <p>EasyConfig R-4.2.1-cpeGNU-22.08.eb, with module R/4.2.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig R-4.2.3-cpeGNU-22.12-raw.eb, with module R/4.2.3-cpeGNU-22.12-raw</p> </li> <li> <p>EasyConfig R-4.2.3-cpeGNU-22.12.eb, with module R/4.2.3-cpeGNU-22.12</p> </li> <li> <p>EasyConfig R-4.3.1-cpeGNU-22.12-raw.eb, with module R/4.3.1-cpeGNU-22.12-raw</p> </li> <li> <p>EasyConfig R-4.3.1-cpeGNU-22.12.eb, with module R/4.3.1-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"r/RSPt/","title":"RSPt","text":"<p>[package list]</p>","boost":10},{"location":"r/RSPt/#rspt","title":"RSPt","text":"","boost":10},{"location":"r/RSPt/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig RSPt-20211004-cpeGNU-21.12.eb, with module RSPt/20211004-cpeGNU-21.12</p> </li> <li> <p>EasyConfig RSPt-20211004-cpeGNU-22.06.eb, with module RSPt/20211004-cpeGNU-22.06</p> </li> <li> <p>EasyConfig RSPt-20211004-cpeGNU-22.08.eb, with module RSPt/20211004-cpeGNU-22.08</p> </li> <li> <p>EasyConfig RSPt-20230120-cpeGNU-22.06.eb, with module RSPt/20230120-cpeGNU-22.06</p> </li> <li> <p>EasyConfig RSPt-20230120-cpeGNU-22.12.eb, with module RSPt/20230120-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"r/Rust/","title":"Rust","text":"<p>[package list]</p>","boost":10},{"location":"r/Rust/#rust","title":"Rust","text":"","boost":10},{"location":"r/Rust/#license-information","title":"License information","text":"<p>The Rust programming language is dual-licensed under the Apache License, version 2.0 and the MIT license. See also the \"Licenses\" page on the Rust web site.</p> <p>For Rust itself, the licenses can also be found in the LICENSE-APACHE and  LICENSE-MIT  files in the source repository. The repository also contains a  copyright notice in the COPYRIGHT file.</p>","boost":10},{"location":"r/Rust/#user-documentation","title":"User documentation","text":"<p>Rust is offered \"as is\", without support from the LUMI User Support Team as it is not a typical HPC language and as we don't have the personpower to build up proper knowledge about Rust. </p> <p>The Rust compiler is known to conflict with the Cray PE in certain circumstances and recent versions are also incompatible with the system GCC of LUMI causing the bootstrap procedure during installation to fail.</p> <p>The Rust EasyConfig files that we provide rely on GCC for the installation of the compiler but don't need GCC anymore afterwards which is why no toolchain is loaded explicitly.</p> <p>We cannot guarantee that object files generated by the Rust compiler can link with object files or libraries from the Cray PE as the Rust compiler is based on its own version of LLVM which may not correspond with any Cray or AMD compiler version on  the system at a given time.</p>","boost":10},{"location":"r/Rust/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Rust/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Rust-1.70.0.eb, will build Rust/1.70.0</p> </li> <li> <p>EasyConfig Rust-1.75.0.eb, will build Rust/1.75.0</p> </li> <li> <p>EasyConfig Rust-1.80.1.eb, will build Rust/1.80.1</p> </li> </ul>","boost":10},{"location":"r/Rust/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Rust home page</li> </ul>","boost":10},{"location":"r/Rust/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Rust support in the EasyBuilders repository</p> </li> <li> <p>There is no support for Rust in the CSCS repository</p> </li> </ul>","boost":10},{"location":"r/Rust/#rust-1540-from-lumi2106-on","title":"Rust 1.54.0 from LUMI/21.06 on","text":"<ul> <li> <p>The EasyConfig builds upon the one of the EasyBuilders repository. It uses     the SYSTEM toolchain however so that it can be used to generate packages     for the SYSTEM toolchain or any other toolchain on LUMI.</p> </li> <li> <p>It is intended for installation in <code>partition/common</code> as processor-specific     binaries don't make much sense for compilers and as it can then be used to     compile software for that partition also.</p> </li> </ul>","boost":10},{"location":"r/Rust/#rust-1550-from-lumi2108-on","title":"Rust 1.55.0 from LUMI/21.08 on","text":"<ul> <li>Straightforward adaptation of the EasyConfig for version 1.54.0.</li> </ul>","boost":10},{"location":"r/Rust/#rust-1600-for-lumi2112-and-lumi2206","title":"Rust 1.60.0 for LUMI/21.12 and LUMI/22.06","text":"<ul> <li> <p>Port of the one for 1.55.0, but with some clean-up of loaded modules in the pre     options as we have experienced that otherwise Rust might pick up the wrong      compiler.</p> </li> <li> <p>Modification based on the default EasyConfigs: use x.py for build and install      steps.</p> </li> <li> <p>TODO: We set CFLAGS and CXXFLAGS but it is not clear at all if this is of any      use during the install procedure.</p> </li> </ul>","boost":10},{"location":"r/Rust/#rust-1700-developed-for-lumi2212","title":"Rust 1.70.0, developed for LUMI/22.12","text":"<ul> <li> <p>Now loading the gcc/11.2.0 module for the build process as building with the     system gcc was problematic.</p> </li> <li> <p>Added config options to also build all tools. This seems to solve the link problems     that we appeared to have with the 1.60.0 version.</p> </li> <li> <p>Checked with what the EasyBlock for Rust in an upcoming version of EasyBuild does.</p> </li> </ul>","boost":10},{"location":"r/Rust/#rust-1750-developed-for-lumi2309","title":"Rust 1.75.0, developed for LUMI/23.09","text":"<ul> <li> <p>A port of the 1.70.0 EasyConfig, but now using gcc/12.2.0.</p> </li> <li> <p>Adapted the code a little bit so that in principle it could also work in other      versions of the LUMI stack than the intended one.</p> </li> </ul>","boost":10},{"location":"r/Rust/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Rust-1.54.0.eb, with module Rust/1.54.0</p> </li> <li> <p>EasyConfig Rust-1.55.0.eb, with module Rust/1.55.0</p> </li> <li> <p>EasyConfig Rust-1.60.0.eb, with module Rust/1.60.0</p> </li> </ul> </li> </ul>","boost":10},{"location":"r/rccl/","title":"rccl","text":"<p>[package list]</p>","boost":10},{"location":"r/rccl/#rccl","title":"rccl","text":"","boost":10},{"location":"r/rccl/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig rccl-2.12.7-cpeGNU-22.08.eb, with module rccl/2.12.7-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"r/rclone/","title":"rclone","text":"<p>[package list]</p>","boost":10},{"location":"r/rclone/#rclone","title":"rclone","text":"","boost":10},{"location":"r/rclone/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig rclone-1.57.0.eb, with module rclone/1.57.0</p> </li> <li> <p>EasyConfig rclone-1.59.0.eb, with module rclone/1.59.0</p> </li> </ul> </li> </ul>","boost":10},{"location":"r/rocThrust/","title":"rocThrust","text":"<p>[package list]</p>","boost":10},{"location":"r/rocThrust/#rocthrust","title":"rocThrust","text":"","boost":10},{"location":"r/rocThrust/#license-information","title":"License information","text":"<p>RocTrust is distributed under the Apache License 2.0, a copy of which can be found in the LICENSE file in the GitHub repository.</p>","boost":10},{"location":"r/rocThrust/#technical-documentation","title":"Technical documentation","text":"<ul> <li>rocThrust homepage</li> </ul>","boost":10},{"location":"r/rocThrust/#easybuild","title":"EasyBuild","text":"<ul> <li>There is no support for rocThrust in the easybuilders repository</li> <li>There is no support for rocThrust in the CSCS repository</li> </ul>","boost":10},{"location":"r/rocThrust/#rocthrust-452","title":"rocThrust 4.5.2","text":"<p>Created for usage on the Early Access Platform</p>","boost":10},{"location":"r/rocThrust/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software<ul> <li>EasyConfig rocThrust-4.5.2.eb, with module rocThrust/4.5.2</li> </ul> </li> </ul>","boost":10},{"location":"r/rocm/","title":"rocm","text":"<p>[package list]</p>","boost":10},{"location":"r/rocm/#rocm","title":"rocm","text":"","boost":10},{"location":"r/rocm/#license-information","title":"License information","text":"<p>ROCm\u2122 is made available by Advanced Micro Devices, Inc. under the open source license identified in the top-level directory for the library in the repository on Github.com (Portions of ROCm are licensed under MITx11 and UIL/NCSA. For more information on the license, review the license.txt in the top-level directory for the library on Github.com).</p>","boost":10},{"location":"r/rocm/#user-documentation-central-installation","title":"User documentation (central installation)","text":"<p>There is a big disclaimer with these modules.</p> <p>THIS IS ROCM INSTALLED IN A WAY IT IS NOT MEANT TO BE INSTALLED.</p> <p>The ROCm installations outside of the Cray PE modules (so the 5.2.5, 5.3.3, 5.4.6, 5.6.1 and 6.2.2 modules) come without any warranty nor support as they are not installed in the proper directories suggested by AMD thus may break links encoded in the RPMs from which these packages were installed and as they are also not guaranteed to be compatible with modules from the Cray PE as only HPE Cray can give that warranty and as their inner working and precise requirements is not public. </p> <ul> <li> <p>The only modules officially supported by the current AMD GPU driver at the     time of writing (October 2024) are the <code>5.6.1</code> and <code>6.2.2</code> modules. Using     the <code>5.6.1</code> module is recommended only if a performance regression is     observed with the <code>6.0.3</code> or <code>6.2.2</code> modules. The use of the other modules     (<code>5.2.5</code>, <code>5.3.3</code> and <code>5.4.6</code>) is strongly discouraged and no longer     supported by the LUMI User Support Team.</p> </li> <li> <p>The ROCm modules have some PDF documentation in     <code>$EBROOTROCM/share/doc/rocgdb</code>, <code>$EBROOTROCM/share/doc/tracer</code>,     <code>$EBROOTROCM/share/doc/rocm_smi</code> and <code>$EBROOTROCM/share/doc/amd-dbgapi</code>. The     <code>EBROOTROCM</code> environment variable is defined after loading the module.</p> </li> <li> <p>The <code>6.2.2</code> modules can be used with <code>PrgEnv-amd</code> but comes without matching     <code>amd/6.2.2</code> module. It is sufficient to load the <code>rocm/6.2.2</code> module after     the <code>PrgEnv-amd</code> module (or <code>cpeAMD</code> module) to enable this ROCm version     also for the compiler wrappers in that programming environment.</p> </li> <li> <p>The <code>6.2.2</code> modules is not compatible with the CCE 17.0.0 and 17.0.1     compilers due to an incompatibility between LLVM 17 on which the CCE is     based and LLVM 18 from ROCm 6.2. The only supported programming environments     are PrgEnv-gnu (or cpeGNU) and PrgEnv-amd (or cpeAMD).</p> </li> <li> <p>Since ROCm 6.2, hipSolver depends on SuiteSparse. If an application depends     on hipSolver, it is the user responsibility to load the SuiteSparse module     which corresponds to the CPE they wish to use (cpeAMD or cpeGNU). Note that     the SuiteSparse module needs to be loaded before the <code>rocm/6.2.2</code> module     or <code>rocm/6.0.3</code> will be used.</p> </li> <li> <p>In the <code>CrayEnv</code> environment, omniperf dependencies have been installed for     all <code>cray-python</code> versions available at the time of the module installation     (October 2024, Python 3.9, 3.10 and 3.11) but the <code>cray-python</code> module is     not loaded as a dependency to let the choice of the Python version to the     user. Therefore, if you want to use omniperf, you need to load a     <code>cray-python</code> module yourself. In the <code>LUMI</code> environment, the only supported     version of Python is the one coming from the corresponding release of the     CPE. For example, for <code>LUMI/24.03</code> omniperf dependencies have been installed     for version 3.11. Omniperf is not compatible with the system Python     (version 3.6).</p> </li> </ul> <p>Note that using ROCm in containers is still subject to the same driver compatibility problems. Though containers will solve the problem of ROCm being installed in a non-standard path (which was needed for the modules as the standard path is already occupied by a different ROCm version), it will not solve any problem caused by running a newer version of ROCm on a too old driver (and there may be problems running an old version of ROCm on a too new driver also).</p>","boost":10},{"location":"r/rocm/#user-documentation-singularity-container","title":"User documentation (singularity container)","text":"<p>BETA VERSION, problems are possible and they may not be solved quickly.</p> <p>The rocm container is developed by AMD specifically for LUMI and contains the necessary parts explore ROCm. The use is rather limited because at the moment the methods that can be used to build upon an existing container are rather limited on LUMI due to security concerns with certain functionality needed for  that. The can however be used as a base image for cotainr and it is also possible in some cases to extend them using the so-called SingularityCE \"unprivileged proot build\" process.</p> <p>It is entirely normal that some features in some of the containers will not work. Each ROCm driver supports only particular versions of packages. E.g., the ROCm  driver from ROCm 6.0.3 is only guaranteed to support ROCm versions between 5.6 and  6.2 and hence problems can be expected with ROCm 5.5 or older and ROCm 6.3 or newer. There is nothing LUMI support can do about it. Only one driver version can be active on the system, and installing a newer version depends on other software on the system also and is not as trivial as it would be on a PC.</p>","boost":10},{"location":"r/rocm/#use-via-easybuild-generated-modules","title":"Use via EasyBuild-generated modules","text":"<p>The EasyBuild installation with the EasyConfigs mentioned below will do three things:</p> <ol> <li> <p>It will copy the container to your own file space. We realise containers can be     big, but it ensures that you have complete control over when a container is     removed.</p> <p>We will remove a container from the system when it is not sufficiently functional anymore, but the container may still work for you.</p> <p>If you prefer to use the centrally provided container, you can remove your copy  after loading of the module with <code>rm $SIF</code> followed by reloading the module. This is however at your own risk. </p> </li> <li> <p>It will create a module file.      When loading the module, a number of environment variables will     be set to help you use the module and to make it easy to swap the module with a     different version in your job scripts.</p> <ul> <li> <p><code>SIF</code> and <code>SIFROCM</code> both contain the name and full path of the singularity     container file.</p> </li> <li> <p><code>SINGULARITY_BIND</code> will mount all necessary directories from the system,     including everything that is needed to access the project, scratch and flash     file systems.</p> </li> </ul> </li> <li> <p>It will create the <code>runscripts</code> subdirectory in the installation directory that      can be used to store scripts that should be available in the container, and the     <code>bin</code> subdirectory for scripts that run outside the container.</p> <p>Currently there is one script outside the container: <code>start-shell</code> will start a bash session in the container, and can take arguments just as bash. It is provided for consistency with planned future extensions of some other containers, but really doesn't do much more than calling</p> <pre><code>singularity exec $SIFROCM bash\n</code></pre> <p>and passing it the arguments that were given to the command.</p> <p>Note that the installation directory is fully erased when you re-install the  container module using EasyBuild. So if you chose to use it to add scripts, make sure you store them elsewhere also so that they can be copied again if you  rebuild the container module for some reason.</p> </li> </ol>","boost":10},{"location":"r/rocm/#installation-via-easybuild","title":"Installation via EasyBuild","text":"<p>To install the container with EasyBuild, follow the instructions in the EasyBuild section of the LUMI documentation, section \"Software\", and use the dummy partition <code>container</code>, e.g.:</p> <pre><code>module load LUMI partition/container EasyBuild-user\neb rocm-6.0.3-singularity-20241004.eb\n</code></pre> <p>To use the container after installation, the <code>EasyBuild-user</code> module is not needed nor is the <code>container</code> partition. The module will be available in all versions of the LUMI stack and in the <code>CrayEnv</code> stack (provided the environment variable <code>EBU_USER_PREFIX</code> points to the right location).</p>","boost":10},{"location":"r/rocm/#direct-access","title":"Direct access","text":"<p>The ROCm containers are available in the following subdirectories of <code>/appl/local/containers</code>:</p> <ul> <li> <p><code>/appl/local/containers/sif-images</code>: Symbolic link to the latest version of the container     for each ROCm version provided. Those links can change without notice!</p> </li> <li> <p><code>/appl/local/containers/tested-containers</code>: Tested containers provided as a Singulartiy <code>.sif</code> file     and a docker-generated tarball. Containers in this directory are removed quickly when a new version     becomes available.</p> </li> <li> <p><code>/appl/local/containers/easybuild-sif-images</code>: Singularity <code>.sif</code> images used with the EasyConfigs     that we provide. They tend to be available for a longer time than in the other two subdirectories.</p> </li> </ul> <p>If you depend on a particular version of a container, we recommend that you copy the container to your own file space (e.g., in <code>/project</code>) as there is no guarantee the specific version will remain available centrally on the system for as long as you want.</p> <p>When using the containers without the modules, you will have to take care of the bindings as some system files are needed for, e.g., RCCL. The recommended minimal bindings are:</p> <pre><code>-B /var/spool/slurmd,/opt/cray/,/usr/lib64/libcxi.so.1\n</code></pre> <p>or, for those containers where MPI still fails to load due to a missing libjansson,</p> <pre><code>-B /var/spool/slurmd,/opt/cray/,/usr/lib64/libcxi.so.1,/usr/lib64/libjansson.so.4\n</code></pre> <p>and the bindings you need to access the files you want to use from <code>/scratch</code>, <code>/flash</code> and/or <code>/project</code>. You can get access to your files on LUMI in the regular location by also using the bindings</p> <pre><code>-B /pfs,/scratch,/projappl,/project,/flash,/appl\n</code></pre> <p>Note that the list recommended bindings may change after a system update.</p>","boost":10},{"location":"r/rocm/#using-the-images-as-base-image-for-cotainr","title":"Using the images as base image for cotainr","text":"<p>We recommend using these images as the base image for cotainr if you want to  build a container with cotainr  that needs ROCm. You can use the <code>--base-image=&lt;my base image&gt;</code> flag of the <code>cotainr</code> command to indicate the base image that should be used.</p> <p>If you do so, please make sure that the GPU software you install from conda-forge or via <code>pip</code>  with cotainr is compatible with the version of ROCm in the container that you use as the base image.</p> PyTorch with cotainr (click to expand) <p>To start, create a Yaml file to tell cotainr which software should be installed. As an example, consider the file below which we name <code>py312_rocm603_pytorch.yml</code> </p> <pre><code>name: minimal_pytorch\nchannels:\n  - conda-forge\ndependencies:\n  - filelock=3.15.4\n  - fsspec=2024.9.0\n  - jinja2=3.1.4\n  - markupsafe=2.1.5\n  - mpmath=1.3.0\n  - networkx=3.3\n  - numpy=2.1.1\n  - pillow=10.4.0\n  - pip=24.0\n  - python=3.12.3\n  - sympy=1.13.2\n  - typing-extensions=4.12.2\n  - pip:\n    - --extra-index-url https://download.pytorch.org/whl/rocm6.0/\n    - pytorch-triton-rocm==3.0.0\n    - torch==2.4.1+rocm6.0\n    - torchaudio==2.4.1+rocm6.0\n    - torchvision==0.19.1+rocm6.0\n</code></pre> <p>Now we are ready to generate a new Singularity <code>.sif</code> file with this defintion:</p> <pre><code>module load LUMI\nmodule load cotainr\ncotainr build my-new-image.sif --base-image=/appl/local/containers/sif-images/lumi-rocm-rocm-6.0.3.sif --conda-env=py312_rocm603_pytorch.yml\n</code></pre> <p>As we are using a PyTorch wheel for ROCm 6.0, we use the container image for ROCm 6.0.3.</p> <p>You're now ready to use the new image with the direct access method. As in this example we installed PyTorch, the information on the PyTorch page page in this guide is also very relevant. And if you understand very well what you're doing, you may even adapt one of the EasyBuild recipes for the PyTorch containers to use your new image and install the wrapper scripts etc. that  those modules provide (pointing EasyBuild to your image with the <code>--sourcepath</code> flag of the <code>eb</code>  command).</p>","boost":10},{"location":"r/rocm/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider rocm/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>rocm/5.2.5 (EasyConfig: rocm-5.2.5.eb)</p> </li> <li> <p>rocm/5.3.3 (EasyConfig: rocm-5.3.3.eb)</p> </li> <li> <p>rocm/5.4.6 (EasyConfig: rocm-5.4.6.eb)</p> </li> <li> <p>rocm/5.6.1 (EasyConfig: rocm-5.6.1.eb)</p> </li> <li> <p>rocm/6.2.2 (EasyConfig: rocm-6.2.2.eb)</p> </li> </ul>","boost":10},{"location":"r/rocm/#singularity-containers-with-modules-for-binding-and-extras","title":"Singularity containers with modules for binding and extras","text":"<p>Install with the EasyBuild-user module in <code>partition/container</code>: <pre><code>module load LUMI partition/container EasyBuild-user\neb &lt;easyconfig&gt;\n</code></pre> The module will be available in all versions of the LUMI stack and in the CrayEnv stack.</p> <p>To access module help after installation use <code>module spider rocm/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig rocm-5.6.0-singularity-20240315.eb, will provide rocm/5.6.0-singularity-20240315</p> </li> <li> <p>EasyConfig rocm-5.6.1-singularity-20231108.eb, will provide rocm/5.6.1-singularity-20231108     (with docker definition)</p> </li> <li> <p>EasyConfig rocm-5.6.1-singularity-20240124.eb, will provide rocm/5.6.1-singularity-20240124</p> </li> <li> <p>EasyConfig rocm-5.6.1-singularity-20240207.eb, will provide rocm/5.6.1-singularity-20240207</p> </li> <li> <p>EasyConfig rocm-5.7.1-singularity-20240124.eb, will provide rocm/5.7.1-singularity-20240124</p> </li> <li> <p>EasyConfig rocm-5.7.1-singularity-20240207.eb, will provide rocm/5.7.1-singularity-20240207</p> </li> <li> <p>EasyConfig rocm-5.7.3-singularity-20241004.eb, will provide rocm/5.7.3-singularity-20241004</p> </li> <li> <p>EasyConfig rocm-6.0.3-singularity-20241004.eb, will provide rocm/6.0.3-singularity-20241004</p> </li> <li> <p>EasyConfig rocm-6.1.3-singularity-20241004.eb, will provide rocm/6.1.3-singularity-20241004</p> </li> <li> <p>EasyConfig rocm-6.2.2-singularity-20241007.eb, will provide rocm/6.2.2-singularity-20241007</p> </li> </ul>","boost":10},{"location":"r/rocm/#technical-documentation-central-installation","title":"Technical documentation (central installation)","text":"<ul> <li> <p>ROCm product page</p> </li> <li> <p>ROCm developer hub</p> </li> <li> <p>ROCm documentation home page</p> </li> </ul>","boost":10},{"location":"r/rocm/#easybuild","title":"Easybuild","text":"","boost":10},{"location":"r/rocm/#rocm-452-archived","title":"ROCm 4.5.2 (archived)","text":"<p>The EasyConfig unpacks the official RPMs and copies them to the installation  directory. This is a temporary setup so that the users that have access to the  Early Access Platform can compile their code from the login node.</p>","boost":10},{"location":"r/rocm/#rocm-525-and-533","title":"ROCm 5.2.5 and 5.3.3","text":"<ul> <li> <p>Unpacked form RPMs like previous version but use an EasyBlock to easy the      process of EasyConfigs creation.</p> </li> <li> <p>ROCm 5.3.3 documentation</p> </li> </ul>","boost":10},{"location":"r/rocm/#rocm-546-561-and-622","title":"ROCm 5.4.6, 5.6.1 and 6.2.2","text":"<ul> <li> <p>Unpacked from RPMs but with an additional step to set the RPATH of the     libraries and avoid using the system rocm libraries if the module is not     loaded.</p> </li> <li> <p>The 5.4.6 and 6.2.2 modules were developed at a later time as the 5.6.1     module and were made to work around some problems we observed with 5.6.1 at     that time. The 6.2.2 version was chosen as this at that time was the latest     version of ROCm officially supported on the driver on the system at that     time. </p> <p>One difference with the 5.6.1 version is that there is no equivalent <code>amd</code> module. Instead some additional environment variables are set in the <code>rocm/5.4.6</code> and <code>6.2.2</code> modules so that if you load it AFTER loading the <code>PrgEnv-amd</code> module, the compiler wrappers would still use the compilers from <code>rocm/5.4.6</code> or <code>6.2.2</code>.</p> </li> <li> <p>The 6.2.2 version is not compatible with CCE 17.x due to a LLVM     incompatibility. </p> </li> <li> <p>Documentation:</p> <pre><code>-   [ROCm 5.4.6 documentation](https://rocm.docs.amd.com/en/docs-5.4.3/)\n-   [ROCm 5.6.1 documentation](https://rocm.docs.amd.com/en/docs-5.6.1/)\n-   [ROCm 6.2.2 documantation](https://rocm.docs.amd.com/en/docs-6.2.2/)\n</code></pre> </li> </ul>","boost":10},{"location":"r/rocm/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig rocm-4.5.2.eb, with module rocm/4.5.2</p> </li> <li> <p>EasyConfig rocm-5.1.4.eb, with module rocm/5.1.4</p> </li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-containers - previously available singularity containerised software</p> <ul> <li> <p>EasyConfig rocm-5.4.5-singularity-20231110.eb, with module rocm/5.4.5-singularity-20231110  (with docker definition)</p> </li> <li> <p>EasyConfig rocm-5.4.5-singularity-20240124.eb, with module rocm/5.4.5-singularity-20240124</p> </li> <li> <p>EasyConfig rocm-5.4.5-singularity-20240207.eb, with module rocm/5.4.5-singularity-20240207</p> </li> <li> <p>EasyConfig rocm-5.4.6-singularity-20231110.eb, with module rocm/5.4.6-singularity-20231110  (with docker definition)</p> </li> <li> <p>EasyConfig rocm-5.4.6-singularity-20240124.eb, with module rocm/5.4.6-singularity-20240124</p> </li> <li> <p>EasyConfig rocm-5.4.6-singularity-20240207.eb, with module rocm/5.4.6-singularity-20240207</p> </li> <li> <p>EasyConfig rocm-5.5.1-singularity-20231110.eb, with module rocm/5.5.1-singularity-20231110  (with docker definition)</p> </li> <li> <p>EasyConfig rocm-5.5.1-singularity-20240124.eb, with module rocm/5.5.1-singularity-20240124</p> </li> <li> <p>EasyConfig rocm-5.5.1-singularity-20240207.eb, with module rocm/5.5.1-singularity-20240207</p> </li> <li> <p>EasyConfig rocm-5.5.3-singularity-20231108.eb, with module rocm/5.5.3-singularity-20231108  (with docker definition)</p> </li> <li> <p>EasyConfig rocm-5.5.3-singularity-20240124.eb, with module rocm/5.5.3-singularity-20240124</p> </li> <li> <p>EasyConfig rocm-5.5.3-singularity-20240207.eb, with module rocm/5.5.3-singularity-20240207</p> </li> </ul> </li> </ul>","boost":10},{"location":"r/rocmlibs/","title":"rocmlibs","text":"<p>[package list]</p>","boost":10},{"location":"r/rocmlibs/#rocmlibs","title":"rocmlibs","text":"","boost":10},{"location":"r/rocmlibs/#technical-documentation","title":"Technical documentation","text":"<ul> <li>ROCm Software Platform repo</li> </ul>","boost":10},{"location":"r/rocmlibs/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"r/rocmlibs/#rocmlibs-452","title":"rocmlibs 4.5.2","text":"<p>Bundle of the ROCm numerical libraries. Created for usage on the Early Access  Platform. The bundle contains:</p> <ul> <li>rocFFT: a software library for computing Fast Fourier Transforms</li> <li>rocPRIM: a header-only library providing HIP parallel primitives</li> <li>rocRAND: pseudo-random and quasi-random numbers generator</li> <li>rocBLAS: Basic Linear Algebra Subprograms for AMD GPUs</li> <li>rocSOLVER: subset of LAPACK functionality for AMD GPUs</li> <li>rocSPARSE: Basic Linear Algebra Subroutines for sparse computation</li> <li>rocALUTION: a sparse linear algebra library</li> <li>hipFFT: marshalling library supporting rocFFT or cuFFT as backends</li> <li>hipBLAS: marshalling library supporting rocBLAS or cuBLAS as backends</li> </ul>","boost":10},{"location":"r/rocmlibs/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software<ul> <li>EasyConfig rocmlibs-4.5.2.eb, with module rocmlibs/4.5.2</li> </ul> </li> </ul>","boost":10},{"location":"s/SAMtools/","title":"SAMtools","text":"<p>[package list]</p>","boost":10},{"location":"s/SAMtools/#samtools","title":"SAMtools","text":"","boost":10},{"location":"s/SAMtools/#license-information","title":"License information","text":"<p>SAMtools is distributed under the MIT/Expat License, a copy of which can be found in the LICENSE file in the SAMtools GitHub repository</p> <p>Please also note the \"Citing\" section in the README file in that repository: users are asked to cite a particular paper when usig SAMtools for publications.</p> <p>After installation of the package and loading of the module, the LICENSE and README  files are available in <code>$EBROOTSAMTOOLS/share/licenses/SAMtools</code> (from version 1.17  on).</p>","boost":10},{"location":"s/SAMtools/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider SAMtools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig SAMtools-1.18-cpeGNU-23.09.eb, will build SAMtools/1.18-cpeGNU-23.09</p> </li> <li> <p>EasyConfig SAMtools-1.20-cpeGNU-24.03.eb, will build SAMtools/1.20-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"s/SAMtools/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>SAMtools web site</p> </li> <li> <p>SAMtools on GitHub</p> </li> </ul>","boost":10},{"location":"s/SAMtools/#general-information","title":"General information","text":"<ul> <li>Note that some time ago SAMtools was split in three different packages<ul> <li>HTSlib</li> <li>SAMtools itself</li> <li>BCFtools</li> </ul> </li> <li>SAMtools contains a number of binaries, a static libraries, several Perl     scripts but also two LUA scripts.</li> </ul>","boost":10},{"location":"s/SAMtools/#easyconfigs","title":"EasyConfigs","text":"<ul> <li> <p>Support for SAMtools in the EasyBuilders repository.    The support uses an EasyBlock that installs a library and include file that are    not installed by <code>make install</code>.</p> </li> <li> <p>There is no support for SAMtools in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"s/SAMtools/#version-114-for-cpegnu-2112","title":"Version 1.14 for cpeGNU 21.12","text":"<ul> <li>The EasyConfig is based on the one from the 2021b toolchain of the     EasyBuilders repository. HTSlib was added as a dependency though,     something that is done in the UAntwerpen version and it does show     up in <code>samtools version</code>.</li> </ul>","boost":10},{"location":"s/SAMtools/#version-1151-for-cpegnu-2112","title":"Version 1.15.1 for cpeGNU 21.12","text":"<ul> <li>Trivial version bump, but we now also unload a few modules that are     not needed for compilation, just in case that would solve some problems     detected on LUMI.</li> </ul>","boost":10},{"location":"s/SAMtools/#version-1151-for-cpe-2206-and-2208","title":"Version 1.15.1 for CPE 22.06 and 22.08","text":"<ul> <li> <p>Cleaned up dependencies and removed those that are pulled in through     HTSlib.</p> </li> <li> <p>Did another check of the configure options.</p> </li> </ul>","boost":10},{"location":"s/SAMtools/#version-117-for-cpegnu-2212","title":"Version 1.17 for cpeGNU 22.12","text":"<ul> <li>Trivial port of the 1.15.1 EasyConfig.</li> </ul>","boost":10},{"location":"s/SAMtools/#version-118-from-cpe-2309-on","title":"Version 1.18 from CPE 23.09 on","text":"<ul> <li>Trivial port of the 1.18 EasyConfig.</li> </ul>","boost":10},{"location":"s/SAMtools/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig SAMtools-1.14-cpeGNU-21.12.eb, with module SAMtools/1.14-cpeGNU-21.12</p> </li> <li> <p>EasyConfig SAMtools-1.15.1-cpeGNU-21.12.eb, with module SAMtools/1.15.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig SAMtools-1.15.1-cpeGNU-22.06.eb, with module SAMtools/1.15.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig SAMtools-1.15.1-cpeGNU-22.08.eb, with module SAMtools/1.15.1-cpeGNU-22.08</p> </li> <li> <p>EasyConfig SAMtools-1.17-cpeGNU-22.12.eb, with module SAMtools/1.17-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/SCOTCH/","title":"SCOTCH","text":"<p>[package list]</p>","boost":10},{"location":"s/SCOTCH/#scotch","title":"SCOTCH","text":"","boost":10},{"location":"s/SCOTCH/#license-information","title":"License information","text":"<p>Scothc is licensed under the terms of the CeCILL-C free/libre software license. A copy can be found in the doc/CeCILL-C_V1-en.txt file in the GitLab repository.</p> <p>From LUMI/23.12 on, license information can also be found in the <code>$EBROOTSCOTCH/share/licenses/SCOTCH</code> directory after loading the module.</p>","boost":10},{"location":"s/SCOTCH/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider SCOTCH/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>SCOTCH/6.1.3-cpeAMD-22.08 (EasyConfig: SCOTCH-6.1.3-cpeAMD-22.08.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeAMD-22.12 (EasyConfig: SCOTCH-6.1.3-cpeAMD-22.12.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeAMD-23.09 (EasyConfig: SCOTCH-6.1.3-cpeAMD-23.09.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeAMD-23.12 (EasyConfig: SCOTCH-6.1.3-cpeAMD-23.12.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeAMD-24.03 (EasyConfig: SCOTCH-6.1.3-cpeAMD-24.03.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeAOCC-22.08 (EasyConfig: SCOTCH-6.1.3-cpeAOCC-22.08.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeAOCC-22.12 (EasyConfig: SCOTCH-6.1.3-cpeAOCC-22.12.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeAOCC-23.09 (EasyConfig: SCOTCH-6.1.3-cpeAOCC-23.09.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeAOCC-23.12 (EasyConfig: SCOTCH-6.1.3-cpeAOCC-23.12.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeAOCC-24.03 (EasyConfig: SCOTCH-6.1.3-cpeAOCC-24.03.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeCray-22.08 (EasyConfig: SCOTCH-6.1.3-cpeCray-22.08.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeCray-22.12 (EasyConfig: SCOTCH-6.1.3-cpeCray-22.12.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeCray-23.03 (EasyConfig: SCOTCH-6.1.3-cpeCray-23.03.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeCray-23.09 (EasyConfig: SCOTCH-6.1.3-cpeCray-23.09.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeCray-23.12 (EasyConfig: SCOTCH-6.1.3-cpeCray-23.12.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeCray-24.03 (EasyConfig: SCOTCH-6.1.3-cpeCray-24.03.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeGNU-22.08 (EasyConfig: SCOTCH-6.1.3-cpeGNU-22.08.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeGNU-22.12 (EasyConfig: SCOTCH-6.1.3-cpeGNU-22.12.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeGNU-23.09 (EasyConfig: SCOTCH-6.1.3-cpeGNU-23.09.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeGNU-23.12 (EasyConfig: SCOTCH-6.1.3-cpeGNU-23.12.eb)</p> </li> <li> <p>SCOTCH/6.1.3-cpeGNU-24.03 (EasyConfig: SCOTCH-6.1.3-cpeGNU-24.03.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeAMD-22.12 (EasyConfig: SCOTCH-7.0.3-cpeAMD-22.12.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeAMD-23.09 (EasyConfig: SCOTCH-7.0.3-cpeAMD-23.09.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeAMD-23.12 (EasyConfig: SCOTCH-7.0.3-cpeAMD-23.12.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeAOCC-22.12 (EasyConfig: SCOTCH-7.0.3-cpeAOCC-22.12.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeAOCC-23.09 (EasyConfig: SCOTCH-7.0.3-cpeAOCC-23.09.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeAOCC-23.12 (EasyConfig: SCOTCH-7.0.3-cpeAOCC-23.12.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeCray-22.12 (EasyConfig: SCOTCH-7.0.3-cpeCray-22.12.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeCray-23.03 (EasyConfig: SCOTCH-7.0.3-cpeCray-23.03.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeCray-23.09 (EasyConfig: SCOTCH-7.0.3-cpeCray-23.09.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeCray-23.12 (EasyConfig: SCOTCH-7.0.3-cpeCray-23.12.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeGNU-22.12 (EasyConfig: SCOTCH-7.0.3-cpeGNU-22.12.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeGNU-23.09 (EasyConfig: SCOTCH-7.0.3-cpeGNU-23.09.eb)</p> </li> <li> <p>SCOTCH/7.0.3-cpeGNU-23.12 (EasyConfig: SCOTCH-7.0.3-cpeGNU-23.12.eb)</p> </li> <li> <p>SCOTCH/7.0.4-cpeAMD-24.03 (EasyConfig: SCOTCH-7.0.4-cpeAMD-24.03.eb)</p> </li> <li> <p>SCOTCH/7.0.4-cpeAOCC-24.03 (EasyConfig: SCOTCH-7.0.4-cpeAOCC-24.03.eb)</p> </li> <li> <p>SCOTCH/7.0.4-cpeCray-24.03 (EasyConfig: SCOTCH-7.0.4-cpeCray-24.03.eb)</p> </li> <li> <p>SCOTCH/7.0.4-cpeGNU-24.03 (EasyConfig: SCOTCH-7.0.4-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"s/SCOTCH/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>SCOTCH home page</p> </li> <li> <p>SCOTCH GitLab</p> </li> </ul>","boost":10},{"location":"s/SCOTCH/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>SCOTCH support in the EasyBuilders repository</p> <p>SCOTCH has a custom EasyBlock. However, it does not support cpeCray and cpeAMD.</p> </li> <li> <p>SCOTCH support in the CSCS repository</p> </li> <li> <p>HPE-Cray SCOTCH sample build script (TPSL)</p> <p>SCOTCH was part of the Cray Third-Party Scientific Libraries (TPSL) but is no longer delivered in a ready-to-use form,</p> </li> </ul>","boost":10},{"location":"s/SCOTCH/#version-611-for-cpe-2108","title":"Version 6.1.1 for CPE 21.08","text":"<ul> <li> <p>The EasyBlock does not support the Cray or AMD compilers so it was     thorougnly reworked (and renamed to <code>EB_SCOTCH_CPE</code> so not automatically     activated).</p> <ul> <li> <p>To compile with CPE, a separate template file is required in <code>src/Make.inc</code>.     For now, we inject this via the sources in the EasyConfig.</p> </li> <li> <p>Added the EasyBlock option <code>rename_parser</code> to build with <code>SCOTCH_RENAME_PARSER</code>     defined as it is used in the Cray sample builds, so we can always activate it     when needed.</p> </li> <li> <p>Added the EasyBlock option <code>metrix_prefix</code> that enables prefixing all built-in     METIS routines with <code>SCOTCH_</code>. This is something which was done in the     Cray TPSL library as there was also a METIS library to enable the regular     METIS routines fronm the regular library and SCOTCH in the same code.</p> </li> <li> <p>Improved the support for GZ-compression of graphs and added support for bz2     and LZMA. These will be activated depending on the dependency list ( zlib,     bzip2 or XZ modules) and the verification is done by looking for the EBROOT     variables to better support bundles of tools (that only need to define the     corresponding EBROOT variables to be compatible with the regular EasyBuild     modules).</p> </li> </ul> </li> <li> <p>This implies that the resulting EasyConfig is actually almost completely rewritten.</p> </li> </ul>","boost":10},{"location":"s/SCOTCH/#version-612-for-cpe-2112","title":"Version 6.1.2 for CPE 21.12","text":"<ul> <li> <p>The root directory name has changed, some tricks were needed to unpack in a directory     with a more predictable name. Maybe this can be further improved with appropriate options     of tar rather than the construction with a move.</p> </li> <li> <p>We're not sure we will get exactly the same file every time so we disabled the sanity     check.</p> </li> </ul>","boost":10},{"location":"s/SCOTCH/#version-613-for-cpe-2206-and-later","title":"Version 6.1.3 for CPE 22.06 and later","text":"<ul> <li> <p>We decided against upgrading to 7.0.1 in the central software stack as that release     might need some more testing and as we may need to rework the custom application     EasyBlock.</p> </li> <li> <p>From 22.12 on: Link to the homepage changed to the new one.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"s/SCOTCH/#version-703-from-cpe-2212-on","title":"Version 7.0.3 from CPE 22.12 on","text":"<ul> <li> <p>Changed the homepage link to the new one.</p> </li> <li> <p>Tried a fairly trivial update and that seemed OK for cpeGNU.</p> </li> <li> <p>For some reason, to get it to work with cpeCray, we needed to add definitions for FLEX     and BISON to Makefile.inc. It is not clear why this was not needed for the other toolchains.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"s/SCOTCH/#version-704-fro-lumi2403","title":"Version 7.0.4 fro LUMI/24.03","text":"<ul> <li>Trivial version update from the 7.0.3 EasyConfig for LUMI/23.12.</li> </ul>","boost":10},{"location":"s/SCOTCH/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig SCOTCH-6.1.1-cpeCray-21.08.eb, with module SCOTCH/6.1.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig SCOTCH-6.1.1-cpeGNU-21.08.eb, with module SCOTCH/6.1.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig SCOTCH-6.1.2-cpeAOCC-21.12.eb, with module SCOTCH/6.1.2-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig SCOTCH-6.1.2-cpeCray-21.12.eb, with module SCOTCH/6.1.2-cpeCray-21.12</p> </li> <li> <p>EasyConfig SCOTCH-6.1.2-cpeGNU-21.12.eb, with module SCOTCH/6.1.2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig SCOTCH-6.1.3-cpeAOCC-22.06.eb, with module SCOTCH/6.1.3-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig SCOTCH-6.1.3-cpeCray-22.06.eb, with module SCOTCH/6.1.3-cpeCray-22.06</p> </li> <li> <p>EasyConfig SCOTCH-6.1.3-cpeGNU-22.06.eb, with module SCOTCH/6.1.3-cpeGNU-22.06</p> </li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li>EasyConfig SCOTCH-7.0.3-cpeGNU-22.12-int64.eb, with module SCOTCH/7.0.3-cpeGNU-22.12-int64</li> </ul> </li> </ul>","boost":10},{"location":"s/SIRIUS/","title":"SIRIUS","text":"<p>[package list]</p>","boost":10},{"location":"s/SIRIUS/#sirius","title":"SIRIUS","text":"","boost":10},{"location":"s/SIRIUS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig SIRIUS-7.2.7-cpeGNU-21.08.eb, with module SIRIUS/7.2.7-cpeGNU-21.08</li> </ul> </li> </ul>","boost":10},{"location":"s/SPLA/","title":"SPLA","text":"<p>[package list]</p>","boost":10},{"location":"s/SPLA/#spla","title":"SPLA","text":"","boost":10},{"location":"s/SPLA/#license-information","title":"License information","text":"<p>SPLA is licensed under a  BSD 3-Clause License a copy of which can be found in the LICENSE file in the GitHub repository.</p>","boost":10},{"location":"s/SPLA/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider SPLA/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig SPLA-1.5.5-cpeGNU-23.09-rocm.eb, will build SPLA/1.5.5-cpeGNU-23.09-rocm</p> </li> <li> <p>EasyConfig SPLA-1.6.1-cpeGNU-23.12-rocm.eb, will build SPLA/1.6.1-cpeGNU-23.12-rocm</p> </li> <li> <p>EasyConfig SPLA-1.6.1-cpeGNU-24.03-rocm.eb, will build SPLA/1.6.1-cpeGNU-24.03-rocm</p> </li> </ul>","boost":10},{"location":"s/SPLA/#technical-documentation","title":"Technical documentation","text":"<ul> <li>SPLA repository</li> </ul>","boost":10},{"location":"s/SPLA/#general-information","title":"General information","text":"<p>SPLA provides specialized functions for linear algebra computations with a C++ and C interface, which are inspired by requirements in computational material science codes.</p> <p>SPLA provides functions for distributed matrix multiplications with specific  matrix distributions, which cannot be used directly with a ScaLAPACK interface.</p>","boost":10},{"location":"s/SPLA/#easybuild","title":"EasyBuild","text":"<ul> <li>SPLA in the CSCS repository</li> </ul>","boost":10},{"location":"s/SPLA/#version-151-for-cpe-2108","title":"Version 1.5.1 for CPE 21.08","text":"<ul> <li>The EasyConfig is derived from the CSCS one</li> </ul>","boost":10},{"location":"s/SPLA/#version-154-for-cpe-2208-with-gpu-support","title":"Version 1.5.4 for CPE 22.08 with GPU support","text":"<ul> <li>The EasyConfig is based on the 1.5.1 one but with extensions to be     able to support GPU also.</li> </ul>","boost":10},{"location":"s/SPLA/#version-155-for-cpe-2309-with-gpu-support","title":"Version 1.5.5 for CPE 23.09 with GPU support","text":"<ul> <li>The EasyConfig is a trivial port of the 1.5.4 one with GPU support.</li> </ul>","boost":10},{"location":"s/SPLA/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig SPLA-1.5.1-cpeGNU-21.08.eb, with module SPLA/1.5.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig SPLA-1.5.4-cpeGNU-22.08-GPU.eb, with module SPLA/1.5.4-cpeGNU-22.08-GPU</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/SQLite/","title":"SQLite","text":"<p>[package list]</p>","boost":10},{"location":"s/SQLite/#sqlite","title":"SQLite","text":"","boost":10},{"location":"s/SQLite/#license-information","title":"License information","text":"<p>SQLite license information can be found under the License tab on the SQLite web site.</p>","boost":10},{"location":"s/SQLite/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider SQLite/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>SQLite/3.38.3-cpeAMD-22.08 (EasyConfig: SQLite-3.38.3-cpeAMD-22.08.eb)</p> </li> <li> <p>SQLite/3.38.3-cpeAOCC-22.08 (EasyConfig: SQLite-3.38.3-cpeAOCC-22.08.eb)</p> </li> <li> <p>SQLite/3.38.3-cpeCray-22.08 (EasyConfig: SQLite-3.38.3-cpeCray-22.08.eb)</p> </li> <li> <p>SQLite/3.38.3-cpeGNU-22.08 (EasyConfig: SQLite-3.38.3-cpeGNU-22.08.eb)</p> </li> <li> <p>SQLite/3.39.4-cpeAMD-22.12 (EasyConfig: SQLite-3.39.4-cpeAMD-22.12.eb)</p> </li> <li> <p>SQLite/3.39.4-cpeAOCC-22.12 (EasyConfig: SQLite-3.39.4-cpeAOCC-22.12.eb)</p> </li> <li> <p>SQLite/3.39.4-cpeCray-22.12 (EasyConfig: SQLite-3.39.4-cpeCray-22.12.eb)</p> </li> <li> <p>SQLite/3.39.4-cpeCray-23.03 (EasyConfig: SQLite-3.39.4-cpeCray-23.03.eb)</p> </li> <li> <p>SQLite/3.39.4-cpeGNU-22.12 (EasyConfig: SQLite-3.39.4-cpeGNU-22.12.eb)</p> </li> <li> <p>SQLite/3.42.0-cpeAMD-23.09 (EasyConfig: SQLite-3.42.0-cpeAMD-23.09.eb)</p> </li> <li> <p>SQLite/3.42.0-cpeAMD-23.12 (EasyConfig: SQLite-3.42.0-cpeAMD-23.12.eb)</p> </li> <li> <p>SQLite/3.42.0-cpeAOCC-23.09 (EasyConfig: SQLite-3.42.0-cpeAOCC-23.09.eb)</p> </li> <li> <p>SQLite/3.42.0-cpeAOCC-23.12 (EasyConfig: SQLite-3.42.0-cpeAOCC-23.12.eb)</p> </li> <li> <p>SQLite/3.42.0-cpeCray-23.09 (EasyConfig: SQLite-3.42.0-cpeCray-23.09.eb)</p> </li> <li> <p>SQLite/3.42.0-cpeCray-23.12 (EasyConfig: SQLite-3.42.0-cpeCray-23.12.eb)</p> </li> <li> <p>SQLite/3.42.0-cpeGNU-23.09 (EasyConfig: SQLite-3.42.0-cpeGNU-23.09.eb)</p> </li> <li> <p>SQLite/3.42.0-cpeGNU-23.12 (EasyConfig: SQLite-3.42.0-cpeGNU-23.12.eb)</p> </li> <li> <p>SQLite/3.43.1-cpeAMD-24.03 (EasyConfig: SQLite-3.43.1-cpeAMD-24.03.eb)</p> </li> <li> <p>SQLite/3.43.1-cpeAOCC-24.03 (EasyConfig: SQLite-3.43.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>SQLite/3.43.1-cpeCray-24.03 (EasyConfig: SQLite-3.43.1-cpeCray-24.03.eb)</p> </li> <li> <p>SQLite/3.43.1-cpeGNU-24.03 (EasyConfig: SQLite-3.43.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"s/SQLite/#technical-documentation","title":"Technical documentation","text":"<ul> <li>SQLite web site</li> </ul>","boost":10},{"location":"s/SQLite/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>SQLite support in the EasyBuilders repository</p> </li> <li> <p>SQLite support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"s/SQLite/#version-3360-from-cpe-2108-on","title":"Version 3.36.0 from CPE 21.08 on","text":"<ul> <li> <p>The EasyConfig file is a mix of the EasyBuilders and CSCS ones,     with more input from the EasyBuilders one as that supports additional     options that may come in useful given the broad user base of LUMI.</p> </li> <li> <p>No cpeAMD version for 21.08 as the compilation of the Tcl dependency     fails with that compiler.</p> </li> </ul>","boost":10},{"location":"s/SQLite/#version-3383-from-cpe-2206-on","title":"Version 3.38.3 from CPE 22.06 on","text":"<ul> <li>Trivial port of the EasyConfig with some refinement to the download procedure.</li> </ul>","boost":10},{"location":"s/SQLite/#version-3394-from-cpe-2212-on","title":"Version 3.39.4 from CPE 22.12 on","text":"<ul> <li>Trivial port of the EasyConfig for 3.38.3.</li> </ul>","boost":10},{"location":"s/SQLite/#version-3420-from-cpe-2309-on","title":"Version 3.42.0 from CPE 23.09 on","text":"<ul> <li> <p>Trivial port of the EasyConfig fro 3.39.4.</p> </li> <li> <p>software_license_urls was added for LUMI/23.12, but the license information is not     included in the downloaded sources.</p> </li> </ul>","boost":10},{"location":"s/SQLite/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig SQLite-3.36.0-cpeAOCC-21.12.eb, with module SQLite/3.36.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig SQLite-3.36.0-cpeCray-21.08.eb, with module SQLite/3.36.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig SQLite-3.36.0-cpeCray-21.12.eb, with module SQLite/3.36.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig SQLite-3.36.0-cpeGNU-21.08.eb, with module SQLite/3.36.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig SQLite-3.36.0-cpeGNU-21.12.eb, with module SQLite/3.36.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig SQLite-3.38.3-cpeAOCC-22.06.eb, with module SQLite/3.38.3-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig SQLite-3.38.3-cpeCray-22.06.eb, with module SQLite/3.38.3-cpeCray-22.06</p> </li> <li> <p>EasyConfig SQLite-3.38.3-cpeGNU-22.06.eb, with module SQLite/3.38.3-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/STAR/","title":"STAR","text":"<p>[package list]</p>","boost":10},{"location":"s/STAR/#star","title":"STAR","text":"","boost":10},{"location":"s/STAR/#license-information","title":"License information","text":"<p>STAR is distributed under the MIT/Expat License, a copy of which can be found in the LICENSE file in the STAR GitHub repository.</p> <p>After installation of the package and loading of the module, the LICENSE file is also  available in <code>$EBROOTSAMTOOLS/share/licenses/STAR</code>.</p>","boost":10},{"location":"s/STAR/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider STAR/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig STAR-2.7.11b-cpeGNU-24.03.eb, will build STAR/2.7.11b-cpeGNU-24.03</li> </ul>","boost":10},{"location":"s/STAR/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>STAR on GitHub</p> <ul> <li>STAR GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"s/STAR/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>STAR support in the EasyBuilders repository</p> </li> <li> <p>There is no STAR support in the CSCS repository</p> </li> <li> <p>STAR support in Spack</p> </li> </ul>","boost":10},{"location":"s/STAR/#version-2711b-in-2403","title":"Version 2.7.11b in 24.03","text":"<ul> <li> <p>The EasyConfig is an adaptation of the EasyBuilders one, with some     reorganisation to align with what we usually do on LUMI.</p> </li> <li> <p>Played a bit with <code>toolchainopts</code> so that the options that are set      by EasyBuild correspond to those used in the Makefile already so to     not lower the optimisation level normally used by the authors.</p> </li> </ul>","boost":10},{"location":"s/STRUMPACK/","title":"STRUMPACK","text":"<p>[package list]</p>","boost":10},{"location":"s/STRUMPACK/#strumpack","title":"STRUMPACK","text":"","boost":10},{"location":"s/STRUMPACK/#license-information","title":"License information","text":"<p>STRUMPACK is distributed under a BSD-style license.  See the LICENSE file in the GitHub repository for precise information.</p>","boost":10},{"location":"s/STRUMPACK/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider STRUMPACK/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig STRUMPACK-7.0.1-cpeGNU-24.03-OpenMP.eb, will build STRUMPACK/7.0.1-cpeGNU-24.03-OpenMP</p> <p>Note that this is a CPU-only version of STRUMPACK. GPU computing is not enabled.</p> </li> </ul>","boost":10},{"location":"s/STRUMPACK/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>STRUMPACK web site (different from the EasyConfig)</p> </li> <li> <p>STRUMPACK on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"s/STRUMPACK/#easybuild","title":"EasyBuild","text":"<ul> <li>STRUMPACK support in the EasyBuilders repository</li> </ul>","boost":10},{"location":"s/STRUMPACK/#version-631-for-cpegnu-2208","title":"Version 6.3.1 for cpeGNU 22.08","text":"<ul> <li>The EasyConfig files are derived from those in the EasyBuilders repository, but     support for AMD GPUs has been added.</li> </ul>","boost":10},{"location":"s/STRUMPACK/#version-701-cpu-for-cpegnu-2403","title":"Version 7.0.1 CPU for cpeGNU 24.03","text":"<ul> <li> <p>Made the layout more readable.</p> </li> <li> <p>Corrected the homepage.</p> <p>Note that the main author, Pieter Ghysels, has left the national labs and is now working for AMD. It remains to be seen how this package will further evolve. </p> </li> </ul>","boost":10},{"location":"s/STRUMPACK/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig STRUMPACK-6.3.1-cpeGNU-22.08-CPU.eb, with module STRUMPACK/6.3.1-cpeGNU-22.08-CPU</p> </li> <li> <p>EasyConfig STRUMPACK-6.3.1-cpeGNU-22.08-GPU.eb, with module STRUMPACK/6.3.1-cpeGNU-22.08-GPU</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/SWIG/","title":"SWIG","text":"<p>[package list]</p>","boost":10},{"location":"s/SWIG/#swig","title":"SWIG","text":"","boost":10},{"location":"s/SWIG/#license-information","title":"License information","text":"<p>The SWIG license information can be found in the  \"Legal Talk\" page of the SWIG web site.</p>","boost":10},{"location":"s/SWIG/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider SWIG/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig SWIG-4.1.1-cpeGNU-24.03.eb, will build SWIG/4.1.1-cpeGNU-24.03</li> </ul>","boost":10},{"location":"s/SWIG/#technical-documentation","title":"Technical documentation","text":"<ul> <li>SWIG Website</li> </ul>","boost":10},{"location":"s/SWIG/#general-information","title":"General information","text":"<p>SWIG is an interface compiler that connects programs written in C and C++ with  scripting languages such as Perl, Python, Ruby, and Tcl. It works by taking the declarations found in C/C++ header files and using them to generate the wrapper code that scripting languages need to access the underlying C/C++ code.  In addition, SWIG provides a variety of customization features that let you  tailor the wrapping process to suit your application.</p>","boost":10},{"location":"s/SWIG/#easybuild","title":"EasyBuild","text":"<ul> <li>SWIG in the EasyBuilders repository</li> <li>SWIG in the CSCS repository</li> </ul>","boost":10},{"location":"s/SWIG/#version-402-for-cpe-gnu-2108-and-2112","title":"Version 4.0.2 for CPE GNU 21.08 and 21.12","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one</li> </ul>","boost":10},{"location":"s/SWIG/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig SWIG-4.0.2-cpeCray-21.08.eb, with module SWIG/4.0.2-cpeCray-21.08</p> </li> <li> <p>EasyConfig SWIG-4.0.2-cpeCray-21.12.eb, with module SWIG/4.0.2-cpeCray-21.12</p> </li> <li> <p>EasyConfig SWIG-4.0.2-cpeGNU-21.08.eb, with module SWIG/4.0.2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig SWIG-4.0.2-cpeGNU-21.12.eb, with module SWIG/4.0.2-cpeGNU-21.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/SZ/","title":"SZ","text":"<p>[package list]</p>","boost":10},{"location":"s/SZ/#sz","title":"SZ","text":"","boost":10},{"location":"s/SZ/#license-information","title":"License information","text":"<p>The SZ package is distributed under a BSD-style license that can be found in the <code>copyright-and-BSD-license.txt</code> file in the SZ GitHub.</p> <p>From LUMI/24.03 on, this file can also be found in <code>$EBROOTSZ/share/licenses/SZ</code> after installing and loading the module.</p>","boost":10},{"location":"s/SZ/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider SZ/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig SZ-2.1.12-cpeGNU-23.09.eb, will build SZ/2.1.12-cpeGNU-23.09</p> </li> <li> <p>EasyConfig SZ-2.1.12.5-cpeGNU-24.03-hdf5-parallel.eb, will build SZ/2.1.12.5-cpeGNU-24.03-hdf5-parallel</p> <p>This version uses the <code>cray-hdf5-parallel</code> and <code>cray-netcdf-hdf5parallel</code> modules.</p> </li> <li> <p>EasyConfig SZ-2.1.12.5-cpeGNU-24.03.eb, will build SZ/2.1.12.5-cpeGNU-24.03</p> <p>This version uses the <code>cray-hdf5</code> and <code>cray-netcdf</code> modules.</p> </li> </ul>","boost":10},{"location":"s/SZ/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>SZ web site</p> </li> <li> <p>SZ on Github</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"s/SZ/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>No SZ support in the EasyBuilders repository</p> </li> <li> <p>No SZ support in the CSCS repository</p> </li> <li> <p>SZ support in the JSC repository</p> </li> </ul>","boost":10},{"location":"s/SZ/#version-2112-for-cpe-2208-and-cpe-2212","title":"Version 2.1.12 for CPE 22.08 and CPE 22.12","text":"<ul> <li> <p>Based on the JSC easyconfig</p> </li> <li> <p>Unload the cray-libsci module to prevent linking to the threaded version of     libsci which is not needed. It avoid the double linking problem with      application that actually need libsci</p> </li> </ul>","boost":10},{"location":"s/SZ/#trying-21125-for-cpe-2309","title":"Trying 2.1.12.5 for CPE 23.09","text":"<ul> <li>Did not work: the bin/sz binary was not built, so reverted to plain 2.1.12.</li> </ul>","boost":10},{"location":"s/SZ/#21125-for-cpe-2403","title":"2.1.12.5 for CPE 24.03","text":"<ul> <li> <p>Still without <code>bin/sz</code>, but this executable does not exist anymore?</p> </li> <li> <p>Added license information in May 2025.</p> </li> <li> <p>May 2025: Version added with <code>cray-hdf5-parallel</code> which was somewhat nontrivial.</p> </li> </ul>","boost":10},{"location":"s/SZ/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig SZ-2.1.12-cpeGNU-22.08.eb, with module SZ/2.1.12-cpeGNU-22.08</p> </li> <li> <p>EasyConfig SZ-2.1.12-cpeGNU-22.12.eb, with module SZ/2.1.12-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/ScaLAPACK/","title":"ScaLAPACK","text":"<p>[package list]</p>","boost":10},{"location":"s/ScaLAPACK/#scalapack","title":"ScaLAPACK","text":"","boost":10},{"location":"s/ScaLAPACK/#license-information","title":"License information","text":"<p>ScaLAPACK is distriguted under a modified BSD license. See the \"Licensing\" section on the netlib.org ScaLPACK web site.</p> <p>From version 4.0 on, the license information can also be found in <code>$EBROOTSCALAPACK/share/licenses/ScaLAPACK</code> after installation and loading the ScaLAPACK module.</p>","boost":10},{"location":"s/ScaLAPACK/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ScaLAPACK/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig ScaLAPACK-4.2-cpeCray-23.12-amd.eb, will build ScaLAPACK/4.2-cpeCray-23.12-amd</p> </li> <li> <p>EasyConfig ScaLAPACK-4.2-cpeCray-24.03-amd.eb, will build ScaLAPACK/4.2-cpeCray-24.03-amd</p> </li> <li> <p>EasyConfig ScaLAPACK-4.2-cpeGNU-23.12-amd.eb, will build ScaLAPACK/4.2-cpeGNU-23.12-amd</p> </li> <li> <p>EasyConfig ScaLAPACK-4.2-cpeGNU-24.03-amd.eb, will build ScaLAPACK/4.2-cpeGNU-24.03-amd</p> </li> </ul>","boost":10},{"location":"s/ScaLAPACK/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>ScaLAPACK home page</p> </li> <li> <p>ScaLAPACK on GitHub</p> </li> <li> <p>AMD fork of ScaLAPACK in GitHub</p> </li> </ul>","boost":10},{"location":"s/ScaLAPACK/#notes","title":"Notes","text":"<ul> <li>AMD ScaLAPACK 4.0 seems to be based on version 2.1 which does not yet contain     support for 64-bit integers in the routine interfaces.</li> </ul>","boost":10},{"location":"s/ScaLAPACK/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"s/ScaLAPACK/#version-31-for-cpe-2108","title":"Version 3.1 for CPE 21.08","text":"<ul> <li>Own EasyConfig, only superficially based on the EasyBuilders one.</li> </ul>","boost":10},{"location":"s/ScaLAPACK/#version-32-for-cpe-2206-and-2208","title":"Version 3.2 for CPE 22.06 and 22.08","text":"<ul> <li> <p>Straightforward port of the 3.1 EasyConfig.</p> </li> <li> <p>Re-tried a Cray version also, but that still fails.</p> <ul> <li> <p>CMake adds the <code>-cpp</code> option to the Fortran compiler command line to force     preprocessing of <code>.f</code> files but that is not correct for the Cray compiler.     So one should edit <code>CMakeLists.txt</code> to replace <code>-cpp</code> with the roughly      equivalent Cray option <code>-eT</code>.</p> </li> <li> <p>But that is apparently not enough, compilation still breaks for the      <code>SRC/icopypv.f</code> file on line 89, with the message that a scalar integer expression     is needed as a subscript. It is unclear though why the expression in the code     is not considered a scalar integer expression by the compiler. The problem is that     the parameter <code>CTXT_</code>, though seemingly initialized with an integer, is considered     a floating point number by the compiler as any type declaration is missing.      The solution is to declare this parameter as an integer which is easily done      through a patch file.</p> </li> <li> <p>But then linking of the shared library still fails with undefined symbols for      the IDMIN and ISMIN functions,     and there are also a lot of warnings. Those IDMIN and ISMIN functions should be     in BLAS or an extension thereof so it is not clear why they are found in the     GNU version but not in the Cray version.</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/ScaLAPACK/#version-40-for-cpe-2212","title":"Version 4.0 for CPE 22.12","text":"<ul> <li> <p>Trivial port of the 3.2 EasyConfigs for cpeGNU and cpeAOCC.</p> </li> <li> <p>The Cray version is still broken.</p> </li> </ul>","boost":10},{"location":"s/ScaLAPACK/#version-42-for-cpe-2312-and-2403","title":"Version 4.2 for CPE 23.12 and 24.03","text":"<ul> <li> <p>Mostly a trivial port to 4.2.</p> </li> <li> <p>The problem with the Cray Fortran Compiler is now resolved. After      investigation, it turns out the Cray compiler optimize some part of the code     into a BLAS call, causing the undefined symbols error as cray-libsci was     unloaded. To work around this issue, we now use <code>-hnopattern</code> when compiling     with <code>cpeCray</code>.</p> </li> </ul>","boost":10},{"location":"s/ScaLAPACK/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig ScaLAPACK-3.1-cpeGNU-21.08-amd.eb, with module ScaLAPACK/3.1-cpeGNU-21.08-amd</p> </li> <li> <p>EasyConfig ScaLAPACK-3.2-cpeAOCC-22.08-amd.eb, with module ScaLAPACK/3.2-cpeAOCC-22.08-amd</p> </li> <li> <p>EasyConfig ScaLAPACK-3.2-cpeCray-22.06-amd.eb, with module ScaLAPACK/3.2-cpeCray-22.06-amd</p> </li> <li> <p>EasyConfig ScaLAPACK-3.2-cpeGNU-22.06-amd.eb, with module ScaLAPACK/3.2-cpeGNU-22.06-amd</p> </li> <li> <p>EasyConfig ScaLAPACK-3.2-cpeGNU-22.08-amd.eb, with module ScaLAPACK/3.2-cpeGNU-22.08-amd</p> </li> <li> <p>EasyConfig ScaLAPACK-4.0-cpeAOCC-22.12-amd.eb, with module ScaLAPACK/4.0-cpeAOCC-22.12-amd</p> </li> <li> <p>EasyConfig ScaLAPACK-4.0-cpeGNU-22.12-amd.eb, with module ScaLAPACK/4.0-cpeGNU-22.12-amd</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/Scalasca/","title":"Scalasca","text":"<p>[package list]</p>","boost":10},{"location":"s/Scalasca/#scalasca","title":"Scalasca","text":"","boost":10},{"location":"s/Scalasca/#license-information","title":"License information","text":"<p>The Scalasca version 2 licensing agreement can be found on the \"Scalasca v2 License Agreement\" page in the manuals.</p> <p>Since version 2.6.2, this information is also available in <code>$EBROOTSCALASCA/share/licenses/Scalasca</code> after installing and loading the module.</p>","boost":10},{"location":"s/Scalasca/#user-documentation","title":"User documentation","text":"<p>Scalasca is part of the Score-P ecosystem. See the Score-P user instructions for more information.</p>","boost":10},{"location":"s/Scalasca/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Scalasca/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Scalasca-2.6.1-cpeAMD-23.09.eb, will build Scalasca/2.6.1-cpeAMD-23.09</p> </li> <li> <p>EasyConfig Scalasca-2.6.1-cpeAMD-24.03.eb, will build Scalasca/2.6.1-cpeAMD-24.03</p> </li> <li> <p>EasyConfig Scalasca-2.6.1-cpeAOCC-23.09.eb, will build Scalasca/2.6.1-cpeAOCC-23.09</p> </li> <li> <p>EasyConfig Scalasca-2.6.1-cpeAOCC-24.03.eb, will build Scalasca/2.6.1-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig Scalasca-2.6.1-cpeCray-23.09.eb, will build Scalasca/2.6.1-cpeCray-23.09</p> </li> <li> <p>EasyConfig Scalasca-2.6.1-cpeCray-24.03.eb, will build Scalasca/2.6.1-cpeCray-24.03</p> </li> <li> <p>EasyConfig Scalasca-2.6.1-cpeGNU-23.09.eb, will build Scalasca/2.6.1-cpeGNU-23.09</p> </li> <li> <p>EasyConfig Scalasca-2.6.1-cpeGNU-24.03.eb, will build Scalasca/2.6.1-cpeGNU-24.03</p> </li> <li> <p>EasyConfig Scalasca-2.6.2-cpeAMD-24.03.eb, will build Scalasca/2.6.2-cpeAMD-24.03</p> </li> <li> <p>EasyConfig Scalasca-2.6.2-cpeAOCC-24.03.eb, will build Scalasca/2.6.2-cpeAOCC-24.03</p> </li> <li> <p>EasyConfig Scalasca-2.6.2-cpeCray-24.03.eb, will build Scalasca/2.6.2-cpeCray-24.03</p> </li> <li> <p>EasyConfig Scalasca-2.6.2-cpeGNU-24.03.eb, will build Scalasca/2.6.2-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"s/Scalasca/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Scalasca web site</li> </ul> <p>Scalasca is a software tool that supports the performance optimization of parallel programs</p>","boost":10},{"location":"s/Scalasca/#easybuild-support","title":"EasyBuild support","text":"<ul> <li> <p>Scalasca support in the EasyBuilders repository</p> </li> <li> <p>Scalasca support in the CSCS repository</p> </li> <li> <p>Scalasca support in the JSC repository</p> </li> </ul>","boost":10},{"location":"s/Scalasca/#version-261-for-cpe-2309","title":"Version 2.6.1 for CPE 23.09","text":"<ul> <li>The EasyConfig was contributed by Jan Andr\u00e9 Reuter of JSC and based on their     EasyConfigs.</li> </ul>","boost":10},{"location":"s/Scalasca/#version-261-for-cpe-2403","title":"Version 2.6.1 for CPE 24.03","text":"<ul> <li>Reuse of EasyConfig for CPE 23.09.</li> </ul>","boost":10},{"location":"s/Scalasca/#version-262-for-cpe-2403","title":"Version 2.6.2 for CPE 24.03","text":"<ul> <li> <p>Mostly a bugfix release. We omitted the message about Score-P for now.</p> </li> <li> <p>Needed to unload <code>craype-accel-amd-gfx90a</code> for the cpeCray build as otherwise compilation     failed. (This effectively turns off OpenMP offload when OpenMP is enabled.)</p> </li> </ul>","boost":10},{"location":"s/Scalasca/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Scalasca-2.6-cpeCray-21.08.eb, with module Scalasca/2.6-cpeCray-21.08</p> </li> <li> <p>EasyConfig Scalasca-2.6-cpeGNU-21.08.eb, with module Scalasca/2.6-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Scalasca-2.6-cpeGNU-21.12.eb, with module Scalasca/2.6-cpeGNU-21.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/Score-P/","title":"Score-P","text":"<p>[package list]</p>","boost":10},{"location":"s/Score-P/#score-p","title":"Score-P","text":"","boost":10},{"location":"s/Score-P/#license-information","title":"License information","text":"<p>Score-P is available under the  3-clause BSD Open Source license. For more information, check the COPYING file in the sources repository.</p> <p>From version 9.0 on, this information can also be found in <code>$EBROOTSCOREMINP/share/licenses/Score-P</code> after installing and loading the module.</p>","boost":10},{"location":"s/Score-P/#user-documentation","title":"User documentation","text":"<p>Score-P has moved to the contributed EasyConfigs as we cannot promise timely ports to new versions of the software stack and as we cannot guarantee that  it works in all cases on LUMI. Our main profiling and performance analysis tools are the tools from HPE Cray and AMD  (see our 4-day trainings), but these tools are offered \"as-is\" and may be supported by their developers and the EuroHPC pop Centre of Excellence who offer trainings based on these tools.</p> <p>A nice introductory talk on the Score-P ecosystem and how all its tools can be used, can be found on the  pop Center of Excellence web pages, on the \"HPC.NRW Tool Talk - Application Profiling with Score-P and Cube\" page (or directly on YouTube). Of particular interest is the section  \"The Score-P Ecosystem\", starting at 22:38,  which builds up a graphical overview highlighting the role of several packages.</p> <p>Note that there are a few things to note on LUMI:</p> <ul> <li> <p>cpeGNU does not offer support for our HIP adapter, as we require a Clang based compiler.      It is available for the others.</p> </li> <li> <p>cpeAOCC and cpeAMD offer support for the OpenMP Tools Interface and enable it by default.      This is an alternative to OPARI2 and provides support for a wider range of OpenMP.      GNU GCC lacks the interface, CCE 16 still has some issues,      where we decide to not enable the adapter.     Support for the OpenMP Tools Interface will also be available for cpeCray with CCE 19 or     newer.</p> </li> <li> <p>We cannot yet provide CubeGui due to the complexity of the installation, and the AppImage     provided by the developers also cannot be used on LUMI.</p> </li> <li> <p>Score-P v8.4: On the LUMI-G nodes, the use of Score-P is currently limited unless you are an      expert in figuring out compiler options and rewriting Makefiles. Not only is OpenMP     offload not supported with instrumentation, but enabling it by loading the GPU      target module (loaded by default by <code>cpeCray</code> and <code>cpeAMD</code>) and using <code>-fopenmp</code>     causes problems with OPARI2 shown as errors about some include files. This is because     the wrappers load paths to include files in an order that the OPARI2-instrumented code     does not like and steers it to the wrong include files. If your code does not use      OpenMP or you can compile without the GPU target module, or you use the OpenMP tools      interface with the ROCm compilers from <code>cpeAMD</code>/<code>PrgEnv-amd</code>, it might work.</p> </li> </ul>","boost":10},{"location":"s/Score-P/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Score-P/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Score-P-8.4-cpeAMD-23.09-rocm.eb, will build Score-P/8.4-cpeAMD-23.09-rocm</p> </li> <li> <p>EasyConfig Score-P-8.4-cpeAMD-24.03-rocm.eb, will build Score-P/8.4-cpeAMD-24.03-rocm</p> </li> <li> <p>EasyConfig Score-P-8.4-cpeAOCC-23.09.eb, will build Score-P/8.4-cpeAOCC-23.09</p> <p>Score-P without the HIP-adapter for the regular compute nodes. The build process takes a while (up to 1 hour) due to lengthy configure and postprocessing steps.</p> </li> <li> <p>EasyConfig Score-P-8.4-cpeAOCC-24.03.eb, will build Score-P/8.4-cpeAOCC-24.03</p> <p>Score-P without the HIP-adapter for the regular compute nodes. The build process takes a while (up to 1 hour) due to lengthy configure and postprocessing steps.</p> </li> <li> <p>EasyConfig Score-P-8.4-cpeCray-23.09-rocm.eb, will build Score-P/8.4-cpeCray-23.09-rocm</p> <p>This version has the HIP adapter and is the recommended cpeCray version for LUMI-G.</p> </li> <li> <p>EasyConfig Score-P-8.4-cpeCray-23.09.eb, will build Score-P/8.4-cpeCray-23.09</p> <p>Score-P without the HIP-adapter for the regular compute nodes. The build process takes a while (up to 1 hour) due to lengthy configure and postprocessing steps.</p> </li> <li> <p>EasyConfig Score-P-8.4-cpeCray-24.03-rocm.eb, will build Score-P/8.4-cpeCray-24.03-rocm</p> <p>This version has the HIP adapter and is the recommended cpeCray version for LUMI-G.</p> </li> <li> <p>EasyConfig Score-P-8.4-cpeCray-24.03.eb, will build Score-P/8.4-cpeCray-24.03</p> <p>Score-P without the HIP-adapter for the regular compute nodes. The build process takes a while (up to 1 hour) due to lengthy configure and postprocessing steps.</p> </li> <li> <p>EasyConfig Score-P-8.4-cpeGNU-23.09.eb, will build Score-P/8.4-cpeGNU-23.09</p> <p>Score-P without the HIP-adapter for the regular compute nodes. The build process takes a while (up to 1 hour) due to lengthy configure and postprocessing steps.</p> </li> <li> <p>EasyConfig Score-P-8.4-cpeGNU-24.03.eb, will build Score-P/8.4-cpeGNU-24.03</p> <p>Score-P without the HIP-adapter for the regular compute nodes. The build process takes a while (up to 1 hour) due to lengthy configure and postprocessing steps.</p> </li> <li> <p>EasyConfig Score-P-9.0-cpeAMD-24.03-rocm.eb, will build Score-P/9.0-cpeAMD-24.03-rocm</p> </li> <li> <p>EasyConfig Score-P-9.0-cpeAOCC-24.03.eb, will build Score-P/9.0-cpeAOCC-24.03</p> <p>Score-P without the HIP-adapter for the regular compute nodes. The build process takes a while (up to 1 hour) due to lengthy configure and postprocessing steps.</p> </li> <li> <p>EasyConfig Score-P-9.0-cpeCray-24.03-rocm.eb, will build Score-P/9.0-cpeCray-24.03-rocm</p> </li> <li> <p>EasyConfig Score-P-9.0-cpeCray-24.03.eb, will build Score-P/9.0-cpeCray-24.03</p> </li> <li> <p>EasyConfig Score-P-9.0-cpeGNU-24.03.eb, will build Score-P/9.0-cpeGNU-24.03</p> </li> <li> <p>EasyConfig Score-P-9.2-cpeAMD-24.03-rocm.eb, will build Score-P/9.2-cpeAMD-24.03-rocm</p> </li> <li> <p>EasyConfig Score-P-9.2-cpeAOCC-24.03.eb, will build Score-P/9.2-cpeAOCC-24.03</p> <p>Score-P without the HIP-adapter for the regular compute nodes. The build process takes a while (up to 1 hour) due to lengthy configure and postprocessing steps.</p> </li> <li> <p>EasyConfig Score-P-9.2-cpeCray-24.03-rocm.eb, will build Score-P/9.2-cpeCray-24.03-rocm</p> </li> <li> <p>EasyConfig Score-P-9.2-cpeCray-24.03.eb, will build Score-P/9.2-cpeCray-24.03</p> </li> <li> <p>EasyConfig Score-P-9.2-cpeGNU-24.03.eb, will build Score-P/9.2-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"s/Score-P/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Score-P web site</p> </li> <li> <p>Score-P read-only GitLab</p> </li> </ul> <p>The Score-P measurement infrastructure is a highly scalable and easy-to-use tool suite for profiling and event tracing of HPC applications.</p> <p>It has been created in the German BMBF project SILC and the US DOE project PRIMA and will be maintained and enhanced in a number of follow-up projects such as LMAC, Score-E, and HOPSA. Score-P is developed under a BSD 3-Clause License and governed by a meritocratic governance model.</p> <p>Score-P offers the user a maximum of convenience by supporting a number of analysis tools. Currently, it works with Scalasca, Vampir, and Tau and is open for other tools. Score-P comes together with the new Open Trace Format Version 2, the Cube4 profiling format and the OPARI2 instrumenter.</p>","boost":10},{"location":"s/Score-P/#easybuild-support","title":"EasyBuild support","text":"<ul> <li> <p>Score-P support in the EasyBuilders repository</p> </li> <li> <p>Score-P support in the CSCS repository</p> </li> <li> <p>Score-P support in the JSC repository</p> </li> </ul> <p>There was earlier work in the central software stack before we got EasyConfigs contributed by the Score-P authors.</p>","boost":10},{"location":"s/Score-P/#version-84-for-cpe-2309","title":"Version 8.4 for CPE 23.09","text":"<ul> <li> <p>The EasyConfig was contributed by Jan Andr\u00e9 Reuter from JSC as a direct      contribution of the developers.</p> </li> <li> <p>For now, the package is not fully functional on LUMI-G. Basically, OpenMP     instrumentation via OPARI2 does not work if OpenMP offload is also enabled,     which happens if the <code>craype-accel-amd-gfx90a</code> module is loaded and the compiler     wrappers are used. This is likely due to some bad ordering of the include files     in that case.</p> </li> <li> <p>For some reason, we still need to load the <code>rocm</code> module for the <code>cpeAMD</code> version     as otherwise <code>roctracer</code> is not correctly detected. The <code>rocm</code> module does a few     initialisations of environment variables that the <code>amd</code> module does not do.</p> </li> </ul>","boost":10},{"location":"s/Score-P/#version-84-for-cpe-2403","title":"Version 8.4 for CPE 24.03","text":"<ul> <li>Conversion of the easyconfigs for 23.09 with some build dependencies moved     to runtime dependencies as we don't want to rely on RPATH.</li> </ul>","boost":10},{"location":"s/Score-P/#version-90-for-cpe-2403","title":"Version 9.0 for CPE 24.03","text":"<ul> <li> <p>Some reworking needed, offered to us by JSC. Also required an update of the EasyBlock.</p> </li> <li> <p>Added license information to the installation.</p> </li> </ul>","boost":10},{"location":"s/Score-P/#version-92-for-cpe-2403","title":"Version 9.2 for CPE 24.03","text":"<ul> <li>Simple version bump, fixing several minor issues</li> </ul>","boost":10},{"location":"s/Score-P/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Score-P-7.1-cpeCray-21.08.eb, with module Score-P/7.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig Score-P-7.1-cpeCray-21.12.eb, with module Score-P/7.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig Score-P-7.1-cpeCray-22.06.eb, with module Score-P/7.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig Score-P-7.1-cpeCray-22.08.eb, with module Score-P/7.1-cpeCray-22.08</p> </li> <li> <p>EasyConfig Score-P-7.1-cpeGNU-21.08.eb, with module Score-P/7.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Score-P-7.1-cpeGNU-21.12.eb, with module Score-P/7.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Score-P-7.1-cpeGNU-22.06.eb, with module Score-P/7.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig Score-P-7.1-cpeGNU-22.08.eb, with module Score-P/7.1-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/Siesta/","title":"Siesta","text":"<p>[package list]</p>","boost":10},{"location":"s/Siesta/#siesta","title":"Siesta","text":"","boost":10},{"location":"s/Siesta/#license-information","title":"License information","text":"<p>Siesta is distributed under the GNU General Public License verison 3.0 a copy of which can also be found in the COPYING file in the Siesta GitLab repo.</p> <p>After installation and loading the module, the license information (and some other information) is also available in the directory <code>$EBROOTSIESTA/share/licenses/Siesta</code>.</p>","boost":10},{"location":"s/Siesta/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Siesta/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Siesta-4.1.5-cpeGNU-23.09-rocm.eb, will build Siesta/4.1.5-cpeGNU-23.09-rocm</p> </li> <li> <p>EasyConfig Siesta-4.1.5-cpeGNU-24.03-rocm.eb, will build Siesta/4.1.5-cpeGNU-24.03-rocm</p> </li> </ul>","boost":10},{"location":"s/Siesta/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>SIESTA home page</p> </li> <li> <p>SIESTA is also one of the flagship codes of the      EuroHPC CoE Max</p> </li> <li> <p>SIESTA development on GitLab</p> </li> <li> <p>SIESTA documentation site</p> </li> </ul>","boost":10},{"location":"s/Siesta/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository.</p> </li> <li> <p>Support in Spack</p> </li> </ul>","boost":10},{"location":"s/Siesta/#siesta-415-for-cpegnu-2212-cpu-version","title":"Siesta 4.1.5 for cpeGNU 22.12, CPU version","text":"<ul> <li>The EasyConfig is developed by LUST using <code>MakeCp</code> rather      then adapting the software-specific easyblock from EasyBuild.</li> </ul>","boost":10},{"location":"s/Siesta/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig Siesta-4.1.5-cpeGNU-22.12-CPU.eb, with module Siesta/4.1.5-cpeGNU-22.12-CPU</li> </ul> </li> </ul>","boost":10},{"location":"s/Silo/","title":"Silo","text":"<p>[package list]</p>","boost":10},{"location":"s/Silo/#silo","title":"Silo","text":"","boost":10},{"location":"s/Silo/#license-information","title":"License information","text":"<p>Silo is licensed under a 3-clause BSD Open Source license. See also the COPYRIGHT file in the Silo GitHub repository and further information in the BSD_LICENSE_README file in that repo.</p> <p>These files can also be found in <code>$EBROOTSILO/share/licenses/Silo</code> after installing and loading the module.</p>","boost":10},{"location":"s/Silo/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Silo/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig Silo-4.11.1-cpeGNU-24.03.eb, will build Silo/4.11.1-cpeGNU-24.03</li> </ul>","boost":10},{"location":"s/Silo/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Silo website</p> </li> <li> <p>Silo GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"s/Silo/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for Silo in the EasyBuilders repository.</p> </li> <li> <p>There is no support for Silo in the CSCS repository</p> </li> <li> <p>Silo in the JSC EasyConfigs repository</p> </li> <li> <p>The silo package in Spack</p> </li> </ul>","boost":10},{"location":"s/Silo/#version-4111-for-cpegnu2403","title":"Version 4.11.1 for cpeGNU/24.03","text":"<ul> <li>The EasyConfig is based on the JSC EasyConfigs for Silo.</li> </ul>","boost":10},{"location":"s/SpFFT/","title":"SpFFT","text":"<p>[package list]</p>","boost":10},{"location":"s/SpFFT/#spfft","title":"SpFFT","text":"","boost":10},{"location":"s/SpFFT/#license-information","title":"License information","text":"<p>The SpFFT library is licensed under a  BSC 3-Clause License, a copy of which can be found in the LICENSE file in the SpFFT GitHub.</p>","boost":10},{"location":"s/SpFFT/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider SpFFT/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig SpFFT-1.0.6-cpeGNU-23.09-rocm.eb, will build SpFFT/1.0.6-cpeGNU-23.09-rocm</p> </li> <li> <p>EasyConfig SpFFT-1.1.0-cpeGNU-23.12-rocm.eb, will build SpFFT/1.1.0-cpeGNU-23.12-rocm</p> </li> <li> <p>EasyConfig SpFFT-1.1.0-cpeGNU-24.03-rocm.eb, will build SpFFT/1.1.0-cpeGNU-24.03-rocm</p> </li> </ul>","boost":10},{"location":"s/SpFFT/#technical-documentation","title":"Technical documentation","text":"<ul> <li>SpFFT repository</li> </ul>","boost":10},{"location":"s/SpFFT/#general-information","title":"General information","text":"<p>SpFFT - A 3D FFT library for sparse frequency domain data written in C++ with  support for MPI, OpenMP, CUDA and ROCm. Inspired by the need of some  computational material science applications with spherical cutoff data in  frequency domain, SpFFT provides Fast Fourier Transformations of sparse  frequency domain data. For distributed computations with MPI, slab decomposition in space domain and pencil decomposition in frequency domain (sparse data within a pencil / column must be on one rank) is used.</p>","boost":10},{"location":"s/SpFFT/#easybuild","title":"EasyBuild","text":"<ul> <li>SpFFT in the CSCS repository</li> </ul>","boost":10},{"location":"s/SpFFT/#version-105-for-cpe-2108","title":"Version 1.0.5 for CPE 21.08","text":"<ul> <li>The EasyConfig is derived from the CSCS one</li> </ul>","boost":10},{"location":"s/SpFFT/#version-106-for-2208-and-2309-with-gpu-support","title":"Version 1.0.6 for 22.08 and 23.09 with GPU support","text":"<ul> <li>The EasyConfig is an adaptation of the 1.0.5 one but now with GPU support     enabled.</li> </ul>","boost":10},{"location":"s/SpFFT/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig SpFFT-1.0.5-cpeGNU-21.08.eb, with module SpFFT/1.0.5-cpeGNU-21.08</p> </li> <li> <p>EasyConfig SpFFT-1.0.6-cpeGNU-22.08-GPU.eb, with module SpFFT/1.0.6-cpeGNU-22.08-GPU</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/Subversion/","title":"Subversion","text":"<p>[package list]</p>","boost":10},{"location":"s/Subversion/#subversion","title":"Subversion","text":"","boost":10},{"location":"s/Subversion/#license-information","title":"License information","text":"<p>Subversion is maintained by the Apache Foundation hence licensed under the Apache License 2.0.</p>","boost":10},{"location":"s/Subversion/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Subversion/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Subversion/1.14.2 (EasyConfig: Subversion-1.14.2.eb)</p> </li> <li> <p>Subversion/1.14.3 (EasyConfig: Subversion-1.14.3.eb)</p> </li> </ul>","boost":10},{"location":"s/Subversion/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Subversion home page</p> <ul> <li>Source download for version check</li> </ul> </li> </ul>","boost":10},{"location":"s/Subversion/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Subversion support in the EasyBuilders repository</p> </li> <li> <p>Subversion support in the CSCS repository</p> </li> <li> <p>Subversion support in Spack</p> </li> </ul>","boost":10},{"location":"s/Subversion/#subversion-1141-for-system-in-lumi2108-and-lumi2112","title":"Subversion 1.14.1 for SYSTEM in LUMI/21.08 and LUMI/21.12.","text":"<ul> <li> <p>Development started from the CSCS setup.</p> </li> <li> <p>Getting the dependencies to compile and find each other was a bit of a pain,     follow in our background repository.     In particular the compilation of Serf turned out to be rather difficult as it failed     to find the expat libraries when not included in a bundle with APR and APR-util,     probably because they were included as build dependencies and EasyBuild didn't     set all variables, but this is not sure.</p> </li> </ul>","boost":10},{"location":"s/Subversion/#subversion-1142-for-system-in-lumi2206","title":"Subversion 1.14.2 for SYSTEM in LUMI/22.06","text":"<ul> <li> <p>Straightforward port from the 1.14.1 EasyConfig</p> </li> <li> <p>Added checksum to robustify the installation on LUMI.</p> </li> </ul>","boost":10},{"location":"s/Subversion/#subversion-1143-for-system-in-23122403","title":"Subversion 1.14.3 for SYSTEM in 23.12/24.03","text":"<ul> <li>Straightforward port from the 1.14.2 EasyConfig.</li> </ul>","boost":10},{"location":"s/Subversion/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software<ul> <li>EasyConfig Subversion-1.14.1.eb, with module Subversion/1.14.1</li> </ul> </li> </ul>","boost":10},{"location":"s/SuiteSparse/","title":"SuiteSparse","text":"<p>[package list]</p>","boost":10},{"location":"s/SuiteSparse/#suitesparse","title":"SuiteSparse","text":"","boost":10},{"location":"s/SuiteSparse/#license-information","title":"License information","text":"<p>Each package of SuiteSparse have their own license. For an overview of the  licenses, please see the LICENSE.txt in the GitHub repository GitHub repository.</p> <p>See also this section of the README for information on how to cite SuiteSparse meta-package and its component packages.</p>","boost":10},{"location":"s/SuiteSparse/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider SuiteSparse/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>SuiteSparse/5.13.0-cpeAMD-24.03-OpenMP (EasyConfig: SuiteSparse-5.13.0-cpeAMD-24.03-OpenMP.eb)</p> </li> <li> <p>SuiteSparse/5.13.0-cpeAOCC-24.03-OpenMP (EasyConfig: SuiteSparse-5.13.0-cpeAOCC-24.03-OpenMP.eb)</p> </li> <li> <p>SuiteSparse/5.13.0-cpeCray24.03-OpenMP (EasyConfig: SuiteSparse-5.13.0-cpeCray24.03-OpenMP.eb)</p> </li> <li> <p>SuiteSparse/5.13.0-cpeGNU-24.03-OpenMP (EasyConfig: SuiteSparse-5.13.0-cpeGNU-24.03-OpenMP.eb)</p> </li> </ul>","boost":10},{"location":"s/SuiteSparse/#technical-documentation","title":"Technical documentation","text":"<ul> <li>SuiteSparse on GitHub<ul> <li>Releases on GitHub</li> </ul> </li> </ul>","boost":10},{"location":"s/SuiteSparse/#easybuild","title":"EasyBuild","text":"<ul> <li>Support for SuiteSparse in the EasyBuilders repository</li> </ul>","boost":10},{"location":"s/SuiteSparse/#5130-from-lumi2403","title":"5.13.0 from LUMI/24.03","text":"<ul> <li> <p>The easyconfig is an adaptation of the EasyBuilders one which uses an     EasyBlock. Our easyconfig doesn't as the operations performed in the     EasyBlock are simple and can easily be performed with a ConfigureMake     EasyBlock.</p> </li> <li> <p>SuiteSparse is a dependency of hipSolver for ROCm 6.2. This is why a very     outdated version is provided (newest version at the time of writing is     7.8.2). The version matches the version available in the OpenSUSE 15.5     science repository.</p> </li> </ul>","boost":10},{"location":"s/SuperLU/","title":"SuperLU","text":"<p>[package list]</p>","boost":10},{"location":"s/SuperLU/#superlu","title":"SuperLU","text":"","boost":10},{"location":"s/SuperLU/#license-information","title":"License information","text":"<p>The SuperLU license can be found in the License.txt filel on the SuperLU web site of the License.txt file in the GitHub repository.</p>","boost":10},{"location":"s/SuperLU/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider SuperLU/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig SuperLU-6.0.0-cpeCray-23.09-OpenMP.eb, will build SuperLU/6.0.0-cpeCray-23.09-OpenMP</p> </li> <li> <p>EasyConfig SuperLU-6.0.0-cpeGNU-23.09-OpenMP.eb, will build SuperLU/6.0.0-cpeGNU-23.09-OpenMP</p> </li> <li> <p>EasyConfig SuperLU-6.0.1-cpeGNU-24.03-OpenMP.eb, will build SuperLU/6.0.1-cpeGNU-24.03-OpenMP</p> </li> </ul>","boost":10},{"location":"s/SuperLU/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>SuperLU home page</p> </li> <li> <p>SuperLU on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"s/SuperLU/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>SuperLU package in the EasyBuilders repository</p> </li> <li> <p>There is no support for SuperLU in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"s/SuperLU/#version-600-for-cpe-2309","title":"Version 6.0.0 for CPE 23.09","text":"<ul> <li>The EasyConfig is a LUST development.</li> </ul>","boost":10},{"location":"s/SuperLU/#version-600-for-cpegnu-2403","title":"Version 6.0.0 for cpeGNU 24.03","text":"<ul> <li>Update based on previous easyconfigs</li> </ul>","boost":10},{"location":"s/SuperLU/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig SuperLU-6.0.0-cpeGNU-22.12-OpenMP.eb, with module SuperLU/6.0.0-cpeGNU-22.12-OpenMP</li> </ul> </li> </ul>","boost":10},{"location":"s/SuperLU_DIST/","title":"SuperLU_DIST","text":"<p>[package list]</p>","boost":10},{"location":"s/SuperLU_DIST/#superlu_dist","title":"SuperLU_DIST","text":"","boost":10},{"location":"s/SuperLU_DIST/#license-information","title":"License information","text":"<p>The SuperLU license can be found in the License.txt filel on the SuperLU web site of the License.txt file in the GitHub repository.</p>","boost":10},{"location":"s/SuperLU_DIST/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider SuperLU_DIST/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig SuperLU_DIST-8.1.2-cpeCray-23.09-OpenMP.eb, will build SuperLU_DIST/8.1.2-cpeCray-23.09-OpenMP</p> </li> <li> <p>EasyConfig SuperLU_DIST-8.1.2-cpeGNU-23.09-OpenMP.eb, will build SuperLU_DIST/8.1.2-cpeGNU-23.09-OpenMP</p> </li> <li> <p>EasyConfig SuperLU_DIST-9.0.0-cpeGNU-24.03-OpenMP.eb, will build SuperLU_DIST/9.0.0-cpeGNU-24.03-OpenMP</p> </li> </ul>","boost":10},{"location":"s/SuperLU_DIST/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>SuperLU home page</p> </li> <li> <p>SuperLU_DIST on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"s/SuperLU_DIST/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>SuperLU_DIST package in the EasyBuilders repository</p> </li> <li> <p>There is no support for SuperLU in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"s/SuperLU_DIST/#version-720-for-cpegnu-2208","title":"Version 7.2.0 for cpeGNU 22.08","text":"<ul> <li>The EasyConfig is an extended version of the EasyBuilders one.</li> </ul>","boost":10},{"location":"s/SuperLU_DIST/#version-812","title":"Version 8.1.2","text":"<ul> <li> <p>The EasyConfig is adapted from the 7.2.0 one.</p> </li> <li> <p>But note that OpenMP is disabled in this version.</p> </li> </ul>","boost":10},{"location":"s/SuperLU_DIST/#version-900-for-cpegnu-2403","title":"Version 9.0.0 for cpeGNU 24.03","text":"<ul> <li>Update based on previous easyconfigs</li> </ul>","boost":10},{"location":"s/SuperLU_DIST/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig SuperLU_DIST-7.2.0-cpeGNU-22.08-CPU.eb, with module SuperLU_DIST/7.2.0-cpeGNU-22.08-CPU</p> </li> <li> <p>EasyConfig SuperLU_DIST-8.1.2-cpeGNU-22.08.eb, with module SuperLU_DIST/8.1.2-cpeGNU-22.08</p> </li> <li> <p>EasyConfig SuperLU_DIST-8.1.2-cpeGNU-22.12-OpenMP.eb, with module SuperLU_DIST/8.1.2-cpeGNU-22.12-OpenMP</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/Szip/","title":"Szip","text":"<p>[package list]</p>","boost":10},{"location":"s/Szip/#szip","title":"Szip","text":"","boost":10},{"location":"s/Szip/#license-information","title":"License information","text":"<p>From the Szip home page:</p> <p>The version of Szip distributed with HDF products is free for non-commercial use,  which may occur in two sets of circumstances:</p> <ul> <li> <p>Non-commercial users may use the Szip software integrated with HDF products to      both encode (compress) and decode (uncompress) data. This applies to educational      and research applications.</p> </li> <li> <p>Commercial users may use the software to decode any data. Further, they may use      the software in internal activities that do not involve or result in the development      of an Szip-based software product.</p> </li> </ul> <p>More information is also available in the  \"Szip Copyright and License Statement, as Distributed in the HDF Source Code\" page.</p> <p>From LUMI/23.12 on, this information can also be found in the COPYING file in the  directory <code>$EBROOTSZIP/share/licenses/Szip</code> after loading the module.</p>","boost":10},{"location":"s/Szip/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Szip/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Szip/2.1.1-cpeAMD-22.08 (EasyConfig: Szip-2.1.1-cpeAMD-22.08.eb)</p> </li> <li> <p>Szip/2.1.1-cpeAMD-22.12 (EasyConfig: Szip-2.1.1-cpeAMD-22.12.eb)</p> </li> <li> <p>Szip/2.1.1-cpeAMD-23.09 (EasyConfig: Szip-2.1.1-cpeAMD-23.09.eb)</p> </li> <li> <p>Szip/2.1.1-cpeAMD-23.12 (EasyConfig: Szip-2.1.1-cpeAMD-23.12.eb)</p> </li> <li> <p>Szip/2.1.1-cpeAMD-24.03 (EasyConfig: Szip-2.1.1-cpeAMD-24.03.eb)</p> </li> <li> <p>Szip/2.1.1-cpeAOCC-22.08 (EasyConfig: Szip-2.1.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>Szip/2.1.1-cpeAOCC-22.12 (EasyConfig: Szip-2.1.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>Szip/2.1.1-cpeAOCC-23.09 (EasyConfig: Szip-2.1.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>Szip/2.1.1-cpeAOCC-23.12 (EasyConfig: Szip-2.1.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>Szip/2.1.1-cpeAOCC-24.03 (EasyConfig: Szip-2.1.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>Szip/2.1.1-cpeCray-22.08 (EasyConfig: Szip-2.1.1-cpeCray-22.08.eb)</p> </li> <li> <p>Szip/2.1.1-cpeCray-22.12 (EasyConfig: Szip-2.1.1-cpeCray-22.12.eb)</p> </li> <li> <p>Szip/2.1.1-cpeCray-23.03 (EasyConfig: Szip-2.1.1-cpeCray-23.03.eb)</p> </li> <li> <p>Szip/2.1.1-cpeCray-23.09 (EasyConfig: Szip-2.1.1-cpeCray-23.09.eb)</p> </li> <li> <p>Szip/2.1.1-cpeCray-23.12 (EasyConfig: Szip-2.1.1-cpeCray-23.12.eb)</p> </li> <li> <p>Szip/2.1.1-cpeCray-24.03 (EasyConfig: Szip-2.1.1-cpeCray-24.03.eb)</p> </li> <li> <p>Szip/2.1.1-cpeGNU-22.08 (EasyConfig: Szip-2.1.1-cpeGNU-22.08.eb)</p> </li> <li> <p>Szip/2.1.1-cpeGNU-22.12 (EasyConfig: Szip-2.1.1-cpeGNU-22.12.eb)</p> </li> <li> <p>Szip/2.1.1-cpeGNU-23.09 (EasyConfig: Szip-2.1.1-cpeGNU-23.09.eb)</p> </li> <li> <p>Szip/2.1.1-cpeGNU-23.12 (EasyConfig: Szip-2.1.1-cpeGNU-23.12.eb)</p> </li> <li> <p>Szip/2.1.1-cpeGNU-24.03 (EasyConfig: Szip-2.1.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"s/Szip/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Szip home page</p> <ul> <li>Szip downloads</li> </ul> </li> </ul>","boost":10},{"location":"s/Szip/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Szip in the EasyBuilders repository</p> </li> <li> <p>Szip in the CSCS repository</p> </li> </ul>","boost":10},{"location":"s/Szip/#version-211-from-cpe-2106-on","title":"Version 2.1.1. from CPE 21.06 on","text":"<ul> <li> <p>Our EasyConfig is derived from the standard EasyBuilders files.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"s/Szip/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Szip-2.1.1-cpeAMD-21.06.eb, with module Szip/2.1.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeAOCC-21.12.eb, with module Szip/2.1.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeAOCC-22.06.eb, with module Szip/2.1.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeCray-21.06.eb, with module Szip/2.1.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeCray-21.08.eb, with module Szip/2.1.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeCray-21.12.eb, with module Szip/2.1.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeCray-22.06.eb, with module Szip/2.1.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeGNU-21.06.eb, with module Szip/2.1.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeGNU-21.08.eb, with module Szip/2.1.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeGNU-21.12.eb, with module Szip/2.1.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Szip-2.1.1-cpeGNU-22.06.eb, with module Szip/2.1.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/seacas-exodus/","title":"seacas-exodus","text":"<p>[package list]</p>","boost":10},{"location":"s/seacas-exodus/#seacas-exodus","title":"seacas-exodus","text":"","boost":10},{"location":"s/seacas-exodus/#license-information","title":"License information","text":"<p>The license information for SEACAS Exodus can be found in the  LICENSE file in the SEACAS GitHub.</p>","boost":10},{"location":"s/seacas-exodus/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider seacas-exodus/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig seacas-exodus-v2025-04-29-cpeGNU-24.03.eb, will build seacas-exodus/v2025-04-29-cpeGNU-24.03</li> </ul>","boost":10},{"location":"s/seacas-exodus/#technical-documentation","title":"Technical documentation","text":"<p>Exodus is part of SEACAS, The Sandia National Laboratory Engineering Analysis Code  Access System.</p> <p>The Exodus library is a model developed to store and retrieve data for finite element analyses.  It is used for preprocessing (problem definition), postprocessing (results visualization),  as well as code to code data transfer. An Exodus data file is a random access, machine independent,  binary file that is written and read via C, C++, or Fortran library routines which comprise the  Application Programming Interface. Exodus uses NetCDF Library as the on-disk storage format.</p> <ul> <li> <p>SEACAS/Exodus documentation</p> </li> <li> <p>SEACAS on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul> <p>Note that there is also an alternative, Python-only implementation known as ExodusII.</p>","boost":10},{"location":"s/seacas-exodus/#easybuild","title":"EasyBuild","text":"<ul> <li>There is currently no support in the EasyBuilders repository</li> </ul>","boost":10},{"location":"s/seacas-exodus/#v2025-04-29-for-cpegnu2403","title":"v2025-04-29 for cpeGNU/24.03","text":"<ul> <li>The EasyConfig is a LUST development.</li> </ul>","boost":10},{"location":"s/seff/","title":"seff","text":"<p>[package list]</p>","boost":10},{"location":"s/seff/#seff","title":"seff","text":"","boost":10},{"location":"s/seff/#license-information","title":"License information","text":"<p>seff/Slurm is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</p>","boost":10},{"location":"s/seff/#user-documentation","title":"User documentation","text":"<p>This is the <code>seff</code> command to try to extract efficiency data from Slurm.</p> <p>It is provided \"as is\". We know it is broken on LUMI and cannot deal properly with all hyperthreading scenarios so the numbers reported may actually be wrong by a factor of two. No need to send in tickets for that, and it is also the reason why it is not in the central software stack.</p> <p>Even when it works the results have to be taken with a grain of salt. E.g., 100% CPU use says nothing about true efficiency as some runtimes use busy waiting. Nor does it tell anything about, e.g., proper use of the caches. Only thorough profiling of your application can give you proper efficiency  information.</p>","boost":10},{"location":"s/seff/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider seff/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig seff-22.05.8.eb, will build seff/22.05.8</li> </ul>","boost":10},{"location":"s/seff/#technical-documentation","title":"Technical documentation","text":"<ul> <li>seff in the Slurm repository</li> </ul>","boost":10},{"location":"s/seff/#easybuild","title":"EasyBuild","text":"<ul> <li>There is no support in the Easybuilders or CSCS repository.</li> </ul>","boost":10},{"location":"s/seff/#version-22058","title":"Version 22.05.8","text":"<ul> <li>Custom easyconfig for LUMI</li> </ul>","boost":10},{"location":"s/singularity-AI-bindings/","title":"singularity-AI-bindings","text":"<p>[package list]</p>","boost":10},{"location":"s/singularity-AI-bindings/#singularity-ai-bindings","title":"singularity-AI-bindings","text":"","boost":10},{"location":"s/singularity-AI-bindings/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"s/singularity-AI-bindings/#what-is-the-module-for","title":"What is the module for?","text":"<p>LUMI offers a range of containers mostly for AI applications in /appl/local/containers:</p> <ul> <li> <p>Subdirectory <code>sif-images</code>: Link to the most recent version of a particular container.</p> </li> <li> <p>Subdirectory <code>tested-containers</code>: Latest container builds, the content changes      all the time.</p> </li> <li> <p>Subdirectory <code>easybuild-sif-images</code>: Copies of current and former containers from     <code>tested-containers</code> to keep a more stable repository which is needed for the      EasyBuild modules that install containers and offer some extras (see, e.g.,     the PyTorch container).</p> </li> </ul> <p>These containers use the CXI provider and MPI libraries from the system to guarantee good performance for network communications through RCCL and MPI (also used by  the Python package <code>mpi4py</code>). Furthermore, singularity on LUMI by default only gives you access to your home directory, but not to your data in <code>/project</code>, <code>/scratch</code> and  <code>/flash</code>. This module sets the environment variable <code>SINGULARITY_BIND</code> which instructs singularity which files and directories from the system should be made available where in the container and takes care binding the necessary files for CXI, MPI and full file system access. </p> <p>For most of these containers, there are also more complete modules available to ease  working with them that can be installed through EasyBuild, e.g., for most containers for PyTorch, TensorFlow, jax, AlphaFold, rocm and mpi4py. The modules installed for those containers following the instructions on those pages in the  LUMI Software Library already perform all necessary bindings. So when using these modules, one should not use <code>singularity-AI-bindings</code>. </p>","boost":10},{"location":"s/singularity-AI-bindings/#install","title":"Install","text":"<p>In short, the module can be installed once to be available in all versions of the <code>CrayEnv</code>  and <code>LUMI</code> stacks:</p> <pre><code>module load LUMI partition/container EasyBuild-user\neb singularity-AI-bindings-24.03.eb\n</code></pre> <p>The long: If you will install more user-installable software from the LUMI Software Library, please check our documentation on installing software with EasyBuild in the LUMI documentation.</p>","boost":10},{"location":"s/singularity-AI-bindings/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider singularity-AI-bindings/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig singularity-AI-bindings-24.03.eb, will build singularity-AI-bindings/24.03</li> </ul>","boost":10},{"location":"s/singularity-bindings/","title":"singularity-bindings","text":"<p>[package list]</p>","boost":10},{"location":"s/singularity-bindings/#singularity-bindings","title":"singularity-bindings","text":"","boost":10},{"location":"s/singularity-bindings/#license-information","title":"License information","text":"<p>The singularity-bindings module is a development of the LUMI User Support Team and entirely implemented as an EasyConfig file. Hence the licensing of the LUMI-EasyBuild-contrib GitHub repository applies (GNU Genmeral Public License v3.0).</p>","boost":10},{"location":"s/singularity-bindings/#user-documentation","title":"User documentation","text":"<p>The aim of the <code>singularity-bindings</code> module is to generate the necessary <code>SINGULARITYENV_LD_LIBRARY_PATH</code> and <code>SINGULARITY_BIND</code> environment variables to ensure that a container that has been built with an MPI compatible with  Cray MPICH, to use the Cray MPICH libraries from the container.</p> <p>Some of the files injected by the module may conflict with other versions of libraries already in the module. Therefore you may have to adapt the EasyBuild recipe to the particular container that you are using.</p> <p>This module should never be used together with containers for which we already provide a module through EasyBuild, and in fact, it is also not usable to bind Cray MPICH in the containers that we provide in <code>/appl/local/containers</code> as  many of the libraries that the module created by the <code>singularity-bindings</code> EasyConfigs are already included in the container to make life a bit easier.</p> <p>As this module needs access to the right version of the cray-mpich-abi module, which depends on the compiler, it is currently designed to work in a specific LUMI software stack (whose version can be derived from the name of the  EasyConfig). You can however do a user installation in <code>partition/common</code> so that afterwards the module will be automatically available on all node types (be available in <code>partition/L</code>, <code>partition/C</code> and <code>partition/G</code>).</p> <p>E.g., for the <code>cpeGNU-23.09</code> EasyConfig(s), you'dload:</p> <pre><code>module load LUMI/23.09 partition/common EasyBuild-user`\n</code></pre> <p>to install the module, and afterwards it would be available whenever <code>LUMI/23.09</code> is loaded (unless you explicitly load a \"special\" partition that is only meant to configure EasyBuild to install software in a  particular way).</p>","boost":10},{"location":"s/singularity-bindings/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider singularity-bindings/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig singularity-bindings-24.03.eb, will build singularity-bindings/24.03</p> </li> <li> <p>EasyConfig singularity-bindings-system-cpeGNU-23.09-noglibc.eb, will build singularity-bindings/system-cpeGNU-23.09-noglibc</p> <p>Bindings to be used while 23.09 is the default version of the programming environment.</p> </li> </ul>","boost":10},{"location":"s/singularity-bindings/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig singularity-bindings-system-cpeGNU-22.06.eb, with module singularity-bindings/system-cpeGNU-22.06</p> <p>Bindings to be used while 22.06 is the default version of the programming environment.</p> </li> <li> <p>EasyConfig singularity-bindings-system-cpeGNU-22.08-noglibc.eb, with module singularity-bindings/system-cpeGNU-22.08-noglibc</p> <p>Bindings to be used while 22.08 is the default version of the programming environment.</p> </li> <li> <p>EasyConfig singularity-bindings-system-cpeGNU-22.08.eb, with module singularity-bindings/system-cpeGNU-22.08</p> <p>Bindings to be used while 22.08 is the default version of the programming environment.</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/singularity-bindings-system/","title":"singularity-bindings-system","text":"<p>[package list]</p>","boost":10},{"location":"s/singularity-bindings-system/#singularity-bindings-system","title":"singularity-bindings-system","text":"","boost":10},{"location":"s/singularity-bindings-system/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig singularity-bindings-system-cpeGNU-21.08.eb, with module singularity-bindings-system/cpeGNU-21.08</p> </li> <li> <p>EasyConfig singularity-bindings-system-cpeGNU-21.12.eb, with module singularity-bindings-system/cpeGNU-21.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/snappy/","title":"snappy","text":"<p>[package list]</p>","boost":10},{"location":"s/snappy/#snappy","title":"snappy","text":"","boost":10},{"location":"s/snappy/#license-information","title":"License information","text":"<p>The snappy license can be found in the COPYING file in the GitHub repository.</p> <p>From LUMI/23.12 onwards, the <code>COPYING</code> file can also be found in the <code>$EBROOTSNAPPY/share/licenses/snappy</code> subdirectory after loading the module.</p>","boost":10},{"location":"s/snappy/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider snappy/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>snappy/1.1.10-cpeAMD-24.03 (EasyConfig: snappy-1.1.10-cpeAMD-24.03.eb)</p> </li> <li> <p>snappy/1.1.10-cpeAOCC-24.03 (EasyConfig: snappy-1.1.10-cpeAOCC-24.03.eb)</p> </li> <li> <p>snappy/1.1.10-cpeCray-24.03 (EasyConfig: snappy-1.1.10-cpeCray-24.03.eb)</p> </li> <li> <p>snappy/1.1.10-cpeGNU-24.03 (EasyConfig: snappy-1.1.10-cpeGNU-24.03.eb)</p> </li> <li> <p>snappy/1.1.9-cpeAMD-22.08 (EasyConfig: snappy-1.1.9-cpeAMD-22.08.eb)</p> </li> <li> <p>snappy/1.1.9-cpeAMD-22.12 (EasyConfig: snappy-1.1.9-cpeAMD-22.12.eb)</p> </li> <li> <p>snappy/1.1.9-cpeAMD-23.09 (EasyConfig: snappy-1.1.9-cpeAMD-23.09.eb)</p> </li> <li> <p>snappy/1.1.9-cpeAMD-23.12 (EasyConfig: snappy-1.1.9-cpeAMD-23.12.eb)</p> </li> <li> <p>snappy/1.1.9-cpeAOCC-22.08 (EasyConfig: snappy-1.1.9-cpeAOCC-22.08.eb)</p> </li> <li> <p>snappy/1.1.9-cpeAOCC-22.12 (EasyConfig: snappy-1.1.9-cpeAOCC-22.12.eb)</p> </li> <li> <p>snappy/1.1.9-cpeAOCC-23.09 (EasyConfig: snappy-1.1.9-cpeAOCC-23.09.eb)</p> </li> <li> <p>snappy/1.1.9-cpeAOCC-23.12 (EasyConfig: snappy-1.1.9-cpeAOCC-23.12.eb)</p> </li> <li> <p>snappy/1.1.9-cpeCray-22.08 (EasyConfig: snappy-1.1.9-cpeCray-22.08.eb)</p> </li> <li> <p>snappy/1.1.9-cpeCray-22.12 (EasyConfig: snappy-1.1.9-cpeCray-22.12.eb)</p> </li> <li> <p>snappy/1.1.9-cpeCray-23.03 (EasyConfig: snappy-1.1.9-cpeCray-23.03.eb)</p> </li> <li> <p>snappy/1.1.9-cpeCray-23.09 (EasyConfig: snappy-1.1.9-cpeCray-23.09.eb)</p> </li> <li> <p>snappy/1.1.9-cpeCray-23.12 (EasyConfig: snappy-1.1.9-cpeCray-23.12.eb)</p> </li> <li> <p>snappy/1.1.9-cpeGNU-22.08 (EasyConfig: snappy-1.1.9-cpeGNU-22.08.eb)</p> </li> <li> <p>snappy/1.1.9-cpeGNU-22.12 (EasyConfig: snappy-1.1.9-cpeGNU-22.12.eb)</p> </li> <li> <p>snappy/1.1.9-cpeGNU-23.09 (EasyConfig: snappy-1.1.9-cpeGNU-23.09.eb)</p> </li> <li> <p>snappy/1.1.9-cpeGNU-23.12 (EasyConfig: snappy-1.1.9-cpeGNU-23.12.eb)</p> </li> </ul>","boost":10},{"location":"s/snappy/#technical-documentation","title":"Technical documentation","text":"<ul> <li>snappy on GitHub<ul> <li>Releases on GitHub</li> </ul> </li> </ul>","boost":10},{"location":"s/snappy/#general-information","title":"General information","text":"<ul> <li>Snappy is build using CMake.</li> <li>Snappy can use zlib and lzo2.</li> <li>There are CMake flags to enforce AVX or AVX2 but it is not clear if these     are needed as I cannot find where they define symbols that would then be     used in the code. It does influence compiler options that are added though.</li> <li>Note that building snappy requires two iterations if we want both static     and shared libraries.</li> </ul>","boost":10},{"location":"s/snappy/#easybuild","title":"EasyBuild","text":"<p>This README was developed starting with snappy 1.1.8 in the CPE 21.06.</p> <ul> <li> <p>Support for snappy in the EasyBuilders repository     but the dependencies are incomplete.</p> </li> <li> <p>Support for snappy in the CSCS repository</p> </li> </ul>","boost":10},{"location":"s/snappy/#118-from-cpe-2106-on","title":"1.1.8 from CPE 21.06 on.","text":"<ul> <li> <p>We stuck to 1.1.8 even though 1.1.9 was out because in 1.1.9 the build process     has changed and seems to require various Google tools.</p> </li> <li> <p>This EasyConfig was made to prepare for inclusion in the baselibs Bundle.</p> </li> <li> <p>The dependencies on zlib and LZO (lzo2) were added to the dependencies list to ensure     a build with maximum potential.</p> </li> <li> <p>We also added an option to install in lib instead of lib64 as almost all of the other     packages also install in lib.</p> </li> </ul>","boost":10},{"location":"s/snappy/#119-from-cpe-2112-on","title":"1.1.9 from CPE 21.12 on","text":"<ul> <li> <p>Went to 1.1.9 but used the fix from the EasyBuilders EasyConfig to avoid the use     of the Google tools</p> </li> <li> <p>for cpeAMD from 23.09 on (likely due to a change in behaviour of cmake or compiler      wrappers) needed to turn off error messages about unused arguments as there were      some -L lines added that were not used.</p> </li> <li> <p>From LUMI/23.12 onwards, license information was added to the license.</p> </li> </ul>","boost":10},{"location":"s/snappy/#1110-for-lumi2403","title":"1.1.10 for LUMI/24.03","text":"<ul> <li> <p>Started from the EasyConfig for 1.1.9 for LUMI/23.12, but the patch was no longer needed.</p> </li> <li> <p>Needed to add a flag for the Cray and AOCC/AMD compilers as the code uses an unsafe comparision of      integers that caused an error on those compilers.</p> </li> </ul>","boost":10},{"location":"s/snappy/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig snappy-1.1.8-cpeAMD-21.06.eb, with module snappy/1.1.8-cpeAMD-21.06</p> </li> <li> <p>EasyConfig snappy-1.1.8-cpeCray-21.06.eb, with module snappy/1.1.8-cpeCray-21.06</p> </li> <li> <p>EasyConfig snappy-1.1.8-cpeCray-21.08.eb, with module snappy/1.1.8-cpeCray-21.08</p> </li> <li> <p>EasyConfig snappy-1.1.8-cpeGNU-21.06.eb, with module snappy/1.1.8-cpeGNU-21.06</p> </li> <li> <p>EasyConfig snappy-1.1.8-cpeGNU-21.08.eb, with module snappy/1.1.8-cpeGNU-21.08</p> </li> <li> <p>EasyConfig snappy-1.1.9-cpeAOCC-21.12.eb, with module snappy/1.1.9-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig snappy-1.1.9-cpeAOCC-22.06.eb, with module snappy/1.1.9-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig snappy-1.1.9-cpeCray-21.12.eb, with module snappy/1.1.9-cpeCray-21.12</p> </li> <li> <p>EasyConfig snappy-1.1.9-cpeCray-22.06.eb, with module snappy/1.1.9-cpeCray-22.06</p> </li> <li> <p>EasyConfig snappy-1.1.9-cpeGNU-21.12.eb, with module snappy/1.1.9-cpeGNU-21.12</p> </li> <li> <p>EasyConfig snappy-1.1.9-cpeGNU-22.06.eb, with module snappy/1.1.9-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/spglib/","title":"spglib","text":"<p>[package list]</p>","boost":10},{"location":"s/spglib/#spglib","title":"spglib","text":"","boost":10},{"location":"s/spglib/#license-information","title":"License information","text":"<p>Spglib is licensed under a BSD 3-Clause License a copy of which can be found in the COPYING file in the GitHub repository.</p>","boost":10},{"location":"s/spglib/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider spglib/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig spglib-1.16.3-cpeGNU-23.09.eb, will build spglib/1.16.3-cpeGNU-23.09</p> </li> <li> <p>EasyConfig spglib-2.3.1-cpeGNU-23.09.eb, will build spglib/2.3.1-cpeGNU-23.09</p> </li> <li> <p>EasyConfig spglib-2.5.0-cpeGNU-24.03.eb, will build spglib/2.5.0-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"s/spglib/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>spglib wesite</p> </li> <li> <p>spglib on GitHub</p> <ul> <li>Releases via tags</li> </ul> </li> </ul>","boost":10},{"location":"s/spglib/#general-information","title":"General information","text":"<p>Spglib is a library for finding and handling crystal symmetries written in C. There are the python, fortran, rust, and ruby interfaces.</p>","boost":10},{"location":"s/spglib/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Spglib in the EasyBuilders repository</p> </li> <li> <p>Spglib in the CSCS repository</p> </li> </ul>","boost":10},{"location":"s/spglib/#version-1160-for-cpe-2108","title":"Version 1.16.0 for CPE 21.08","text":"<ul> <li>The EasyConfig is derived from the CSCS one</li> </ul>","boost":10},{"location":"s/spglib/#version-1163-for-cpe-2208-and-2212","title":"Version 1.16.3 for CPE 22.08 and 22.12","text":"<ul> <li>Trivial port of a previous EasyConfig</li> </ul>","boost":10},{"location":"s/spglib/#version-231-for-2309","title":"Version 2.3.1 for 23.09","text":"<ul> <li>Trivial port of the EasyConfig for 1.16.3.</li> </ul>","boost":10},{"location":"s/spglib/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig spglib-1.16.0-cpeGNU-21.08.eb, with module spglib/1.16.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig spglib-1.16.3-cpeGNU-21.08.eb, with module spglib/1.16.3-cpeGNU-21.08</p> </li> <li> <p>EasyConfig spglib-1.16.3-cpeGNU-21.12.eb, with module spglib/1.16.3-cpeGNU-21.12</p> </li> <li> <p>EasyConfig spglib-1.16.3-cpeGNU-22.08.eb, with module spglib/1.16.3-cpeGNU-22.08</p> </li> <li> <p>EasyConfig spglib-1.16.3-cpeGNU-22.12.eb, with module spglib/1.16.3-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/syslibs/","title":"syslibs","text":"<p>[package list]</p>","boost":10},{"location":"s/syslibs/#syslibs","title":"syslibs","text":"","boost":10},{"location":"s/syslibs/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider syslibs/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>syslibs/22.08-static (EasyConfig: syslibs-22.08-static.eb)</p> </li> <li> <p>syslibs/22.12-static (EasyConfig: syslibs-22.12-static.eb)</p> </li> <li> <p>syslibs/23.03-static (EasyConfig: syslibs-23.03-static.eb)</p> </li> <li> <p>syslibs/23.09-static (EasyConfig: syslibs-23.09-static.eb)</p> </li> <li> <p>syslibs/23.12-static (EasyConfig: syslibs-23.12-static.eb)</p> </li> <li> <p>syslibs/24.03-static-ncurses-6.5 (EasyConfig: syslibs-24.03-static-ncurses-6.5.eb)</p> </li> <li> <p>syslibs/24.03-static (EasyConfig: syslibs-24.03-static.eb)</p> </li> </ul>","boost":10},{"location":"s/syslibs/#technical-documentation","title":"Technical documentation","text":"<p>This is a bundle of basic libraries all of which were also present on LUMI except one at the time of development, but without the development packages. They are all build as static libraries using the system GCC and are meant to be used as build dependencies for a number of tools that we want to be able to use without dependencies.</p> <p>Currently included are:</p> <ul> <li>ncurses version check</li> <li>libreadline version check</li> <li>bzip2 version check</li> <li>zlib version check</li> <li>lz4 version check</li> <li>expat version check</li> <li>APR and APR-util version check</li> <li>Serf version check</li> <li>file version check</li> <li>PCRE2 version check</li> <li>SQLite3 (limited configuration, but enough for, e.g., subversion) version check</li> <li>talloc version check (From a revision of 23.09 on.)</li> </ul> <p>For those libraries that are present on SUSE Linux, we tried to take the same versions as much as possible for optimal compatibility with other files that the libraries might use.</p>","boost":10},{"location":"s/syslibs/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"s/syslibs/#1510","title":"15.1.0","text":"<ul> <li>First version of this library. The 15.1 in the name comes from SLES15 update 1.</li> </ul>","boost":10},{"location":"s/syslibs/#1511-static","title":"15.1.1-static","text":"<ul> <li> <p>Added lz4, APR/APR-util. Serf and SQLite-3 so that the module can be used to build     Subversion.</p> </li> <li> <p>Added -static as a versionsuffix to stress that the package only provides static libraries     meant to be used as a build dependency and for consistency with other modules.</p> </li> <li> <p>We now had to include buildtools as a build dependency since Serf needs SCons which     is not available in the OS image.</p> </li> </ul>","boost":10},{"location":"s/syslibs/#2112","title":"21.12","text":"<ul> <li> <p>As we no longer try to mirror system libraries and instead use newer versions (they are     statically linked anyway) the version numbering has been switched to follow those of the     LUMI stack for which the file was updated.</p> </li> <li> <p>PCRE2: Switched to download from GitHub.</p> </li> <li> <p>Configure didn't work for ncurses 6.3 so we stuck to 6.2 rather than to start debugging.</p> </li> </ul>","boost":10},{"location":"s/syslibs/#2206","title":"22.06","text":"<ul> <li> <p>No new version of ncurses yet with working configure, so stick to 6.2 instead of 6.3.</p> </li> <li> <p>Several minor upgrades but no new packages.</p> </li> <li> <p>Added checksums to make the installation on LUMI more robust.</p> </li> </ul>","boost":10},{"location":"s/syslibs/#2208","title":"22.08","text":"<ul> <li> <p>Port of the 22.06 version with the addition of cURL.</p> <p>REVERSED AS IT SEEMS IMPOSSIBLE TO GET GIT TO LINK WITH THAT LIBRARY CORRECTLY  AND STATICALLY.</p> </li> </ul>","boost":10},{"location":"s/syslibs/#2212-and-2303","title":"22.12 and 23.03","text":"<ul> <li>Trivial port of the 22.08 version (the later one without cURL).</li> </ul>","boost":10},{"location":"s/syslibs/#2309","title":"23.09","text":"<ul> <li> <p>At the start a trivial port of the 23.09 version.</p> </li> <li> <p>Later talloc was added to the package to be able to add PRoot to systools.     We developed a build procedure for a static version based on     https://github.com/green-green-avk/build-proot-android/blob/master/make-talloc-static.sh.</p> <p>This is done specifically for use in proot which we want to be a fully static executable.</p> </li> </ul>","boost":10},{"location":"s/syslibs/#2312-and-2403","title":"23.12 and 24.03","text":"<ul> <li> <p>Trivial port of the new 23.09 one (with <code>talloc</code>) with updates of several packages.</p> </li> <li> <p>Stuck to ncurses 6.4 as 6.5 didn't generate the regular ncurses library anymore and     compiling readline 8.2 hence failed.</p> </li> </ul>","boost":10},{"location":"s/syslibs/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig syslibs-15.1.0.eb, with module syslibs/15.1.0</p> </li> <li> <p>EasyConfig syslibs-15.1.1-static.eb, with module syslibs/15.1.1-static</p> </li> <li> <p>EasyConfig syslibs-21.12-static.eb, with module syslibs/21.12-static</p> </li> <li> <p>EasyConfig syslibs-22.06-static.eb, with module syslibs/22.06-static</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/systools/","title":"systools","text":"<p>[package list]</p>","boost":10},{"location":"s/systools/#systools","title":"systools","text":"","boost":10},{"location":"s/systools/#license-information","title":"License information","text":"<p>The systools module provides multiple packages:</p> <ul> <li> <p>GPP is published under the      GNU Lesser General Public License.</p> </li> <li> <p><code>htop</code> is published under the     GNU Lesser General Public License version 2.0,     a copy of which can also be found in the     COPYING file in the source repository.</p> </li> <li> <p><code>pbzip2</code> is published under a BSD-style license. See the \"COPYING\" file included      in the software installation (see below).</p> </li> <li> <p><code>libtree</code> is published under the MIT License a copy of which can be found in the     LICENSE file in the GitHub repository.</p> </li> <li> <p><code>tree</code> is published under the     GNU General Public License version 2,     a copy of which can be found in the      LICENSE file in the GitLab repository.</p> </li> <li> <p>PRoot is published under the      GNU General Public License version 2,     a copy of which can be found in the      COPYING file in the source repository.</p> </li> </ul> <p>After loading the module, a copy of the license files for each package can also be  found in the <code>$EBROOTSYSTOOLS/share/licenses</code> directory.</p>","boost":10},{"location":"s/systools/#user-documentation","title":"User documentation","text":"<p>Available tools depend on the version of the module. This list is for the latest version of the module.</p>","boost":10},{"location":"s/systools/#the-gpp-command","title":"The <code>gpp</code> command","text":"<p>The <code>gpp</code> command  is a general-purpose preprocessor with customizable syntax, suitable for a wide range of preprocessing tasks. Its independence from any one programming language makes it much more versatile than the C preprocessor (cpp), while its syntax is lighter and more flexible than that of GNU m4. There are built-in macros for use with C/C++, LaTeX, HTML, XHTML, and Prolog files.</p>","boost":10},{"location":"s/systools/#the-htop-command","title":"The <code>htop</code> command","text":"<p>The <code>htop</code> command is an interactive process viewer for Unix/Linux.</p> <p>Note that by default, htop will not show the load of individual cores as you may be used from many other sites. However, given that there are 256 virtual cores on most nodes, this produces visual overload for may. It is still possible to change the settings in htop by going into the settings screen using \"SHFIT-S\" and then changing the meters, e.g., adding \"CPUS (1-4/8): first half in 4 shorter columns\" to the first half and \"CPUS (5-8/8): second half in 4 shorter columns\" to the second.</p> <p>This configuration will be stored in ~/.config/htop/htoprc, so you can also copy settings from another user by exchanging that file.</p>","boost":10},{"location":"s/systools/#the-pbzip2-command","title":"The <code>pbzip2</code> command","text":"<p>The <code>pbzip2</code> command  is a multithreaded version of the <code>bzip2</code> command. Check the manual page though as it has additional options to determine the amount of parallelism. The code was patched by LUST so that by default it will detect the correct number of hyperthreads available in a Slurm job and limit the number of threads to 16 on the login nodes to not overwhelm them (and as you are limited to the CPU capacity equivalent with 16  cores anyway).</p> <p>This code has been unmaintained since 2015, so there is no guarantee that we can continue to provide it. Issues with it will not get fixed.</p> <p>The code was never truly adapted the the 64-bit world. Memory management is  still 32-bit code, limiting the amount of memory one can request via the  <code>-m</code> parameter to 2000 blocks.</p> <p>It is also an alternative to <code>lbzip2</code> which is also unmaintained and has become almost impossible to compile on modern machines.</p>","boost":10},{"location":"s/systools/#the-tree-command","title":"The <code>tree</code> command","text":"<p>The <code>tree</code> command  is a recursive directory listing command that produces a depth indented listing of files, which is colorized ala dircolors if the LS_COLORS environment variable is set and output is to tty.</p>","boost":10},{"location":"s/systools/#the-proot-command","title":"The <code>proot</code> command","text":"<p>The <code>proot</code> command is a user-space implementation of  chroot, mount --bind, and  binfmt_misc. This means that users don't need any privileges or setup to do  things like using an arbitrary directory as the new root filesystem, making  files accessible somewhere else in the filesystem hierarchy, or executing  programs built for another CPU architecture transparently through QEMU  user-mode.</p> <p>It is provided in this module mainly for use with singularity.</p> <p>Note that there is now also a separate <code>PRoot</code> module as that turned out to be needed to work easily with EasyBuild to enhance  containers. The command is kept here so that older documentation that tells  to load <code>systools</code> remains valid.</p>","boost":10},{"location":"s/systools/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider systools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>systools/22.08 (EasyConfig: systools-22.08.eb)</p> </li> <li> <p>systools/22.12 (EasyConfig: systools-22.12.eb)</p> </li> <li> <p>systools/23.03 (EasyConfig: systools-23.03.eb)</p> </li> <li> <p>systools/23.09 (EasyConfig: systools-23.09.eb)</p> </li> <li> <p>systools/23.12 (EasyConfig: systools-23.12.eb)</p> </li> <li> <p>systools/24.03-2 (EasyConfig: systools-24.03-2.eb)</p> </li> <li> <p>systools/24.03 (EasyConfig: systools-24.03.eb)</p> </li> </ul>","boost":10},{"location":"s/systools/#technical-documentation","title":"Technical documentation","text":"<p>Systools is just a bundle of various small Linux tools that are very useful on the system.</p> <p>The current content is</p> <ul> <li> <p>GPP: A General-Purpose Preprocessor (or sometimes called Generic PrePRocessor)</p> <ul> <li> <p>GPP web site</p> </li> <li> <p>GPP on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li> <p>htop</p> <ul> <li> <p>htop web site</p> </li> <li> <p>htop on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li> <p>pbzip2</p> <ul> <li>pbzip2 home page</li> </ul> <p>The code has not been unmaintained since 2015.</p> </li> <li> <p>libtree</p> <ul> <li> <p>libtree on GitHub</p> <ul> <li>libtree releases</li> </ul> </li> </ul> </li> <li> <p>tree</p> <ul> <li> <p>New tree repository</p> <ul> <li>tags for download</li> </ul> </li> <li> <p>Old tree web page</p> </li> </ul> </li> <li> <p>PRoot</p> <ul> <li> <p>PRoot home page</p> </li> <li> <p>PRoot on GitHub</p> <ul> <li>PRoot GitHub releases</li> </ul> </li> </ul> </li> </ul>","boost":10},{"location":"s/systools/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>pbzip2</p> <ul> <li>PBZIP2 in the EasyBuilders repository</li> </ul> </li> <li> <p>libtree:</p> <ul> <li> <p>Support for libtree in the EasyBuilders repository</p> </li> <li> <p>Support for libtree in the CSCS repository</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/systools/#bundle-version-1510-for-suse-linux-15sp1","title":"Bundle version 15.1.0 for SUSE Linux 15SP1","text":"<ul> <li>When compiling htop with unicode enable it causes a segmentation violation     (but not with -h or --version so it is not detected in the EasyBuild sanity     check). The likely cause is a problem with out ncursesw library that is part     of syslibs and fully static.</li> </ul>","boost":10},{"location":"s/systools/#2112","title":"21.12","text":"","boost":10},{"location":"s/systools/#2206-and-2208","title":"22.06 and 22.08","text":"<ul> <li> <p>Update of htop and some improvements to the EasyConfig.</p> </li> <li> <p>Robustified the installation on LUMI with checksums.</p> </li> </ul>","boost":10},{"location":"s/systools/#2212-and-2303","title":"22.12 and 23.03","text":"<ul> <li> <p>Version bumps for GPP/htop/tree.</p> </li> <li> <p>Adding libtree</p> </li> <li> <p>Changing the layout of the EasyConfig a bit, also adding license information.</p> </li> </ul>","boost":10},{"location":"s/systools/#2303","title":"23.03","text":"<ul> <li>Version bumps for GPP/htop/tree.</li> </ul>","boost":10},{"location":"s/systools/#2309","title":"23.09","text":"<ul> <li> <p>Version bumps for GPP/htop/tree.</p> </li> <li> <p>In a revised edition we also provided the proot command for use with singularity.</p> <ul> <li> <p>We went for build that is fully static except for libc taken from the system to     be as independent from anything else as possible. The procedure in the EasyConfig     is a LUST development.</p> </li> <li> <p>Needed to fix the Makefile as the warnings about it not being a git repository     caused EasyBuild to stop the build.</p> </li> </ul> </li> </ul>","boost":10},{"location":"s/systools/#2312-and-2403","title":"23.12 and 24.03","text":"<ul> <li> <p>Version bump of <code>htop</code>, but otherwise similar as the 23.09 one with the <code>proot</code>      command.</p> </li> <li> <p>Did have to change the download location for the <code>tree</code> command though which also      led to a slightly different build process.</p> </li> </ul>","boost":10},{"location":"s/systools/#2403-1-2-and-2411","title":"24.03-1/-2 and 24.11","text":"<ul> <li> <p>Added <code>pbzip2</code> to the bundle:</p> <ul> <li> <p>The only dependency is libbz2, and we use a static version of it from the systools module.</p> </li> <li> <p>This part of the EasyConfig is heavily inspired on the EasyBuilders one for      PBZIP2.</p> </li> <li> <p>We developed a small patch to detect the number of cores available via the <code>sched_getaffinity</code>      function so that it works as expected in a Slurm job, and also limit the default number of      threads to 16 on the login nodes.</p> </li> </ul> </li> <li> <p>Tried htop 3.4.1 in 24.03-1 but had to switch back to 3.3.0. 3.4.1 still segfaults,      but it did not show in the ccpe container for some unknown reason.</p> </li> </ul>","boost":10},{"location":"s/systools/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig systools-15.1.0.eb, with module systools/15.1.0</p> </li> <li> <p>EasyConfig systools-21.12.eb, with module systools/21.12</p> </li> <li> <p>EasyConfig systools-22.06.eb, with module systools/22.06</p> </li> <li> <p>EasyConfig systools-24.03-1.eb, with module systools/24.03-1</p> </li> </ul> </li> </ul>","boost":10},{"location":"t/Tcl/","title":"Tcl","text":"<p>[package list]</p>","boost":10},{"location":"t/Tcl/#tcl","title":"Tcl","text":"","boost":10},{"location":"t/Tcl/#license-information","title":"License information","text":"<p>Tcl and Tk are distributed under a BSD-derived license that can be read on the \"Tcl/Tk License Terms\" page on the Tcl/Tk web site.</p> <p>From LUMI/23.12 onwards, this information is also available as the <code>license.terms</code>  file in the <code>$EBROOTTCL/share/licenses/Tcl</code> subdirectory after loading the module.</p>","boost":10},{"location":"t/Tcl/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Tcl/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Tcl/8.6.12-cpeAMD-22.08 (EasyConfig: Tcl-8.6.12-cpeAMD-22.08.eb)</p> </li> <li> <p>Tcl/8.6.12-cpeAMD-22.12 (EasyConfig: Tcl-8.6.12-cpeAMD-22.12.eb)</p> </li> <li> <p>Tcl/8.6.12-cpeAOCC-22.08 (EasyConfig: Tcl-8.6.12-cpeAOCC-22.08.eb)</p> </li> <li> <p>Tcl/8.6.12-cpeAOCC-22.12 (EasyConfig: Tcl-8.6.12-cpeAOCC-22.12.eb)</p> </li> <li> <p>Tcl/8.6.12-cpeCray-22.08 (EasyConfig: Tcl-8.6.12-cpeCray-22.08.eb)</p> </li> <li> <p>Tcl/8.6.12-cpeCray-22.12 (EasyConfig: Tcl-8.6.12-cpeCray-22.12.eb)</p> </li> <li> <p>Tcl/8.6.12-cpeCray-23.03 (EasyConfig: Tcl-8.6.12-cpeCray-23.03.eb)</p> </li> <li> <p>Tcl/8.6.12-cpeGNU-22.08 (EasyConfig: Tcl-8.6.12-cpeGNU-22.08.eb)</p> </li> <li> <p>Tcl/8.6.12-cpeGNU-22.12 (EasyConfig: Tcl-8.6.12-cpeGNU-22.12.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeAMD-23.09 (EasyConfig: Tcl-8.6.13-cpeAMD-23.09.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeAMD-23.12 (EasyConfig: Tcl-8.6.13-cpeAMD-23.12.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeAMD-24.03 (EasyConfig: Tcl-8.6.13-cpeAMD-24.03.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeAOCC-23.09 (EasyConfig: Tcl-8.6.13-cpeAOCC-23.09.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeAOCC-23.12 (EasyConfig: Tcl-8.6.13-cpeAOCC-23.12.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeAOCC-24.03 (EasyConfig: Tcl-8.6.13-cpeAOCC-24.03.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeCray-23.09 (EasyConfig: Tcl-8.6.13-cpeCray-23.09.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeCray-23.12 (EasyConfig: Tcl-8.6.13-cpeCray-23.12.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeCray-24.03 (EasyConfig: Tcl-8.6.13-cpeCray-24.03.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeGNU-23.09 (EasyConfig: Tcl-8.6.13-cpeGNU-23.09.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeGNU-23.12 (EasyConfig: Tcl-8.6.13-cpeGNU-23.12.eb)</p> </li> <li> <p>Tcl/8.6.13-cpeGNU-24.03 (EasyConfig: Tcl-8.6.13-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"t/Tcl/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Tcl web page</li> </ul>","boost":10},{"location":"t/Tcl/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Tcl support in the EasyBuilders repository</p> </li> <li> <p>Tcl support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"t/Tcl/#version-8611-from-cpe-2108-onwards","title":"Version 8.6.11 from CPE 21.08 onwards","text":"<ul> <li>The EasyConfig file is a mix of the CSCS and EasyBuilder ones</li> </ul>","boost":10},{"location":"t/Tcl/#version-8612-from-cpe-2206-on","title":"Version 8.6.12 from CPE 22.06 on","text":"<ul> <li>Trivial version bump of the 8.6.11 EasyConfig</li> </ul>","boost":10},{"location":"t/Tcl/#version-8613-from-cpe-2309-on","title":"Version 8.6.13 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 8.6.12 EasyConfig</p> </li> <li> <p>From LUMI/23.12 onwards, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"t/Tcl/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Tcl-8.6.11-cpeAOCC-21.12.eb, with module Tcl/8.6.11-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig Tcl-8.6.11-cpeCray-21.08.eb, with module Tcl/8.6.11-cpeCray-21.08</p> </li> <li> <p>EasyConfig Tcl-8.6.11-cpeCray-21.12.eb, with module Tcl/8.6.11-cpeCray-21.12</p> </li> <li> <p>EasyConfig Tcl-8.6.11-cpeGNU-21.08.eb, with module Tcl/8.6.11-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Tcl-8.6.11-cpeGNU-21.12.eb, with module Tcl/8.6.11-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Tcl-8.6.12-cpeAOCC-22.06.eb, with module Tcl/8.6.12-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig Tcl-8.6.12-cpeCray-22.06.eb, with module Tcl/8.6.12-cpeCray-22.06</p> </li> <li> <p>EasyConfig Tcl-8.6.12-cpeGNU-22.06.eb, with module Tcl/8.6.12-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"t/TensorFlow/","title":"TensorFlow","text":"<p>[package list]</p>","boost":10},{"location":"t/TensorFlow/#tensorflow","title":"TensorFlow","text":"","boost":10},{"location":"t/TensorFlow/#user-documentation","title":"User documentation","text":"<p>BETA VERSION, problems may occur and may not be solved quickly,  and the documentation needs further development.</p> <p>The TensorFlow container is developed by AMD specifically for LUMI and contains the necessary parts to run TensorFlow on LUMI, including the plugin needed for RCCL when doing distributed AI, and a suitable version of ROCm for the version of TensorFlow. Horovod is also provided, with support for Cray MPI.</p>","boost":10},{"location":"t/TensorFlow/#use-via-easybuild-generated-modules","title":"Use via EasyBuild-generated modules","text":"<p>The EasyBuild installation with the EasyConfigs mentioned below will do three things:</p> <ol> <li> <p>It will copy the container to your own file space. We realise containers can be     big, but it ensures that you have complete control over when a container is     removed again.</p> <p>We will remove a container from the system when it is not sufficiently functional anymore, but the container may still work for you. E.g., after an upgrade of the  network drivers on LUMI, the RCCL plugin for the LUMI Slingshot interconnect may be broken, but if you run on only one node TensorFlow may still work for you.</p> <p>If you prefer to use the centrally provided container, you can remove your copy  after loading of the module with <code>rm $SIF</code> followed by reloading the module. This is however at your own risk. </p> </li> <li> <p>It will create a module file.      When loading the module, a number of environment variables will     be set to help you use the module and to make it easy to swap the module with a     different version in your job scripts.</p> <ul> <li> <p><code>SIF</code> and <code>SIFTENSORFLOW</code> both contain the name and full path of the singularity     container file.</p> </li> <li> <p><code>SINGULARITY_BIND</code> will mount all necessary directories from the system,     including everything that is needed to access the project, scratch and flash     file systems.</p> </li> <li> <p><code>RUNSCRIPTS</code> and <code>RUNSCRIPTSTENSORFLOW</code> contain the full path of the directory     containing some sample run script(s) that can be used to run software in the      container, or as inspiration for your own variants.</p> </li> </ul> </li> <li> <p>It creates currently 1 script in the $RUNSCRIPTS directory:</p> <ul> <li><code>conda-python-simple</code>: This initialises Python in the container and then calls Python     with the arguments of <code>conda-python-simple</code>. It can be used, e.g., to run commands     through Python that utilise a single task but all GPUs.</li> </ul> </li> <li> <p>It creates a <code>bin</code> directory with scripts to be run outside of the container:</p> <ul> <li> <p><code>start-shell</code>: Serves a double purpose:</p> <ul> <li> <p>Without further arguments, it will start a shell in the container with      the Conda environment used to build the container activated.</p> </li> <li> <p>With arguments it simply runs a shell in the container, but the Conda      environment will not be activated.</p> </li> </ul> </li> </ul> <p>The <code>bin</code> directory is not mounted in the container, but if you would, the  scripts would recognise this and work or print a message that they cannot  be used in that environment.</p> </li> </ol> <p>The container uses a miniconda environment in which Python and its packages are installed. That environment needs to be activated in the container when running, which can be done with the command that is available in the container as the environment variable <code>WITH_CONDA</code> (which for this container is <code>source /opt/miniconda3/bin/activate tensorflow</code>).</p> <p>The container (when used with <code>SINGULARITY_BIND</code> of the module) also provides the wrapper script <code>/runscripts/conda-python-simple</code> to start the Python command from the conda environment in the container. That script is also available outside the  container for inspection after loading the module as <code>$RUNSCRIPTS/conda-python-simple</code> and you can use that script as a source of inspiration to develop a script that more directly executes your commands or does additional initialisations.</p> <p>Example (in an interactive session):</p> <p><pre><code>salloc -N1 -pstandard-g -t 10:00\nmodule load LUMI TensorFlow/2.16.1-rocm-6.2.0-python-3.10-horovod-0.28.1-singularity-20241007\nsrun -N1 -n1 --gpus 8 singularity exec $SIF /runscripts/conda-python-simple \\\n    -c 'import tensorflow'\n</code></pre> (and the warning shown about being built with the oneAPI Deep Neural Network Library is just a warning, as AVX2 and FMA are indeed the instructions that should be used  on the LUMI CPUs).</p> <p>After loading the module, the docker definition file used when building the container is available in the <code>$EBROOTTENSORFLOW/share/docker-defs</code> subdirectory. As it requires some licensed components from LUMI and some other files that are not included, it currently cannot be used to reconstruct the container and extend its definition.</p> <p>Checking the packages in the container</p> <p>After installing and loading the module, run <pre><code>start-shell /runscripts/conda-python-simple -m pip list\n</code></pre></p>","boost":10},{"location":"t/TensorFlow/#installation","title":"Installation","text":"<p>To install the container with EasyBuild, follow the instructions in the EasyBuild section of the LUMI documentation, section \"Software\", and use the dummy partition <code>container</code>, e.g.:</p> <pre><code>module load LUMI partition/container EasyBuild-user\neb TensorFlow-2.16.1-rocm-6.2.0-python-3.10-horovod-0.28.1-singularity-20241007.eb\n</code></pre> <p>To use the container after installation, the <code>EasyBuild-user</code> module is not needed nor is the <code>container</code> partition. The module will be available in all versions of the LUMI stack and in the <code>CrayEnv</code> stack (provided the environment variable <code>EBU_USER_PREFIX</code> points to the right location).</p>","boost":10},{"location":"t/TensorFlow/#direct-access-use-without-the-container-module","title":"Direct access (use without the container module)","text":"<p>The Tensorflow containers are available in the following subdirectories of <code>/appl/local/containers</code>:</p> <ul> <li> <p><code>/appl/local/containers/sif-images</code>: Symbolic link to the latest version of the container     for each ROCm version provided. Those links can change without notice!</p> </li> <li> <p><code>/appl/local/containers/tested-containers</code>: Tested containers provided as a Singulartiy <code>.sif</code> file     and a docker-generated tarball. Containers in this directory are removed quickly when a new version     becomes available.</p> </li> <li> <p><code>/appl/local/containers/easybuild-sif-images</code>: Singularity <code>.sif</code> images used with the EasyConfigs     that we provide. They tend to be available for a longer time than in the other two subdirectories.</p> </li> </ul> <p>If you depend on a particular version of a container, we recommend that you copy the container to your own file space (e.g., in <code>/project</code>) as there is no guarantee the specific version will remain available centrally on the system for as long as you want.</p> <p>When using the containers without the modules, you will have to take care of the bindings as some system files are needed for, e.g., MPI. The recommended minimal bindings are:</p> <pre><code>-B /var/spool/slurmd,/opt/cray/,/usr/lib64/libcxi.so.1\n</code></pre> <p>and the bindings you need to access the files you want to use from <code>/scratch</code>, <code>/flash</code> and/or <code>/project</code>. You can get access to your files on LUMI in the regular location by also using the bindings</p> <pre><code>-B /pfs,/scratch,/projappl,/project,/flash,/appl\n</code></pre> <p>Note that the list recommended bindings may change after a system update or between  different containers. We do try to keep the EasyBuild recipes for the modules  up-to-date though to reflect those changes.</p>","boost":10},{"location":"t/TensorFlow/#singularity-containers-with-modules-for-binding-and-extras","title":"Singularity containers with modules for binding and extras","text":"<p>Install with the EasyBuild-user module in <code>partition/container</code>: <pre><code>module load LUMI partition/container EasyBuild-user\neb &lt;easyconfig&gt;\n</code></pre> The module will be available in all versions of the LUMI stack and in the CrayEnv stack.</p> <p>To access module help after installation use <code>module spider TensorFlow/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig TensorFlow-2.16.1-rocm-6.2.0-python-3.10-horovod-0.28.1-singularity-20241007.eb, will provide TensorFlow/2.16.1-rocm-6.2.0-python-3.10-horovod-0.28.1-singularity-20241007</li> </ul>","boost":10},{"location":"t/TensorFlow/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-containers - previously available singularity containerised software</p> <ul> <li> <p>EasyConfig TensorFlow-2.11.1-rocm-5.5.1-python-3.10-horovod-0.28.1-singularity-20231110.eb, with module TensorFlow/2.11.1-rocm-5.5.1-python-3.10-horovod-0.28.1-singularity-20231110  (with docker definition)</p> </li> <li> <p>EasyConfig TensorFlow-2.11.1-rocm-5.5.1-python-3.10-horovod-0.28.1-singularity-20240207.eb, with module TensorFlow/2.11.1-rocm-5.5.1-python-3.10-horovod-0.28.1-singularity-20240207</p> </li> <li> <p>EasyConfig TensorFlow-2.11.1-rocm-5.5.1-python-3.10-horovod-0.28.1-singularity-20240617.eb, with module TensorFlow/2.11.1-rocm-5.5.1-python-3.10-horovod-0.28.1-singularity-20240617</p> </li> </ul> </li> </ul>","boost":10},{"location":"t/Tk/","title":"Tk","text":"<p>[package list]</p>","boost":10},{"location":"t/Tk/#tk","title":"Tk","text":"","boost":10},{"location":"t/Tk/#license-information","title":"License information","text":"<p>Tcl and Tk are distributed under a BSD-derived license that can be read on the \"Tcl/Tk License Terms\" page on the Tcl/Tk web site.</p> <p>From LUMI/23.12 on, the license information can also be found in the <code>$EBROOTTK/share/licenses/Tk</code> directory after loading the module.</p>","boost":10},{"location":"t/Tk/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Tk/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Tk/8.6.12-cpeAMD-22.08 (EasyConfig: Tk-8.6.12-cpeAMD-22.08.eb)</p> </li> <li> <p>Tk/8.6.12-cpeAMD-22.12 (EasyConfig: Tk-8.6.12-cpeAMD-22.12.eb)</p> </li> <li> <p>Tk/8.6.12-cpeAOCC-22.08 (EasyConfig: Tk-8.6.12-cpeAOCC-22.08.eb)</p> </li> <li> <p>Tk/8.6.12-cpeAOCC-22.12 (EasyConfig: Tk-8.6.12-cpeAOCC-22.12.eb)</p> </li> <li> <p>Tk/8.6.12-cpeCray-22.08 (EasyConfig: Tk-8.6.12-cpeCray-22.08.eb)</p> </li> <li> <p>Tk/8.6.12-cpeCray-22.12 (EasyConfig: Tk-8.6.12-cpeCray-22.12.eb)</p> </li> <li> <p>Tk/8.6.12-cpeCray-23.03 (EasyConfig: Tk-8.6.12-cpeCray-23.03.eb)</p> </li> <li> <p>Tk/8.6.12-cpeGNU-22.08 (EasyConfig: Tk-8.6.12-cpeGNU-22.08.eb)</p> </li> <li> <p>Tk/8.6.12-cpeGNU-22.12 (EasyConfig: Tk-8.6.12-cpeGNU-22.12.eb)</p> </li> <li> <p>Tk/8.6.13-cpeAMD-23.09 (EasyConfig: Tk-8.6.13-cpeAMD-23.09.eb)</p> </li> <li> <p>Tk/8.6.13-cpeAMD-23.12 (EasyConfig: Tk-8.6.13-cpeAMD-23.12.eb)</p> </li> <li> <p>Tk/8.6.13-cpeAMD-24.03 (EasyConfig: Tk-8.6.13-cpeAMD-24.03.eb)</p> </li> <li> <p>Tk/8.6.13-cpeAOCC-23.09 (EasyConfig: Tk-8.6.13-cpeAOCC-23.09.eb)</p> </li> <li> <p>Tk/8.6.13-cpeAOCC-23.12 (EasyConfig: Tk-8.6.13-cpeAOCC-23.12.eb)</p> </li> <li> <p>Tk/8.6.13-cpeAOCC-24.03 (EasyConfig: Tk-8.6.13-cpeAOCC-24.03.eb)</p> </li> <li> <p>Tk/8.6.13-cpeCray-23.09 (EasyConfig: Tk-8.6.13-cpeCray-23.09.eb)</p> </li> <li> <p>Tk/8.6.13-cpeCray-23.12 (EasyConfig: Tk-8.6.13-cpeCray-23.12.eb)</p> </li> <li> <p>Tk/8.6.13-cpeCray-24.03 (EasyConfig: Tk-8.6.13-cpeCray-24.03.eb)</p> </li> <li> <p>Tk/8.6.13-cpeGNU-23.09 (EasyConfig: Tk-8.6.13-cpeGNU-23.09.eb)</p> </li> <li> <p>Tk/8.6.13-cpeGNU-23.12 (EasyConfig: Tk-8.6.13-cpeGNU-23.12.eb)</p> </li> <li> <p>Tk/8.6.13-cpeGNU-24.03 (EasyConfig: Tk-8.6.13-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"t/Tk/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Tk web page</li> </ul>","boost":10},{"location":"t/Tk/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Tk support in the EasyBuilders repository</p> </li> <li> <p>Tk support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"t/Tk/#version-8611-from-cpe-2108-onwards","title":"Version 8.6.11 from CPE 21.08 onwards","text":"<ul> <li> <p>The EasyConfig file is a mix of the CSCS and EasyBuilder ones, but closer     to the EasyBuilders one.</p> </li> <li> <p>The patch has to do with a bug when compiling the Python package Tkinter     and is discusssed in easybuild-easyblock issue 728.</p> </li> </ul>","boost":10},{"location":"t/Tk/#version-8612-from-cpe-2206-onwards","title":"Version 8.6.12 from CPE 22.06 onwards.","text":"<ul> <li>Trivial version bump of the 8.6.11 EasyConfig</li> </ul>","boost":10},{"location":"t/Tk/#version-8613-from-cpe-2309-on","title":"Version 8.6.13 from CPE 23.09 on","text":"<ul> <li> <p>Trivial version bump of the 8.6.12 EasyConfig</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"t/Tk/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Tk-8.6.11-cpeAOCC-21.12.eb, with module Tk/8.6.11-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig Tk-8.6.11-cpeCray-21.08.eb, with module Tk/8.6.11-cpeCray-21.08</p> </li> <li> <p>EasyConfig Tk-8.6.11-cpeCray-21.12.eb, with module Tk/8.6.11-cpeCray-21.12</p> </li> <li> <p>EasyConfig Tk-8.6.11-cpeGNU-21.08.eb, with module Tk/8.6.11-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Tk-8.6.11-cpeGNU-21.12.eb, with module Tk/8.6.11-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Tk-8.6.12-cpeAOCC-22.06.eb, with module Tk/8.6.12-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig Tk-8.6.12-cpeCray-22.06.eb, with module Tk/8.6.12-cpeCray-22.06</p> </li> <li> <p>EasyConfig Tk-8.6.12-cpeGNU-22.06.eb, with module Tk/8.6.12-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"t/Trilinos/","title":"Trilinos","text":"<p>[package list]</p>","boost":10},{"location":"t/Trilinos/#trilinos","title":"Trilinos","text":"","boost":10},{"location":"t/Trilinos/#license-information","title":"License information","text":"<p>The Trilinos project is a collection of open-source packages licensed individually under multiple open-source licenses. Licensing terms are available at  the \"License\" page at the Trilinos website.</p> <p>For information about the software license for a particular package, see package-specific documentation.</p>","boost":10},{"location":"t/Trilinos/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Trilinos/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Trilinos-15.1.1-cpeGNU-24.03-OpenMP.eb, will build Trilinos/15.1.1-cpeGNU-24.03-OpenMP</p> <p>Trilinos, compiled with the multi-threaded LibSci libraries.</p> </li> </ul>","boost":10},{"location":"t/Trilinos/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Home page</p> </li> <li> <p>Trilinos main GitHub repository</p> <ul> <li>GitHub releases</li> </ul> </li> <li> <p>Legacy recipes for building libraries with Cray's PE pe-scripts</p> </li> </ul>","boost":10},{"location":"t/Trilinos/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Trilinos support in the EasyBuilders repository</p> </li> <li> <p>There is no support for Trilinos in the CSCS repository</p> </li> <li> <p>Trilinos in Spack</p> </li> </ul>","boost":10},{"location":"t/Trilinos/#version-12181-for-cpegnu-archived","title":"Version 12.18.1 for cpeGNU (archived)","text":"<ul> <li>This easyconfig is based on old Cray's recipes with custom patches. The library version is last commit for v12 branch 55a7599</li> </ul>","boost":10},{"location":"t/Trilinos/#known-issues","title":"Known issues","text":"<ul> <li>Fails to build with recent versions of make and CMake, avoid using <code>buildtools</code> module, works with system's <code>make/4.2.1</code> and <code>cmake/3.20.4</code>; see this issue.</li> <li>Fails to build with recent versions of Boost (which requires C++14) overwriting compile options for C++11, works with <code>Boost/1.72.0</code>.</li> <li>Includes Kokkos but no GPU support enabled in this version, target is LUMI-C.</li> </ul>","boost":10},{"location":"t/Trilinos/#dependencies","title":"Dependencies","text":"<ul> <li>Boost, SuperLU, SuperLU_DIST, ParMETIS, SCOTCH, MUMPS, MATIO.  </li> <li>Python3, HDF5 (parallel), NetCDF (parallel) from the Cray PE.</li> </ul>","boost":10},{"location":"t/Trilinos/#version-1341-for-cpegnu-archived","title":"Version 13.4.1 for cpeGNU (archived)","text":"<ul> <li>The EasyConfig file is developed in LUST, with currently some fewer options as the     one in the EasyBuilders repository, and without GPU support.</li> </ul>","boost":10},{"location":"t/Trilinos/#version-12181-for-cpegnu-2212-archived","title":"Version 12.18.1 for cpeGNU 22.12 (archived)","text":"<ul> <li> <p>A downgrade as a user required the version 12 API.</p> </li> <li> <p>Based more on the Cray scripts for installing the former TPSL and some other libraries.</p> </li> </ul>","boost":10},{"location":"t/Trilinos/#version-1341-for-cpegnu-2304","title":"Version 13.4.1 for cpeGNU 23.04","text":"<ul> <li>Update based on the easyconfig from version 13.4.1 </li> </ul>","boost":10},{"location":"t/Trilinos/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Trilinos-12.18.1-cpeGNU-22.12.eb, with module Trilinos/12.18.1-cpeGNU-22.12</p> </li> <li> <p>EasyConfig Trilinos-13.4.1-cpeGNU-22.08.eb, with module Trilinos/13.4.1-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"t/termcap/","title":"termcap","text":"<p>[package list]</p>","boost":10},{"location":"t/termcap/#termcap","title":"termcap","text":"","boost":10},{"location":"t/termcap/#license-information","title":"License information","text":"<p>GNU termcap is licensed under the GNU General Public License version 2.0.</p> <p>From LUMI/23.12 on, the license information is also available in the COPYING file in  the directory <code>$EBROOTTERMCAP/share/licenses/termcap</code> after loading the module.</p>","boost":10},{"location":"t/termcap/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider termcap/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>termcap/1.3.1-cpeAMD-22.08 (EasyConfig: termcap-1.3.1-cpeAMD-22.08.eb)</p> </li> <li> <p>termcap/1.3.1-cpeAMD-22.12 (EasyConfig: termcap-1.3.1-cpeAMD-22.12.eb)</p> </li> <li> <p>termcap/1.3.1-cpeAMD-23.09 (EasyConfig: termcap-1.3.1-cpeAMD-23.09.eb)</p> </li> <li> <p>termcap/1.3.1-cpeAMD-23.12 (EasyConfig: termcap-1.3.1-cpeAMD-23.12.eb)</p> </li> <li> <p>termcap/1.3.1-cpeAMD-24.03 (EasyConfig: termcap-1.3.1-cpeAMD-24.03.eb)</p> </li> <li> <p>termcap/1.3.1-cpeAOCC-22.08 (EasyConfig: termcap-1.3.1-cpeAOCC-22.08.eb)</p> </li> <li> <p>termcap/1.3.1-cpeAOCC-22.12 (EasyConfig: termcap-1.3.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>termcap/1.3.1-cpeAOCC-23.09 (EasyConfig: termcap-1.3.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>termcap/1.3.1-cpeAOCC-23.12 (EasyConfig: termcap-1.3.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>termcap/1.3.1-cpeAOCC-24.03 (EasyConfig: termcap-1.3.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>termcap/1.3.1-cpeCray-22.08 (EasyConfig: termcap-1.3.1-cpeCray-22.08.eb)</p> </li> <li> <p>termcap/1.3.1-cpeCray-22.12 (EasyConfig: termcap-1.3.1-cpeCray-22.12.eb)</p> </li> <li> <p>termcap/1.3.1-cpeCray-23.03 (EasyConfig: termcap-1.3.1-cpeCray-23.03.eb)</p> </li> <li> <p>termcap/1.3.1-cpeCray-23.09 (EasyConfig: termcap-1.3.1-cpeCray-23.09.eb)</p> </li> <li> <p>termcap/1.3.1-cpeCray-23.12 (EasyConfig: termcap-1.3.1-cpeCray-23.12.eb)</p> </li> <li> <p>termcap/1.3.1-cpeCray-24.03 (EasyConfig: termcap-1.3.1-cpeCray-24.03.eb)</p> </li> <li> <p>termcap/1.3.1-cpeGNU-22.08 (EasyConfig: termcap-1.3.1-cpeGNU-22.08.eb)</p> </li> <li> <p>termcap/1.3.1-cpeGNU-22.12 (EasyConfig: termcap-1.3.1-cpeGNU-22.12.eb)</p> </li> <li> <p>termcap/1.3.1-cpeGNU-23.09 (EasyConfig: termcap-1.3.1-cpeGNU-23.09.eb)</p> </li> <li> <p>termcap/1.3.1-cpeGNU-23.12 (EasyConfig: termcap-1.3.1-cpeGNU-23.12.eb)</p> </li> <li> <p>termcap/1.3.1-cpeGNU-24.03 (EasyConfig: termcap-1.3.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"t/termcap/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>termcap home page</p> <ul> <li>termcap downloads</li> </ul> </li> </ul>","boost":10},{"location":"t/termcap/#easybuild","title":"EasyBuild","text":"<p>This is a library that would normally be taken from the OS. However, on some or all Cray systems it seems to be missing in the default setup so this is a workaround for those packages that require libtermcap. Also, in most cases packages should be able to find the required functionality in ncurses.</p> <ul> <li> <p>There is no support in the EasyBuilders repository</p> </li> <li> <p>There is no support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"t/termcap/#version-131-from-cpe-2106-on","title":"Version 1.3.1 from CPE 21.06 on","text":"<ul> <li> <p>This is a new EasyConfig.</p> </li> <li> <p>Note that this is a very primitive library. Its configure doesn't even pick up     CFLAGS correctly so we feed it to make ourselves.</p> </li> <li> <p>From Clang 16 on the C standard needs to be set explicitly to c90 to avoid     error messages about features forbidden in C99 or newer.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> <li> <p>To recompile with ROCm 6.0 in 23.09 an additional toolchainopt was needed     to force the compiler to use the C90 standard.</p> </li> </ul>","boost":10},{"location":"t/termcap/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig termcap-1.3.1-cpeAMD-21.06.eb, with module termcap/1.3.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeAOCC-21.12.eb, with module termcap/1.3.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeAOCC-22.06.eb, with module termcap/1.3.1-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeCray-21.06.eb, with module termcap/1.3.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeCray-21.08.eb, with module termcap/1.3.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeCray-21.12.eb, with module termcap/1.3.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeCray-22.06.eb, with module termcap/1.3.1-cpeCray-22.06</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeGNU-21.06.eb, with module termcap/1.3.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeGNU-21.08.eb, with module termcap/1.3.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeGNU-21.12.eb, with module termcap/1.3.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig termcap-1.3.1-cpeGNU-22.06.eb, with module termcap/1.3.1-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"u/UDUNITS/","title":"UDUNITS","text":"<p>[package list]</p>","boost":10},{"location":"u/UDUNITS/#udunits","title":"UDUNITS","text":"","boost":10},{"location":"u/UDUNITS/#license-information","title":"License information","text":"<p>The license information for UDNUTS can be found in the COPYRIGHT file of the UDUNITS GitHub repository, with the copyright notice and disclaimer.</p> <p>From LUMI/23.12 onwards, the <code>COPYRIGHT</code> file can also be found in the <code>$EBROOTUDUNITS/share/licenses/UDUNITS</code> subdirectory after loading the module.</p>","boost":10},{"location":"u/UDUNITS/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider UDUNITS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>UDUNITS/2.2.28-cpeAMD-22.08 (EasyConfig: UDUNITS-2.2.28-cpeAMD-22.08.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeAMD-22.12 (EasyConfig: UDUNITS-2.2.28-cpeAMD-22.12.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeAMD-23.09 (EasyConfig: UDUNITS-2.2.28-cpeAMD-23.09.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeAMD-23.12 (EasyConfig: UDUNITS-2.2.28-cpeAMD-23.12.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeAMD-24.03 (EasyConfig: UDUNITS-2.2.28-cpeAMD-24.03.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeAOCC-22.08 (EasyConfig: UDUNITS-2.2.28-cpeAOCC-22.08.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeAOCC-22.12 (EasyConfig: UDUNITS-2.2.28-cpeAOCC-22.12.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeAOCC-23.09 (EasyConfig: UDUNITS-2.2.28-cpeAOCC-23.09.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeAOCC-23.12 (EasyConfig: UDUNITS-2.2.28-cpeAOCC-23.12.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeAOCC-24.03 (EasyConfig: UDUNITS-2.2.28-cpeAOCC-24.03.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeCray-22.08 (EasyConfig: UDUNITS-2.2.28-cpeCray-22.08.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeCray-22.12 (EasyConfig: UDUNITS-2.2.28-cpeCray-22.12.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeCray-23.03 (EasyConfig: UDUNITS-2.2.28-cpeCray-23.03.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeCray-23.09 (EasyConfig: UDUNITS-2.2.28-cpeCray-23.09.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeCray-23.12 (EasyConfig: UDUNITS-2.2.28-cpeCray-23.12.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeCray-24.03 (EasyConfig: UDUNITS-2.2.28-cpeCray-24.03.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeGNU-22.08 (EasyConfig: UDUNITS-2.2.28-cpeGNU-22.08.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeGNU-22.12 (EasyConfig: UDUNITS-2.2.28-cpeGNU-22.12.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeGNU-23.09 (EasyConfig: UDUNITS-2.2.28-cpeGNU-23.09.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeGNU-23.12 (EasyConfig: UDUNITS-2.2.28-cpeGNU-23.12.eb)</p> </li> <li> <p>UDUNITS/2.2.28-cpeGNU-24.03 (EasyConfig: UDUNITS-2.2.28-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"u/UDUNITS/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Home page</p> <ul> <li>Download of the last versions in each branch only</li> </ul> </li> <li> <p>EasyBuild download archive for other versions</p> </li> <li> <p>UDUNITS in GitHub</p> </li> </ul>","boost":10},{"location":"u/UDUNITS/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>UDUNITS in the EasyBuilders repository</p> </li> <li> <p>UDUNITS in the CSCS repository</p> </li> </ul>","boost":10},{"location":"u/UDUNITS/#2228-from-cpe-2106-on","title":"2.2.28 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is a straightforward adaptation of the EasyBuilders and University     of Antwerpen ones.</p> </li> <li> <p>Added an additional sanity check from 21.12 on that will likely guarantee that the     XML data file used by the version 2 libraries can be found.</p> </li> <li> <p>From 23.12 onwards, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"u/UDUNITS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig UDUNITS-2.2.28-cpeAMD-21.06.eb, with module UDUNITS/2.2.28-cpeAMD-21.06</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeAOCC-21.12.eb, with module UDUNITS/2.2.28-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeAOCC-22.06.eb, with module UDUNITS/2.2.28-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeCray-21.06.eb, with module UDUNITS/2.2.28-cpeCray-21.06</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeCray-21.08.eb, with module UDUNITS/2.2.28-cpeCray-21.08</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeCray-21.12.eb, with module UDUNITS/2.2.28-cpeCray-21.12</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeCray-22.06.eb, with module UDUNITS/2.2.28-cpeCray-22.06</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeGNU-21.06.eb, with module UDUNITS/2.2.28-cpeGNU-21.06</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeGNU-21.08.eb, with module UDUNITS/2.2.28-cpeGNU-21.08</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeGNU-21.12.eb, with module UDUNITS/2.2.28-cpeGNU-21.12</p> </li> <li> <p>EasyConfig UDUNITS-2.2.28-cpeGNU-22.06.eb, with module UDUNITS/2.2.28-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"u/UppASD/","title":"UppASD","text":"<p>[package list]</p>","boost":10},{"location":"u/UppASD/#uppasd","title":"UppASD","text":"","boost":10},{"location":"u/UppASD/#license-information","title":"License information","text":"<p>The UppASD software is covered by the GNU General Public License v3.0 a copy of which is included in the LICENSE file in the UppASD GitHub repository.</p> <p>After installation and loading of the module, the license is also available as the <code>$EBROOTUPPASD/share/licenses/UppASD/LICENSE</code> file (from the 22.12 toolchains on).</p>","boost":10},{"location":"u/UppASD/#user-documentation","title":"User documentation","text":"<p>The UppASD build recipes are contributed by KTH but adapted for LUMI.</p> <p>The build recipes do install the Python ASD_GUI and ASD_Tools code  (in $EBROOTUPPASD/ASD_GUI and $EBROOTUPPASD/ASD_Tools respectively) but do not build a Python environment with all dependencies of those packages. Given that several of the dependencies link to graphics UI libraries which are notoriously hard to run on LUMI, it may be better to either build a conda container using lumi-container-wrapper or cotainr, or simply run the Python code on a workstation. <code>$EBROOTUPPASD/requirements.txt</code> is the Python pip requirements file included in  the GitHub repository, but <code>$EBROOTUPPASD/ASD_GUI</code> contains a different one also.</p>","boost":10},{"location":"u/UppASD/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider UppASD/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig UppASD-6.0.2-cpeCray-23.03.eb, will build UppASD/6.0.2-cpeCray-23.03</p> </li> <li> <p>EasyConfig UppASD-6.0.2-cpeCray-23.09.eb, will build UppASD/6.0.2-cpeCray-23.09</p> </li> <li> <p>EasyConfig UppASD-6.0.2-cpeCray-24.03.eb, will build UppASD/6.0.2-cpeCray-24.03</p> </li> <li> <p>EasyConfig UppASD-6.0.2-cpeGNU-23.09.eb, will build UppASD/6.0.2-cpeGNU-23.09</p> </li> <li> <p>EasyConfig UppASD-6.0.2-cpeGNU-24.03.eb, will build UppASD/6.0.2-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"u/UppASD/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>UppASD home page</p> </li> <li> <p>UppASD development on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> <li> <p>UppASD documentation</p> </li> </ul>","boost":10},{"location":"u/UppASD/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>There is no support for UppASD in the EasyBuilders repository.</p> </li> <li> <p>There is no support for UppASD in the CSCS repository.</p> </li> <li> <p>There is no support for UppASD in Spack</p> </li> </ul>","boost":10},{"location":"u/UppASD/#version-602-for-cpe-2206","title":"Version 6.0.2 for CPE 22.06","text":"<ul> <li>Contributed by the UppASD developers (and also used on Dardel).</li> </ul>","boost":10},{"location":"u/UppASD/#version-602-for-cpe-2208","title":"Version 6.0.2 for CPE 22.08","text":"<ul> <li> <p>Some slight reworking of the EasyConfig of 22.06 which was contributed     by the developers to follow better the standard approach used in other     EasyConfigs for LUMI.</p> </li> <li> <p>The GUI functionality is not installed as LUMI doesn't currenbtly offer     all needed packages.</p> </li> </ul>","boost":10},{"location":"u/UppASD/#uppasd-602-with-cpegnu-2212-cpeaocc-2212-and-cpecray-2303","title":"UppASD-6.0.2 with cpeGNU-22.12, cpeAOCC-22.12 and cpeCray-23.03","text":"<ul> <li> <p>Derived from the previous ones.</p> </li> <li> <p>Still does not install the Python packages that are needed to run the included     Python code in the ASD_BUI and ASD_Tools directories.</p> </li> <li> <p>The cpeAOCC version is a near trivial adaptation.</p> </li> <li> <p>There is a <code>crayftn-ftn</code> target to compile with Cray Fortran but in the      release version of the code there is a problem with the link line.      The <code>-cpp</code> option also appears on the      link line which is not appreciated by Cray Fortran. It then expects also to     find source files and complains that no valid file names are specified on     the command line.</p> <p>To patch this, changes need to be made to <code>source/make/makefile.template</code> which we do via a patch file.</p> <p>Note that the compilation does produce some scary warnings, so it is not clear if the Cray version will work correctly.</p> </li> </ul>","boost":10},{"location":"u/UppASD/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig UppASD-6.0.2-cpeAOCC-22.12.eb, with module UppASD/6.0.2-cpeAOCC-22.12</p> </li> <li> <p>EasyConfig UppASD-6.0.2-cpeGNU-22.06.eb, with module UppASD/6.0.2-cpeGNU-22.06</p> </li> <li> <p>EasyConfig UppASD-6.0.2-cpeGNU-22.08.eb, with module UppASD/6.0.2-cpeGNU-22.08</p> </li> <li> <p>EasyConfig UppASD-6.0.2-cpeGNU-22.12.eb, with module UppASD/6.0.2-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"u/unicore-uftp/","title":"unicore-uftp","text":"<p>[package list]</p>","boost":10},{"location":"u/unicore-uftp/#unicore-uftp","title":"unicore-uftp","text":"","boost":10},{"location":"u/unicore-uftp/#license-information","title":"License information","text":"<p>The UNICORE UFTP client is covered by a 2-clause BSD license.</p> <p>After installation of the package and loading of the module, the license is available as the file <code>LICENSE</code> in <code>$EBROOTUNICOREMINUFTP/share/licenses/unicore-uftp</code>.</p>","boost":10},{"location":"u/unicore-uftp/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider unicore-uftp/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig unicore-uftp-1.8.0-Java-21.eb, will build unicore-uftp/1.8.0-Java-21</li> </ul>","boost":10},{"location":"u/unicore-uftp/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>unicore on GitHub: When first putting uftp in      the LUMI repositories, the organisation was in the process of moving more from     SourceForge to GitHub.</p> <ul> <li> <p>uftp-client GitHub repository</p> <ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li> <p>Older pages on SourceForge</p> <ul> <li>uftp client download on SourceForge</li> </ul> </li> </ul>","boost":10},{"location":"u/unicore-uftp/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>unicore-uftp client support in the EasyBuilders repository</p> </li> <li> <p>There is no support for the UFTP client in the CSCS repository.</p> </li> <li> <p>There is no support for UFTP in Spack</p> </li> </ul>","boost":10},{"location":"u/unicore-uftp/#version-18","title":"Version 1.8","text":"<ul> <li> <p>Started from the EasyBuilders EasyConfig, but</p> <ul> <li> <p>Moved to downloads from GitHub and the new homepage</p> </li> <li> <p>Even though the code seems built with Java 11, we decided to move to Java 21     as that is likely more useful for users who want to use other Java packages also.</p> </li> </ul> </li> <li> <p>Moved the license file etc. to our standard location in share/licenses.</p> </li> </ul>","boost":10},{"location":"u/util-linux/","title":"util-linux","text":"<p>[package list]</p>","boost":10},{"location":"u/util-linux/#util-linux","title":"util-linux","text":"","boost":10},{"location":"u/util-linux/#license-information","title":"License information","text":"<p>The util-linux package is distributed under the GNU General Public License Version 2.</p> <p>From LUMI/23.12 on, license information can also be found in the <code>$EBROOTUTILMINLINUX/share/licenses/util-linux</code> subdirectory after loading the module.</p>","boost":10},{"location":"u/util-linux/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider util-linux/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>util-linux/2.38-cpeAMD-22.08 (EasyConfig: util-linux-2.38-cpeAMD-22.08.eb)</p> </li> <li> <p>util-linux/2.38-cpeAOCC-22.08 (EasyConfig: util-linux-2.38-cpeAOCC-22.08.eb)</p> </li> <li> <p>util-linux/2.38-cpeCray-22.08 (EasyConfig: util-linux-2.38-cpeCray-22.08.eb)</p> </li> <li> <p>util-linux/2.38-cpeGNU-22.08 (EasyConfig: util-linux-2.38-cpeGNU-22.08.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeAMD-22.12 (EasyConfig: util-linux-2.38.1-cpeAMD-22.12.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeAMD-23.09 (EasyConfig: util-linux-2.38.1-cpeAMD-23.09.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeAMD-23.12 (EasyConfig: util-linux-2.38.1-cpeAMD-23.12.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeAOCC-22.12 (EasyConfig: util-linux-2.38.1-cpeAOCC-22.12.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeAOCC-23.09 (EasyConfig: util-linux-2.38.1-cpeAOCC-23.09.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeAOCC-23.12 (EasyConfig: util-linux-2.38.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeCray-22.12 (EasyConfig: util-linux-2.38.1-cpeCray-22.12.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeCray-23.03 (EasyConfig: util-linux-2.38.1-cpeCray-23.03.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeCray-23.09 (EasyConfig: util-linux-2.38.1-cpeCray-23.09.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeCray-23.12 (EasyConfig: util-linux-2.38.1-cpeCray-23.12.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeGNU-22.12 (EasyConfig: util-linux-2.38.1-cpeGNU-22.12.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeGNU-23.09 (EasyConfig: util-linux-2.38.1-cpeGNU-23.09.eb)</p> </li> <li> <p>util-linux/2.38.1-cpeGNU-23.12 (EasyConfig: util-linux-2.38.1-cpeGNU-23.12.eb)</p> </li> <li> <p>util-linux/2.39.3-cpeAMD-24.03 (EasyConfig: util-linux-2.39.3-cpeAMD-24.03.eb)</p> </li> <li> <p>util-linux/2.39.3-cpeAOCC-24.03 (EasyConfig: util-linux-2.39.3-cpeAOCC-24.03.eb)</p> </li> <li> <p>util-linux/2.39.3-cpeCray-24.03 (EasyConfig: util-linux-2.39.3-cpeCray-24.03.eb)</p> </li> <li> <p>util-linux/2.39.3-cpeGNU-24.03 (EasyConfig: util-linux-2.39.3-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"u/util-linux/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Sources</li> </ul>","boost":10},{"location":"u/util-linux/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>util-linux support in the EasyBuilders repository</p> </li> <li> <p>util-linux support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"u/util-linux/#2371-from-cpe-2106-on","title":"2.37.1 from cpe 21.06 on","text":"<ul> <li> <p>The EasyConfig is derived from a mix of the EasyConfigs of the EasyBuilders repository,     CSCS and University of Antwerpen, the latter for the documentation.</p> </li> <li> <p>The list of dependencies was revised: added file for libmagic.</p> </li> <li> <p>The configure options were also checked and extended.</p> </li> <li> <p>We need to use <code>--without-tinfo</code> as otherwise we get an error message about     <code>cur_term</code> not found.</p> </li> </ul>","boost":10},{"location":"u/util-linux/#238-from-cpe-2206-on","title":"2.38 from CPE 22.06 on","text":"<ul> <li>Trivial version bump of the EasyConfig,</li> </ul>","boost":10},{"location":"u/util-linux/#2381-from-cpe-2212-on","title":"2.38.1 from CPE 22.12 on","text":"<ul> <li> <p>Trivial version bump of the EasyConfig of 2.38.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"u/util-linux/#no-239-from-cpe-2309-on","title":"NO 2.39 from CPE 23.09 on","text":"<ul> <li> <p>Port of the 2.38.1 EasyConfig but with the patches of the EasyBuild version added.</p> </li> <li> <p>Did not work so reverted to 2.38.1.</p> </li> </ul>","boost":10},{"location":"u/util-linux/#version-2393-from-lumi2403-on","title":"Version 2.39.3 from LUMI/24.03 on","text":"<ul> <li> <p>Version bump of 2.38.1 for LUMI/23.12</p> </li> <li> <p>The bugs that hit us in 2.39 seem to be fixed without any patches that have since      been developed by the EasyBuild community, so we deviate from 2023b.</p> </li> </ul>","boost":10},{"location":"u/util-linux/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig util-linux-2.37.1-cpeAMD-21.06.eb, with module util-linux/2.37.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig util-linux-2.37.1-cpeAOCC-21.12.eb, with module util-linux/2.37.1-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig util-linux-2.37.1-cpeCray-21.06.eb, with module util-linux/2.37.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig util-linux-2.37.1-cpeCray-21.08.eb, with module util-linux/2.37.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig util-linux-2.37.1-cpeCray-21.12.eb, with module util-linux/2.37.1-cpeCray-21.12</p> </li> <li> <p>EasyConfig util-linux-2.37.1-cpeGNU-21.06.eb, with module util-linux/2.37.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig util-linux-2.37.1-cpeGNU-21.08.eb, with module util-linux/2.37.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig util-linux-2.37.1-cpeGNU-21.12.eb, with module util-linux/2.37.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig util-linux-2.38-cpeAOCC-22.06.eb, with module util-linux/2.38-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig util-linux-2.38-cpeCray-22.06.eb, with module util-linux/2.38-cpeCray-22.06</p> </li> <li> <p>EasyConfig util-linux-2.38-cpeGNU-22.06.eb, with module util-linux/2.38-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"v/VASP/","title":"VASP","text":"<p>[package list]</p>","boost":10},{"location":"v/VASP/#vasp","title":"VASP","text":"","boost":10},{"location":"v/VASP/#license-information","title":"License information","text":"<p>Given the licensing conditions of VASP, users of VASP on LUMI need to provide their own license, but can use the provided EasyConfig files for the installation. See the user documentation that we provide.</p>","boost":10},{"location":"v/VASP/#user-documentation","title":"User documentation","text":"<p>VASP (Vienna Ab Initio Simulation Package) is a popular software package for \"atomic scale materials modelling from first principles\". In general, it runs well on LUMI-C.</p> <p>There is currently no version of VASP that can use the AMD GPUs in the GPU Early Access Platform or LUMI-G.</p>","boost":10},{"location":"v/VASP/#installing-vasp","title":"Installing VASP","text":"<p>We provide automatic installation scripts for several versions of VASP. In general, the installation procedure is described on the EasyBuild page. The step by step procedure to install VASP is:</p> <ol> <li>Download the VASP source code \"vasp.6.5.0.tgz\" from the VASP portal.</li> <li>Upload the file somewhere to your home directory on LUMI.</li> <li>Load the LUMI software environment: <code>module load LUMI/24.03</code>.</li> <li>Select the LUMI-C partition: <code>module load partition/C</code>.</li> <li>Load the EasyBuild module: <code>module load EasyBuild-user</code>.</li> </ol> <p>Then, you can run the install command:</p> <pre><code>$ eb --sourcepath=&lt;directory-where-the-VASP-source-is-stored&gt; VASP-6.5.0-cpeGNU-24.03-build02.eb -r\n</code></pre> <p>The installation process is quite slow. It will take about 20 minutes, but afterwards, you will have a module called \"VASP/6.5.0-cpeGNU-24.03-build02\" installed in your home directory. Load the module to use it</p> <pre><code>$ module load VASP/6.5.0-cpeGNU-24.03-build02\n</code></pre> <p>The usual VASP binaries, <code>vasp_std</code>, <code>vasp_gam</code> etc. will now be in your <code>PATH</code>. Launch VASP via the Slurm scheduler, e.g. <code>srun vasp_std</code>. Please note that you must do <code>module load LUMI/24.03 partition/C</code> to see the VASP module in the module system. The same applies to the Slurm batch scripts which you send to the compute nodes.</p> <p>You can see other versions of VASP that can be automatically installed in the same way by running the EasyBuild command</p> <pre><code>$ eb -S VASP\n</code></pre> <p>or by checking the list further down this page  or by checking the LUMI-EasyBuild-contrib repository on GitHub directly.</p> <p>We build the VASP executables with bindings to several external libraries activated: currently HDF5, Wannier90 and Libxc. A patch is also applied  so the input files are opened read only to reduice the load on the parallel file system.</p>","boost":10},{"location":"v/VASP/#description-of-the-different-vasp-builds","title":"Description of the different VASP builds","text":"<p>There might be several installations of the same VASP version to choose from: <code>build01</code>, <code>build02</code> etc. For various reasons, it is often necessary to compile VASP in different ways for different users, for example with certain extra packages or to apply specific patches for LUMI.</p> <ul> <li><code>VASP-6.5.0-cpeGNU-24.03-build01.eb</code>. VASP 6.5.0 release version built without any modifications. Passes the VASP test suite</li> <li><code>VASP-6.5.0-cpeGNU-24.03-build02.eb</code>. VASP 6.5.0 with POTCAR and HDF5 I/O patches. Passes the VASP test suite</li> </ul>","boost":10},{"location":"v/VASP/#example-batch-scripts","title":"Example batch scripts","text":"<p>A typical VASP batch job using 4 compute nodes and MPI only:</p> <pre><code>#!/bin/bash\n#SBATCH -J GaAs512 \n#SBATCH -N 4\n#SBATCH --partition=small\n#SBATCH -t 00:30:00\n#SBATCH --mem=200G\n#SBATCH --exclusive --no-requeue\n#SBATCH -A project_XYZ\n#SBATCH --ntasks-per-node=128\n#SBATCH -c 1\n\nexport OMP_NUM_THREADS=1\n\nmodule load LUMI/24.03 partition/C\nmodule load VASP/6.5.0-cpeGNU-24.03-build02\nsrun vasp_std\n</code></pre> <p>A typical VASP batch job with MPI and 8 OpenMP threads per rank:</p> <pre><code>#!/bin/bash\n#SBATCH -J GaAs512 \n#SBATCH -N 4\n#SBATCH --partition=small\n#SBATCH -t 00:30:00\n#SBATCH --mem=200G\n#SBATCH --exclusive --no-requeue\n#SBATCH -A project_XYZ\n#SBATCH --ntasks-per-node=16\n#SBATCH -c 8\n\nexport OMP_NUM_THREADS=8\nexport OMP_PLACES=cores\nexport OMP_PROC_BIND=close\nexport OMP_STACKSIZE=512m\n\nmodule load LUMI/24.03 partition/C\nmodule load VASP/6.5.0-cpeGNU-23.09-build02\nsrun vasp_std\n</code></pre>","boost":10},{"location":"v/VASP/#tuning-recommendations","title":"Tuning recommendations","text":"<p>Note</p> <p>Due to the restrictive license conditions imposed by the VASP group, which forbids sharing of any kind of benchmark numbers with anyone (including other licensed users!), we unfortunately cannot give detailed recommendations on the best way to run VASP.</p> <ul> <li> <p>In general, try increasing <code>NCORE</code> to 16-32, and <code>NSIM</code> to 32.</p> </li> <li> <p>OpenMP works best with many threads, eg. <code>OMP_NUM_THREADS=8</code>. OpenMP works particularily well with exact exchange calculations.</p> </li> <li> <p>It is best to run with all 128 processor cores per compute node if you can,     but reducing the number of cores per compute node does not decrease     performance as much as you might expect. That can be useful when you are     constrained by memory and need more available memory per MPI rank. It is     important to explicitly pin the MPI ranks to processor     cores if you     run with less than 128 cores per node.</p> </li> <li> <p>If possible, use k-point parallelization <code>KPAR</code> up to the maxium number of     k-points. It is often a good choice to use 1 compute node per k-point.</p> </li> <li> <p>We generally recommend using VASP version 6 when possible, and not VASP 5.      VASP 5 on LUMI exhibits some problems with disk I/O,      jobs may appear to hang for several minutes at launch before all input files      are read and the calculation begins.</p> </li> <li> <p>The STOPCAR LABORT option should not be used     on LUMI. Support for it is explicitly turned off in our build recipes as this function     puts a lot of stress on the Lustre file system. Basically, at every step, all      MPI ranks will check in the file system if the file exists and if so, also read it.     This causes a very high load on the metadata servers. Most supercomputer centres      with large clusters will disable this feature for that reason.</p> <p>Do not turn it on yourself, if you do and run VASP at scale your job will cause very heavy load on the metadata servers and likely will be killed by the sysadmins.</p> </li> </ul>","boost":10},{"location":"v/VASP/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider VASP/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig VASP-6.4.2-cpeGNU-23.09-build01.eb, will build VASP/6.4.2-cpeGNU-23.09-build01</p> </li> <li> <p>EasyConfig VASP-6.4.2-cpeGNU-23.09-build02.eb, will build VASP/6.4.2-cpeGNU-23.09-build02</p> </li> <li> <p>EasyConfig VASP-6.4.3-cpeGNU-24.03-build02.eb, will build VASP/6.4.3-cpeGNU-24.03-build02</p> </li> <li> <p>EasyConfig VASP-6.5.0-cpeGNU-24.03-build01.eb, will build VASP/6.5.0-cpeGNU-24.03-build01</p> <p>VASP 6.5.0 release version built without any modifications. Passes the VASP test suite. </p> </li> <li> <p>EasyConfig VASP-6.5.0-cpeGNU-24.03-build02.eb, will build VASP/6.5.0-cpeGNU-24.03-build02</p> <p>VASP 6.5.0 with POTCAR and HDF5 I/O patches. Passes the VASP test suite. This is the recommended version.</p> </li> <li> <p>EasyConfig VASP-6.5.1-cpeGNU-24.03-build02.eb, will build VASP/6.5.1-cpeGNU-24.03-build02</p> <p>VASP 6.5.1 with POTCAR and HDF5 I/O patches. Contributed and tested by a user. This is the recommended version.</p> </li> </ul>","boost":10},{"location":"v/VASP/#technical-documentation","title":"Technical documentation","text":"<ul> <li>VASP home page</li> </ul>","boost":10},{"location":"v/VASP/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>VASP support in EasyBuild.     Given the licensing conditions of VASP, it is difficult to maintain in the regular EasyBuild repository.</p> </li> <li> <p>VASP support in the CSCS repository</p> </li> </ul> <p>The VASP EasyConfig files for LUMI are build upon those of the CSCS repository, with Makefiles  specifically for LUMI.</p>","boost":10},{"location":"v/VASP/#641","title":"6.4.1","text":"<ul> <li> <p>build01</p> <ul> <li>Some improvements to the Makefile, including stronger optimization and      different HDF5 library compared to the 6.3.2 version</li> </ul> </li> <li> <p>build02</p> <ul> <li>Same improvements as for build01.</li> </ul> </li> </ul>","boost":10},{"location":"v/VASP/#642","title":"6.4.2","text":"<ul> <li> <p>build01</p> <ul> <li>Plain build with high optimization, but no source code modifications.</li> </ul> </li> <li> <p>build02</p> <ul> <li>A few patches to the source code to improve the disk I/O on LUMI which led to slow startup times. This is the recommended version.</li> </ul> </li> </ul>","boost":10},{"location":"v/VASP/#643","title":"6.4.3","text":"<ul> <li>build02 is a trivial port of build02 for VASP 6.4.2.</li> </ul>","boost":10},{"location":"v/VASP/#650","title":"6.5.0","text":"<ul> <li> <p>build01</p> <ul> <li>Plain build with high optimization, but no source code modifications.</li> </ul> </li> <li> <p>build02</p> <ul> <li>A few patches to the source code to improve slow VASP startup times by improving the disk I/O on LUMI. This is the recommended version.</li> </ul> </li> </ul>","boost":10},{"location":"v/VASP/#651-for-lumi2403","title":"6.5.1 for LUMI/24.03","text":"<ul> <li>build02: Contributed by a user and a trivial port of the 6.5.0 EasyConfig.</li> </ul>","boost":10},{"location":"v/VASP/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig VASP-5.4.4.pl2-cpeGNU-21.08.eb, with module VASP/5.4.4.pl2-cpeGNU-21.08</p> </li> <li> <p>EasyConfig VASP-5.4.4.pl2-cpeGNU-21.12.eb, with module VASP/5.4.4.pl2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig VASP-5.4.4.pl2-cpeGNU-22.08.eb, with module VASP/5.4.4.pl2-cpeGNU-22.08</p> </li> <li> <p>EasyConfig VASP-5.4.4.pl2.build02-cpeGNU-22.08.eb, with module VASP/5.4.4.pl2.build02-cpeGNU-22.08</p> <p>This VASP has patches to read POTCAR files in read-only mode, which lessens the load on the LUMI parallel file systems.  In some cases, VASP 5 could stall for 10 minutes at startup just reading input files.</p> </li> <li> <p>EasyConfig VASP-6.2.1-cpeGNU-21.08.eb, with module VASP/6.2.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig VASP-6.2.1-cpeGNU-21.09.eb, with module VASP/6.2.1-cpeGNU-21.09</p> </li> <li> <p>EasyConfig VASP-6.3.0-cpeGNU-21.08.eb, with module VASP/6.3.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig VASP-6.3.0-cpeGNU-21.12.eb, with module VASP/6.3.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig VASP-6.3.0-cpeGNU-22.06.eb, with module VASP/6.3.0-cpeGNU-22.06</p> </li> <li> <p>EasyConfig VASP-6.3.2-cpeGNU-22.06.eb, with module VASP/6.3.2-cpeGNU-22.06</p> </li> <li> <p>EasyConfig VASP-6.3.2-cpeGNU-22.08.eb, with module VASP/6.3.2-cpeGNU-22.08</p> </li> <li> <p>EasyConfig VASP-6.3.2-cpeGNU-22.12.eb, with module VASP/6.3.2-cpeGNU-22.12</p> </li> <li> <p>EasyConfig VASP-6.3.2.build02-cpeGNU-22.08.eb, with module VASP/6.3.2.build02-cpeGNU-22.08</p> <p>This VASP has I/O patches to behave more nicely towards the parallel file system.  We recommend that you use this version, especially if you work with HDF5 files in VASP.  Passes the VASP test.</p> </li> <li> <p>EasyConfig VASP-6.4.1-cpeGNU-22.12-build01.eb, with module VASP/6.4.1-cpeGNU-22.12-build01</p> <p>VASP 6.4.1 release version built without any modifications. Passes the VASP test suite.</p> </li> <li> <p>EasyConfig VASP-6.4.1-cpeGNU-22.12-build02.eb, with module VASP/6.4.1-cpeGNU-22.12-build02</p> <p>VASP 6.4.1 with POTCAR and HDF5 I/O patches. Passes the VASP test suite.</p> </li> </ul> </li> </ul>","boost":10},{"location":"v/VCFtools/","title":"VCFtools","text":"<p>[package list]</p>","boost":10},{"location":"v/VCFtools/#vcftools","title":"VCFtools","text":"","boost":10},{"location":"v/VCFtools/#license-information","title":"License information","text":"<p>Licensing information for VCFtools is available on the  \"License\" page of the VCFtools web page./</p> <p>The package is released under the GNU Lesser General Public License version 3.0 (LGPLv3). Users of VCFtools are also aksked to cite a specific paper.</p> <p>This information is also available in the README.md file and the LICENSE file in the VCFtools GitHub repository.</p>","boost":10},{"location":"v/VCFtools/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider VCFtools/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig VCFtools-0.1.16-cpeGNU-23.09.eb, will build VCFtools/0.1.16-cpeGNU-23.09</p> </li> <li> <p>EasyConfig VCFtools-0.1.16-cpeGNU-24.03.eb, will build VCFtools/0.1.16-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"v/VCFtools/#technical-documentation","title":"Technical documentation","text":"<p>VCFtools is a program package designed for working with VCF files,  such as those generated by the 1000 Genomes Project. The aim of  VCFtools is to provide easily accessible methods for working with  complex genetic variation data in the form of VCF files.</p> <ul> <li> <p>VCFtools home page</p> </li> <li> <p>VCFtools on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul> <p>At this point (August 2022) it is not clear how well this code is  still maintained. There are very few recent commits, no releases, and response on issues raised seems to be slow also.</p>","boost":10},{"location":"v/VCFtools/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for VCFtools in the EasyBuilders repository</p> </li> <li> <p>There is no support for VCFtools in the CSCS repository</p> </li> </ul>","boost":10},{"location":"v/VCFtools/#version-0116-for-cpegnu-2112-2206-and-2208","title":"Version 0.1.16 for cpeGNU 21.12, 22.06 and 22.08","text":"<ul> <li> <p>We started from the EasyBuilders EasyConfig file for the 2021b     common toolchains and added some documentation and tests.</p> </li> <li> <p>For the version for 22.06, a patch was developed based on a recent     bug fix in the GitHub repository (and basically the only change     since this release or in 3 years).</p> </li> </ul>","boost":10},{"location":"v/VCFtools/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig VCFtools-0.1.16-cpeGNU-21.12.eb, with module VCFtools/0.1.16-cpeGNU-21.12</p> </li> <li> <p>EasyConfig VCFtools-0.1.16-cpeGNU-22.06.eb, with module VCFtools/0.1.16-cpeGNU-22.06</p> </li> <li> <p>EasyConfig VCFtools-0.1.16-cpeGNU-22.08.eb, with module VCFtools/0.1.16-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"v/VTK/","title":"VTK","text":"<p>[package list]</p>","boost":10},{"location":"v/VTK/#vtk","title":"VTK","text":"","boost":10},{"location":"v/VTK/#license-information","title":"License information","text":"<p>VTK is licensed under the BSD license; see the  VTK License page.</p> <p>After installing and loading the module, the license information is also available  in <code>$EBROOTVTK/share/licenses/VTK</code>.</p>","boost":10},{"location":"v/VTK/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider VTK/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig VTK-9.2.6-cpeGNU-24.03.eb, will build VTK/9.2.6-cpeGNU-24.03</li> </ul>","boost":10},{"location":"v/VTK/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>VTK website</p> <ul> <li>Downloads from the website</li> </ul> </li> <li> <p>VTK GitLab</p> </li> </ul>","boost":10},{"location":"v/VTK/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>VTK support in the EasyBuilders repository</p> </li> <li> <p>VTK support in the CSCS repository</p> </li> <li> <p>VTK support in the JSC repository</p> </li> <li> <p>vtk in Spack</p> </li> </ul>","boost":10},{"location":"v/VTK/#version-926-for-cpegnu2403","title":"Version 9.2.6 for cpeGNU/24.03","text":"<ul> <li>The EasyConfig is a LUST development borrowing heavily from the JSC EasyConfigs.</li> </ul>","boost":10},{"location":"v/Vampir/","title":"Vampir","text":"<p>[package list]</p>","boost":10},{"location":"v/Vampir/#vampir","title":"Vampir","text":"","boost":10},{"location":"v/Vampir/#license-information","title":"License information","text":"<p>The use of Vampir on LUMI is coverd by the Vampir Professional license (see https://vampir.eu/licensing) which allows all LUMI users to use  Vampir in both client and client-server mode also (see also the VampirServer module for the server side).</p> <p>However, the license only allows to run the client and server on LUMI, or the client on CSC-owned machines. Even though Vampir can run the GUI on a local machine and let that local machine then connect to a server on LUMI, that use case is not currently supported by the license.</p> <p>The license offers maintenance until 31 December 2026.</p>","boost":10},{"location":"v/Vampir/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Vampir/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Vampir/10.0.0 (EasyConfig: Vampir-10.0.0.eb)</p> </li> <li> <p>Vampir/10.2.1 (EasyConfig: Vampir-10.2.1.eb)</p> </li> <li> <p>Vampir/10.6.1 (EasyConfig: Vampir-10.6.1.eb)</p> </li> </ul>","boost":10},{"location":"v/Vampir/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Vampir home page</li> </ul>","boost":10},{"location":"v/Vampir/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Vampir support in the EasyBuilders repository</p> </li> <li> <p>Vampir support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"v/Vampir/#version-1000","title":"Version 10.0.0","text":"<p>Based on similar EasyConfig files in the easybuilders and CSCS repositories.</p>","boost":10},{"location":"v/Vampir/#version-1021","title":"Version 10.2.1","text":"<ul> <li>Trivial update of the 10.0.0 EasyConfig</li> </ul>","boost":10},{"location":"v/Vampir/#version-1061","title":"Version 10.6.1","text":"<ul> <li>Trivial update of the 10.2.1 EasyConfig</li> </ul>","boost":10},{"location":"v/VampirServer/","title":"VampirServer","text":"<p>[package list]</p>","boost":10},{"location":"v/VampirServer/#vampirserver","title":"VampirServer","text":"","boost":10},{"location":"v/VampirServer/#license-information","title":"License information","text":"<p>The use of Vampir on LUMI is coverd by the Vampir Professional license.  All LUMI users can use Vampir on LUMI.</p>","boost":10},{"location":"v/VampirServer/#technical-documentation","title":"Technical documentation","text":"<ul> <li>Vampir home page</li> </ul>","boost":10},{"location":"v/VampirServer/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig VampirServer-10.0.0-cpeCray-21.08.eb, with module VampirServer/10.0.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig VampirServer-10.0.0-cpeCray-21.12.eb, with module VampirServer/10.0.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig VampirServer-10.0.0-cpeGNU-21.08.eb, with module VampirServer/10.0.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig VampirServer-10.0.0-cpeGNU-21.12.eb, with module VampirServer/10.0.0-cpeGNU-21.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"v/Vim/","title":"Vim","text":"<p>[package list]</p>","boost":10},{"location":"v/Vim/#vim","title":"Vim","text":"","boost":10},{"location":"v/Vim/#license-information","title":"License information","text":"<p>The full license text of Vim is available in the Vim documentation.</p>","boost":10},{"location":"v/Vim/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider Vim/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>Vim/8.2.5172 (EasyConfig: Vim-8.2.5172.eb)</p> </li> <li> <p>Vim/9.0.0016 (EasyConfig: Vim-9.0.0016.eb)</p> </li> <li> <p>Vim/9.0.0193 (EasyConfig: Vim-9.0.0193.eb)</p> </li> <li> <p>Vim/9.0.1392 (EasyConfig: Vim-9.0.1392.eb)</p> </li> <li> <p>Vim/9.0.2059 (EasyConfig: Vim-9.0.2059.eb)</p> </li> <li> <p>Vim/9.1.0050 (EasyConfig: Vim-9.1.0050.eb)</p> </li> <li> <p>Vim/9.1.0447 (EasyConfig: Vim-9.1.0447.eb)</p> </li> </ul>","boost":10},{"location":"v/Vim/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Vim web site</p> </li> <li> <p>Vim on GitHub</p> <ul> <li>There are no formal releases, but lots of tags with a patch release almost     every week.</li> </ul> </li> </ul>","boost":10},{"location":"v/Vim/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Vim support in the EasyBuilders repository</p> </li> <li> <p>Vim support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"v/Vim/#version-823852-for-lumi2108","title":"Version 8.2.3852 for LUMI/21.08","text":"<ul> <li> <p>EasyConfig derived from the CSCS one and adapted to our needs.</p> </li> <li> <p>Build with our syslibs module of static libraries to have minimal runtime     dependencies.</p> </li> </ul>","boost":10},{"location":"v/Vim/#version-824487-for-lumi2112","title":"Version 8.2.4487 for LUMI/21.12","text":"<ul> <li>Trivial port of the 8.2.3852 version</li> </ul>","boost":10},{"location":"v/Vim/#version-825172-for-lumi2206","title":"Version 8.2.5172 for LUMI/22.06","text":"<ul> <li>Trivial port of the 8.2.4487 version. This is likely the final 8.2 version.</li> </ul>","boost":10},{"location":"v/Vim/#version-900016-for-lumi2206","title":"Version 9.0.0016 for LUMI/22.06","text":"<ul> <li>Turned out to be an almost trivial port, though options of the configure script     were checked and a few more enabled.</li> </ul>","boost":10},{"location":"v/Vim/#version-900193-for-lumi2208","title":"Version 9.0.0193 for LUMI/22.08","text":"<ul> <li>Trivial port of the 9.0.0016 EasyConfig.</li> </ul>","boost":10},{"location":"v/Vim/#version-901392-for-22122303","title":"Version 9.0.1392 for 22.12/23.03","text":"<ul> <li>Trivial port of the 9.0.0193 EasyConfig with some layout changes.</li> </ul>","boost":10},{"location":"v/Vim/#version-910050-for-2312","title":"Version 9.1.0050 for 23.12","text":"<ul> <li>Trivial port of previous EasyConfigs</li> </ul>","boost":10},{"location":"v/Vim/#version-910050-for-2403","title":"Version 9.1.0050 for 24.03","text":"<ul> <li>Trivial port of previous EasyConfigs</li> </ul>","boost":10},{"location":"v/Vim/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig Vim-8.2.3582.eb, with module Vim/8.2.3582</p> </li> <li> <p>EasyConfig Vim-8.2.4487.eb, with module Vim/8.2.4487</p> </li> </ul> </li> </ul>","boost":10},{"location":"v/VisIt/","title":"VisIt","text":"<p>[package list]</p>","boost":10},{"location":"v/VisIt/#visit","title":"VisIt","text":"","boost":10},{"location":"v/VisIt/#license-information","title":"License information","text":"<p>VisIt is licensed under a 3-clause BSD license.  The license if available as the <code>LICENSE</code> file in the VisIt GitHub repository.</p>","boost":10},{"location":"v/VisIt/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider VisIt/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig VisIt-3.4.1-cpeGNU-24.03.eb, will build VisIt/3.4.1-cpeGNU-24.03</li> </ul>","boost":10},{"location":"v/VisIt/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>VisIt homepage</p> </li> <li> <p>VisIt GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"v/VisIt/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Visit support in the EasyBuilders repository</p> </li> <li> <p>Visit support in the CSCS repository</p> </li> <li> <p>No support for VisIt in the JSC repository.</p> </li> <li> <p>visit package in Spack</p> </li> </ul>","boost":10},{"location":"v/VisIt/#version-341-for-cpegnu2403","title":"Version 3.4.1 for cpeGNU/24.03","text":"<ul> <li> <p>The EasyConfig is a LUST development, partly based on the EasyBuilders one,     but with extensions and corrections.</p> </li> <li> <p>The license information of VisIt is not in the source distribution that we use     hence not installed in <code>share/licenses</code>.</p> </li> </ul>","boost":10},{"location":"v/VisRTX/","title":"VisRTX","text":"<p>[package list]</p>","boost":10},{"location":"v/VisRTX/#visrtx","title":"VisRTX","text":"","boost":10},{"location":"v/VisRTX/#license-information","title":"License information","text":"<ul> <li> <p>The Anari SDK is distributed under an     Apache License version 2.0.     A copy can be found in the      LICENSE file in the ANARI-SDK GitHub repository.</p> </li> <li> <p>VisRTX is distributed under a 3-clause BSD license. A copy of the license can be      found in the      LICENSE file in the VisRTX GitHub repository.</p> </li> </ul> <p>After installation and loading of the module, the license information can also be found  in the respective subdirectories of <code>$EBROOTVISRTX/share/licenses</code>.</p>","boost":10},{"location":"v/VisRTX/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider VisRTX/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig VisRTX-0.9.0-cpeGNU-24.03.eb, will build VisRTX/0.9.0-cpeGNU-24.03</li> </ul>","boost":10},{"location":"v/VisRTX/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>ANARI Software Development Kit. It is a Khronos group specification</p> <ul> <li> <p>Anari on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul> </li> <li> <p>VisRTX is the NVIDIA Optix based implementation of Anari</p> <ul> <li> <p>VisRTX GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul> </li> </ul> <p>Specific versions of VisRTX require specific versions of Anari, so be careful when  updating versions!</p>","boost":10},{"location":"v/VisRTX/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ANARI</p> <ul> <li> <p>There is no support for Anari in the EasyBuilders repository at the time of      writing.</p> </li> <li> <p>There is no support for Anari in the CSCS repository.</p> </li> <li> <p>ANARI-SDK in the JSC repository</p> </li> </ul> </li> <li> <p>VisRTX</p> <ul> <li> <p>There is no support for VisRTX in the EasyBuilders repository at the time of      writing.</p> </li> <li> <p>Ancient support for VisRTX in the CSCS repository</p> </li> <li> <p>VisRTX in the JSC repository</p> </li> </ul> </li> </ul>","boost":10},{"location":"v/VisRTX/#version-090-for-cpegnu2403","title":"Version 0.9.0 for cpeGNU/24.03","text":"<ul> <li>The EasyConfig is partly a LUST development, bundling VisRTX with Anari.     It is inspired by the work at JSC.</li> </ul>","boost":10},{"location":"w/WPS/","title":"WPS","text":"<p>[package list]</p>","boost":10},{"location":"w/WPS/#wps","title":"WPS","text":"","boost":10},{"location":"w/WPS/#license-information","title":"License information","text":"<p>See the WPS Readme file for more information on the license.</p>","boost":10},{"location":"w/WPS/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider WPS/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig WPS-v4.4-cpeGNU-24.03-WRF-SFIRE-W4.4-S0.1.eb, will build WPS/v4.4-cpeGNU-24.03-WRF-SFIRE-W4.4-S0.1</li> </ul>","boost":10},{"location":"w/WPS/#technical-documentation","title":"Technical documentation","text":"<p>WPS (WRF Preprocessing System) is a set of programs that prepare meteorological data for use with the WRF (Weather Research and Forecasting) model. It includes tools for reading, interpolating, and formatting meteorological data from various sources. It is part of the WRF software suite and is used to preprocess input data for WRF simulations.</p> <ul> <li> <p>WPS home page (same as WRF)</p> </li> <li> <p>WPS on GitHub</p> </li> <li> <p>WRF Users' Page</p> </li> </ul>","boost":10},{"location":"w/WPS/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>WPS support in the EasyBuilders repository</p> </li> <li> <p>There is no WPS support in the CSCS repository</p> </li> </ul> <p>The build procedure is an in-place build in the installation directory as  there is no proper install procedure.</p>","boost":10},{"location":"w/WPS/#version-431-for-2112","title":"Version 4.3.1 for 21.12","text":"<ul> <li> <p>The plotfmt.exe and plotgrid.exe tools are not included at the moment as       they require additional dependencies (NCAR Graphics).</p> <p>NCAR Graphics then became part of NCL   (NCAR Command Lanmguage) which tiself in in maintenance mode since 2019  as NCAR is replacing its graphics tools with Python-based tools.</p> </li> </ul>","boost":10},{"location":"w/WPS/#version-431-for-2206-and-2208","title":"Version 4.3.1 for 22.06 and 22.08","text":"<ul> <li> <p>22.06 uses a newer version of JasPer, but unfortunately WPS is incompatible with     it causing the build of ungrib.exe to fail.</p> <p>So an EasyConfig for an older version of JasPer was also added to the contributed repository.</p> </li> <li> <p>Improved the sanity checks. Adding sanity check commands turns out to be nontrivial     or impossible as it is not possible to simply see if an executable at least loads      and starts correctly using something as <code>--help</code> or <code>--version</code>.</p> <p>The list of tools in the sanity check is based on the  README.md file but the last line adds two tools that were found in the installation directory. Also, plotfmt and plotgrids are not currently included as they require additional dependencies.</p> </li> </ul>","boost":10},{"location":"w/WPS/#version-44-for-use-with-wrf-sfire-w44-s01","title":"Version 4.4 for use with WRF-SFIRE W4.4-S0.1","text":"<ul> <li>EasyConfig contributed by the EPICURE project, based on earlier WPS EasyConfigs.</li> </ul>","boost":10},{"location":"w/WPS/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig WPS-4.3.1-cpeGNU-21.12.eb, with module WPS/4.3.1-cpeGNU-21.12</p> </li> <li> <p>EasyConfig WPS-4.3.1-cpeGNU-22.06.eb, with module WPS/4.3.1-cpeGNU-22.06</p> </li> <li> <p>EasyConfig WPS-4.3.1-cpeGNU-22.08.eb, with module WPS/4.3.1-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"w/WRF/","title":"WRF","text":"<p>[package list]</p>","boost":10},{"location":"w/WRF/#wrf","title":"WRF","text":"","boost":10},{"location":"w/WRF/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig WRF-4.3.3-cpeGNU-21.12-chem.eb, with module WRF/4.3.3-cpeGNU-21.12-chem</p> </li> <li> <p>EasyConfig WRF-4.3.3-cpeGNU-22.06-chem.eb, with module WRF/4.3.3-cpeGNU-22.06-chem</p> </li> <li> <p>EasyConfig WRF-4.3.3-cpeGNU-22.08-chem.eb, with module WRF/4.3.3-cpeGNU-22.08-chem</p> </li> </ul> </li> </ul>","boost":10},{"location":"w/WRF-SFIRE/","title":"WRF-SFIRE","text":"<p>[package list]</p>","boost":10},{"location":"w/WRF-SFIRE/#wrf-sfire","title":"WRF-SFIRE","text":"","boost":10},{"location":"w/WRF-SFIRE/#license-information","title":"License information","text":"<p>The license for WRF-SFIRE can be viewed on the OpenWFM GitHub.</p>","boost":10},{"location":"w/WRF-SFIRE/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider WRF-SFIRE/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig WRF-SFIRE-W4.4-S0.1-cpeGNU-24.03.eb, will build WRF-SFIRE/W4.4-S0.1-cpeGNU-24.03</li> </ul>","boost":10},{"location":"w/WRF-SFIRE/#technical-documentation","title":"Technical documentation","text":"<p>WRF-SFIRE is an open-source code for simulating wildland fire behavior and its interaction with the atmosphere.  It is based on the Weather Research and Forecasting (WRF) model and includes additional modules for fire spread modeling.</p> <ul> <li> <p>WRF-SFIRE website</p> </li> <li> <p>WRF-SFIRE user guide and tutorial</p> </li> </ul>","boost":10},{"location":"w/WRF-SFIRE/#easybuild","title":"EasyBuild","text":"","boost":10},{"location":"w/WRF-SFIRE/#version-w44-so1","title":"Version W4.4-SO.1","text":"<ul> <li>The EasyConfig is developed by LUST and the EPICURE project, based on      an EasyConfig for WRF developed by LUST.</li> </ul>","boost":10},{"location":"w/Wannier90/","title":"Wannier90","text":"<p>[package list]</p>","boost":10},{"location":"w/Wannier90/#wannier90","title":"Wannier90","text":"","boost":10},{"location":"w/Wannier90/#license-information","title":"License information","text":"<p>Wannier90 is released under the  GNU General Public License (v2).</p> <p>Users are asked to cite a publication. Which one depends on the version and can be found on the Wannier90 home page.</p>","boost":10},{"location":"w/Wannier90/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Wannier90/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Wannier90-24Jan2025-cpeGNU-24.03.eb, will build Wannier90/24Jan2025-cpeGNU-24.03</p> </li> <li> <p>EasyConfig Wannier90-3.1.0-cpeGNU-23.09.eb, will build Wannier90/3.1.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig Wannier90-3.1.0-cpeGNU-23.12.eb, will build Wannier90/3.1.0-cpeGNU-23.12</p> </li> <li> <p>EasyConfig Wannier90-3.1.0-cpeGNU-24.03.eb, will build Wannier90/3.1.0-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"w/Wannier90/#technical-documentation","title":"Technical documentation","text":"<p>Wannier website</p>","boost":10},{"location":"w/Wannier90/#general-information","title":"General information","text":"<p>Wannier90 is an open-source code (released under GPLv2) for generating  maximally-localized Wannier functions and using them to compute advanced  electronic properties of materials with high efficiency and accuracy.</p> <ul> <li>Wannier user guide and tutorial</li> </ul>","boost":10},{"location":"w/Wannier90/#known-issues","title":"Known Issues","text":"<ul> <li> <p>There is a problem with the code version 3.1.0 and GCC 12/13 reported      in the wannier GitHub as issue 521     which may result in <code>wannier</code> program faults.</p> <p>For mitigating the issue develop code version (end of Jan 2025) is available with eb file: - Wannier90-24Jan2025-cpeGNU-24.03.eb  </p> </li> </ul>","boost":10},{"location":"w/Wannier90/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li>EasyConfig Wannier90-3.1.0-cpeGNU-21.09.eb, with module Wannier90/3.1.0-cpeGNU-21.09</li> </ul> </li> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig Wannier90-3.1.0-cpeGNU-21.08.eb, with module Wannier90/3.1.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig Wannier90-3.1.0-cpeGNU-21.12.eb, with module Wannier90/3.1.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig Wannier90-3.1.0-cpeGNU-22.06.eb, with module Wannier90/3.1.0-cpeGNU-22.06</p> </li> <li> <p>EasyConfig Wannier90-3.1.0-cpeGNU-22.08.eb, with module Wannier90/3.1.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig Wannier90-3.1.0-cpeGNU-22.12.eb, with module Wannier90/3.1.0-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"w/wget/","title":"wget","text":"<p>[package list]</p>","boost":10},{"location":"w/wget/#wget","title":"wget","text":"","boost":10},{"location":"w/wget/#license-information","title":"License information","text":"<p>GNU Wget is distributed under the  GNU General Public License, a copy of which can also be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the <code>COPYING</code> file can also be found in the <code>$EBROOTWGET/share/licenses/wget</code> subdirectory after loading the module.</p>","boost":10},{"location":"w/wget/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider wget/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>wget/1.21.3-cpeAMD-22.08 (EasyConfig: wget-1.21.3-cpeAMD-22.08.eb)</p> </li> <li> <p>wget/1.21.3-cpeAMD-22.12 (EasyConfig: wget-1.21.3-cpeAMD-22.12.eb)</p> </li> <li> <p>wget/1.21.3-cpeAMD-23.09 (EasyConfig: wget-1.21.3-cpeAMD-23.09.eb)</p> </li> <li> <p>wget/1.21.3-cpeAMD-23.12 (EasyConfig: wget-1.21.3-cpeAMD-23.12.eb)</p> </li> <li> <p>wget/1.21.3-cpeAOCC-22.08 (EasyConfig: wget-1.21.3-cpeAOCC-22.08.eb)</p> </li> <li> <p>wget/1.21.3-cpeAOCC-22.12 (EasyConfig: wget-1.21.3-cpeAOCC-22.12.eb)</p> </li> <li> <p>wget/1.21.3-cpeAOCC-23.09 (EasyConfig: wget-1.21.3-cpeAOCC-23.09.eb)</p> </li> <li> <p>wget/1.21.3-cpeAOCC-23.12 (EasyConfig: wget-1.21.3-cpeAOCC-23.12.eb)</p> </li> <li> <p>wget/1.21.3-cpeCray-22.08 (EasyConfig: wget-1.21.3-cpeCray-22.08.eb)</p> </li> <li> <p>wget/1.21.3-cpeCray-22.12 (EasyConfig: wget-1.21.3-cpeCray-22.12.eb)</p> </li> <li> <p>wget/1.21.3-cpeCray-23.03 (EasyConfig: wget-1.21.3-cpeCray-23.03.eb)</p> </li> <li> <p>wget/1.21.3-cpeCray-23.09 (EasyConfig: wget-1.21.3-cpeCray-23.09.eb)</p> </li> <li> <p>wget/1.21.3-cpeCray-23.12 (EasyConfig: wget-1.21.3-cpeCray-23.12.eb)</p> </li> <li> <p>wget/1.21.3-cpeGNU-22.08 (EasyConfig: wget-1.21.3-cpeGNU-22.08.eb)</p> </li> <li> <p>wget/1.21.3-cpeGNU-22.12 (EasyConfig: wget-1.21.3-cpeGNU-22.12.eb)</p> </li> <li> <p>wget/1.21.3-cpeGNU-23.09 (EasyConfig: wget-1.21.3-cpeGNU-23.09.eb)</p> </li> <li> <p>wget/1.21.3-cpeGNU-23.12 (EasyConfig: wget-1.21.3-cpeGNU-23.12.eb)</p> </li> <li> <p>wget/1.21.4-cpeAMD-24.03 (EasyConfig: wget-1.21.4-cpeAMD-24.03.eb)</p> </li> <li> <p>wget/1.21.4-cpeAOCC-24.03 (EasyConfig: wget-1.21.4-cpeAOCC-24.03.eb)</p> </li> <li> <p>wget/1.21.4-cpeCray-24.03 (EasyConfig: wget-1.21.4-cpeCray-24.03.eb)</p> </li> <li> <p>wget/1.21.4-cpeGNU-24.03 (EasyConfig: wget-1.21.4-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"w/wget/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>GNU wget home page</p> <ul> <li>Download</li> </ul> </li> <li> <p>GNU wget GitLab</p> </li> </ul>","boost":10},{"location":"w/wget/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>wget in the EasyBuilders repository</p> </li> <li> <p>There is no support for wget in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"w/wget/#1211-from-cpe-2106-on","title":"1.21.1 from cpe 21.06 on","text":"<ul> <li> <p>The EasyConfig is derived from the EasyBuilders one with documentation taken from     the University of Antwerpen one.</p> </li> <li> <p>On Cray one of the tests in configure fails on LUMI/C. This is because     the compiler always prints a message that znver3 is not yet supported     for optimisation. There are two possible solutions</p> <ul> <li>Either change some modules so that crape-x86-rome is loaded on all     LUMI nodes until the Cray compiler supports zen3, which is tricky as     it is likely EasyBuild has the last word and that option is the same     for all Cray environments.</li> <li>Disable the warning via extra_cflags which is what we have done here.</li> </ul> </li> </ul>","boost":10},{"location":"w/wget/#version-1212-for-2112","title":"Version 1.21.2 for 21.12","text":"<ul> <li>Trivial port</li> </ul>","boost":10},{"location":"w/wget/#version-1213-for-cpe-2206","title":"Version 1.21.3 for CPE 22.06","text":"<ul> <li> <p>Trivial port</p> </li> <li> <p>Added libpsl as a dependency. We do not use libmetalink though, and it looks     like at least Red Hat linux wants to get rid of libmetalink.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"w/wget/#version-1214-for-lumi2403","title":"Version 1.21.4 for LUMI/24.03","text":"<ul> <li>Trivial port of the EasyConfig for version 1.21.3 in LUMI/23.12.</li> </ul>","boost":10},{"location":"w/wget/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig wget-1.21.1-cpeAMD-21.06.eb, with module wget/1.21.1-cpeAMD-21.06</p> </li> <li> <p>EasyConfig wget-1.21.1-cpeCray-21.06.eb, with module wget/1.21.1-cpeCray-21.06</p> </li> <li> <p>EasyConfig wget-1.21.1-cpeCray-21.08.eb, with module wget/1.21.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig wget-1.21.1-cpeGNU-21.06.eb, with module wget/1.21.1-cpeGNU-21.06</p> </li> <li> <p>EasyConfig wget-1.21.1-cpeGNU-21.08.eb, with module wget/1.21.1-cpeGNU-21.08</p> </li> <li> <p>EasyConfig wget-1.21.2-cpeAOCC-21.12.eb, with module wget/1.21.2-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig wget-1.21.2-cpeCray-21.12.eb, with module wget/1.21.2-cpeCray-21.12</p> </li> <li> <p>EasyConfig wget-1.21.2-cpeGNU-21.12.eb, with module wget/1.21.2-cpeGNU-21.12</p> </li> <li> <p>EasyConfig wget-1.21.3-cpeAOCC-22.06.eb, with module wget/1.21.3-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig wget-1.21.3-cpeCray-22.06.eb, with module wget/1.21.3-cpeCray-22.06</p> </li> <li> <p>EasyConfig wget-1.21.3-cpeGNU-22.06.eb, with module wget/1.21.3-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"w/wheel/","title":"wheel","text":"<p>[package list]</p>","boost":10},{"location":"w/wheel/#wheel","title":"wheel","text":"","boost":10},{"location":"w/wheel/#license-information","title":"License information","text":"<p>The wheel Python package is distributed under the MIT License,  a copy of which can be found in the LICENSE.txt file in the source repository.</p>","boost":10},{"location":"w/wheel/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider wheel/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig wheel-0.38.4-cpeCray-23.03-cray-python3.9.eb, will build wheel/0.38.4-cpeCray-23.03-cray-python3.9</li> </ul>","boost":10},{"location":"w/wheel/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>wheel Documentation</p> <ul> <li>PEP427</li> </ul> </li> <li> <p>wheel on GitHub</p> </li> </ul>","boost":10},{"location":"w/wheel/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>wheel support in the EasyBuilders repository</p> </li> <li> <p>wheel support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"w/wheel/#version-0371-for-cpe-2208","title":"Version 0.37.1 for CPE 22.08","text":"<p>Created from scratch for LUMI.</p>","boost":10},{"location":"w/wheel/#version-0384-for-cpe-2212","title":"Version 0.38.4 for CPE 22.12","text":"<p>Created from scratch for LUMI.</p>","boost":10},{"location":"w/wheel/#version-0384-for-cpecray-2303","title":"Version 0.38.4 for cpeCray 23.03","text":"<p>Created from scratch for LUMI.</p>","boost":10},{"location":"w/wheel/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig wheel-0.37.0-cpeGNU-22.08.eb, with module wheel/0.37.0-cpeGNU-22.08</p> </li> <li> <p>EasyConfig wheel-0.37.1-cpeAMD-22.08-cray-python3.9.eb, with module wheel/0.37.1-cpeAMD-22.08-cray-python3.9</p> </li> <li> <p>EasyConfig wheel-0.37.1-cpeCray-22.08-cray-python3.9.eb, with module wheel/0.37.1-cpeCray-22.08-cray-python3.9</p> </li> <li> <p>EasyConfig wheel-0.37.1-cpeGNU-22.08-cray-python3.9.eb, with module wheel/0.37.1-cpeGNU-22.08-cray-python3.9</p> </li> <li> <p>EasyConfig wheel-0.38.4-cpeAMD-22.12-cray-python3.9.eb, with module wheel/0.38.4-cpeAMD-22.12-cray-python3.9</p> </li> <li> <p>EasyConfig wheel-0.38.4-cpeCray-22.12-cray-python3.9.eb, with module wheel/0.38.4-cpeCray-22.12-cray-python3.9</p> </li> <li> <p>EasyConfig wheel-0.38.4-cpeGNU-22.12-cray-python3.9.eb, with module wheel/0.38.4-cpeGNU-22.12-cray-python3.9</p> </li> </ul> </li> </ul>","boost":10},{"location":"x/X11/","title":"X11","text":"<p>[package list]</p>","boost":10},{"location":"x/X11/#x11","title":"X11","text":"","boost":10},{"location":"x/X11/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider X11/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>X11/22.08-cpeAMD-22.08 (EasyConfig: X11-22.08-cpeAMD-22.08.eb)</p> </li> <li> <p>X11/22.08-cpeAOCC-22.08 (EasyConfig: X11-22.08-cpeAOCC-22.08.eb)</p> </li> <li> <p>X11/22.08-cpeCray-22.08 (EasyConfig: X11-22.08-cpeCray-22.08.eb)</p> </li> <li> <p>X11/22.08-cpeGNU-22.08 (EasyConfig: X11-22.08-cpeGNU-22.08.eb)</p> </li> <li> <p>X11/22.12-cpeAMD-22.12 (EasyConfig: X11-22.12-cpeAMD-22.12.eb)</p> </li> <li> <p>X11/22.12-cpeAOCC-22.12 (EasyConfig: X11-22.12-cpeAOCC-22.12.eb)</p> </li> <li> <p>X11/22.12-cpeCray-22.12 (EasyConfig: X11-22.12-cpeCray-22.12.eb)</p> </li> <li> <p>X11/22.12-cpeGNU-22.12 (EasyConfig: X11-22.12-cpeGNU-22.12.eb)</p> </li> <li> <p>X11/23.03-cpeCray-23.03 (EasyConfig: X11-23.03-cpeCray-23.03.eb)</p> </li> <li> <p>X11/23.09-cpeAMD-23.09 (EasyConfig: X11-23.09-cpeAMD-23.09.eb)</p> </li> <li> <p>X11/23.09-cpeAOCC-23.09 (EasyConfig: X11-23.09-cpeAOCC-23.09.eb)</p> </li> <li> <p>X11/23.09-cpeCray-23.09 (EasyConfig: X11-23.09-cpeCray-23.09.eb)</p> </li> <li> <p>X11/23.09-cpeGNU-23.09 (EasyConfig: X11-23.09-cpeGNU-23.09.eb)</p> </li> <li> <p>X11/23.12-cpeAMD-23.12 (EasyConfig: X11-23.12-cpeAMD-23.12.eb)</p> </li> <li> <p>X11/23.12-cpeAOCC-23.12 (EasyConfig: X11-23.12-cpeAOCC-23.12.eb)</p> </li> <li> <p>X11/23.12-cpeCray-23.12 (EasyConfig: X11-23.12-cpeCray-23.12.eb)</p> </li> <li> <p>X11/23.12-cpeGNU-23.12 (EasyConfig: X11-23.12-cpeGNU-23.12.eb)</p> </li> <li> <p>X11/24.03-cpeAMD-24.03 (EasyConfig: X11-24.03-cpeAMD-24.03.eb)</p> </li> <li> <p>X11/24.03-cpeAOCC-24.03 (EasyConfig: X11-24.03-cpeAOCC-24.03.eb)</p> </li> <li> <p>X11/24.03-cpeCray-24.03 (EasyConfig: X11-24.03-cpeCray-24.03.eb)</p> </li> <li> <p>X11/24.03-cpeGNU-24.03 (EasyConfig: X11-24.03-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"x/X11/#technical-documentation","title":"Technical documentation","text":"<p>This is a bundle of X11 tools provided by EasyBuild.</p>","boost":10},{"location":"x/X11/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>X11 bundle in the EasyBuilders repository</p> </li> <li> <p>The X11 bundle is not in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"x/X11/#own-components-in-some-version","title":"Own components in some version","text":"<ul> <li> <p>libXaw3d</p> </li> <li> <p>libdrm</p> </li> <li> <p>DBus</p> </li> <li> <p>xprop</p> </li> <li> <p>xdpyinfo</p> </li> <li> <p>x11perf</p> </li> <li> <p>xauth</p> </li> </ul>","boost":10},{"location":"x/X11/#bundle-for-2106","title":"Bundle for 21.06","text":"<ul> <li>The bundle is taken from the 20210802 one from the EasyBuilders repository.     We did add some additional packages to save on dependencies for some other packages:     xprop, ldrm and DBus.</li> </ul>","boost":10},{"location":"x/X11/#bundle-for-2108","title":"Bundle for 21.08","text":"<ul> <li> <p>Same software versions as for 21.06, we did not check them again.</p> </li> <li> <p>However, some modules were added with a library that was needed     for some contributed software, and some tools to quickly check if     an X11 connection is functional such as xdpyinfo and x11perf.     xauth was also added in case this would still be useful for some     users.</p> </li> </ul>","boost":10},{"location":"x/X11/#bundle-for-2112","title":"Bundle for 21.12","text":"<ul> <li>Components taken from the 2021b bundle with own additions at the end.</li> </ul>","boost":10},{"location":"x/X11/#bundle-for-2206-and-2208","title":"Bundle for 22.06 and 22.08","text":"<ul> <li>Started from the 21.12 bundle, but updated the packages with those of the     GCCcore/11.3.0 - 2022a bundle. Also updated the local additions.</li> </ul>","boost":10},{"location":"x/X11/#bundle-for-2212-and-2303","title":"Bundle for 22.12 and 23.03","text":"<ul> <li> <p>Started from the 22.08 bundle, but updated the packages with those of the     GCCcore/12.2.0 - 2022b bundle. Also updated the local additions.</p> </li> <li> <p>Added xterm to the bundle.</p> </li> </ul>","boost":10},{"location":"x/X11/#bundle-for-2309","title":"Bundle for 23.09","text":"<ul> <li> <p>Regular packages taken from 2023a</p> </li> <li> <p>Updated the own additions</p> <ul> <li>DBUS 1.15.8 failed to configure so stuck to the older version.</li> </ul> </li> </ul>","boost":10},{"location":"x/X11/#bundle-for-2312","title":"Bundle for 23.12","text":"<ul> <li>Copy of the one for 23.09.</li> </ul>","boost":10},{"location":"x/X11/#bundle-for-2403","title":"Bundle for 24.03","text":"<ul> <li> <p>Regular packages taken from 2023b</p> <ul> <li>Had to fall back to xkbcommon 1.5 as somehow (could be due to an old     meson) 1.6 tried to install some files in system directories.</li> </ul> </li> <li> <p>Updated the own additions</p> <ul> <li>DBUS was still at 1.15.8 so didn't try again.</li> </ul> </li> <li> <p>xterm missing in the cpeGNU version due to build problems.</p> </li> </ul>","boost":10},{"location":"x/X11/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig X11-21.06-cpeAMD-21.06.eb, with module X11/21.06-cpeAMD-21.06</p> </li> <li> <p>EasyConfig X11-21.06-cpeCray-21.06.eb, with module X11/21.06-cpeCray-21.06</p> </li> <li> <p>EasyConfig X11-21.06-cpeGNU-21.06.eb, with module X11/21.06-cpeGNU-21.06</p> </li> <li> <p>EasyConfig X11-21.08-cpeCray-21.08.eb, with module X11/21.08-cpeCray-21.08</p> </li> <li> <p>EasyConfig X11-21.08-cpeGNU-21.08.eb, with module X11/21.08-cpeGNU-21.08</p> </li> <li> <p>EasyConfig X11-21.12-cpeAOCC-21.12.eb, with module X11/21.12-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig X11-21.12-cpeCray-21.12.eb, with module X11/21.12-cpeCray-21.12</p> </li> <li> <p>EasyConfig X11-21.12-cpeGNU-21.12.eb, with module X11/21.12-cpeGNU-21.12</p> </li> <li> <p>EasyConfig X11-22.06-cpeAOCC-22.06.eb, with module X11/22.06-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig X11-22.06-cpeCray-22.06.eb, with module X11/22.06-cpeCray-22.06</p> </li> <li> <p>EasyConfig X11-22.06-cpeGNU-22.06.eb, with module X11/22.06-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"x/XZ/","title":"XZ","text":"<p>[package list]</p>","boost":10},{"location":"x/XZ/#xz","title":"XZ","text":"","boost":10},{"location":"x/XZ/#license-information","title":"License information","text":"<p>XZ Utils licensing is somewhat complicated as different components have different licenses. See the COPYING file in the source distribution.</p> <p>From LUMI/23.12 on, this file and various files that it refers to, can also be found  in the <code>$EBROOTXZ/share/licenses/XZ</code> subdirectory after loading the module.</p>","boost":10},{"location":"x/XZ/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider XZ/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>XZ/5.2.5-cpeAMD-22.08 (EasyConfig: XZ-5.2.5-cpeAMD-22.08.eb)</p> </li> <li> <p>XZ/5.2.5-cpeAOCC-22.08 (EasyConfig: XZ-5.2.5-cpeAOCC-22.08.eb)</p> </li> <li> <p>XZ/5.2.5-cpeCray-22.08 (EasyConfig: XZ-5.2.5-cpeCray-22.08.eb)</p> </li> <li> <p>XZ/5.2.5-cpeGNU-22.08 (EasyConfig: XZ-5.2.5-cpeGNU-22.08.eb)</p> </li> <li> <p>XZ/5.4.2-cpeAMD-22.12 (EasyConfig: XZ-5.4.2-cpeAMD-22.12.eb)</p> </li> <li> <p>XZ/5.4.2-cpeAMD-23.09 (EasyConfig: XZ-5.4.2-cpeAMD-23.09.eb)</p> </li> <li> <p>XZ/5.4.2-cpeAMD-23.12 (EasyConfig: XZ-5.4.2-cpeAMD-23.12.eb)</p> </li> <li> <p>XZ/5.4.2-cpeAOCC-22.12 (EasyConfig: XZ-5.4.2-cpeAOCC-22.12.eb)</p> </li> <li> <p>XZ/5.4.2-cpeAOCC-23.09 (EasyConfig: XZ-5.4.2-cpeAOCC-23.09.eb)</p> </li> <li> <p>XZ/5.4.2-cpeAOCC-23.12 (EasyConfig: XZ-5.4.2-cpeAOCC-23.12.eb)</p> </li> <li> <p>XZ/5.4.2-cpeCray-22.12 (EasyConfig: XZ-5.4.2-cpeCray-22.12.eb)</p> </li> <li> <p>XZ/5.4.2-cpeCray-23.03 (EasyConfig: XZ-5.4.2-cpeCray-23.03.eb)</p> </li> <li> <p>XZ/5.4.2-cpeCray-23.09 (EasyConfig: XZ-5.4.2-cpeCray-23.09.eb)</p> </li> <li> <p>XZ/5.4.2-cpeCray-23.12 (EasyConfig: XZ-5.4.2-cpeCray-23.12.eb)</p> </li> <li> <p>XZ/5.4.2-cpeGNU-22.12 (EasyConfig: XZ-5.4.2-cpeGNU-22.12.eb)</p> </li> <li> <p>XZ/5.4.2-cpeGNU-23.09 (EasyConfig: XZ-5.4.2-cpeGNU-23.09.eb)</p> </li> <li> <p>XZ/5.4.2-cpeGNU-23.12 (EasyConfig: XZ-5.4.2-cpeGNU-23.12.eb)</p> </li> <li> <p>XZ/5.4.4-cpeAMD-24.03 (EasyConfig: XZ-5.4.4-cpeAMD-24.03.eb)</p> </li> <li> <p>XZ/5.4.4-cpeAOCC-24.03 (EasyConfig: XZ-5.4.4-cpeAOCC-24.03.eb)</p> </li> <li> <p>XZ/5.4.4-cpeCray-24.03 (EasyConfig: XZ-5.4.4-cpeCray-24.03.eb)</p> </li> <li> <p>XZ/5.4.4-cpeGNU-24.03 (EasyConfig: XZ-5.4.4-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"x/XZ/#technical-documentation","title":"Technical documentation","text":"<ul> <li>XZ home page</li> </ul>","boost":10},{"location":"x/XZ/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>XZ in the EasyBuilders repository</p> </li> <li> <p>XZ in the CSCS repository</p> </li> </ul>","boost":10},{"location":"x/XZ/#version-525-from-cpe-2106-on","title":"Version 5.2.5 from CPE 21.06 on","text":"<ul> <li>Standard EasyConfig derived from the EasyBuilders one but with additional     documentation taken from the University of Antwerpen EasyConfig files.</li> </ul>","boost":10},{"location":"x/XZ/#version-542-from-cpe-2212-on","title":"Version 5.4.2 from CPE 22.12 on","text":"<ul> <li> <p>Trivial version bump of the 5.2.5 EasyConfig with removal of the patch as     we assume the bug will be fixed by now.</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"x/XZ/#version-544-for-lumi2403","title":"Version 5.4.4 for LUMI/24.03","text":"<ul> <li> <p>Trivial version bump of the EasyConfig for 5.4.2 in LUMI/23.12.</p> </li> <li> <p>gettext seems to be a build dependency only, so moved it.</p> </li> </ul>","boost":10},{"location":"x/XZ/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig XZ-5.2.5-cpeAMD-21.06.eb, with module XZ/5.2.5-cpeAMD-21.06</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeAOCC-21.12.eb, with module XZ/5.2.5-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeAOCC-22.06.eb, with module XZ/5.2.5-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeCray-21.06.eb, with module XZ/5.2.5-cpeCray-21.06</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeCray-21.08.eb, with module XZ/5.2.5-cpeCray-21.08</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeCray-21.12.eb, with module XZ/5.2.5-cpeCray-21.12</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeCray-22.06.eb, with module XZ/5.2.5-cpeCray-22.06</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeGNU-21.06.eb, with module XZ/5.2.5-cpeGNU-21.06</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeGNU-21.08.eb, with module XZ/5.2.5-cpeGNU-21.08</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeGNU-21.12.eb, with module XZ/5.2.5-cpeGNU-21.12</p> </li> <li> <p>EasyConfig XZ-5.2.5-cpeGNU-22.06.eb, with module XZ/5.2.5-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"x/Xerces-C%2B%2B/","title":"Xerces-C++","text":"<p>[package list]</p>","boost":10},{"location":"x/Xerces-C%2B%2B/#xerces-c","title":"Xerces-C++","text":"","boost":10},{"location":"x/Xerces-C%2B%2B/#license-information","title":"License information","text":"<p>Xerces-C++ is licensed under the Apache License version 2.0.</p> <p>After installation and loading of the module, a copy of the license is also available  in the <code>$EBROOTXERCESMINCPLUSPLUS/share/licenses/Xerces-C++</code> subdirectory.</p>","boost":10},{"location":"x/Xerces-C%2B%2B/#user-documentation","title":"User documentation","text":"","boost":10},{"location":"x/Xerces-C%2B%2B/#what-is-xercer-c","title":"What is Xercer-C++?","text":"<p>Xerces-C++ is a validating XML parser written in a portable subset of C++. Xerces-C++ makes it easy to give your application the ability to read and write XML data. A shared library is provided for parsing, generating, manipulating, and validating XML documents using the DOM, SAX, and SAX2 APIs.</p>","boost":10},{"location":"x/Xerces-C%2B%2B/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Xerces-C++/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Xerces-C++-3.2.5-cpeGNU-23.09.eb, will build Xerces-C++/3.2.5-cpeGNU-23.09</p> </li> <li> <p>EasyConfig Xerces-C++-3.2.5-cpeGNU-24.03.eb, will build Xerces-C++/3.2.5-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"x/Xerces-C%2B%2B/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Xerces-C++ home page</p> <ul> <li>Release info</li> </ul> </li> </ul>","boost":10},{"location":"x/Xerces-C%2B%2B/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for Xerces-C++ in the EasyBuilders repository</p> </li> <li> <p>Support for Xerces-C++ in the CSCS repository</p> </li> <li> <p>Support for Xerces-C++ in Spack: package xerces-c</p> </li> </ul>","boost":10},{"location":"x/Xerces-C%2B%2B/#version-325-for-2309","title":"Version 3.2.5 for 23.09","text":"<ul> <li> <p>The EasyConfig is derived from the one in the EasyBuilders repository.</p> </li> <li> <p>Checked to also run some commands to test if they load OK, but as the     commands don't have a flag to request the version and as <code>-h</code>     also returns an error code, there is no easy way to check them.</p> </li> </ul>","boost":10},{"location":"x/x264/","title":"x264","text":"<p>[package list]</p>","boost":10},{"location":"x/x264/#x264","title":"x264","text":"","boost":10},{"location":"x/x264/#license-information","title":"License information","text":"<p>x264 is distributed under the GNU General Public License version 2 (with commercial licenses available for use that violates the GPL). A copy of the GPL is also provided in the COPYING file in the source repository.</p> <p>From LUMI/23.03 on, this information can also be found in  <code>$EBROOTX264/share/licenses/x264</code> after loading the module.</p>","boost":10},{"location":"x/x264/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider x264/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>x264/20210613-cpeAMD-22.08 (EasyConfig: x264-20210613-cpeAMD-22.08.eb)</p> </li> <li> <p>x264/20210613-cpeAOCC-22.08 (EasyConfig: x264-20210613-cpeAOCC-22.08.eb)</p> </li> <li> <p>x264/20210613-cpeCray-22.08 (EasyConfig: x264-20210613-cpeCray-22.08.eb)</p> </li> <li> <p>x264/20210613-cpeGNU-22.08 (EasyConfig: x264-20210613-cpeGNU-22.08.eb)</p> </li> <li> <p>x264/20230226-cpeAMD-22.12 (EasyConfig: x264-20230226-cpeAMD-22.12.eb)</p> </li> <li> <p>x264/20230226-cpeAMD-23.09 (EasyConfig: x264-20230226-cpeAMD-23.09.eb)</p> </li> <li> <p>x264/20230226-cpeAMD-23.12 (EasyConfig: x264-20230226-cpeAMD-23.12.eb)</p> </li> <li> <p>x264/20230226-cpeAOCC-22.12 (EasyConfig: x264-20230226-cpeAOCC-22.12.eb)</p> </li> <li> <p>x264/20230226-cpeAOCC-23.09 (EasyConfig: x264-20230226-cpeAOCC-23.09.eb)</p> </li> <li> <p>x264/20230226-cpeAOCC-23.12 (EasyConfig: x264-20230226-cpeAOCC-23.12.eb)</p> </li> <li> <p>x264/20230226-cpeCray-22.12 (EasyConfig: x264-20230226-cpeCray-22.12.eb)</p> </li> <li> <p>x264/20230226-cpeCray-23.03 (EasyConfig: x264-20230226-cpeCray-23.03.eb)</p> </li> <li> <p>x264/20230226-cpeCray-23.09 (EasyConfig: x264-20230226-cpeCray-23.09.eb)</p> </li> <li> <p>x264/20230226-cpeCray-23.12 (EasyConfig: x264-20230226-cpeCray-23.12.eb)</p> </li> <li> <p>x264/20230226-cpeGNU-22.12 (EasyConfig: x264-20230226-cpeGNU-22.12.eb)</p> </li> <li> <p>x264/20230226-cpeGNU-23.09 (EasyConfig: x264-20230226-cpeGNU-23.09.eb)</p> </li> <li> <p>x264/20230226-cpeGNU-23.12 (EasyConfig: x264-20230226-cpeGNU-23.12.eb)</p> </li> <li> <p>x264/20231019-cpeAMD-24.03 (EasyConfig: x264-20231019-cpeAMD-24.03.eb)</p> </li> <li> <p>x264/20231019-cpeAOCC-24.03 (EasyConfig: x264-20231019-cpeAOCC-24.03.eb)</p> </li> <li> <p>x264/20231019-cpeCray-24.03 (EasyConfig: x264-20231019-cpeCray-24.03.eb)</p> </li> <li> <p>x264/20231019-cpeGNU-24.03 (EasyConfig: x264-20231019-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"x/x264/#technical-documentation","title":"Technical documentation","text":"<p>The distribution of this code is a mess with a GitLab repository without tags and unclear versions on the home page so we simply follow the state in EasyBuild.</p> <ul> <li> <p>x264 home page</p> </li> <li> <p>x264 GitLab</p> </li> </ul>","boost":10},{"location":"x/x264/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>x264 support in the EasyBuilders repository</p> </li> <li> <p>x264 support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"x/x264/#version-20210414-for-cpe-2106","title":"Version 20210414 for CPE 21.06","text":"<ul> <li>The EasyConfig is derived from the EasyBuilders one with some elements taken     from the University of Antwerpen one.</li> </ul>","boost":10},{"location":"x/x264/#version-20230226-from-cpe-2212-on","title":"Version 20230226 from CPE 22.12 on","text":"<ul> <li>Trivial port of the EasyConfig for 20210414, but with a change to the location     where we copy the licensing information.</li> </ul>","boost":10},{"location":"x/x264/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig x264-20210414-cpeAMD-21.06.eb, with module x264/20210414-cpeAMD-21.06</p> </li> <li> <p>EasyConfig x264-20210414-cpeCray-21.06.eb, with module x264/20210414-cpeCray-21.06</p> </li> <li> <p>EasyConfig x264-20210414-cpeCray-21.08.eb, with module x264/20210414-cpeCray-21.08</p> </li> <li> <p>EasyConfig x264-20210414-cpeGNU-21.06.eb, with module x264/20210414-cpeGNU-21.06</p> </li> <li> <p>EasyConfig x264-20210414-cpeGNU-21.08.eb, with module x264/20210414-cpeGNU-21.08</p> </li> <li> <p>EasyConfig x264-20210613-cpeAOCC-21.12.eb, with module x264/20210613-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig x264-20210613-cpeAOCC-22.06.eb, with module x264/20210613-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig x264-20210613-cpeCray-21.12.eb, with module x264/20210613-cpeCray-21.12</p> </li> <li> <p>EasyConfig x264-20210613-cpeCray-22.06.eb, with module x264/20210613-cpeCray-22.06</p> </li> <li> <p>EasyConfig x264-20210613-cpeGNU-21.12.eb, with module x264/20210613-cpeGNU-21.12</p> </li> <li> <p>EasyConfig x264-20210613-cpeGNU-22.06.eb, with module x264/20210613-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"x/x265/","title":"x265","text":"<p>[package list]</p>","boost":10},{"location":"x/x265/#x265","title":"x265","text":"","boost":10},{"location":"x/x265/#license-information","title":"License information","text":"<p>x265 is distributed under the GNU General Public License version 2 (with commercial licenses available for use that violates the GPL). A copy of the GPL is also provided in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, the COPYING file can also be found in the directory <code>$EBROOTX265/share/licenses/x265</code> after loading the module.</p>","boost":10},{"location":"x/x265/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider x265/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>x265/3.5-cpeAMD-22.08 (EasyConfig: x265-3.5-cpeAMD-22.08.eb)</p> </li> <li> <p>x265/3.5-cpeAMD-22.12 (EasyConfig: x265-3.5-cpeAMD-22.12.eb)</p> </li> <li> <p>x265/3.5-cpeAMD-23.09 (EasyConfig: x265-3.5-cpeAMD-23.09.eb)</p> </li> <li> <p>x265/3.5-cpeAMD-23.12 (EasyConfig: x265-3.5-cpeAMD-23.12.eb)</p> </li> <li> <p>x265/3.5-cpeAMD-24.03 (EasyConfig: x265-3.5-cpeAMD-24.03.eb)</p> </li> <li> <p>x265/3.5-cpeAOCC-22.08 (EasyConfig: x265-3.5-cpeAOCC-22.08.eb)</p> </li> <li> <p>x265/3.5-cpeAOCC-22.12 (EasyConfig: x265-3.5-cpeAOCC-22.12.eb)</p> </li> <li> <p>x265/3.5-cpeAOCC-23.09 (EasyConfig: x265-3.5-cpeAOCC-23.09.eb)</p> </li> <li> <p>x265/3.5-cpeAOCC-23.12 (EasyConfig: x265-3.5-cpeAOCC-23.12.eb)</p> </li> <li> <p>x265/3.5-cpeAOCC-24.03 (EasyConfig: x265-3.5-cpeAOCC-24.03.eb)</p> </li> <li> <p>x265/3.5-cpeCray-22.08 (EasyConfig: x265-3.5-cpeCray-22.08.eb)</p> </li> <li> <p>x265/3.5-cpeCray-22.12 (EasyConfig: x265-3.5-cpeCray-22.12.eb)</p> </li> <li> <p>x265/3.5-cpeCray-23.03 (EasyConfig: x265-3.5-cpeCray-23.03.eb)</p> </li> <li> <p>x265/3.5-cpeCray-23.09 (EasyConfig: x265-3.5-cpeCray-23.09.eb)</p> </li> <li> <p>x265/3.5-cpeCray-23.12 (EasyConfig: x265-3.5-cpeCray-23.12.eb)</p> </li> <li> <p>x265/3.5-cpeCray-24.03 (EasyConfig: x265-3.5-cpeCray-24.03.eb)</p> </li> <li> <p>x265/3.5-cpeGNU-22.08 (EasyConfig: x265-3.5-cpeGNU-22.08.eb)</p> </li> <li> <p>x265/3.5-cpeGNU-22.12 (EasyConfig: x265-3.5-cpeGNU-22.12.eb)</p> </li> <li> <p>x265/3.5-cpeGNU-23.09 (EasyConfig: x265-3.5-cpeGNU-23.09.eb)</p> </li> <li> <p>x265/3.5-cpeGNU-23.12 (EasyConfig: x265-3.5-cpeGNU-23.12.eb)</p> </li> <li> <p>x265/3.5-cpeGNU-24.03 (EasyConfig: x265-3.5-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"x/x265/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>x265 home page - It looks likes it misses     some updates, the wiki mentioned below may be the better choice?</p> </li> <li> <p>x265 on BitBucket</p> <ul> <li> <p>x265 wiki on BitBucket</p> </li> <li> <p>BitBucket downloads</p> </li> </ul> </li> </ul>","boost":10},{"location":"x/x265/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>x265 support in the EasyBuilders repository</p> </li> <li> <p>x265 support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"x/x265/#version-35-from-cpe-2106-on","title":"Version 3.5 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is a mix of the University of Antwerpen one and the     EasyBuilders one.</p> <ul> <li>We did delete the numactl-devel OS dependency used in Antwerpen even     though it may have a positive influence on the performance.</li> </ul> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"x/x265/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig x265-3.5-cpeAMD-21.06.eb, with module x265/3.5-cpeAMD-21.06</p> </li> <li> <p>EasyConfig x265-3.5-cpeAOCC-21.12.eb, with module x265/3.5-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig x265-3.5-cpeAOCC-22.06.eb, with module x265/3.5-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig x265-3.5-cpeCray-21.06.eb, with module x265/3.5-cpeCray-21.06</p> </li> <li> <p>EasyConfig x265-3.5-cpeCray-21.08.eb, with module x265/3.5-cpeCray-21.08</p> </li> <li> <p>EasyConfig x265-3.5-cpeCray-21.12.eb, with module x265/3.5-cpeCray-21.12</p> </li> <li> <p>EasyConfig x265-3.5-cpeCray-22.06.eb, with module x265/3.5-cpeCray-22.06</p> </li> <li> <p>EasyConfig x265-3.5-cpeGNU-21.06.eb, with module x265/3.5-cpeGNU-21.06</p> </li> <li> <p>EasyConfig x265-3.5-cpeGNU-21.08.eb, with module x265/3.5-cpeGNU-21.08</p> </li> <li> <p>EasyConfig x265-3.5-cpeGNU-21.12.eb, with module x265/3.5-cpeGNU-21.12</p> </li> <li> <p>EasyConfig x265-3.5-cpeGNU-22.06.eb, with module x265/3.5-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"x/xorg-macros/","title":"xorg-macros","text":"<p>[package list]</p>","boost":10},{"location":"x/xorg-macros/#xorg-macros","title":"xorg-macros","text":"","boost":10},{"location":"x/xorg-macros/#license-information","title":"License information","text":"<p>See the COPYING file in the sources for the license.</p>","boost":10},{"location":"x/xorg-macros/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider xorg-macros/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>xorg-macros/1.19.3 (EasyConfig: xorg-macros-1.19.3.eb)</p> </li> <li> <p>xorg-macros/1.20.0 (EasyConfig: xorg-macros-1.20.0.eb)</p> </li> </ul>","boost":10},{"location":"x/xorg-macros/#technical-documentation","title":"Technical documentation","text":"<p>This is a set of autoconf macros used by the configure.ac scripts in other Xorg modular packages, and is needed to generate new versions of their configure scripts with autoconf.</p> <ul> <li>Home page</li> </ul>","boost":10},{"location":"x/xorg-macros/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>xorg-macros support in the EasyBuilders repository</p> </li> <li> <p>xorg-macros support in the CSCS repository</p> </li> </ul>","boost":10},{"location":"x/xorg-macros/#1193-from-cpe-2106-on","title":"1.19.3 from CPE 21.06 on","text":"<ul> <li> <p>The EasyConfig is derived from the EasyBuilders one. However, since this     package is really just a bunch of autotools macros, we moved it to the     SYSTEM toolchain (where autoconf also resides in buildtools). There is     absolutely no reason to have separate versions for all Cray toolchains     except that it is slightly easier to specify the dependency.</p> </li> <li> <p>Install in partition/common as it is fully processor-independent and     only uses buildtools during the installation which is also installed in     partition/common.</p> </li> </ul>","boost":10},{"location":"x/xorg-macros/#version-1200-from-cpe-2309-on","title":"Version 1.20.0 from CPE 23.09 on","text":"<ul> <li>Trivial version bump of our 1.19.3 EasyConfig.</li> </ul>","boost":10},{"location":"x/xorg-macros/#version-1201-from-cpe-2403-on","title":"Version 1.20.1 from CPE 24.03 on","text":"<ul> <li>Trivial version bump of our 1.20.0 EasyConfig.</li> </ul>","boost":10},{"location":"x/xterm/","title":"xterm","text":"<p>[package list]</p>","boost":10},{"location":"x/xterm/#xterm","title":"xterm","text":"","boost":10},{"location":"x/xterm/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig xterm-372j-cpeAOCC-22.08.eb, with module xterm/372j-cpeAOCC-22.08</p> </li> <li> <p>EasyConfig xterm-372j-cpeCray-22.06.eb, with module xterm/372j-cpeCray-22.06</p> </li> <li> <p>EasyConfig xterm-372j-cpeCray-22.08.eb, with module xterm/372j-cpeCray-22.08</p> </li> <li> <p>EasyConfig xterm-372j-cpeGNU-22.06.eb, with module xterm/372j-cpeGNU-22.06</p> </li> <li> <p>EasyConfig xterm-372j-cpeGNU-22.08.eb, with module xterm/372j-cpeGNU-22.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"y/YAXT/","title":"YAXT","text":"<p>[package list]</p>","boost":10},{"location":"y/YAXT/#yaxt","title":"YAXT","text":"","boost":10},{"location":"y/YAXT/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are not directly available on the system for installation. They are however still a useful source of information if you want to port the the install recipe to the currently available environments on LUMI.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig YAXT-0.9.1-cpeCray-21.08.eb, with module YAXT/0.9.1-cpeCray-21.08</p> </li> <li> <p>EasyConfig YAXT-0.9.1-cpeGNU-21.08.eb, with module YAXT/0.9.1-cpeGNU-21.08</p> </li> </ul> </li> </ul>","boost":10},{"location":"y/Yambo/","title":"Yambo","text":"<p>[package list]</p>","boost":10},{"location":"y/Yambo/#yambo","title":"Yambo","text":"","boost":10},{"location":"y/Yambo/#license-information","title":"License information","text":"<p>Yambo is licensed under the GNU General Public License v2.0. The license information can also be found in the <code>COPYING</code> file in the GitHub repository.</p>","boost":10},{"location":"y/Yambo/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Yambo/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig Yambo-5.2.3-cpeGNU-23.09.eb, will build Yambo/5.2.3-cpeGNU-23.09</p> </li> <li> <p>EasyConfig Yambo-5.2.3-cpeGNU-24.03.eb, will build Yambo/5.2.3-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"y/Yambo/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>Yambo web site</p> </li> <li> <p>Yambo on GitHub</p> <ul> <li> <p>GitHub releases</p> </li> <li> <p>GitHub tags for subreleases</p> </li> </ul> </li> </ul>","boost":10},{"location":"y/Yambo/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>Support for Yambo in the EasyBuilders repository</p> </li> <li> <p>Support for Yambo in the CSCS repository</p> </li> <li> <p>Spack support for Yambo</p> </li> </ul>","boost":10},{"location":"y/Yambo/#523-for-cpe-2309-cpu-only","title":"5.2.3 for CPE 23.09, CPU-only","text":"<ul> <li>The EasyConfig is mostly a LUST development.</li> </ul>","boost":10},{"location":"y/yaml-cpp/","title":"yaml-cpp","text":"<p>[package list]</p>","boost":10},{"location":"y/yaml-cpp/#yaml-cpp","title":"yaml-cpp","text":"","boost":10},{"location":"y/yaml-cpp/#license-information","title":"License information","text":"<p>The yaml-cpp package is licensed under an MIT license a copy of which is available in the LICENSE file in the yaml-cpp GitHub repository.</p> <p>From LUMI/24,03 on, the license information can also be found in <code>$EBROOTYAMLMINCPP/share/licenses/yaml-cpp</code> after installing and loading the module.</p>","boost":10},{"location":"y/yaml-cpp/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider yaml-cpp/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig yaml-cpp-0.8.0-cpeGNU-24.03.eb, will build yaml-cpp/0.8.0-cpeGNU-24.03</li> </ul>","boost":10},{"location":"y/yaml-cpp/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>yaml-cpp on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"y/yaml-cpp/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>yaml-cpp in the EasyBuilders repository</p> </li> <li> <p>There is no support for yaml-cpp in the CSCS repository.</p> </li> </ul>","boost":10},{"location":"y/yaml-cpp/#version-070-for-cpegnu-2212","title":"Version 0.7.0 for cpeGNU 22.12","text":"<ul> <li>This is a direct port of the EasyBuilders recipe.</li> </ul>","boost":10},{"location":"y/yaml-cpp/#version-080-for-cpe-2403","title":"Version 0.8.0 for CPE 24.03","text":"<ul> <li> <p>Trivial port of the 0.7.0 recipe.</p> </li> <li> <p>Added the license information in May 2025.</p> </li> </ul>","boost":10},{"location":"y/yaml-cpp/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig yaml-cpp-0.7.0-cpeGNU-22.12.eb, with module yaml-cpp/0.7.0-cpeGNU-22.12</li> </ul> </li> </ul>","boost":10},{"location":"z/ZeroMQ/","title":"ZeroMQ","text":"<p>[package list]</p>","boost":10},{"location":"z/ZeroMQ/#zeromq","title":"ZeroMQ","text":"","boost":10},{"location":"z/ZeroMQ/#license-information","title":"License information","text":"<p>The precise licensing is unclear but it is GNU-based as the sources contain both a  COPYING and COPYING.LESSER file, refering to the regular GNU General Public License version 4 and the GNU Lesser General Public License Version 3 respectively.</p> <p>From LUMI/24.03 on, some license information can also be found in the  <code>$EBROOTZEROMQ</code> subdirectory after installing and loading the modulee.</p>","boost":10},{"location":"z/ZeroMQ/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider ZeroMQ/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig ZeroMQ-4.3.5-cpeGNU-23.09.eb, will build ZeroMQ/4.3.5-cpeGNU-23.09</p> </li> <li> <p>EasyConfig ZeroMQ-4.3.5-cpeGNU-24.03.eb, will build ZeroMQ/4.3.5-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"z/ZeroMQ/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>ZeroMQ web site</p> <ul> <li>ZeroMQ Documentation</li> </ul> </li> <li> <p>ZeroMQ on Github</p> </li> </ul>","boost":10},{"location":"z/ZeroMQ/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ZeroMQ support in the EasyBuilders repository</p> </li> <li> <p>ZeroMQ support in the CSCS repository</p> </li> <li> <p>ZeroMQ support in the JSC repository</p> </li> </ul>","boost":10},{"location":"z/ZeroMQ/#version-434-for-cpe-2208-and-cpe-2212","title":"Version 4.3.4 for CPE 22.08 and CPE 22.12","text":"<ul> <li> <p>Based on the JSC easyconfig</p> </li> <li> <p>Unload the cray-libsci module to prevent linking to the threaded version of     libsci which is not needed. It avoid the double linking problem with      application that actually need libsci</p> </li> </ul>","boost":10},{"location":"z/ZeroMQ/#version-435-from-cpe-2309-on","title":"Version 4.3.5 from CPE 23.09 on","text":"<ul> <li>Trivial version bump from 4.3.4.</li> </ul>","boost":10},{"location":"z/ZeroMQ/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software</p> <ul> <li> <p>EasyConfig ZeroMQ-4.3.4-cpeGNU-22.08.eb, with module ZeroMQ/4.3.4-cpeGNU-22.08</p> </li> <li> <p>EasyConfig ZeroMQ-4.3.4-cpeGNU-22.12.eb, with module ZeroMQ/4.3.4-cpeGNU-22.12</p> </li> </ul> </li> </ul>","boost":10},{"location":"z/Zoltan/","title":"Zoltan","text":"<p>[package list]</p>","boost":10},{"location":"z/Zoltan/#zoltan","title":"Zoltan","text":"","boost":10},{"location":"z/Zoltan/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider Zoltan/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li>EasyConfig Zoltan-3.901-cpeGNU-24.03.eb, will build Zoltan/3.901-cpeGNU-24.03</li> </ul>","boost":10},{"location":"z/zfp/","title":"zfp","text":"<p>[package list]</p>","boost":10},{"location":"z/zfp/#zfp","title":"zfp","text":"","boost":10},{"location":"z/zfp/#license-information","title":"License information","text":"<p>The zfp library is distributed under the BSD 3-Clause License. The precise formulation can be found in the LICENSE file in the sources, which also contain a further notice in the NOTICE file.</p> <p>Users using zfp are asked to  cite a paritcular zfp paper.</p> <p>From version 1.0.1 on, the license information can also be found in <code>$EBROOTZFP/share/licenses/zfp</code> after installing and loading the module.</p>","boost":10},{"location":"z/zfp/#user-installable-modules-and-easyconfigs","title":"User-installable modules (and EasyConfigs)","text":"<p>Install with the EasyBuild-user module: <pre><code>eb &lt;easyconfig&gt; -r\n</code></pre> To access module help after installation and get reminded for which stacks and partitions the module is installed, use <code>module spider zfp/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>EasyConfig zfp-1.0.0-cpeGNU-23.09.eb, will build zfp/1.0.0-cpeGNU-23.09</p> </li> <li> <p>EasyConfig zfp-1.0.1-cpeGNU-24.03.eb, will build zfp/1.0.1-cpeGNU-24.03</p> </li> </ul>","boost":10},{"location":"z/zfp/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>ZFP web site</p> <ul> <li>ZFP Documentation</li> </ul> </li> <li> <p>ZFP on Github</p> </li> </ul>","boost":10},{"location":"z/zfp/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>ZFP support in the EasyBuilders repository</p> </li> <li> <p>ZFP support in the CSCS repository</p> </li> <li> <p>ZFP support in the JSC repository</p> </li> </ul>","boost":10},{"location":"z/zfp/#version-055-for-cpe-2208","title":"Version 0.5.5 for CPE 22.08","text":"<ul> <li> <p>Based on the JSC easyconfig</p> </li> <li> <p>Unload the cray-libsci module to prevent linking to the threaded version of     libsci which is not needed. It avoid the double linking problem with      applications that actually need libsci.</p> </li> </ul>","boost":10},{"location":"z/zfp/#version-100-for-cpe-2309","title":"Version 1.0.0 for CPE 23.09","text":"<ul> <li> <p>Trivial port but adapted the source lines from the EasyBuild EasyConfig.</p> </li> <li> <p>And build without the Python interfaces as those require cython which is     not part of the Cray Python version used for 23.09.</p> </li> </ul>","boost":10},{"location":"z/zfp/#version-101-for-cpe-2403","title":"Version 1.0.1 for CPE 24.03","text":"<ul> <li> <p>Trivial port of the EasyConfig for 1.0.0 in CPE 23.09.</p> </li> <li> <p>May 2025: Added license information to the installation.</p> </li> </ul>","boost":10},{"location":"z/zfp/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li>Archived EasyConfigs from LUMI-EasyBuild-contrib - previously user-installable software<ul> <li>EasyConfig zfp-0.5.5-cpeGNU-22.08.eb, with module zfp/0.5.5-cpeGNU-22.08</li> </ul> </li> </ul>","boost":10},{"location":"z/zlib/","title":"zlib","text":"<p>[package list]</p>","boost":10},{"location":"z/zlib/#zlib","title":"zlib","text":"","boost":10},{"location":"z/zlib/#license-information","title":"License information","text":"<p>The zlib license can be found on the \"License\" page of the zlib web site.</p> <p>From LUMI/23.12 on, the license information is also available in the LICENSE file in  the <code>$EBROOTZLIB/share/licenses/zlib</code> after loading the module.</p>","boost":10},{"location":"z/zlib/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider zlib/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>zlib/1.2.11-cpeGNU-22.05 (EasyConfig: zlib-1.2.11-cpeGNU-22.05.eb)</p> </li> <li> <p>zlib/1.2.12-cpeAMD-22.08 (EasyConfig: zlib-1.2.12-cpeAMD-22.08.eb)</p> </li> <li> <p>zlib/1.2.12-cpeAMD-22.12 (EasyConfig: zlib-1.2.12-cpeAMD-22.12.eb)</p> </li> <li> <p>zlib/1.2.12-cpeAOCC-22.08 (EasyConfig: zlib-1.2.12-cpeAOCC-22.08.eb)</p> </li> <li> <p>zlib/1.2.12-cpeAOCC-22.12 (EasyConfig: zlib-1.2.12-cpeAOCC-22.12.eb)</p> </li> <li> <p>zlib/1.2.12-cpeCray-22.08 (EasyConfig: zlib-1.2.12-cpeCray-22.08.eb)</p> </li> <li> <p>zlib/1.2.12-cpeCray-22.12 (EasyConfig: zlib-1.2.12-cpeCray-22.12.eb)</p> </li> <li> <p>zlib/1.2.12-cpeCray-23.03 (EasyConfig: zlib-1.2.12-cpeCray-23.03.eb)</p> </li> <li> <p>zlib/1.2.12-cpeGNU-22.08 (EasyConfig: zlib-1.2.12-cpeGNU-22.08.eb)</p> </li> <li> <p>zlib/1.2.12-cpeGNU-22.12 (EasyConfig: zlib-1.2.12-cpeGNU-22.12.eb)</p> </li> <li> <p>zlib/1.2.13-cpeAMD-23.09 (EasyConfig: zlib-1.2.13-cpeAMD-23.09.eb)</p> </li> <li> <p>zlib/1.2.13-cpeAOCC-23.09 (EasyConfig: zlib-1.2.13-cpeAOCC-23.09.eb)</p> </li> <li> <p>zlib/1.2.13-cpeCray-23.09 (EasyConfig: zlib-1.2.13-cpeCray-23.09.eb)</p> </li> <li> <p>zlib/1.2.13-cpeGNU-23.09 (EasyConfig: zlib-1.2.13-cpeGNU-23.09.eb)</p> </li> <li> <p>zlib/1.3.1-cpeAMD-23.12 (EasyConfig: zlib-1.3.1-cpeAMD-23.12.eb)</p> </li> <li> <p>zlib/1.3.1-cpeAMD-24.03 (EasyConfig: zlib-1.3.1-cpeAMD-24.03.eb)</p> </li> <li> <p>zlib/1.3.1-cpeAOCC-23.12 (EasyConfig: zlib-1.3.1-cpeAOCC-23.12.eb)</p> </li> <li> <p>zlib/1.3.1-cpeAOCC-24.03 (EasyConfig: zlib-1.3.1-cpeAOCC-24.03.eb)</p> </li> <li> <p>zlib/1.3.1-cpeCray-23.12 (EasyConfig: zlib-1.3.1-cpeCray-23.12.eb)</p> </li> <li> <p>zlib/1.3.1-cpeCray-24.03 (EasyConfig: zlib-1.3.1-cpeCray-24.03.eb)</p> </li> <li> <p>zlib/1.3.1-cpeGNU-23.12 (EasyConfig: zlib-1.3.1-cpeGNU-23.12.eb)</p> </li> <li> <p>zlib/1.3.1-cpeGNU-24.03 (EasyConfig: zlib-1.3.1-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"z/zlib/#technical-documentation","title":"Technical documentation","text":"<ul> <li>zlib home page</li> </ul>","boost":10},{"location":"z/zlib/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>zlib in the EasyBuilders repository</p> </li> <li> <p>zlib in the CSCS repository</p> </li> </ul>","boost":10},{"location":"z/zlib/#zlib-1211-from-cpe-2106-on","title":"zlib 1.2.11 from CPE 21.06 on","text":"<ul> <li>The EasyConfig is the standard EasyConfig with additional documentation added     from the University of Antwerpen.</li> </ul>","boost":10},{"location":"z/zlib/#zlib-1212-from-cpe-2206-on","title":"zlib 1.2.12 from CPE 22.06 on","text":"<ul> <li>The configure script is broken and the patch used in the EasyBuilders version is     absolutely needed. Without it, the shared library is build incorrectly and lacks     version information (the <code>A ZLIB_1.2.*</code> lines that show up in the output of     <code>nm zlib.so</code>), causing several OS tools to complain, but also some of the tools     of the CPE to complain. And the latter than causes misdetection of features in     some configure scripts, leading to, e.g., the build of <code>cairo</code> to fail.</li> </ul>","boost":10},{"location":"z/zlib/#zlib-1213-from-cpe-2309-on","title":"zlib 1.2.13 from CPE 23.09 on","text":"<ul> <li>Port of 1.2.12, but the patch file is no longer needed as the problem has been corrected     in the zlib distribution.</li> </ul>","boost":10},{"location":"z/zlib/#zlib-131-from-cpe-2312-on","title":"zlib 1.3.1 from CPE 23.12 on","text":"<ul> <li> <p>Swithced to a CMakeMake build process to work around issues with the Cray compiler      that only generated static libraries.</p> </li> <li> <p>Now also copying license information to the installation directories.</p> </li> </ul>","boost":10},{"location":"z/zlib/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig zlib-1.2.11-cpeAMD-21.06.eb, with module zlib/1.2.11-cpeAMD-21.06</p> </li> <li> <p>EasyConfig zlib-1.2.11-cpeAOCC-21.12.eb, with module zlib/1.2.11-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig zlib-1.2.11-cpeCray-21.06.eb, with module zlib/1.2.11-cpeCray-21.06</p> </li> <li> <p>EasyConfig zlib-1.2.11-cpeCray-21.08.eb, with module zlib/1.2.11-cpeCray-21.08</p> </li> <li> <p>EasyConfig zlib-1.2.11-cpeCray-21.12.eb, with module zlib/1.2.11-cpeCray-21.12</p> </li> <li> <p>EasyConfig zlib-1.2.11-cpeGNU-21.06.eb, with module zlib/1.2.11-cpeGNU-21.06</p> </li> <li> <p>EasyConfig zlib-1.2.11-cpeGNU-21.08.eb, with module zlib/1.2.11-cpeGNU-21.08</p> </li> <li> <p>EasyConfig zlib-1.2.11-cpeGNU-21.12.eb, with module zlib/1.2.11-cpeGNU-21.12</p> </li> <li> <p>EasyConfig zlib-1.2.12-cpeAOCC-22.06.eb, with module zlib/1.2.12-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig zlib-1.2.12-cpeCray-22.06.eb, with module zlib/1.2.12-cpeCray-22.06</p> </li> <li> <p>EasyConfig zlib-1.2.12-cpeGNU-22.06.eb, with module zlib/1.2.12-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10},{"location":"z/zstd/","title":"zstd","text":"<p>[package list]</p>","boost":10},{"location":"z/zstd/#zstd","title":"zstd","text":"","boost":10},{"location":"z/zstd/#license-information","title":"License information","text":"<p>The library is dual-licensed under the BSD license that can be found in the LICENSE file in the source repository and the GNU General Public License version 2 that can be found in the COPYING file in the source repository.</p> <p>From LUMI/23.12 on, both files can also be found in the <code>$EBROOTZSTD/share/licenses/zstd</code> subdirectory after loading the module.</p>","boost":10},{"location":"z/zstd/#pre-installed-modules-and-easyconfigs","title":"Pre-installed modules (and EasyConfigs)","text":"<p>To access module help and find out for which stacks and partitions the module is installed, use <code>module spider zstd/&lt;version&gt;</code>.</p> <p>EasyConfig:</p> <ul> <li> <p>zstd/1.5.2-cpeAMD-22.08 (EasyConfig: zstd-1.5.2-cpeAMD-22.08.eb)</p> </li> <li> <p>zstd/1.5.2-cpeAMD-22.12 (EasyConfig: zstd-1.5.2-cpeAMD-22.12.eb)</p> </li> <li> <p>zstd/1.5.2-cpeAOCC-22.08 (EasyConfig: zstd-1.5.2-cpeAOCC-22.08.eb)</p> </li> <li> <p>zstd/1.5.2-cpeAOCC-22.12 (EasyConfig: zstd-1.5.2-cpeAOCC-22.12.eb)</p> </li> <li> <p>zstd/1.5.2-cpeCray-22.08 (EasyConfig: zstd-1.5.2-cpeCray-22.08.eb)</p> </li> <li> <p>zstd/1.5.2-cpeCray-22.12 (EasyConfig: zstd-1.5.2-cpeCray-22.12.eb)</p> </li> <li> <p>zstd/1.5.2-cpeCray-23.03 (EasyConfig: zstd-1.5.2-cpeCray-23.03.eb)</p> </li> <li> <p>zstd/1.5.2-cpeGNU-22.08 (EasyConfig: zstd-1.5.2-cpeGNU-22.08.eb)</p> </li> <li> <p>zstd/1.5.2-cpeGNU-22.12 (EasyConfig: zstd-1.5.2-cpeGNU-22.12.eb)</p> </li> <li> <p>zstd/1.5.5-cpeAMD-23.09 (EasyConfig: zstd-1.5.5-cpeAMD-23.09.eb)</p> </li> <li> <p>zstd/1.5.5-cpeAMD-23.12 (EasyConfig: zstd-1.5.5-cpeAMD-23.12.eb)</p> </li> <li> <p>zstd/1.5.5-cpeAMD-24.03 (EasyConfig: zstd-1.5.5-cpeAMD-24.03.eb)</p> </li> <li> <p>zstd/1.5.5-cpeAOCC-23.09 (EasyConfig: zstd-1.5.5-cpeAOCC-23.09.eb)</p> </li> <li> <p>zstd/1.5.5-cpeAOCC-23.12 (EasyConfig: zstd-1.5.5-cpeAOCC-23.12.eb)</p> </li> <li> <p>zstd/1.5.5-cpeAOCC-24.03 (EasyConfig: zstd-1.5.5-cpeAOCC-24.03.eb)</p> </li> <li> <p>zstd/1.5.5-cpeCray-23.09 (EasyConfig: zstd-1.5.5-cpeCray-23.09.eb)</p> </li> <li> <p>zstd/1.5.5-cpeCray-23.12 (EasyConfig: zstd-1.5.5-cpeCray-23.12.eb)</p> </li> <li> <p>zstd/1.5.5-cpeCray-24.03 (EasyConfig: zstd-1.5.5-cpeCray-24.03.eb)</p> </li> <li> <p>zstd/1.5.5-cpeGNU-23.09 (EasyConfig: zstd-1.5.5-cpeGNU-23.09.eb)</p> </li> <li> <p>zstd/1.5.5-cpeGNU-23.12 (EasyConfig: zstd-1.5.5-cpeGNU-23.12.eb)</p> </li> <li> <p>zstd/1.5.5-cpeGNU-24.03 (EasyConfig: zstd-1.5.5-cpeGNU-24.03.eb)</p> </li> </ul>","boost":10},{"location":"z/zstd/#technical-documentation","title":"Technical documentation","text":"<ul> <li> <p>zstd home page</p> </li> <li> <p>zstd on GitHub</p> <ul> <li>GitHub releases</li> </ul> </li> </ul>","boost":10},{"location":"z/zstd/#easybuild","title":"EasyBuild","text":"<ul> <li> <p>zstd in the EasyBuilders repository</p> </li> <li> <p>zstd in the CSCS repository</p> </li> </ul>","boost":10},{"location":"z/zstd/#version-150-from-cpe-2106-on","title":"Version 1.5.0 from CPE 21.06 on","text":"<ul> <li> <p>Our EasyConfig is derived from the EasyBuilders one. We use only EasyBuild-build     dependencies, the CSCS variant gets gzip and lz4 from the OS.</p> <p>We did upgrade to the fresh release 1.5.0.</p> </li> </ul>","boost":10},{"location":"z/zstd/#version-152-for-cpe-2206","title":"Version 1.5.2 for CPE 22.06","text":"<ul> <li>Trivial port of the EasyConfig</li> </ul>","boost":10},{"location":"z/zstd/#version-155-for-cpe-2309","title":"Version 1.5.5 for CPE 23.09","text":"<ul> <li> <p>Trivial port of the EasyConfig</p> </li> <li> <p>For LUMI/23.12, license information was added to the installation.</p> </li> </ul>","boost":10},{"location":"z/zstd/#archived-easyconfigs","title":"Archived EasyConfigs","text":"<p>The EasyConfigs below are additional easyconfigs that are not directly available on the system for installation. Users are advised to use the newer ones and these archived ones are unsupported. They are still provided as a source of information should you need this, e.g., to understand the configuration that was used for earlier work on the system.</p> <ul> <li> <p>Archived EasyConfigs from LUMI-SoftwareStack - previously centrally installed software</p> <ul> <li> <p>EasyConfig zstd-1.5.0-cpeAMD-21.06.eb, with module zstd/1.5.0-cpeAMD-21.06</p> </li> <li> <p>EasyConfig zstd-1.5.0-cpeAOCC-21.12.eb, with module zstd/1.5.0-cpeAOCC-21.12</p> </li> <li> <p>EasyConfig zstd-1.5.0-cpeCray-21.06.eb, with module zstd/1.5.0-cpeCray-21.06</p> </li> <li> <p>EasyConfig zstd-1.5.0-cpeCray-21.08.eb, with module zstd/1.5.0-cpeCray-21.08</p> </li> <li> <p>EasyConfig zstd-1.5.0-cpeCray-21.12.eb, with module zstd/1.5.0-cpeCray-21.12</p> </li> <li> <p>EasyConfig zstd-1.5.0-cpeGNU-21.06.eb, with module zstd/1.5.0-cpeGNU-21.06</p> </li> <li> <p>EasyConfig zstd-1.5.0-cpeGNU-21.08.eb, with module zstd/1.5.0-cpeGNU-21.08</p> </li> <li> <p>EasyConfig zstd-1.5.0-cpeGNU-21.12.eb, with module zstd/1.5.0-cpeGNU-21.12</p> </li> <li> <p>EasyConfig zstd-1.5.2-cpeAOCC-22.06.eb, with module zstd/1.5.2-cpeAOCC-22.06</p> </li> <li> <p>EasyConfig zstd-1.5.2-cpeCray-22.06.eb, with module zstd/1.5.2-cpeCray-22.06</p> </li> <li> <p>EasyConfig zstd-1.5.2-cpeGNU-22.06.eb, with module zstd/1.5.2-cpeGNU-22.06</p> </li> </ul> </li> </ul>","boost":10}]}